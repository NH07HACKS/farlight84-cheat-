#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Interact_VaultDoor_Right

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Interact_VaultDoor_Right.UI_Interact_VaultDoor_Right_C
// 0x0020 (0x06A0 - 0x0680)
class UUI_Interact_VaultDoor_Right_C final : public UInteractionVaultDoorWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USolarTextBlock*                        Txt_UnableToOpen;                                  // 0x0688(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         LastFadeOutTime;                                   // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CurrentInteraactType;                              // 0x0694(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_Interact_VaultDoor_Right(int32 EntryPoint);
	void FadeOut();
	void FadeIn();
	void RefreshToPreInteracting();
	bool InitByTriggerInfo(const struct FInteractionTriggerInfo& TriggerInfo);
	void RefreshToCancellableInteracting();
	void RefreshToNonCancellableInteracting();
	void EnablePassiveBuffDisplay(int32 CharacterID, int32 LocalTextID);
	void DisablePassiveBuffDisplay();
	void StartCountdownProgress(const struct FCountDownInfo& InCountInfo);
	void StopCountdownProgress(const int32 InActionID);
	void SetInteractTypeByGameplayTag(const struct FGameplayTag& GameplayTag, bool* EnableActive);
	bool CanTriggerInteract();
	void GetPanelInteractProgress(class USolarProgressiveInteractButton** ProgressButton);
	void UpdateCountDownProgress(const float Percent, const class FString& InText);
	void UpdateCountDownInteractNum(const int32 InteractNum);
	void EnableActiveButtonByLayout(const struct FGameplayTag& InteractTag, bool* AcitveWidget);
	bool EnableActiveButtonByConfig();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Interact_VaultDoor_Right_C">();
	}
	static class UUI_Interact_VaultDoor_Right_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Interact_VaultDoor_Right_C>();
	}
};
static_assert(alignof(UUI_Interact_VaultDoor_Right_C) == 0x000008, "Wrong alignment on UUI_Interact_VaultDoor_Right_C");
static_assert(sizeof(UUI_Interact_VaultDoor_Right_C) == 0x0006A0, "Wrong size on UUI_Interact_VaultDoor_Right_C");
static_assert(offsetof(UUI_Interact_VaultDoor_Right_C, UberGraphFrame) == 0x000680, "Member 'UUI_Interact_VaultDoor_Right_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Interact_VaultDoor_Right_C, Txt_UnableToOpen) == 0x000688, "Member 'UUI_Interact_VaultDoor_Right_C::Txt_UnableToOpen' has a wrong offset!");
static_assert(offsetof(UUI_Interact_VaultDoor_Right_C, LastFadeOutTime) == 0x000690, "Member 'UUI_Interact_VaultDoor_Right_C::LastFadeOutTime' has a wrong offset!");
static_assert(offsetof(UUI_Interact_VaultDoor_Right_C, CurrentInteraactType) == 0x000694, "Member 'UUI_Interact_VaultDoor_Right_C::CurrentInteraactType' has a wrong offset!");

}

