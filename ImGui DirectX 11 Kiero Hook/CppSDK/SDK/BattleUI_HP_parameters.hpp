#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleUI_HP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_BattleControlWidgets_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BattleUI_HP.BattleUI_HP_C.ExecuteUbergraph_BattleUI_HP
// 0x0168 (0x0168 - 0x0000)
struct BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_11;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_12;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_13;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_14;                           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_15;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_16;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_17;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Temp_object_Variable_18;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarGlobalEventSystem*                CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x00D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Publisher;                      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Payload;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_CustomEvent_Metadata;                       // 0x00F0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ToBool_bool;                              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BattleControlWidgets                        Temp_byte_Variable_2;                              // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Publisher, class UObject* Payload, const TArray<class FString>& MetaData)> K2Node_CreateDelegate_OutputDelegate_3; // 0x0124(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           K2Node_Select_Default_1;                           // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const int32 ShieldLevel, const int32 ShieldMaxLevel, const int32 ShieldUpgradeItemNum, const int32 NeedShieldUpgradeItemNum, const int32 MaxShieldUpgradeItemNum)> K2Node_CreateDelegate_OutputDelegate_4; // 0x0144(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUDDispatcherBase*                     CallFunc_GetHUDDispatcher_FromUI_ReturnValue;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP) == 0x000008, "Wrong alignment on BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP");
static_assert(sizeof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP) == 0x000168, "Wrong size on BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, EntryPoint) == 0x000000, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::EntryPoint' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable) == 0x000008, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_1) == 0x000010, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_2) == 0x000018, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_3) == 0x000020, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_4) == 0x000028, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_5) == 0x000030, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_6) == 0x000038, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_7) == 0x000040, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_8) == 0x000048, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_9) == 0x000050, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_10) == 0x000058, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_11) == 0x000060, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_12) == 0x000068, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_13) == 0x000070, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_14) == 0x000078, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_15) == 0x000080, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_16) == 0x000088, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_17) == 0x000090, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_object_Variable_18) == 0x000098, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_bool_Variable) == 0x0000A0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_byte_Variable) == 0x0000A1, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_byte_Variable_1) == 0x0000A2, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x0000A8, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CreateDelegate_OutputDelegate) == 0x0000B0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000D0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0000D8, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CustomEvent_Publisher) == 0x0000E0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CustomEvent_Publisher' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CustomEvent_Payload) == 0x0000E8, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CustomEvent_Metadata) == 0x0000F0, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CustomEvent_Metadata' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000100, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000110, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_ToBool_bool) == 0x000118, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_ToBool_bool' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_Select_Default) == 0x000119, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_Conv_StringToInt_ReturnValue) == 0x00011C, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_Conv_IntToByte_ReturnValue) == 0x000120, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_GetValidValue_ReturnValue) == 0x000121, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, Temp_byte_Variable_2) == 0x000122, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CreateDelegate_OutputDelegate_3) == 0x000124, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_Select_Default_1) == 0x000138, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_CreateDelegate_OutputDelegate_4) == 0x000144, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, CallFunc_GetHUDDispatcher_FromUI_ReturnValue) == 0x000158, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::CallFunc_GetHUDDispatcher_FromUI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP, K2Node_Event_IsDesignTime) == 0x000160, "Member 'BattleUI_HP_C_ExecuteUbergraph_BattleUI_HP::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BattleUI_HP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleUI_HP_C_PreConstruct) == 0x000001, "Wrong alignment on BattleUI_HP_C_PreConstruct");
static_assert(sizeof(BattleUI_HP_C_PreConstruct) == 0x000001, "Wrong size on BattleUI_HP_C_PreConstruct");
static_assert(offsetof(BattleUI_HP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BattleUI_HP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.OnWidgetVisibilitySet
// 0x0020 (0x0020 - 0x0000)
struct BattleUI_HP_C_OnWidgetVisibilitySet final
{
public:
	class UObject*                                Publisher;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Payload;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         MetaData;                                          // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BattleUI_HP_C_OnWidgetVisibilitySet) == 0x000008, "Wrong alignment on BattleUI_HP_C_OnWidgetVisibilitySet");
static_assert(sizeof(BattleUI_HP_C_OnWidgetVisibilitySet) == 0x000020, "Wrong size on BattleUI_HP_C_OnWidgetVisibilitySet");
static_assert(offsetof(BattleUI_HP_C_OnWidgetVisibilitySet, Publisher) == 0x000000, "Member 'BattleUI_HP_C_OnWidgetVisibilitySet::Publisher' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnWidgetVisibilitySet, Payload) == 0x000008, "Member 'BattleUI_HP_C_OnWidgetVisibilitySet::Payload' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnWidgetVisibilitySet, MetaData) == 0x000010, "Member 'BattleUI_HP_C_OnWidgetVisibilitySet::MetaData' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.ShowGainExp
// 0x0008 (0x0008 - 0x0000)
struct BattleUI_HP_C_ShowGainExp final
{
public:
	int32                                         ExpAdded;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThisExpAdded;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleUI_HP_C_ShowGainExp) == 0x000004, "Wrong alignment on BattleUI_HP_C_ShowGainExp");
static_assert(sizeof(BattleUI_HP_C_ShowGainExp) == 0x000008, "Wrong size on BattleUI_HP_C_ShowGainExp");
static_assert(offsetof(BattleUI_HP_C_ShowGainExp, ExpAdded) == 0x000000, "Member 'BattleUI_HP_C_ShowGainExp::ExpAdded' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ShowGainExp, ThisExpAdded) == 0x000004, "Member 'BattleUI_HP_C_ShowGainExp::ThisExpAdded' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.ShowLevelUp
// 0x0018 (0x0018 - 0x0000)
struct BattleUI_HP_C_ShowLevelUp final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DynamicTips;                                       // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BattleUI_HP_C_ShowLevelUp) == 0x000008, "Wrong alignment on BattleUI_HP_C_ShowLevelUp");
static_assert(sizeof(BattleUI_HP_C_ShowLevelUp) == 0x000018, "Wrong size on BattleUI_HP_C_ShowLevelUp");
static_assert(offsetof(BattleUI_HP_C_ShowLevelUp, NewLevel) == 0x000000, "Member 'BattleUI_HP_C_ShowLevelUp::NewLevel' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_ShowLevelUp, DynamicTips) == 0x000008, "Member 'BattleUI_HP_C_ShowLevelUp::DynamicTips' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.UpdateLevelAndColor
// 0x0080 (0x0080 - 0x0000)
struct BattleUI_HP_C_UpdateLevelAndColor final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_TryGetHUDColorForPlayerLevel_bFoundConfig; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_TryGetHUDColorForPlayerLevel_HUDColor;    // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_TryGetHUDColorForPlayerLevel_DecorateColor; // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_TryGetHUDColorForPlayerLevel_LevelUpRichTextColor; // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0028)()
};
static_assert(alignof(BattleUI_HP_C_UpdateLevelAndColor) == 0x000008, "Wrong alignment on BattleUI_HP_C_UpdateLevelAndColor");
static_assert(sizeof(BattleUI_HP_C_UpdateLevelAndColor) == 0x000080, "Wrong size on BattleUI_HP_C_UpdateLevelAndColor");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, PlayerLevel) == 0x000000, "Member 'BattleUI_HP_C_UpdateLevelAndColor::PlayerLevel' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'BattleUI_HP_C_UpdateLevelAndColor::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, CallFunc_TryGetHUDColorForPlayerLevel_bFoundConfig) == 0x000020, "Member 'BattleUI_HP_C_UpdateLevelAndColor::CallFunc_TryGetHUDColorForPlayerLevel_bFoundConfig' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, CallFunc_TryGetHUDColorForPlayerLevel_HUDColor) == 0x000024, "Member 'BattleUI_HP_C_UpdateLevelAndColor::CallFunc_TryGetHUDColorForPlayerLevel_HUDColor' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, CallFunc_TryGetHUDColorForPlayerLevel_DecorateColor) == 0x000034, "Member 'BattleUI_HP_C_UpdateLevelAndColor::CallFunc_TryGetHUDColorForPlayerLevel_DecorateColor' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, CallFunc_TryGetHUDColorForPlayerLevel_LevelUpRichTextColor) == 0x000044, "Member 'BattleUI_HP_C_UpdateLevelAndColor::CallFunc_TryGetHUDColorForPlayerLevel_LevelUpRichTextColor' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateLevelAndColor, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'BattleUI_HP_C_UpdateLevelAndColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.OnLevelupExitAnimationFinished
// 0x0001 (0x0001 - 0x0000)
struct BattleUI_HP_C_OnLevelupExitAnimationFinished final
{
public:
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleUI_HP_C_OnLevelupExitAnimationFinished) == 0x000001, "Wrong alignment on BattleUI_HP_C_OnLevelupExitAnimationFinished");
static_assert(sizeof(BattleUI_HP_C_OnLevelupExitAnimationFinished) == 0x000001, "Wrong size on BattleUI_HP_C_OnLevelupExitAnimationFinished");
static_assert(offsetof(BattleUI_HP_C_OnLevelupExitAnimationFinished, CallFunc_Greater_IntInt_ReturnValue) == 0x000000, "Member 'BattleUI_HP_C_OnLevelupExitAnimationFinished::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.UpdateTips
// 0x0048 (0x0048 - 0x0000)
struct BattleUI_HP_C_UpdateTips final
{
public:
	TArray<class FString>                         Tips;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0018(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0030(0x0018)()
};
static_assert(alignof(BattleUI_HP_C_UpdateTips) == 0x000008, "Wrong alignment on BattleUI_HP_C_UpdateTips");
static_assert(sizeof(BattleUI_HP_C_UpdateTips) == 0x000048, "Wrong size on BattleUI_HP_C_UpdateTips");
static_assert(offsetof(BattleUI_HP_C_UpdateTips, Tips) == 0x000000, "Member 'BattleUI_HP_C_UpdateTips::Tips' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateTips, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BattleUI_HP_C_UpdateTips::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateTips, K2Node_SwitchInteger_CmpSuccess) == 0x000014, "Member 'BattleUI_HP_C_UpdateTips::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateTips, CallFunc_Conv_StringToText_ReturnValue) == 0x000018, "Member 'BattleUI_HP_C_UpdateTips::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_UpdateTips, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000030, "Member 'BattleUI_HP_C_UpdateTips::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.OnShieldUpgradeItemNumChanged
// 0x00A8 (0x00A8 - 0x0000)
struct BattleUI_HP_C_OnShieldUpgradeItemNumChanged final
{
public:
	int32                                         ShieldLevel;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShieldMaxLevel;                                    // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShieldUpgradeItemNum;                              // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedShieldUpgradeItemNum_0;                        // 0x000C(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxShieldUpgradeItemNum_0;                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0058(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0070(0x0018)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetHandleUsedWidget_NewParam;             // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ShieldMT_C*                         K2Node_DynamicCast_AsUI_Shield_MT;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged) == 0x000008, "Wrong alignment on BattleUI_HP_C_OnShieldUpgradeItemNumChanged");
static_assert(sizeof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged) == 0x0000A8, "Wrong size on BattleUI_HP_C_OnShieldUpgradeItemNumChanged");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, ShieldLevel) == 0x000000, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::ShieldLevel' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, ShieldMaxLevel) == 0x000004, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::ShieldMaxLevel' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, ShieldUpgradeItemNum) == 0x000008, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::ShieldUpgradeItemNum' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, NeedShieldUpgradeItemNum_0) == 0x00000C, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::NeedShieldUpgradeItemNum_0' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, MaxShieldUpgradeItemNum_0) == 0x000010, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::MaxShieldUpgradeItemNum_0' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_MakeLiteralString_ReturnValue) == 0x000018, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Conv_StringToText_ReturnValue) == 0x000058, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Conv_IntToText_ReturnValue) == 0x000070, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_Less_IntInt_ReturnValue_2) == 0x000088, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000089, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, CallFunc_GetHandleUsedWidget_NewParam) == 0x000090, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::CallFunc_GetHandleUsedWidget_NewParam' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, K2Node_DynamicCast_AsUI_Shield_MT) == 0x000098, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::K2Node_DynamicCast_AsUI_Shield_MT' has a wrong offset!");
static_assert(offsetof(BattleUI_HP_C_OnShieldUpgradeItemNumChanged, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BattleUI_HP_C_OnShieldUpgradeItemNumChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.ShowOneExtraTips
// 0x0018 (0x0018 - 0x0000)
struct BattleUI_HP_C_ShowOneExtraTips final
{
public:
	class FText                                   TipsContent;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BattleUI_HP_C_ShowOneExtraTips) == 0x000008, "Wrong alignment on BattleUI_HP_C_ShowOneExtraTips");
static_assert(sizeof(BattleUI_HP_C_ShowOneExtraTips) == 0x000018, "Wrong size on BattleUI_HP_C_ShowOneExtraTips");
static_assert(offsetof(BattleUI_HP_C_ShowOneExtraTips, TipsContent) == 0x000000, "Member 'BattleUI_HP_C_ShowOneExtraTips::TipsContent' has a wrong offset!");

// Function BattleUI_HP.BattleUI_HP_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BattleUI_HP_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BattleUI_HP_C_GetModuleName) == 0x000008, "Wrong alignment on BattleUI_HP_C_GetModuleName");
static_assert(sizeof(BattleUI_HP_C_GetModuleName) == 0x000010, "Wrong size on BattleUI_HP_C_GetModuleName");
static_assert(offsetof(BattleUI_HP_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BattleUI_HP_C_GetModuleName::ReturnValue' has a wrong offset!");

}

