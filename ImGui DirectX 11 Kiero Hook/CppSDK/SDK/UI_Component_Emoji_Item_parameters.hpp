#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_Emoji_Item

#include "Basic.hpp"

#include "E_Item_Quality_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.ExecuteUbergraph_UI_Component_Emoji_Item
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item) == 0x000008, "Wrong alignment on UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item");
static_assert(sizeof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item) == 0x000018, "Wrong size on UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item");
static_assert(offsetof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item, EntryPoint) == 0x000000, "Member 'UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item, K2Node_Event_bIsExpanded) == 0x000004, "Member 'UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item, K2Node_Event_bIsSelected) == 0x000005, "Member 'UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item, K2Node_Event_ListItemObject) == 0x000008, "Member 'UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item, K2Node_Event_IsDesignTime) == 0x000010, "Member 'UI_Component_Emoji_Item_C_ExecuteUbergraph_UI_Component_Emoji_Item::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Emoji_Item_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Emoji_Item_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_Emoji_Item_C_PreConstruct");
static_assert(sizeof(UI_Component_Emoji_Item_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_Emoji_Item_C_PreConstruct");
static_assert(offsetof(UI_Component_Emoji_Item_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_Emoji_Item_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_Emoji_Item_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Emoji_Item_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_Component_Emoji_Item_C_OnListItemObjectSet");
static_assert(sizeof(UI_Component_Emoji_Item_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_Component_Emoji_Item_C_OnListItemObjectSet");
static_assert(offsetof(UI_Component_Emoji_Item_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_Component_Emoji_Item_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_Component_Emoji_Item_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_Component_Emoji_Item_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.SetQuality
// 0x00A0 (0x00A0 - 0x0000)
struct UI_Component_Emoji_Item_C_SetQuality final
{
public:
	E_Item_Quality                                Quality_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Item_Quality                                Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_7;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_8;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_9;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_10;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_11;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_12;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_13;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Item_Quality                                Temp_byte_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_1;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Emoji_Item_C_SetQuality) == 0x000008, "Wrong alignment on UI_Component_Emoji_Item_C_SetQuality");
static_assert(sizeof(UI_Component_Emoji_Item_C_SetQuality) == 0x0000A0, "Wrong size on UI_Component_Emoji_Item_C_SetQuality");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Quality_0) == 0x000000, "Member 'UI_Component_Emoji_Item_C_SetQuality::Quality_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable) == 0x000008, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'UI_Component_Emoji_Item_C_SetQuality::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_1) == 0x000018, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_2) == 0x000020, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_3) == 0x000028, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_4) == 0x000030, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_5) == 0x000038, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_6) == 0x000040, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_byte_Variable) == 0x000048, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_7) == 0x000050, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_8) == 0x000058, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_9) == 0x000060, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_10) == 0x000068, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_11) == 0x000070, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_12) == 0x000078, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_object_Variable_13) == 0x000080, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, Temp_byte_Variable_1) == 0x000088, "Member 'UI_Component_Emoji_Item_C_SetQuality::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, K2Node_Select_Default) == 0x000090, "Member 'UI_Component_Emoji_Item_C_SetQuality::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_Emoji_Item_C_SetQuality, K2Node_Select_Default_1) == 0x000098, "Member 'UI_Component_Emoji_Item_C_SetQuality::K2Node_Select_Default_1' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_Component_Emoji_Item_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_Component_Emoji_Item.UI_Component_Emoji_Item_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_Emoji_Item_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Emoji_Item_C_GetModuleName) == 0x000008, "Wrong alignment on UI_Component_Emoji_Item_C_GetModuleName");
static_assert(sizeof(UI_Component_Emoji_Item_C_GetModuleName) == 0x000010, "Wrong size on UI_Component_Emoji_Item_C_GetModuleName");
static_assert(offsetof(UI_Component_Emoji_Item_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_Component_Emoji_Item_C_GetModuleName::ReturnValue' has a wrong offset!");

}

