#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniMapUMG

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MiniMapUMG.MiniMapUMG_C
// 0x0090 (0x0C50 - 0x0BC0)
class UMiniMapUMG_C final : public UMiniMapWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Scan;                                         // 0x0BC8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           MapRotate;                                         // 0x0BD0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RTIconLayer;                                       // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         RefreshTime;                                       // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE4[0x4];                                      // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarkIcon_C*>                    MarkersPool;                                       // 0x0BE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector2D                              MapScaleRange;                                     // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SliderBarValue;                                    // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FOVOffset;                                         // 0x0C04(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SizeSet;                                           // 0x0C0C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              VectorCenter;                                      // 0x0C14(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RealVector;                                        // 0x0C1C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarkIcon_C*                            VehicleMark;                                       // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniFOV;                                           // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C34[0x4];                                      // 0x0C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMapMarkBase*>                   MarkList;                                          // 0x0C38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MiniMapUMG(int32 EntryPoint);
	void Destruct();
	void RemoveDotLineOnMap(int32 DotLineID);
	void RemoveMarkIcon(class UMapMarkBase* InMapMark);
	void PreConstruct(bool IsDesignTime);
	void GetTwoFingerDistance(float* Distance);
	void DisableOneFinger(const struct FPointerEvent& Event);
	class UMapMarkBase* InitMarkIcon(TSubclassOf<class UMapMarkBase> InMapMarkClass, const struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32 ZOrder);
	class UMapMarkBase* InitMarkIconOnMapFrame(TSubclassOf<class UMapMarkBase> InMapMarkClass, const struct FVector2D& Pivot, int32 ZOrder);
	int32 AddDotLineOnMap(class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& DotLineColor);
	void SetBigMapFOV(const float& InSliderValue, const float& InFOVValue, const struct FVector2D& InCenter);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnSolarUIOpened();
	class UMapMarkBase* CreateMapMark(const class FString& MapMarkName);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnTouchManagerInitialized();
	void OnSolarUIClosed();
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void VehicleClear(bool IsOwner);
	void Construct();
	void ClearMiniMapMarkWidget();
	void DestructCopy();
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	void CreateMapImageWidget();
	void OnInitialized();
	void RefreshLastVehicleLocation();
	void ClearVehicleMarkWidget();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MiniMapUMG_C">();
	}
	static class UMiniMapUMG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMiniMapUMG_C>();
	}
};
static_assert(alignof(UMiniMapUMG_C) == 0x000010, "Wrong alignment on UMiniMapUMG_C");
static_assert(sizeof(UMiniMapUMG_C) == 0x000C50, "Wrong size on UMiniMapUMG_C");
static_assert(offsetof(UMiniMapUMG_C, UberGraphFrame) == 0x000BC0, "Member 'UMiniMapUMG_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, Anim_Scan) == 0x000BC8, "Member 'UMiniMapUMG_C::Anim_Scan' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, MapRotate) == 0x000BD0, "Member 'UMiniMapUMG_C::MapRotate' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, RTIconLayer) == 0x000BD8, "Member 'UMiniMapUMG_C::RTIconLayer' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, RefreshTime) == 0x000BE0, "Member 'UMiniMapUMG_C::RefreshTime' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, MarkersPool) == 0x000BE8, "Member 'UMiniMapUMG_C::MarkersPool' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, MapScaleRange) == 0x000BF8, "Member 'UMiniMapUMG_C::MapScaleRange' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, SliderBarValue) == 0x000C00, "Member 'UMiniMapUMG_C::SliderBarValue' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, FOVOffset) == 0x000C04, "Member 'UMiniMapUMG_C::FOVOffset' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, SizeSet) == 0x000C0C, "Member 'UMiniMapUMG_C::SizeSet' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, VectorCenter) == 0x000C14, "Member 'UMiniMapUMG_C::VectorCenter' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, RealVector) == 0x000C1C, "Member 'UMiniMapUMG_C::RealVector' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, Index_0) == 0x000C24, "Member 'UMiniMapUMG_C::Index_0' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, VehicleMark) == 0x000C28, "Member 'UMiniMapUMG_C::VehicleMark' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, MiniFOV) == 0x000C30, "Member 'UMiniMapUMG_C::MiniFOV' has a wrong offset!");
static_assert(offsetof(UMiniMapUMG_C, MarkList) == 0x000C38, "Member 'UMiniMapUMG_C::MarkList' has a wrong offset!");

}

