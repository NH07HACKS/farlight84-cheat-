#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_Mode_TeamDeathMatch

#include "Basic.hpp"

#include "FL_Mode_TeamDeathMatch_classes.hpp"
#include "FL_Mode_TeamDeathMatch_parameters.hpp"


namespace SDK
{

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Update KDA
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_Mode_TeamDeathMatch_C::Update_KDA(class ASCMPlayerState* Player, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "Update KDA");

	Params::FL_Mode_TeamDeathMatch_C_Update_KDA Parms{};

	Parms.Player = Player;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetKDARank
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASCMPlayerState*>&         PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class ASCMPlayerState*, float>*    Player_KDA_Rank                                        (Parm, OutParm)

void UFL_Mode_TeamDeathMatch_C::GetKDARank(TArray<class ASCMPlayerState*>& PlayerState, class UObject* __WorldContext, TMap<class ASCMPlayerState*, float>* Player_KDA_Rank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "GetKDARank");

	Params::FL_Mode_TeamDeathMatch_C_GetKDARank Parms{};

	Parms.PlayerState = std::move(PlayerState);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PlayerState = std::move(Parms.PlayerState);

	if (Player_KDA_Rank != nullptr)
		*Player_KDA_Rank = std::move(Parms.Player_KDA_Rank);
}


// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Get Side TDM
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASCMPlayerState*                  PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Output_Get                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UFL_Mode_TeamDeathMatch_C::Get_Side_TDM(class ASCMPlayerState* PlayerState, class UObject* __WorldContext, class FString* Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "Get Side TDM");

	Params::FL_Mode_TeamDeathMatch_C_Get_Side_TDM Parms{};

	Parms.PlayerState = PlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = std::move(Parms.Output_Get);
}


// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetChangeWeaponDate
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const TArray<struct FS_Shop_TDM>&       Array                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FWeaponPartsData*                WeaponPartsData                                        (Parm, OutParm, NoDestructor)

void UFL_Mode_TeamDeathMatch_C::GetChangeWeaponDate(const TArray<struct FS_Shop_TDM>& Array, int32 Index_0, class UObject* __WorldContext, int32* ID, struct FWeaponPartsData* WeaponPartsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "GetChangeWeaponDate");

	Params::FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate Parms{};

	Parms.Array = std::move(Array);
	Parms.Index_0 = Index_0;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;

	if (WeaponPartsData != nullptr)
		*WeaponPartsData = std::move(Parms.WeaponPartsData);
}


// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Get TDMGMData
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  战斗限时                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  加时赛限时                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Loading时长                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  开局等待时间                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  复活等待时间                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  无敌时间                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  获胜所需人头数                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  开局倒计时                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  结算退出时间                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  武器选择限时                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_Shop_TDM>*             初始武器配置                                           (Parm, OutParm, HasGetValueTypeHash)
// int32*                                  AiLevel                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<int32, int32>*                     子弹ItemID                                             (Parm, OutParm)
// TMap<int32, int32>*                     道具ItemID                                             (Parm, OutParm)
// TMap<int32, int32>*                     AITempleteMap                                          (Parm, OutParm)
// int32*                                  模式默认全局人数                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  ReportingInterval                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_Mode_TeamDeathMatch_C::Get_TDMGMData(class UObject* __WorldContext, int32* 战斗限时, int32* 加时赛限时, int32* Loading时长, int32* 开局等待时间, int32* 复活等待时间, int32* 无敌时间, int32* 获胜所需人头数, int32* 开局倒计时, int32* 结算退出时间, int32* 武器选择限时, TArray<struct FS_Shop_TDM>* 初始武器配置, int32* AiLevel, TMap<int32, int32>* 子弹ItemID, TMap<int32, int32>* 道具ItemID, TMap<int32, int32>* AITempleteMap, int32* 模式默认全局人数, float* ReportingInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "Get TDMGMData");

	Params::FL_Mode_TeamDeathMatch_C_Get_TDMGMData Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (战斗限时 != nullptr)
		*战斗限时 = Parms.战斗限时;

	if (加时赛限时 != nullptr)
		*加时赛限时 = Parms.加时赛限时;

	if (Loading时长 != nullptr)
		*Loading时长 = Parms.Loading时长;

	if (开局等待时间 != nullptr)
		*开局等待时间 = Parms.开局等待时间;

	if (复活等待时间 != nullptr)
		*复活等待时间 = Parms.复活等待时间;

	if (无敌时间 != nullptr)
		*无敌时间 = Parms.无敌时间;

	if (获胜所需人头数 != nullptr)
		*获胜所需人头数 = Parms.获胜所需人头数;

	if (开局倒计时 != nullptr)
		*开局倒计时 = Parms.开局倒计时;

	if (结算退出时间 != nullptr)
		*结算退出时间 = Parms.结算退出时间;

	if (武器选择限时 != nullptr)
		*武器选择限时 = Parms.武器选择限时;

	if (初始武器配置 != nullptr)
		*初始武器配置 = std::move(Parms.初始武器配置);

	if (AiLevel != nullptr)
		*AiLevel = Parms.AiLevel;

	if (子弹ItemID != nullptr)
		*子弹ItemID = std::move(Parms.子弹ItemID);

	if (道具ItemID != nullptr)
		*道具ItemID = std::move(Parms.道具ItemID);

	if (AITempleteMap != nullptr)
		*AITempleteMap = std::move(Parms.AITempleteMap);

	if (模式默认全局人数 != nullptr)
		*模式默认全局人数 = Parms.模式默认全局人数;

	if (ReportingInterval != nullptr)
		*ReportingInterval = Parms.ReportingInterval;
}


// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetTDMLogic
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_Logic_TeamDeathMatch_C**      AsBP_Logic_Team_Death_Match                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_Mode_TeamDeathMatch_C::GetTDMLogic(class UObject* __WorldContext, class UBP_Logic_TeamDeathMatch_C** AsBP_Logic_Team_Death_Match)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_Mode_TeamDeathMatch_C", "GetTDMLogic");

	Params::FL_Mode_TeamDeathMatch_C_GetTDMLogic Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AsBP_Logic_Team_Death_Match != nullptr)
		*AsBP_Logic_Team_Death_Match = Parms.AsBP_Logic_Team_Death_Match;
}

}

