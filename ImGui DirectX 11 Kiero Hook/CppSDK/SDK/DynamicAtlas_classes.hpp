#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicAtlas

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "DynamicAtlas_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class DynamicAtlas.DynamicAtlas
// 0x00A0 (0x00C8 - 0x0028)
class UDynamicAtlas final : public UObject
{
public:
	uint8                                         Pad_28[0xA0];                                      // 0x0028(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCanvasRenderTargetUpdate(class UCanvas* InCanvas, int32 InWidth, int32 InHeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlas">();
	}
	static class UDynamicAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlas>();
	}
};
static_assert(alignof(UDynamicAtlas) == 0x000008, "Wrong alignment on UDynamicAtlas");
static_assert(sizeof(UDynamicAtlas) == 0x0000C8, "Wrong size on UDynamicAtlas");

// Class DynamicAtlas.DynamicAtlasFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDynamicAtlasFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlasFunctionLibrary">();
	}
	static class UDynamicAtlasFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlasFunctionLibrary>();
	}
};
static_assert(alignof(UDynamicAtlasFunctionLibrary) == 0x000008, "Wrong alignment on UDynamicAtlasFunctionLibrary");
static_assert(sizeof(UDynamicAtlasFunctionLibrary) == 0x000028, "Wrong size on UDynamicAtlasFunctionLibrary");

// Class DynamicAtlas.DynamicAtlasLoader
// 0x0028 (0x0050 - 0x0028)
class UDynamicAtlasLoader final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlasLoader">();
	}
	static class UDynamicAtlasLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlasLoader>();
	}
};
static_assert(alignof(UDynamicAtlasLoader) == 0x000008, "Wrong alignment on UDynamicAtlasLoader");
static_assert(sizeof(UDynamicAtlasLoader) == 0x000050, "Wrong size on UDynamicAtlasLoader");

// Class DynamicAtlas.DynamicAtlasSettings
// 0x0040 (0x0078 - 0x0038)
class UDynamicAtlasSettings final : public UDeveloperSettings
{
public:
	bool                                          bEnableDynamicAtlas;                               // 0x0038(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRuntimeDynamicAtlas;                        // 0x0039(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearWhenRemove;                                  // 0x003A(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UCanvasRenderTarget2D>> DynamicAtlasSoftTemplateRenderTargets;       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              DynamicAtlasSoftTemplateClear;                     // 0x0050(0x0028)(Edit, Config, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlasSettings">();
	}
	static class UDynamicAtlasSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlasSettings>();
	}
};
static_assert(alignof(UDynamicAtlasSettings) == 0x000008, "Wrong alignment on UDynamicAtlasSettings");
static_assert(sizeof(UDynamicAtlasSettings) == 0x000078, "Wrong size on UDynamicAtlasSettings");
static_assert(offsetof(UDynamicAtlasSettings, bEnableDynamicAtlas) == 0x000038, "Member 'UDynamicAtlasSettings::bEnableDynamicAtlas' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSettings, bEnableRuntimeDynamicAtlas) == 0x000039, "Member 'UDynamicAtlasSettings::bEnableRuntimeDynamicAtlas' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSettings, bClearWhenRemove) == 0x00003A, "Member 'UDynamicAtlasSettings::bClearWhenRemove' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSettings, DynamicAtlasSoftTemplateRenderTargets) == 0x000040, "Member 'UDynamicAtlasSettings::DynamicAtlasSoftTemplateRenderTargets' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSettings, DynamicAtlasSoftTemplateClear) == 0x000050, "Member 'UDynamicAtlasSettings::DynamicAtlasSoftTemplateClear' has a wrong offset!");

// Class DynamicAtlas.DynamicAtlasSubsystem
// 0x01D0 (0x0200 - 0x0030)
class UDynamicAtlasSubsystem final : public UWorldSubsystem
{
public:
	TMap<EDynamicAtlasGroup, class UDynamicAtlas*> m_DynamicAtlas;                                   // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class UCanvasRenderTarget2D*>          AtlasTemplateRenderTargets;                        // 0x0080(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class UDynamicSprite*>    DynamicSprites;                                    // 0x0090(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x50];                                      // 0x00E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    HandleToPaths;                                     // 0x0130(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UObject*, class UDynamicAtlasLoader*> DynamicAtlasLoaders;                            // 0x0180(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x30];                                     // 0x01D0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlasSubsystem">();
	}
	static class UDynamicAtlasSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlasSubsystem>();
	}
};
static_assert(alignof(UDynamicAtlasSubsystem) == 0x000008, "Wrong alignment on UDynamicAtlasSubsystem");
static_assert(sizeof(UDynamicAtlasSubsystem) == 0x000200, "Wrong size on UDynamicAtlasSubsystem");
static_assert(offsetof(UDynamicAtlasSubsystem, m_DynamicAtlas) == 0x000030, "Member 'UDynamicAtlasSubsystem::m_DynamicAtlas' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSubsystem, AtlasTemplateRenderTargets) == 0x000080, "Member 'UDynamicAtlasSubsystem::AtlasTemplateRenderTargets' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSubsystem, DynamicSprites) == 0x000090, "Member 'UDynamicAtlasSubsystem::DynamicSprites' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSubsystem, HandleToPaths) == 0x000130, "Member 'UDynamicAtlasSubsystem::HandleToPaths' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasSubsystem, DynamicAtlasLoaders) == 0x000180, "Member 'UDynamicAtlasSubsystem::DynamicAtlasLoaders' has a wrong offset!");

// Class DynamicAtlas.DynamicAtlasTestMain
// 0x00B0 (0x0318 - 0x0268)
class UDynamicAtlasTestMain final : public UUserWidget
{
public:
	class UImage*                                 Img_StaticTexture;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_StaticTextureSame;                             // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_StaticSprite;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_DynamicTexture;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_DynamicSprite;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_DynamicTextureBeyond;                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_DynamicTextureBig;                             // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                BtnAdd;                                            // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                BtnRemove;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        SoftTexturePath;                                   // 0x02B0(0x0018)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        SoftSpritePath;                                    // 0x02C8(0x0018)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSoftObjectPath>                SoftTexturePaths;                                  // 0x02E0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         AddImageList;                                      // 0x02F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x18];                                     // 0x0300(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBtnAddClicked();
	void OnBtnRemoveClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicAtlasTestMain">();
	}
	static class UDynamicAtlasTestMain* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicAtlasTestMain>();
	}
};
static_assert(alignof(UDynamicAtlasTestMain) == 0x000008, "Wrong alignment on UDynamicAtlasTestMain");
static_assert(sizeof(UDynamicAtlasTestMain) == 0x000318, "Wrong size on UDynamicAtlasTestMain");
static_assert(offsetof(UDynamicAtlasTestMain, Img_StaticTexture) == 0x000268, "Member 'UDynamicAtlasTestMain::Img_StaticTexture' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_StaticTextureSame) == 0x000270, "Member 'UDynamicAtlasTestMain::Img_StaticTextureSame' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_StaticSprite) == 0x000278, "Member 'UDynamicAtlasTestMain::Img_StaticSprite' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_DynamicTexture) == 0x000280, "Member 'UDynamicAtlasTestMain::Img_DynamicTexture' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_DynamicSprite) == 0x000288, "Member 'UDynamicAtlasTestMain::Img_DynamicSprite' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_DynamicTextureBeyond) == 0x000290, "Member 'UDynamicAtlasTestMain::Img_DynamicTextureBeyond' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, Img_DynamicTextureBig) == 0x000298, "Member 'UDynamicAtlasTestMain::Img_DynamicTextureBig' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, BtnAdd) == 0x0002A0, "Member 'UDynamicAtlasTestMain::BtnAdd' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, BtnRemove) == 0x0002A8, "Member 'UDynamicAtlasTestMain::BtnRemove' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, SoftTexturePath) == 0x0002B0, "Member 'UDynamicAtlasTestMain::SoftTexturePath' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, SoftSpritePath) == 0x0002C8, "Member 'UDynamicAtlasTestMain::SoftSpritePath' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, SoftTexturePaths) == 0x0002E0, "Member 'UDynamicAtlasTestMain::SoftTexturePaths' has a wrong offset!");
static_assert(offsetof(UDynamicAtlasTestMain, AddImageList) == 0x0002F0, "Member 'UDynamicAtlasTestMain::AddImageList' has a wrong offset!");

// Class DynamicAtlas.DynamicSprite
// 0x0020 (0x0048 - 0x0028)
class UDynamicSprite final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SourceTexture;                                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              SourceUV;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              SourceDimension;                                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicSprite">();
	}
	static class UDynamicSprite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicSprite>();
	}
};
static_assert(alignof(UDynamicSprite) == 0x000008, "Wrong alignment on UDynamicSprite");
static_assert(sizeof(UDynamicSprite) == 0x000048, "Wrong size on UDynamicSprite");
static_assert(offsetof(UDynamicSprite, SourceTexture) == 0x000030, "Member 'UDynamicSprite::SourceTexture' has a wrong offset!");
static_assert(offsetof(UDynamicSprite, SourceUV) == 0x000038, "Member 'UDynamicSprite::SourceUV' has a wrong offset!");
static_assert(offsetof(UDynamicSprite, SourceDimension) == 0x000040, "Member 'UDynamicSprite::SourceDimension' has a wrong offset!");

}

