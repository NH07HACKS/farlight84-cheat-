#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mode_TrainingMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_SaveItemData_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mode_TrainingMode.BP_Mode_TrainingMode_C
// 0x0068 (0x0AA0 - 0x0A38)
class ABP_Mode_TrainingMode_C final : public ATrainingGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A38(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Logic_TrainingMode_C*               BP_TrainingIslandLogic;                            // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, struct FS_SaveItemData>   NewVar_0;                                          // 0x0A50(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	TArray<int32> GetRandomAISkinIDByEliminateIDs(const TArray<int32>& EliminateIDs);
	void UpdatePlayerData(int32 CharacterSkinID, int32 CharacterBagID, int32 CharacterBagTrailID, int32 CharacterCapsuleID, class ASolarPlayerState* PlayerState);
	int32 GetRandomSkinByCharacterID(const int32 InCharacterId, const int32 InQuality);
	void InitCharacterClassPath(int32 CharacterID);
	void UpdateBotPlayerData(class ASolarPlayerState* PlayerState, const int32 CharacterSkinQuality, const int32 BackpackQuality, const int32 BackpackTrailQuality, const int32 CapsuleQuality, const int32 DeathBoxSkinQuality, const int32 WeaponSkinQuality, const int32 VehicleSkinQuality, const int32 KillNotifyQuality);
	TArray<int32> GetRandomAISkinID(const class ASolarPlayerState* InPS, bool bOnlyLowerPos);
	void OnReceivePlayerBattleStart(class APlayerController* PlayerController);
	void ReceiveBeginPlay();
	void OnReceivePlayerLogin(class APlayerController* PlayerController);
	void OnReceiveBattleStart();
	void ExecuteUbergraph_BP_Mode_TrainingMode(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mode_TrainingMode_C">();
	}
	static class ABP_Mode_TrainingMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mode_TrainingMode_C>();
	}
};
static_assert(alignof(ABP_Mode_TrainingMode_C) == 0x000008, "Wrong alignment on ABP_Mode_TrainingMode_C");
static_assert(sizeof(ABP_Mode_TrainingMode_C) == 0x000AA0, "Wrong size on ABP_Mode_TrainingMode_C");
static_assert(offsetof(ABP_Mode_TrainingMode_C, UberGraphFrame) == 0x000A38, "Member 'ABP_Mode_TrainingMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Mode_TrainingMode_C, BP_TrainingIslandLogic) == 0x000A40, "Member 'ABP_Mode_TrainingMode_C::BP_TrainingIslandLogic' has a wrong offset!");
static_assert(offsetof(ABP_Mode_TrainingMode_C, DefaultSceneRoot) == 0x000A48, "Member 'ABP_Mode_TrainingMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Mode_TrainingMode_C, NewVar_0) == 0x000A50, "Member 'ABP_Mode_TrainingMode_C::NewVar_0' has a wrong offset!");

}

