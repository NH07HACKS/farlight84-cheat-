#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldMark

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WorldMark.WorldMark_C.ExecuteUbergraph_WorldMark
// 0x0078 (0x0078 - 0x0000)
struct WorldMark_C_ExecuteUbergraph_WorldMark final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue; // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos_1; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow_1; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue_1; // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsInCenterRange;                      // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOutOfRange;                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInPendingRemove;                     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInNeedPlayRemoveAnimation;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_NewProgress;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_ExecuteUbergraph_WorldMark) == 0x000008, "Wrong alignment on WorldMark_C_ExecuteUbergraph_WorldMark");
static_assert(sizeof(WorldMark_C_ExecuteUbergraph_WorldMark) == 0x000078, "Wrong size on WorldMark_C_ExecuteUbergraph_WorldMark");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, EntryPoint) == 0x000000, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::EntryPoint' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_bool_Variable) == 0x000004, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable) == 0x000018, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable_1) == 0x000019, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_bool_Variable_1) == 0x00001A, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable_2) == 0x00001B, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable_3) == 0x00001C, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos) == 0x000028, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow) == 0x000030, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue) == 0x000034, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_GetPlayerController_ReturnValue_1) == 0x000038, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos_1) == 0x000040, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_ScreenPos_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow_1) == 0x000048, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_AngleForArrow_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue_1) == 0x00004C, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_WorldPosToWidgetPosForWorldMark_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable_4) == 0x00004D, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_byte_Variable_5) == 0x00004E, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_IsInCenterRange) == 0x00004F, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_IsInCenterRange' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_bOutOfRange) == 0x000050, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_bOutOfRange' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_SwitchEnum_CmpSuccess) == 0x000051, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_IsDesignTime) == 0x000052, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_bInPendingRemove) == 0x000053, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_bInPendingRemove' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_bInNeedPlayRemoveAnimation) == 0x000054, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_bInNeedPlayRemoveAnimation' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Select_Default) == 0x000055, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Event_NewProgress) == 0x000058, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Event_NewProgress' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, Temp_bool_Variable_2) == 0x00005D, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Select_Default_1) == 0x00005E, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_Not_PreBool_ReturnValue) == 0x00005F, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_BooleanOR_ReturnValue) == 0x000060, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_Select_Default_2) == 0x000062, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_SwitchEnum_CmpSuccess_1) == 0x000063, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_CreateDelegate_OutputDelegate_1) == 0x000064, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_ExecuteUbergraph_WorldMark, K2Node_SwitchEnum_CmpSuccess_2) == 0x000074, "Member 'WorldMark_C_ExecuteUbergraph_WorldMark::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function WorldMark.WorldMark_C.UpdateProgressBarStyle
// 0x0004 (0x0004 - 0x0000)
struct WorldMark_C_UpdateProgressBarStyle final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_C_UpdateProgressBarStyle) == 0x000004, "Wrong alignment on WorldMark_C_UpdateProgressBarStyle");
static_assert(sizeof(WorldMark_C_UpdateProgressBarStyle) == 0x000004, "Wrong size on WorldMark_C_UpdateProgressBarStyle");
static_assert(offsetof(WorldMark_C_UpdateProgressBarStyle, NewProgress) == 0x000000, "Member 'WorldMark_C_UpdateProgressBarStyle::NewProgress' has a wrong offset!");

// Function WorldMark.WorldMark_C.SetWidgetPendingRemoveStyle
// 0x0002 (0x0002 - 0x0000)
struct WorldMark_C_SetWidgetPendingRemoveStyle final
{
public:
	bool                                          bInPendingRemove;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInNeedPlayRemoveAnimation;                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_SetWidgetPendingRemoveStyle) == 0x000001, "Wrong alignment on WorldMark_C_SetWidgetPendingRemoveStyle");
static_assert(sizeof(WorldMark_C_SetWidgetPendingRemoveStyle) == 0x000002, "Wrong size on WorldMark_C_SetWidgetPendingRemoveStyle");
static_assert(offsetof(WorldMark_C_SetWidgetPendingRemoveStyle, bInPendingRemove) == 0x000000, "Member 'WorldMark_C_SetWidgetPendingRemoveStyle::bInPendingRemove' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetWidgetPendingRemoveStyle, bInNeedPlayRemoveAnimation) == 0x000001, "Member 'WorldMark_C_SetWidgetPendingRemoveStyle::bInNeedPlayRemoveAnimation' has a wrong offset!");

// Function WorldMark.WorldMark_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_PreConstruct) == 0x000001, "Wrong alignment on WorldMark_C_PreConstruct");
static_assert(sizeof(WorldMark_C_PreConstruct) == 0x000001, "Wrong size on WorldMark_C_PreConstruct");
static_assert(offsetof(WorldMark_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WorldMark_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WorldMark.WorldMark_C.SwitchWidget
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_C_SwitchWidget final
{
public:
	bool                                          bOutOfRange;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_SwitchWidget) == 0x000001, "Wrong alignment on WorldMark_C_SwitchWidget");
static_assert(sizeof(WorldMark_C_SwitchWidget) == 0x000001, "Wrong size on WorldMark_C_SwitchWidget");
static_assert(offsetof(WorldMark_C_SwitchWidget, bOutOfRange) == 0x000000, "Member 'WorldMark_C_SwitchWidget::bOutOfRange' has a wrong offset!");

// Function WorldMark.WorldMark_C.OnIsInCenterRangeStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_C_OnIsInCenterRangeStateChanged final
{
public:
	bool                                          IsInCenterRange;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_OnIsInCenterRangeStateChanged) == 0x000001, "Wrong alignment on WorldMark_C_OnIsInCenterRangeStateChanged");
static_assert(sizeof(WorldMark_C_OnIsInCenterRangeStateChanged) == 0x000001, "Wrong size on WorldMark_C_OnIsInCenterRangeStateChanged");
static_assert(offsetof(WorldMark_C_OnIsInCenterRangeStateChanged, IsInCenterRange) == 0x000000, "Member 'WorldMark_C_OnIsInCenterRangeStateChanged::IsInCenterRange' has a wrong offset!");

// Function WorldMark.WorldMark_C.SetBGByType
// 0x0058 (0x0058 - 0x0000)
struct WorldMark_C_SetBGByType final
{
public:
	EWorldMarkType                                MarkType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
};
static_assert(alignof(WorldMark_C_SetBGByType) == 0x000008, "Wrong alignment on WorldMark_C_SetBGByType");
static_assert(sizeof(WorldMark_C_SetBGByType) == 0x000058, "Wrong size on WorldMark_C_SetBGByType");
static_assert(offsetof(WorldMark_C_SetBGByType, MarkType) == 0x000000, "Member 'WorldMark_C_SetBGByType::MarkType' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetBGByType, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WorldMark_C_SetBGByType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetBGByType, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'WorldMark_C_SetBGByType::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetBGByType, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'WorldMark_C_SetBGByType::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function WorldMark.WorldMark_C.PlayInitAnimationByMarkData
// 0x00C0 (0x00C0 - 0x0000)
struct WorldMark_C_PlayInitAnimationByMarkData final
{
public:
	struct FWorldMarkData                         MarkData;                                          // 0x0000(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_C_PlayInitAnimationByMarkData) == 0x000008, "Wrong alignment on WorldMark_C_PlayInitAnimationByMarkData");
static_assert(sizeof(WorldMark_C_PlayInitAnimationByMarkData) == 0x0000C0, "Wrong size on WorldMark_C_PlayInitAnimationByMarkData");
static_assert(offsetof(WorldMark_C_PlayInitAnimationByMarkData, MarkData) == 0x000000, "Member 'WorldMark_C_PlayInitAnimationByMarkData::MarkData' has a wrong offset!");
static_assert(offsetof(WorldMark_C_PlayInitAnimationByMarkData, CallFunc_PlayAnimation_ReturnValue) == 0x0000B8, "Member 'WorldMark_C_PlayInitAnimationByMarkData::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WorldMark.WorldMark_C.SetIconVisibility
// 0x0010 (0x0010 - 0x0000)
struct WorldMark_C_SetIconVisibility final
{
public:
	class UImage*                                 IconImage;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_SetIconVisibility) == 0x000008, "Wrong alignment on WorldMark_C_SetIconVisibility");
static_assert(sizeof(WorldMark_C_SetIconVisibility) == 0x000010, "Wrong size on WorldMark_C_SetIconVisibility");
static_assert(offsetof(WorldMark_C_SetIconVisibility, IconImage) == 0x000000, "Member 'WorldMark_C_SetIconVisibility::IconImage' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetIconVisibility, Visible) == 0x000008, "Member 'WorldMark_C_SetIconVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetIconVisibility, CallFunc_GetVisibility_ReturnValue) == 0x000009, "Member 'WorldMark_C_SetIconVisibility::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetIconVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'WorldMark_C_SetIconVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetIconVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000B, "Member 'WorldMark_C_SetIconVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function WorldMark.WorldMark_C.InitWarningIconVisibleByScreenCoordinate
// 0x0008 (0x0008 - 0x0000)
struct WorldMark_C_InitWarningIconVisibleByScreenCoordinate final
{
public:
	struct FVector2D                              ScreenCoordinate;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_C_InitWarningIconVisibleByScreenCoordinate) == 0x000004, "Wrong alignment on WorldMark_C_InitWarningIconVisibleByScreenCoordinate");
static_assert(sizeof(WorldMark_C_InitWarningIconVisibleByScreenCoordinate) == 0x000008, "Wrong size on WorldMark_C_InitWarningIconVisibleByScreenCoordinate");
static_assert(offsetof(WorldMark_C_InitWarningIconVisibleByScreenCoordinate, ScreenCoordinate) == 0x000000, "Member 'WorldMark_C_InitWarningIconVisibleByScreenCoordinate::ScreenCoordinate' has a wrong offset!");

// Function WorldMark.WorldMark_C.SetArrowAngleAndPosition
// 0x0008 (0x0008 - 0x0000)
struct WorldMark_C_SetArrowAngleAndPosition final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_3;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_C_SetArrowAngleAndPosition) == 0x000004, "Wrong alignment on WorldMark_C_SetArrowAngleAndPosition");
static_assert(sizeof(WorldMark_C_SetArrowAngleAndPosition) == 0x000008, "Wrong size on WorldMark_C_SetArrowAngleAndPosition");
static_assert(offsetof(WorldMark_C_SetArrowAngleAndPosition, Value) == 0x000000, "Member 'WorldMark_C_SetArrowAngleAndPosition::Value' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetArrowAngleAndPosition, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000004, "Member 'WorldMark_C_SetArrowAngleAndPosition::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetArrowAngleAndPosition, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000005, "Member 'WorldMark_C_SetArrowAngleAndPosition::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetArrowAngleAndPosition, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x000006, "Member 'WorldMark_C_SetArrowAngleAndPosition::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WorldMark_C_SetArrowAngleAndPosition, CallFunc_InRange_FloatFloat_ReturnValue_3) == 0x000007, "Member 'WorldMark_C_SetArrowAngleAndPosition::CallFunc_InRange_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function WorldMark.WorldMark_C.LuaInit
// 0x00C0 (0x00C0 - 0x0000)
struct WorldMark_C_LuaInit final
{
public:
	class UObject*                                Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldMarkData                         InWorldMarkedData;                                 // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMark_C_LuaInit) == 0x000008, "Wrong alignment on WorldMark_C_LuaInit");
static_assert(sizeof(WorldMark_C_LuaInit) == 0x0000C0, "Wrong size on WorldMark_C_LuaInit");
static_assert(offsetof(WorldMark_C_LuaInit, Owner) == 0x000000, "Member 'WorldMark_C_LuaInit::Owner' has a wrong offset!");
static_assert(offsetof(WorldMark_C_LuaInit, InWorldMarkedData) == 0x000008, "Member 'WorldMark_C_LuaInit::InWorldMarkedData' has a wrong offset!");

// Function WorldMark.WorldMark_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct WorldMark_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_C_GetModuleName) == 0x000008, "Wrong alignment on WorldMark_C_GetModuleName");
static_assert(sizeof(WorldMark_C_GetModuleName) == 0x000010, "Wrong size on WorldMark_C_GetModuleName");
static_assert(offsetof(WorldMark_C_GetModuleName, ReturnValue) == 0x000000, "Member 'WorldMark_C_GetModuleName::ReturnValue' has a wrong offset!");

}

