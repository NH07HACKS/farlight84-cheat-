#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CFG_BattleRoyale

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"
#include "CFG_Framework_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CFG_BattleRoyale.CFG_BattleRoyale_C
// 0x0190 (0x0AF0 - 0x0960)
class UCFG_BattleRoyale_C final : public UCFG_Framework_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0958(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         水台最大等待时间;                                  // 0x0960(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开始战斗倒计时;                                    // 0x0964(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         小队成员数量;                                      // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         最大玩家数;                                        // 0x096C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             事件表;                                            // 0x0970(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          跳过跳伞流程;                                      // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_979[0x3];                                      // 0x0979(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         己方队伍展示时间;                                  // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         捍卫者队伍展示时间;                                // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         终结者奖励;                                        // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         缩圈次数;                                          // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         战斗开始时间;                                      // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         剩余队伍数量;                                      // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_994[0x4];                                      // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             自由毒圈事件表;                                    // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         胜利后等待时间;                                    // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInt32Range                            开局所需玩家数范围;                                // 0x09A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         毒圈高度;                                          // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            开局发放道具;                                      // 0x09B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, int32>                            复活币复活时发放道具_弃用_;                        // 0x0A08(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          跳过选人及捍卫者;                                  // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A59[0x3];                                      // 0x0A59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TopVictoryTeamRank;                                // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxBattleCountDown;                                // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否启用自由毒圈;                                  // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否启用多层暗区;                                  // 0x0A65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A66[0x2];                                      // 0x0A66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    多层暗区名称表;                                    // 0x0A68(0x0050)(Edit, BlueprintVisible)
	bool                                          是否启用备用缩圈路径;                              // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoisonBackupTrendInfo>         备用缩圈路径配置;                                  // 0x0AC0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         剩余X人时隐藏人数;                                 // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD4[0x4];                                      // 0x0AD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PoisonRadiusArray;                                 // 0x0AD8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         最炫队伍展示时间;                                  // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetPoisonRadiusArray(TArray<float>* NewParam);
	void OnPreSaved();
	void ExecuteUbergraph_CFG_BattleRoyale(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CFG_BattleRoyale_C">();
	}
	static class UCFG_BattleRoyale_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFG_BattleRoyale_C>();
	}
};
static_assert(alignof(UCFG_BattleRoyale_C) == 0x000010, "Wrong alignment on UCFG_BattleRoyale_C");
static_assert(sizeof(UCFG_BattleRoyale_C) == 0x000AF0, "Wrong size on UCFG_BattleRoyale_C");
static_assert(offsetof(UCFG_BattleRoyale_C, UberGraphFrame) == 0x000958, "Member 'UCFG_BattleRoyale_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 水台最大等待时间) == 0x000960, "Member 'UCFG_BattleRoyale_C::水台最大等待时间' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 开始战斗倒计时) == 0x000964, "Member 'UCFG_BattleRoyale_C::开始战斗倒计时' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 小队成员数量) == 0x000968, "Member 'UCFG_BattleRoyale_C::小队成员数量' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 最大玩家数) == 0x00096C, "Member 'UCFG_BattleRoyale_C::最大玩家数' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 事件表) == 0x000970, "Member 'UCFG_BattleRoyale_C::事件表' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 跳过跳伞流程) == 0x000978, "Member 'UCFG_BattleRoyale_C::跳过跳伞流程' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 己方队伍展示时间) == 0x00097C, "Member 'UCFG_BattleRoyale_C::己方队伍展示时间' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 捍卫者队伍展示时间) == 0x000980, "Member 'UCFG_BattleRoyale_C::捍卫者队伍展示时间' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 终结者奖励) == 0x000984, "Member 'UCFG_BattleRoyale_C::终结者奖励' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 缩圈次数) == 0x000988, "Member 'UCFG_BattleRoyale_C::缩圈次数' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 战斗开始时间) == 0x00098C, "Member 'UCFG_BattleRoyale_C::战斗开始时间' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 剩余队伍数量) == 0x000990, "Member 'UCFG_BattleRoyale_C::剩余队伍数量' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 自由毒圈事件表) == 0x000998, "Member 'UCFG_BattleRoyale_C::自由毒圈事件表' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 胜利后等待时间) == 0x0009A0, "Member 'UCFG_BattleRoyale_C::胜利后等待时间' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 开局所需玩家数范围) == 0x0009A4, "Member 'UCFG_BattleRoyale_C::开局所需玩家数范围' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 毒圈高度) == 0x0009B4, "Member 'UCFG_BattleRoyale_C::毒圈高度' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 开局发放道具) == 0x0009B8, "Member 'UCFG_BattleRoyale_C::开局发放道具' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 复活币复活时发放道具_弃用_) == 0x000A08, "Member 'UCFG_BattleRoyale_C::复活币复活时发放道具_弃用_' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 跳过选人及捍卫者) == 0x000A58, "Member 'UCFG_BattleRoyale_C::跳过选人及捍卫者' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, TopVictoryTeamRank) == 0x000A5C, "Member 'UCFG_BattleRoyale_C::TopVictoryTeamRank' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, MaxBattleCountDown) == 0x000A60, "Member 'UCFG_BattleRoyale_C::MaxBattleCountDown' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 是否启用自由毒圈) == 0x000A64, "Member 'UCFG_BattleRoyale_C::是否启用自由毒圈' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 是否启用多层暗区) == 0x000A65, "Member 'UCFG_BattleRoyale_C::是否启用多层暗区' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 多层暗区名称表) == 0x000A68, "Member 'UCFG_BattleRoyale_C::多层暗区名称表' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 是否启用备用缩圈路径) == 0x000AB8, "Member 'UCFG_BattleRoyale_C::是否启用备用缩圈路径' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 备用缩圈路径配置) == 0x000AC0, "Member 'UCFG_BattleRoyale_C::备用缩圈路径配置' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 剩余X人时隐藏人数) == 0x000AD0, "Member 'UCFG_BattleRoyale_C::剩余X人时隐藏人数' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, PoisonRadiusArray) == 0x000AD8, "Member 'UCFG_BattleRoyale_C::PoisonRadiusArray' has a wrong offset!");
static_assert(offsetof(UCFG_BattleRoyale_C, 最炫队伍展示时间) == 0x000AE8, "Member 'UCFG_BattleRoyale_C::最炫队伍展示时间' has a wrong offset!");

}

