#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CFG_TeamDeathMatch

#include "Basic.hpp"

#include "S_Shop_TDM_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CFG_TeamDeathMatch.CFG_TeamDeathMatch_C
// 0x0140 (0x0A90 - 0x0950)
class UCFG_TeamDeathMatch_C : public UCGMGameplayConfig
{
public:
	int32                                         战斗限时;                                          // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         加时赛限时;                                        // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Loading时长;                                       // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局等待时间;                                      // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         复活等待时间;                                      // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无敌时间;                                          // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         获胜所需人头数;                                    // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局倒计时;                                        // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         结算退出时间;                                      // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         武器选择限时;                                      // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_Shop_TDM>                    初始武器配置;                                      // 0x0978(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AiLevel;                                           // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            子弹ItemID;                                        // 0x0990(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, int32>                            道具ItemID;                                        // 0x09E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, int32>                            AITempleteMap;                                     // 0x0A30(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         模式默认全局人数;                                  // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReportingInterval;                                 // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CFG_TeamDeathMatch_C">();
	}
	static class UCFG_TeamDeathMatch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFG_TeamDeathMatch_C>();
	}
};
static_assert(alignof(UCFG_TeamDeathMatch_C) == 0x000010, "Wrong alignment on UCFG_TeamDeathMatch_C");
static_assert(sizeof(UCFG_TeamDeathMatch_C) == 0x000A90, "Wrong size on UCFG_TeamDeathMatch_C");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 战斗限时) == 0x000950, "Member 'UCFG_TeamDeathMatch_C::战斗限时' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 加时赛限时) == 0x000954, "Member 'UCFG_TeamDeathMatch_C::加时赛限时' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, Loading时长) == 0x000958, "Member 'UCFG_TeamDeathMatch_C::Loading时长' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 开局等待时间) == 0x00095C, "Member 'UCFG_TeamDeathMatch_C::开局等待时间' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 复活等待时间) == 0x000960, "Member 'UCFG_TeamDeathMatch_C::复活等待时间' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 无敌时间) == 0x000964, "Member 'UCFG_TeamDeathMatch_C::无敌时间' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 获胜所需人头数) == 0x000968, "Member 'UCFG_TeamDeathMatch_C::获胜所需人头数' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 开局倒计时) == 0x00096C, "Member 'UCFG_TeamDeathMatch_C::开局倒计时' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 结算退出时间) == 0x000970, "Member 'UCFG_TeamDeathMatch_C::结算退出时间' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 武器选择限时) == 0x000974, "Member 'UCFG_TeamDeathMatch_C::武器选择限时' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 初始武器配置) == 0x000978, "Member 'UCFG_TeamDeathMatch_C::初始武器配置' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, AiLevel) == 0x000988, "Member 'UCFG_TeamDeathMatch_C::AiLevel' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 子弹ItemID) == 0x000990, "Member 'UCFG_TeamDeathMatch_C::子弹ItemID' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 道具ItemID) == 0x0009E0, "Member 'UCFG_TeamDeathMatch_C::道具ItemID' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, AITempleteMap) == 0x000A30, "Member 'UCFG_TeamDeathMatch_C::AITempleteMap' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, 模式默认全局人数) == 0x000A80, "Member 'UCFG_TeamDeathMatch_C::模式默认全局人数' has a wrong offset!");
static_assert(offsetof(UCFG_TeamDeathMatch_C, ReportingInterval) == 0x000A84, "Member 'UCFG_TeamDeathMatch_C::ReportingInterval' has a wrong offset!");

}

