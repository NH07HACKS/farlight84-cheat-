#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SolarMovablePad

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_SolarMovablePad.WBP_SolarMovablePad_C.ExecuteUbergraph_WBP_SolarMovablePad
// 0x0008 (0x0008 - 0x0000)
struct WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad) == 0x000004, "Wrong alignment on WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad");
static_assert(sizeof(WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad) == 0x000008, "Wrong size on WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad");
static_assert(offsetof(WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad, EntryPoint) == 0x000000, "Member 'WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_SolarMovablePad_C_ExecuteUbergraph_WBP_SolarMovablePad::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_SolarMovablePad.WBP_SolarMovablePad_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_SolarMovablePad_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_SolarMovablePad_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_SolarMovablePad_C_PreConstruct");
static_assert(sizeof(WBP_SolarMovablePad_C_PreConstruct) == 0x000001, "Wrong size on WBP_SolarMovablePad_C_PreConstruct");
static_assert(offsetof(WBP_SolarMovablePad_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_SolarMovablePad_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_SolarMovablePad.WBP_SolarMovablePad_C.Set Bg Color
// 0x0150 (0x0150 - 0x0000)
struct WBP_SolarMovablePad_C_Set_Bg_Color final
{
public:
	struct FLinearColor                           BgColor_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0028)()
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0040(0x0110)()
};
static_assert(alignof(WBP_SolarMovablePad_C_Set_Bg_Color) == 0x000010, "Wrong alignment on WBP_SolarMovablePad_C_Set_Bg_Color");
static_assert(sizeof(WBP_SolarMovablePad_C_Set_Bg_Color) == 0x000150, "Wrong size on WBP_SolarMovablePad_C_Set_Bg_Color");
static_assert(offsetof(WBP_SolarMovablePad_C_Set_Bg_Color, BgColor_0) == 0x000000, "Member 'WBP_SolarMovablePad_C_Set_Bg_Color::BgColor_0' has a wrong offset!");
static_assert(offsetof(WBP_SolarMovablePad_C_Set_Bg_Color, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_SolarMovablePad_C_Set_Bg_Color::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_SolarMovablePad_C_Set_Bg_Color, K2Node_MakeStruct_SlateBrush) == 0x000040, "Member 'WBP_SolarMovablePad_C_Set_Bg_Color::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

}

