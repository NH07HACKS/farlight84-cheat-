#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTDecorators_CoolDown

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTDecorators_CoolDown.BTDecorators_CoolDown_C
// 0x0040 (0x00E0 - 0x00A0)
class UBTDecorators_CoolDown_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         CDmin;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimeLeft;                                   // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pass;                                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CDmax;                                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 BlackboardKey;                                     // 0x00B8(0x0028)(Edit, BlueprintVisible)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecutionFinishAI(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecutionStartAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveObserverDeactivatedAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveObserverActivatedAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ExecuteUbergraph_BTDecorators_CoolDown(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTDecorators_CoolDown_C">();
	}
	static class UBTDecorators_CoolDown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorators_CoolDown_C>();
	}
};
static_assert(alignof(UBTDecorators_CoolDown_C) == 0x000008, "Wrong alignment on UBTDecorators_CoolDown_C");
static_assert(sizeof(UBTDecorators_CoolDown_C) == 0x0000E0, "Wrong size on UBTDecorators_CoolDown_C");
static_assert(offsetof(UBTDecorators_CoolDown_C, UberGraphFrame) == 0x0000A0, "Member 'UBTDecorators_CoolDown_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTDecorators_CoolDown_C, CDmin) == 0x0000A8, "Member 'UBTDecorators_CoolDown_C::CDmin' has a wrong offset!");
static_assert(offsetof(UBTDecorators_CoolDown_C, CurrentTimeLeft) == 0x0000AC, "Member 'UBTDecorators_CoolDown_C::CurrentTimeLeft' has a wrong offset!");
static_assert(offsetof(UBTDecorators_CoolDown_C, Pass) == 0x0000B0, "Member 'UBTDecorators_CoolDown_C::Pass' has a wrong offset!");
static_assert(offsetof(UBTDecorators_CoolDown_C, CDmax) == 0x0000B4, "Member 'UBTDecorators_CoolDown_C::CDmax' has a wrong offset!");
static_assert(offsetof(UBTDecorators_CoolDown_C, BlackboardKey) == 0x0000B8, "Member 'UBTDecorators_CoolDown_C::BlackboardKey' has a wrong offset!");

}

