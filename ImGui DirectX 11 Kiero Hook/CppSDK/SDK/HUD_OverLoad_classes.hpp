#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_OverLoad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass HUD_OverLoad.HUD_Overload_C
// 0x00D8 (0x0340 - 0x0268)
class UHUD_Overload_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Overheat_Anim;                                     // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Img_Disable;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Disable_1;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_overload;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_overload_bg;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_overload_Glow;                                 // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           OverloadWarning;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              OverloadImgMaxSize;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimImgRatio;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverloadProgress;                                  // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            ParentWidget;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      ColorCurve;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ShadowSize;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImgMaxParmValue;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImgParmOffset;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewVar_0;                                          // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, struct FVector2D>         CrosshairScaleMapping;                             // 0x02E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                         NewVar_1;                                          // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysShowOverload;                                // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_HUD_Overload(int32 EntryPoint);
	void OnActiveCrosshair(class UUserWidget* InActiveCrosshair);
	void OnChangeOverloadState(bool InbQuitState);
	void OnUpdateOverload(float InOverloadProgress, float InOverloadWarningRate, bool InbOverloadState);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void SetAmmoColor(const struct FLinearColor& InColor);
	void OnUpdateReload(float InReloadProgress, int32 InReloadAmmo, int32 InMaxAmmo);
	void OnUpdateCoolDown(float InReloadProgress);
	void OnUpdateCharge(bool InbCharging, int32 InChargeMode, float InChargeProgress);
	void OnUpdateAmmo(int32 InReservedAmmo, int32 InMaxAmmo, float InAmmoProgress, bool InbFirst);
	void OnReloadFinish(bool InbReloadSuccess, int32 InReloadAmmo, int32 InReservedAmmo, int32 InMaxAmmo, float InAmmoProgress);
	void OnInsufficientAmmo();
	void OnChangeReloadState(bool InbQuitState, bool bReloadSpeedup);
	void SetOverLoadImageSize(float InProgress);
	void SetCoolDownProgress();
	void PlayOverloadAnima(bool InOverload);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HUD_Overload_C">();
	}
	static class UHUD_Overload_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUD_Overload_C>();
	}
};
static_assert(alignof(UHUD_Overload_C) == 0x000008, "Wrong alignment on UHUD_Overload_C");
static_assert(sizeof(UHUD_Overload_C) == 0x000340, "Wrong size on UHUD_Overload_C");
static_assert(offsetof(UHUD_Overload_C, UberGraphFrame) == 0x000268, "Member 'UHUD_Overload_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, Overheat_Anim) == 0x000270, "Member 'UHUD_Overload_C::Overheat_Anim' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, Img_Disable) == 0x000278, "Member 'UHUD_Overload_C::Img_Disable' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, Img_Disable_1) == 0x000280, "Member 'UHUD_Overload_C::Img_Disable_1' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, img_overload) == 0x000288, "Member 'UHUD_Overload_C::img_overload' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, img_overload_bg) == 0x000290, "Member 'UHUD_Overload_C::img_overload_bg' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, img_overload_Glow) == 0x000298, "Member 'UHUD_Overload_C::img_overload_Glow' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, OverloadWarning) == 0x0002A0, "Member 'UHUD_Overload_C::OverloadWarning' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, OverloadImgMaxSize) == 0x0002A8, "Member 'UHUD_Overload_C::OverloadImgMaxSize' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, AnimImgRatio) == 0x0002B0, "Member 'UHUD_Overload_C::AnimImgRatio' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, OverloadProgress) == 0x0002B4, "Member 'UHUD_Overload_C::OverloadProgress' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, ParentWidget) == 0x0002B8, "Member 'UHUD_Overload_C::ParentWidget' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, ColorCurve) == 0x0002C0, "Member 'UHUD_Overload_C::ColorCurve' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, ShadowSize) == 0x0002C8, "Member 'UHUD_Overload_C::ShadowSize' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, ImgMaxParmValue) == 0x0002D0, "Member 'UHUD_Overload_C::ImgMaxParmValue' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, ImgParmOffset) == 0x0002D4, "Member 'UHUD_Overload_C::ImgParmOffset' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, NewVar_0) == 0x0002D8, "Member 'UHUD_Overload_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, CrosshairScaleMapping) == 0x0002E8, "Member 'UHUD_Overload_C::CrosshairScaleMapping' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, NewVar_1) == 0x000338, "Member 'UHUD_Overload_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(UHUD_Overload_C, AlwaysShowOverload) == 0x00033C, "Member 'UHUD_Overload_C::AlwaysShowOverload' has a wrong offset!");

}

