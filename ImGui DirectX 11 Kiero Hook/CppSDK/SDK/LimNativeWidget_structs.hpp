#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimNativeWidget

#include "Basic.hpp"


namespace SDK
{

// Enum LimNativeWidget.EAgoraGameSubscribeOption
// NumValues: 0x0005
enum class EAgoraGameSubscribeOption : uint8
{
	None                                     = 0,
	Room                                     = 1,
	Team                                     = 2,
	RoomAndTeam                              = 3,
	EAgoraGameSubscribeOption_MAX            = 4,
};

// Enum LimNativeWidget.EAgoraGamePublishOption
// NumValues: 0x0004
enum class EAgoraGamePublishOption : uint8
{
	None                                     = 0,
	Room                                     = 1,
	Team                                     = 2,
	EAgoraGamePublishOption_MAX              = 3,
};

// Enum LimNativeWidget.ERTCAudioRouteRecvType
// NumValues: 0x0006
enum class ERTCAudioRouteRecvType : uint8
{
	RecvInquireError                         = 0,
	NotRecvFromAnyone                        = 1,
	RecvFromAll                              = 2,
	RecvBlacklist                            = 3,
	RecvWhitelist                            = 4,
	ERTCAudioRouteRecvType_MAX               = 5,
};

// Enum LimNativeWidget.ERTCAudioRouteSendType
// NumValues: 0x0006
enum class ERTCAudioRouteSendType : uint8
{
	InquireError                             = 0,
	NotSendToAnyone                          = 1,
	SendToAll                                = 2,
	SendBlacklist                            = 3,
	SendWhitelist                            = 4,
	ERTCAudioRouteSendType_MAX               = 5,
};

// Enum LimNativeWidget.ERTCRangeAudioMode
// NumValues: 0x0003
enum class ERTCRangeAudioMode : uint8
{
	World                                    = 0,
	Team                                     = 1,
	ERTCRangeAudioMode_MAX                   = 2,
};

// Enum LimNativeWidget.EAgoraAudioRoute
// NumValues: 0x000C
enum class EAgoraAudioRoute : uint8
{
	ROUTE_HEADSET                            = 0,
	ROUTE_EARPIECE                           = 1,
	ROUTE_HEADSETNOMIC                       = 2,
	ROUTE_SPEAKERPHONE                       = 3,
	ROUTE_LOUDSPEAKER                        = 4,
	ROUTE_HEADSETBLUETOOTH                   = 5,
	ROUTE_USB                                = 6,
	ROUTE_HDMI                               = 7,
	ROUTE_DISPLAYPORT                        = 8,
	ROUTE_AIRPLAY                            = 9,
	ROUTE_BLUETOOTH_SPEAKER                  = 10,
	ROUTE_MAX                                = 11,
};

// Enum LimNativeWidget.EIOSAudioPermissionState
// NumValues: 0x0005
enum class EIOSAudioPermissionState : uint8
{
	AudioPermission_Unknown                  = 0,
	AudioPermission_Undetermined             = 1,
	AudioPermission_Denied                   = 2,
	AudioPermission_Granted                  = 3,
	AudioPermission_MAX                      = 4,
};

// ScriptStruct LimNativeWidget.RTCDeviceInfo
// 0x0030 (0x0030 - 0x0000)
struct FRTCDeviceInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceID;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewDevice;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsedDevice;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTCDeviceInfo) == 0x000008, "Wrong alignment on FRTCDeviceInfo");
static_assert(sizeof(FRTCDeviceInfo) == 0x000030, "Wrong size on FRTCDeviceInfo");
static_assert(offsetof(FRTCDeviceInfo, DeviceID) == 0x000008, "Member 'FRTCDeviceInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(FRTCDeviceInfo, DeviceName) == 0x000018, "Member 'FRTCDeviceInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(FRTCDeviceInfo, bNewDevice) == 0x000028, "Member 'FRTCDeviceInfo::bNewDevice' has a wrong offset!");
static_assert(offsetof(FRTCDeviceInfo, bUsedDevice) == 0x000029, "Member 'FRTCDeviceInfo::bUsedDevice' has a wrong offset!");

// ScriptStruct LimNativeWidget.AgoraUserUpdateData
// 0x0020 (0x0020 - 0x0000)
struct FAgoraUserUpdateData final
{
public:
	TArray<int32>                                 UserIDList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 UserVolumeList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAgoraUserUpdateData) == 0x000008, "Wrong alignment on FAgoraUserUpdateData");
static_assert(sizeof(FAgoraUserUpdateData) == 0x000020, "Wrong size on FAgoraUserUpdateData");
static_assert(offsetof(FAgoraUserUpdateData, UserIDList) == 0x000000, "Member 'FAgoraUserUpdateData::UserIDList' has a wrong offset!");
static_assert(offsetof(FAgoraUserUpdateData, UserVolumeList) == 0x000010, "Member 'FAgoraUserUpdateData::UserVolumeList' has a wrong offset!");

// ScriptStruct LimNativeWidget.RTCUserUpdateData
// 0x0010 (0x0010 - 0x0000)
struct FRTCUserUpdateData final
{
public:
	TArray<class FString>                         UserList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTCUserUpdateData) == 0x000008, "Wrong alignment on FRTCUserUpdateData");
static_assert(sizeof(FRTCUserUpdateData) == 0x000010, "Wrong size on FRTCUserUpdateData");
static_assert(offsetof(FRTCUserUpdateData, UserList) == 0x000000, "Member 'FRTCUserUpdateData::UserList' has a wrong offset!");

}

