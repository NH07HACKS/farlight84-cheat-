#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FairyGUI

#include "Basic.hpp"

#include "FairyGUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function FairyGUI.DragDropManager.StartDrag
// 0x0030 (0x0030 - 0x0000)
struct DragDropManager_StartDrag final
{
public:
	class FString                                 InIcon;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNVariant                              InUserData;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InUserIndex;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPointerIndex;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragDropManager_StartDrag) == 0x000008, "Wrong alignment on DragDropManager_StartDrag");
static_assert(sizeof(DragDropManager_StartDrag) == 0x000030, "Wrong size on DragDropManager_StartDrag");
static_assert(offsetof(DragDropManager_StartDrag, InIcon) == 0x000000, "Member 'DragDropManager_StartDrag::InIcon' has a wrong offset!");
static_assert(offsetof(DragDropManager_StartDrag, InUserData) == 0x000010, "Member 'DragDropManager_StartDrag::InUserData' has a wrong offset!");
static_assert(offsetof(DragDropManager_StartDrag, InUserIndex) == 0x000028, "Member 'DragDropManager_StartDrag::InUserIndex' has a wrong offset!");
static_assert(offsetof(DragDropManager_StartDrag, InPointerIndex) == 0x00002C, "Member 'DragDropManager_StartDrag::InPointerIndex' has a wrong offset!");

// Function FairyGUI.DragDropManager.GetAgent
// 0x0008 (0x0008 - 0x0000)
struct DragDropManager_GetAgent final
{
public:
	class UGLoader*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragDropManager_GetAgent) == 0x000008, "Wrong alignment on DragDropManager_GetAgent");
static_assert(sizeof(DragDropManager_GetAgent) == 0x000008, "Wrong size on DragDropManager_GetAgent");
static_assert(offsetof(DragDropManager_GetAgent, ReturnValue) == 0x000000, "Member 'DragDropManager_GetAgent::ReturnValue' has a wrong offset!");

// Function FairyGUI.DragDropManager.IsDragging
// 0x0001 (0x0001 - 0x0000)
struct DragDropManager_IsDragging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragDropManager_IsDragging) == 0x000001, "Wrong alignment on DragDropManager_IsDragging");
static_assert(sizeof(DragDropManager_IsDragging) == 0x000001, "Wrong size on DragDropManager_IsDragging");
static_assert(offsetof(DragDropManager_IsDragging, ReturnValue) == 0x000000, "Member 'DragDropManager_IsDragging::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetClickCount
// 0x0004 (0x0004 - 0x0000)
struct EventContext_GetClickCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetClickCount) == 0x000004, "Wrong alignment on EventContext_GetClickCount");
static_assert(sizeof(EventContext_GetClickCount) == 0x000004, "Wrong size on EventContext_GetClickCount");
static_assert(offsetof(EventContext_GetClickCount, ReturnValue) == 0x000000, "Member 'EventContext_GetClickCount::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetData
// 0x0018 (0x0018 - 0x0000)
struct EventContext_GetData final
{
public:
	struct FNVariant                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetData) == 0x000008, "Wrong alignment on EventContext_GetData");
static_assert(sizeof(EventContext_GetData) == 0x000018, "Wrong size on EventContext_GetData");
static_assert(offsetof(EventContext_GetData, ReturnValue) == 0x000000, "Member 'EventContext_GetData::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetInitiator
// 0x0008 (0x0008 - 0x0000)
struct EventContext_GetInitiator final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetInitiator) == 0x000008, "Wrong alignment on EventContext_GetInitiator");
static_assert(sizeof(EventContext_GetInitiator) == 0x000008, "Wrong size on EventContext_GetInitiator");
static_assert(offsetof(EventContext_GetInitiator, ReturnValue) == 0x000000, "Member 'EventContext_GetInitiator::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetKeyEvent
// 0x0038 (0x0038 - 0x0000)
struct EventContext_GetKeyEvent final
{
public:
	struct FKeyEvent                              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetKeyEvent) == 0x000008, "Wrong alignment on EventContext_GetKeyEvent");
static_assert(sizeof(EventContext_GetKeyEvent) == 0x000038, "Wrong size on EventContext_GetKeyEvent");
static_assert(offsetof(EventContext_GetKeyEvent, ReturnValue) == 0x000000, "Member 'EventContext_GetKeyEvent::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetMouseButton
// 0x0018 (0x0018 - 0x0000)
struct EventContext_GetMouseButton final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetMouseButton) == 0x000008, "Wrong alignment on EventContext_GetMouseButton");
static_assert(sizeof(EventContext_GetMouseButton) == 0x000018, "Wrong size on EventContext_GetMouseButton");
static_assert(offsetof(EventContext_GetMouseButton, ReturnValue) == 0x000000, "Member 'EventContext_GetMouseButton::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetPointerEvent
// 0x0070 (0x0070 - 0x0000)
struct EventContext_GetPointerEvent final
{
public:
	struct FPointerEvent                          ReturnValue;                                       // 0x0000(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetPointerEvent) == 0x000008, "Wrong alignment on EventContext_GetPointerEvent");
static_assert(sizeof(EventContext_GetPointerEvent) == 0x000070, "Wrong size on EventContext_GetPointerEvent");
static_assert(offsetof(EventContext_GetPointerEvent, ReturnValue) == 0x000000, "Member 'EventContext_GetPointerEvent::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetPointerIndex
// 0x0004 (0x0004 - 0x0000)
struct EventContext_GetPointerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetPointerIndex) == 0x000004, "Wrong alignment on EventContext_GetPointerIndex");
static_assert(sizeof(EventContext_GetPointerIndex) == 0x000004, "Wrong size on EventContext_GetPointerIndex");
static_assert(offsetof(EventContext_GetPointerIndex, ReturnValue) == 0x000000, "Member 'EventContext_GetPointerIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetPointerPosition
// 0x0008 (0x0008 - 0x0000)
struct EventContext_GetPointerPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetPointerPosition) == 0x000004, "Wrong alignment on EventContext_GetPointerPosition");
static_assert(sizeof(EventContext_GetPointerPosition) == 0x000008, "Wrong size on EventContext_GetPointerPosition");
static_assert(offsetof(EventContext_GetPointerPosition, ReturnValue) == 0x000000, "Member 'EventContext_GetPointerPosition::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetSender
// 0x0008 (0x0008 - 0x0000)
struct EventContext_GetSender final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetSender) == 0x000008, "Wrong alignment on EventContext_GetSender");
static_assert(sizeof(EventContext_GetSender) == 0x000008, "Wrong size on EventContext_GetSender");
static_assert(offsetof(EventContext_GetSender, ReturnValue) == 0x000000, "Member 'EventContext_GetSender::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetType
// 0x0008 (0x0008 - 0x0000)
struct EventContext_GetType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetType) == 0x000004, "Wrong alignment on EventContext_GetType");
static_assert(sizeof(EventContext_GetType) == 0x000008, "Wrong size on EventContext_GetType");
static_assert(offsetof(EventContext_GetType, ReturnValue) == 0x000000, "Member 'EventContext_GetType::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetUserIndex
// 0x0004 (0x0004 - 0x0000)
struct EventContext_GetUserIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetUserIndex) == 0x000004, "Wrong alignment on EventContext_GetUserIndex");
static_assert(sizeof(EventContext_GetUserIndex) == 0x000004, "Wrong size on EventContext_GetUserIndex");
static_assert(offsetof(EventContext_GetUserIndex, ReturnValue) == 0x000000, "Member 'EventContext_GetUserIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.GetWheelDelta
// 0x0004 (0x0004 - 0x0000)
struct EventContext_GetWheelDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_GetWheelDelta) == 0x000004, "Wrong alignment on EventContext_GetWheelDelta");
static_assert(sizeof(EventContext_GetWheelDelta) == 0x000004, "Wrong size on EventContext_GetWheelDelta");
static_assert(offsetof(EventContext_GetWheelDelta, ReturnValue) == 0x000000, "Member 'EventContext_GetWheelDelta::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.IsDefaultPrevented
// 0x0001 (0x0001 - 0x0000)
struct EventContext_IsDefaultPrevented final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_IsDefaultPrevented) == 0x000001, "Wrong alignment on EventContext_IsDefaultPrevented");
static_assert(sizeof(EventContext_IsDefaultPrevented) == 0x000001, "Wrong size on EventContext_IsDefaultPrevented");
static_assert(offsetof(EventContext_IsDefaultPrevented, ReturnValue) == 0x000000, "Member 'EventContext_IsDefaultPrevented::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.IsDoubleClick
// 0x0001 (0x0001 - 0x0000)
struct EventContext_IsDoubleClick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_IsDoubleClick) == 0x000001, "Wrong alignment on EventContext_IsDoubleClick");
static_assert(sizeof(EventContext_IsDoubleClick) == 0x000001, "Wrong size on EventContext_IsDoubleClick");
static_assert(offsetof(EventContext_IsDoubleClick, ReturnValue) == 0x000000, "Member 'EventContext_IsDoubleClick::ReturnValue' has a wrong offset!");

// Function FairyGUI.EventContext.IsPropagationStopped
// 0x0001 (0x0001 - 0x0000)
struct EventContext_IsPropagationStopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventContext_IsPropagationStopped) == 0x000001, "Wrong alignment on EventContext_IsPropagationStopped");
static_assert(sizeof(EventContext_IsPropagationStopped) == 0x000001, "Wrong size on EventContext_IsPropagationStopped");
static_assert(offsetof(EventContext_IsPropagationStopped, ReturnValue) == 0x000000, "Member 'EventContext_IsPropagationStopped::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.Get
// 0x0010 (0x0010 - 0x0000)
struct FairyApplication_Get final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFairyApplication*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_Get) == 0x000008, "Wrong alignment on FairyApplication_Get");
static_assert(sizeof(FairyApplication_Get) == 0x000010, "Wrong size on FairyApplication_Get");
static_assert(offsetof(FairyApplication_Get, WorldContextObject) == 0x000000, "Member 'FairyApplication_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FairyApplication_Get, ReturnValue) == 0x000008, "Member 'FairyApplication_Get::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.CancelClick
// 0x0008 (0x0008 - 0x0000)
struct FairyApplication_CancelClick final
{
public:
	int32                                         InUserIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPointerIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_CancelClick) == 0x000004, "Wrong alignment on FairyApplication_CancelClick");
static_assert(sizeof(FairyApplication_CancelClick) == 0x000008, "Wrong size on FairyApplication_CancelClick");
static_assert(offsetof(FairyApplication_CancelClick, InUserIndex) == 0x000000, "Member 'FairyApplication_CancelClick::InUserIndex' has a wrong offset!");
static_assert(offsetof(FairyApplication_CancelClick, InPointerIndex) == 0x000004, "Member 'FairyApplication_CancelClick::InPointerIndex' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetObjectUnderPoint
// 0x0010 (0x0010 - 0x0000)
struct FairyApplication_GetObjectUnderPoint final
{
public:
	struct FVector2D                              ScreenspacePosition;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetObjectUnderPoint) == 0x000008, "Wrong alignment on FairyApplication_GetObjectUnderPoint");
static_assert(sizeof(FairyApplication_GetObjectUnderPoint) == 0x000010, "Wrong size on FairyApplication_GetObjectUnderPoint");
static_assert(offsetof(FairyApplication_GetObjectUnderPoint, ScreenspacePosition) == 0x000000, "Member 'FairyApplication_GetObjectUnderPoint::ScreenspacePosition' has a wrong offset!");
static_assert(offsetof(FairyApplication_GetObjectUnderPoint, ReturnValue) == 0x000008, "Member 'FairyApplication_GetObjectUnderPoint::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetTouchPosition
// 0x0010 (0x0010 - 0x0000)
struct FairyApplication_GetTouchPosition final
{
public:
	int32                                         InUserIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPointerIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetTouchPosition) == 0x000004, "Wrong alignment on FairyApplication_GetTouchPosition");
static_assert(sizeof(FairyApplication_GetTouchPosition) == 0x000010, "Wrong size on FairyApplication_GetTouchPosition");
static_assert(offsetof(FairyApplication_GetTouchPosition, InUserIndex) == 0x000000, "Member 'FairyApplication_GetTouchPosition::InUserIndex' has a wrong offset!");
static_assert(offsetof(FairyApplication_GetTouchPosition, InPointerIndex) == 0x000004, "Member 'FairyApplication_GetTouchPosition::InPointerIndex' has a wrong offset!");
static_assert(offsetof(FairyApplication_GetTouchPosition, ReturnValue) == 0x000008, "Member 'FairyApplication_GetTouchPosition::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.PlaySound
// 0x0018 (0x0018 - 0x0000)
struct FairyApplication_PlaySound final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeScale;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyApplication_PlaySound) == 0x000008, "Wrong alignment on FairyApplication_PlaySound");
static_assert(sizeof(FairyApplication_PlaySound) == 0x000018, "Wrong size on FairyApplication_PlaySound");
static_assert(offsetof(FairyApplication_PlaySound, URL) == 0x000000, "Member 'FairyApplication_PlaySound::URL' has a wrong offset!");
static_assert(offsetof(FairyApplication_PlaySound, VolumeScale) == 0x000010, "Member 'FairyApplication_PlaySound::VolumeScale' has a wrong offset!");

// Function FairyGUI.FairyApplication.SetSoundEnabled
// 0x0001 (0x0001 - 0x0000)
struct FairyApplication_SetSoundEnabled final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_SetSoundEnabled) == 0x000001, "Wrong alignment on FairyApplication_SetSoundEnabled");
static_assert(sizeof(FairyApplication_SetSoundEnabled) == 0x000001, "Wrong size on FairyApplication_SetSoundEnabled");
static_assert(offsetof(FairyApplication_SetSoundEnabled, InEnabled) == 0x000000, "Member 'FairyApplication_SetSoundEnabled::InEnabled' has a wrong offset!");

// Function FairyGUI.FairyApplication.SetSoundVolumeScale
// 0x0004 (0x0004 - 0x0000)
struct FairyApplication_SetSoundVolumeScale final
{
public:
	float                                         InVolumeScale;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_SetSoundVolumeScale) == 0x000004, "Wrong alignment on FairyApplication_SetSoundVolumeScale");
static_assert(sizeof(FairyApplication_SetSoundVolumeScale) == 0x000004, "Wrong size on FairyApplication_SetSoundVolumeScale");
static_assert(offsetof(FairyApplication_SetSoundVolumeScale, InVolumeScale) == 0x000000, "Member 'FairyApplication_SetSoundVolumeScale::InVolumeScale' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetDragDropManager
// 0x0008 (0x0008 - 0x0000)
struct FairyApplication_GetDragDropManager final
{
public:
	class UDragDropManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetDragDropManager) == 0x000008, "Wrong alignment on FairyApplication_GetDragDropManager");
static_assert(sizeof(FairyApplication_GetDragDropManager) == 0x000008, "Wrong size on FairyApplication_GetDragDropManager");
static_assert(offsetof(FairyApplication_GetDragDropManager, ReturnValue) == 0x000000, "Member 'FairyApplication_GetDragDropManager::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetSoundVolumeScale
// 0x0004 (0x0004 - 0x0000)
struct FairyApplication_GetSoundVolumeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetSoundVolumeScale) == 0x000004, "Wrong alignment on FairyApplication_GetSoundVolumeScale");
static_assert(sizeof(FairyApplication_GetSoundVolumeScale) == 0x000004, "Wrong size on FairyApplication_GetSoundVolumeScale");
static_assert(offsetof(FairyApplication_GetSoundVolumeScale, ReturnValue) == 0x000000, "Member 'FairyApplication_GetSoundVolumeScale::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetTouchCount
// 0x0004 (0x0004 - 0x0000)
struct FairyApplication_GetTouchCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetTouchCount) == 0x000004, "Wrong alignment on FairyApplication_GetTouchCount");
static_assert(sizeof(FairyApplication_GetTouchCount) == 0x000004, "Wrong size on FairyApplication_GetTouchCount");
static_assert(offsetof(FairyApplication_GetTouchCount, ReturnValue) == 0x000000, "Member 'FairyApplication_GetTouchCount::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.GetUIRoot
// 0x0008 (0x0008 - 0x0000)
struct FairyApplication_GetUIRoot final
{
public:
	class UGRoot*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_GetUIRoot) == 0x000008, "Wrong alignment on FairyApplication_GetUIRoot");
static_assert(sizeof(FairyApplication_GetUIRoot) == 0x000008, "Wrong size on FairyApplication_GetUIRoot");
static_assert(offsetof(FairyApplication_GetUIRoot, ReturnValue) == 0x000000, "Member 'FairyApplication_GetUIRoot::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyApplication.IsSoundEnabled
// 0x0001 (0x0001 - 0x0000)
struct FairyApplication_IsSoundEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyApplication_IsSoundEnabled) == 0x000001, "Wrong alignment on FairyApplication_IsSoundEnabled");
static_assert(sizeof(FairyApplication_IsSoundEnabled) == 0x000001, "Wrong size on FairyApplication_IsSoundEnabled");
static_assert(offsetof(FairyApplication_IsSoundEnabled, ReturnValue) == 0x000000, "Member 'FairyApplication_IsSoundEnabled::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetUIConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FairyBlueprintLibrary_GetUIConfig final
{
public:
	struct FUIConfig                              ReturnValue;                                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_GetUIConfig) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetUIConfig");
static_assert(sizeof(FairyBlueprintLibrary_GetUIConfig) == 0x0000C0, "Wrong size on FairyBlueprintLibrary_GetUIConfig");
static_assert(offsetof(FairyBlueprintLibrary_GetUIConfig, ReturnValue) == 0x000000, "Member 'FairyBlueprintLibrary_GetUIConfig::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsBool
// 0x0020 (0x0020 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsBool final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsBool) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsBool");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsBool) == 0x000020, "Wrong size on FairyBlueprintLibrary_GetVariantAsBool");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsBool, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsBool::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsBool, ReturnValue) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsBool::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsColor
// 0x0020 (0x0020 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsColor final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsColor) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsColor");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsColor) == 0x000020, "Wrong size on FairyBlueprintLibrary_GetVariantAsColor");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsColor, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsColor::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsColor, ReturnValue) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsFloat
// 0x0020 (0x0020 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsFloat final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsFloat) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsFloat");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsFloat) == 0x000020, "Wrong size on FairyBlueprintLibrary_GetVariantAsFloat");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsFloat, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsFloat::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsFloat, ReturnValue) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsFloat::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsInt
// 0x0020 (0x0020 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsInt final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsInt) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsInt");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsInt) == 0x000020, "Wrong size on FairyBlueprintLibrary_GetVariantAsInt");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsInt, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsInt::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsInt, ReturnValue) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsInt::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsString
// 0x0028 (0x0028 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsString final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsString) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsString");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsString) == 0x000028, "Wrong size on FairyBlueprintLibrary_GetVariantAsString");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsString, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsString::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsString, ReturnValue) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsString::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.GetVariantAsUObject
// 0x0028 (0x0028 - 0x0000)
struct FairyBlueprintLibrary_GetVariantAsUObject final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ClassType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_GetVariantAsUObject) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_GetVariantAsUObject");
static_assert(sizeof(FairyBlueprintLibrary_GetVariantAsUObject) == 0x000028, "Wrong size on FairyBlueprintLibrary_GetVariantAsUObject");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsUObject, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_GetVariantAsUObject::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsUObject, ClassType) == 0x000018, "Member 'FairyBlueprintLibrary_GetVariantAsUObject::ClassType' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_GetVariantAsUObject, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_GetVariantAsUObject::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.KillTween
// 0x0010 (0x0010 - 0x0000)
struct FairyBlueprintLibrary_KillTween final
{
public:
	struct FTweenerHandle                         Handle;                                            // 0x0000(0x0008)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSetComplete;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FairyBlueprintLibrary_KillTween) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_KillTween");
static_assert(sizeof(FairyBlueprintLibrary_KillTween) == 0x000010, "Wrong size on FairyBlueprintLibrary_KillTween");
static_assert(offsetof(FairyBlueprintLibrary_KillTween, Handle) == 0x000000, "Member 'FairyBlueprintLibrary_KillTween::Handle' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_KillTween, bSetComplete) == 0x000008, "Member 'FairyBlueprintLibrary_KillTween::bSetComplete' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetPackageItemExtension
// 0x0018 (0x0018 - 0x0000)
struct FairyBlueprintLibrary_SetPackageItemExtension final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGComponent>                ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetPackageItemExtension) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetPackageItemExtension");
static_assert(sizeof(FairyBlueprintLibrary_SetPackageItemExtension) == 0x000018, "Wrong size on FairyBlueprintLibrary_SetPackageItemExtension");
static_assert(offsetof(FairyBlueprintLibrary_SetPackageItemExtension, URL) == 0x000000, "Member 'FairyBlueprintLibrary_SetPackageItemExtension::URL' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetPackageItemExtension, ClassType) == 0x000010, "Member 'FairyBlueprintLibrary_SetPackageItemExtension::ClassType' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetUIConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FairyBlueprintLibrary_SetUIConfig final
{
public:
	struct FUIConfig                              InConfig;                                          // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetUIConfig) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetUIConfig");
static_assert(sizeof(FairyBlueprintLibrary_SetUIConfig) == 0x0000C0, "Wrong size on FairyBlueprintLibrary_SetUIConfig");
static_assert(offsetof(FairyBlueprintLibrary_SetUIConfig, InConfig) == 0x000000, "Member 'FairyBlueprintLibrary_SetUIConfig::InConfig' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantBool
// 0x0038 (0x0038 - 0x0000)
struct FairyBlueprintLibrary_SetVariantBool final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInValue;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNVariant                              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantBool) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantBool");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantBool) == 0x000038, "Wrong size on FairyBlueprintLibrary_SetVariantBool");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantBool, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantBool::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantBool, bInValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantBool::bInValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantBool, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_SetVariantBool::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantColor
// 0x0038 (0x0038 - 0x0000)
struct FairyBlueprintLibrary_SetVariantColor final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 InValue;                                           // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNVariant                              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantColor) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantColor");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantColor) == 0x000038, "Wrong size on FairyBlueprintLibrary_SetVariantColor");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantColor, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantColor::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantColor, InValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantColor::InValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantColor, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_SetVariantColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantFloat
// 0x0038 (0x0038 - 0x0000)
struct FairyBlueprintLibrary_SetVariantFloat final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNVariant                              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantFloat) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantFloat");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantFloat) == 0x000038, "Wrong size on FairyBlueprintLibrary_SetVariantFloat");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantFloat, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantFloat::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantFloat, InValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantFloat::InValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantFloat, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_SetVariantFloat::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantInt
// 0x0038 (0x0038 - 0x0000)
struct FairyBlueprintLibrary_SetVariantInt final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNVariant                              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantInt) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantInt");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantInt) == 0x000038, "Wrong size on FairyBlueprintLibrary_SetVariantInt");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantInt, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantInt::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantInt, InValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantInt::InValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantInt, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_SetVariantInt::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantString
// 0x0040 (0x0040 - 0x0000)
struct FairyBlueprintLibrary_SetVariantString final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNVariant                              ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantString) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantString");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantString) == 0x000040, "Wrong size on FairyBlueprintLibrary_SetVariantString");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantString, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantString::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantString, InValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantString::InValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantString, ReturnValue) == 0x000028, "Member 'FairyBlueprintLibrary_SetVariantString::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.SetVariantUObject
// 0x0038 (0x0038 - 0x0000)
struct FairyBlueprintLibrary_SetVariantUObject final
{
public:
	struct FNVariant                              InVariant;                                         // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                InValue;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNVariant                              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_SetVariantUObject) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_SetVariantUObject");
static_assert(sizeof(FairyBlueprintLibrary_SetVariantUObject) == 0x000038, "Wrong size on FairyBlueprintLibrary_SetVariantUObject");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantUObject, InVariant) == 0x000000, "Member 'FairyBlueprintLibrary_SetVariantUObject::InVariant' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantUObject, InValue) == 0x000018, "Member 'FairyBlueprintLibrary_SetVariantUObject::InValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_SetVariantUObject, ReturnValue) == 0x000020, "Member 'FairyBlueprintLibrary_SetVariantUObject::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.TweenFloat
// 0x0040 (0x0040 - 0x0000)
struct FairyBlueprintLibrary_TweenFloat final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEaseType                                     EaseType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTweenValue& Value, const struct FTweenValue& DeltaValue)> OnUpdate; // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnComplete;                                        // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTweenerHandle                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_TweenFloat) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_TweenFloat");
static_assert(sizeof(FairyBlueprintLibrary_TweenFloat) == 0x000040, "Wrong size on FairyBlueprintLibrary_TweenFloat");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, StartValue) == 0x000000, "Member 'FairyBlueprintLibrary_TweenFloat::StartValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, EndValue) == 0x000004, "Member 'FairyBlueprintLibrary_TweenFloat::EndValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, EaseType) == 0x000008, "Member 'FairyBlueprintLibrary_TweenFloat::EaseType' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, Duration) == 0x00000C, "Member 'FairyBlueprintLibrary_TweenFloat::Duration' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, Repeat) == 0x000010, "Member 'FairyBlueprintLibrary_TweenFloat::Repeat' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, OnUpdate) == 0x000014, "Member 'FairyBlueprintLibrary_TweenFloat::OnUpdate' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, OnComplete) == 0x000024, "Member 'FairyBlueprintLibrary_TweenFloat::OnComplete' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenFloat, ReturnValue) == 0x000038, "Member 'FairyBlueprintLibrary_TweenFloat::ReturnValue' has a wrong offset!");

// Function FairyGUI.FairyBlueprintLibrary.TweenVector2
// 0x0048 (0x0048 - 0x0000)
struct FairyBlueprintLibrary_TweenVector2 final
{
public:
	struct FVector2D                              StartValue;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndValue;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEaseType                                     EaseType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTweenValue& Value, const struct FTweenValue& DeltaValue)> OnUpdate; // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnComplete;                                        // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTweenerHandle                         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FairyBlueprintLibrary_TweenVector2) == 0x000008, "Wrong alignment on FairyBlueprintLibrary_TweenVector2");
static_assert(sizeof(FairyBlueprintLibrary_TweenVector2) == 0x000048, "Wrong size on FairyBlueprintLibrary_TweenVector2");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, StartValue) == 0x000000, "Member 'FairyBlueprintLibrary_TweenVector2::StartValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, EndValue) == 0x000008, "Member 'FairyBlueprintLibrary_TweenVector2::EndValue' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, EaseType) == 0x000010, "Member 'FairyBlueprintLibrary_TweenVector2::EaseType' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, Duration) == 0x000014, "Member 'FairyBlueprintLibrary_TweenVector2::Duration' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, Repeat) == 0x000018, "Member 'FairyBlueprintLibrary_TweenVector2::Repeat' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, OnUpdate) == 0x00001C, "Member 'FairyBlueprintLibrary_TweenVector2::OnUpdate' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, OnComplete) == 0x00002C, "Member 'FairyBlueprintLibrary_TweenVector2::OnComplete' has a wrong offset!");
static_assert(offsetof(FairyBlueprintLibrary_TweenVector2, ReturnValue) == 0x000040, "Member 'FairyBlueprintLibrary_TweenVector2::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetDraggingObject
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetDraggingObject final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetDraggingObject) == 0x000008, "Wrong alignment on GObject_GetDraggingObject");
static_assert(sizeof(GObject_GetDraggingObject) == 0x000008, "Wrong size on GObject_GetDraggingObject");
static_assert(offsetof(GObject_GetDraggingObject, ReturnValue) == 0x000000, "Member 'GObject_GetDraggingObject::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.AddRelation
// 0x0010 (0x0010 - 0x0000)
struct GObject_AddRelation final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationType                                 RelationType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePercent;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GObject_AddRelation) == 0x000008, "Wrong alignment on GObject_AddRelation");
static_assert(sizeof(GObject_AddRelation) == 0x000010, "Wrong size on GObject_AddRelation");
static_assert(offsetof(GObject_AddRelation, Obj) == 0x000000, "Member 'GObject_AddRelation::Obj' has a wrong offset!");
static_assert(offsetof(GObject_AddRelation, RelationType) == 0x000008, "Member 'GObject_AddRelation::RelationType' has a wrong offset!");
static_assert(offsetof(GObject_AddRelation, bUsePercent) == 0x000009, "Member 'GObject_AddRelation::bUsePercent' has a wrong offset!");

// Function FairyGUI.GObject.Center
// 0x0001 (0x0001 - 0x0000)
struct GObject_Center final
{
public:
	bool                                          bRestraint;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_Center) == 0x000001, "Wrong alignment on GObject_Center");
static_assert(sizeof(GObject_Center) == 0x000001, "Wrong size on GObject_Center");
static_assert(offsetof(GObject_Center, bRestraint) == 0x000000, "Member 'GObject_Center::bRestraint' has a wrong offset!");

// Function FairyGUI.GObject.GlobalToLocal
// 0x0010 (0x0010 - 0x0000)
struct GObject_GlobalToLocal final
{
public:
	struct FVector2D                              InPoint;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GlobalToLocal) == 0x000004, "Wrong alignment on GObject_GlobalToLocal");
static_assert(sizeof(GObject_GlobalToLocal) == 0x000010, "Wrong size on GObject_GlobalToLocal");
static_assert(offsetof(GObject_GlobalToLocal, InPoint) == 0x000000, "Member 'GObject_GlobalToLocal::InPoint' has a wrong offset!");
static_assert(offsetof(GObject_GlobalToLocal, ReturnValue) == 0x000008, "Member 'GObject_GlobalToLocal::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GlobalToLocalRect
// 0x0028 (0x0028 - 0x0000)
struct GObject_GlobalToLocalRect final
{
public:
	struct FBox2D                                 InRect;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GlobalToLocalRect) == 0x000004, "Wrong alignment on GObject_GlobalToLocalRect");
static_assert(sizeof(GObject_GlobalToLocalRect) == 0x000028, "Wrong size on GObject_GlobalToLocalRect");
static_assert(offsetof(GObject_GlobalToLocalRect, InRect) == 0x000000, "Member 'GObject_GlobalToLocalRect::InRect' has a wrong offset!");
static_assert(offsetof(GObject_GlobalToLocalRect, ReturnValue) == 0x000014, "Member 'GObject_GlobalToLocalRect::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.LocalToGlobal
// 0x0010 (0x0010 - 0x0000)
struct GObject_LocalToGlobal final
{
public:
	struct FVector2D                              InPoint;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_LocalToGlobal) == 0x000004, "Wrong alignment on GObject_LocalToGlobal");
static_assert(sizeof(GObject_LocalToGlobal) == 0x000010, "Wrong size on GObject_LocalToGlobal");
static_assert(offsetof(GObject_LocalToGlobal, InPoint) == 0x000000, "Member 'GObject_LocalToGlobal::InPoint' has a wrong offset!");
static_assert(offsetof(GObject_LocalToGlobal, ReturnValue) == 0x000008, "Member 'GObject_LocalToGlobal::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.LocalToGlobalRect
// 0x0028 (0x0028 - 0x0000)
struct GObject_LocalToGlobalRect final
{
public:
	struct FBox2D                                 InRect;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_LocalToGlobalRect) == 0x000004, "Wrong alignment on GObject_LocalToGlobalRect");
static_assert(sizeof(GObject_LocalToGlobalRect) == 0x000028, "Wrong size on GObject_LocalToGlobalRect");
static_assert(offsetof(GObject_LocalToGlobalRect, InRect) == 0x000000, "Member 'GObject_LocalToGlobalRect::InRect' has a wrong offset!");
static_assert(offsetof(GObject_LocalToGlobalRect, ReturnValue) == 0x000014, "Member 'GObject_LocalToGlobalRect::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.LocalToRoot
// 0x0010 (0x0010 - 0x0000)
struct GObject_LocalToRoot final
{
public:
	struct FVector2D                              InPoint;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_LocalToRoot) == 0x000004, "Wrong alignment on GObject_LocalToRoot");
static_assert(sizeof(GObject_LocalToRoot) == 0x000010, "Wrong size on GObject_LocalToRoot");
static_assert(offsetof(GObject_LocalToRoot, InPoint) == 0x000000, "Member 'GObject_LocalToRoot::InPoint' has a wrong offset!");
static_assert(offsetof(GObject_LocalToRoot, ReturnValue) == 0x000008, "Member 'GObject_LocalToRoot::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.LocalToRootRect
// 0x0028 (0x0028 - 0x0000)
struct GObject_LocalToRootRect final
{
public:
	struct FBox2D                                 InRect;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_LocalToRootRect) == 0x000004, "Wrong alignment on GObject_LocalToRootRect");
static_assert(sizeof(GObject_LocalToRootRect) == 0x000028, "Wrong size on GObject_LocalToRootRect");
static_assert(offsetof(GObject_LocalToRootRect, InRect) == 0x000000, "Member 'GObject_LocalToRootRect::InRect' has a wrong offset!");
static_assert(offsetof(GObject_LocalToRootRect, ReturnValue) == 0x000014, "Member 'GObject_LocalToRootRect::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.MakeFullScreen
// 0x0001 (0x0001 - 0x0000)
struct GObject_MakeFullScreen final
{
public:
	bool                                          bRestraint;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_MakeFullScreen) == 0x000001, "Wrong alignment on GObject_MakeFullScreen");
static_assert(sizeof(GObject_MakeFullScreen) == 0x000001, "Wrong size on GObject_MakeFullScreen");
static_assert(offsetof(GObject_MakeFullScreen, bRestraint) == 0x000000, "Member 'GObject_MakeFullScreen::bRestraint' has a wrong offset!");

// Function FairyGUI.GObject.OnRollOutHandler
// 0x0008 (0x0008 - 0x0000)
struct GObject_OnRollOutHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnRollOutHandler) == 0x000008, "Wrong alignment on GObject_OnRollOutHandler");
static_assert(sizeof(GObject_OnRollOutHandler) == 0x000008, "Wrong size on GObject_OnRollOutHandler");
static_assert(offsetof(GObject_OnRollOutHandler, Context) == 0x000000, "Member 'GObject_OnRollOutHandler::Context' has a wrong offset!");

// Function FairyGUI.GObject.OnRollOverHandler
// 0x0008 (0x0008 - 0x0000)
struct GObject_OnRollOverHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnRollOverHandler) == 0x000008, "Wrong alignment on GObject_OnRollOverHandler");
static_assert(sizeof(GObject_OnRollOverHandler) == 0x000008, "Wrong size on GObject_OnRollOverHandler");
static_assert(offsetof(GObject_OnRollOverHandler, Context) == 0x000000, "Member 'GObject_OnRollOverHandler::Context' has a wrong offset!");

// Function FairyGUI.GObject.OnTouchBeginHandler
// 0x0008 (0x0008 - 0x0000)
struct GObject_OnTouchBeginHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnTouchBeginHandler) == 0x000008, "Wrong alignment on GObject_OnTouchBeginHandler");
static_assert(sizeof(GObject_OnTouchBeginHandler) == 0x000008, "Wrong size on GObject_OnTouchBeginHandler");
static_assert(offsetof(GObject_OnTouchBeginHandler, Context) == 0x000000, "Member 'GObject_OnTouchBeginHandler::Context' has a wrong offset!");

// Function FairyGUI.GObject.OnTouchEndHandler
// 0x0008 (0x0008 - 0x0000)
struct GObject_OnTouchEndHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnTouchEndHandler) == 0x000008, "Wrong alignment on GObject_OnTouchEndHandler");
static_assert(sizeof(GObject_OnTouchEndHandler) == 0x000008, "Wrong size on GObject_OnTouchEndHandler");
static_assert(offsetof(GObject_OnTouchEndHandler, Context) == 0x000000, "Member 'GObject_OnTouchEndHandler::Context' has a wrong offset!");

// Function FairyGUI.GObject.OnTouchMoveHandler
// 0x0008 (0x0008 - 0x0000)
struct GObject_OnTouchMoveHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnTouchMoveHandler) == 0x000008, "Wrong alignment on GObject_OnTouchMoveHandler");
static_assert(sizeof(GObject_OnTouchMoveHandler) == 0x000008, "Wrong size on GObject_OnTouchMoveHandler");
static_assert(offsetof(GObject_OnTouchMoveHandler, Context) == 0x000000, "Member 'GObject_OnTouchMoveHandler::Context' has a wrong offset!");

// Function FairyGUI.GObject.RemoveRelation
// 0x0010 (0x0010 - 0x0000)
struct GObject_RemoveRelation final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationType                                 RelationType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GObject_RemoveRelation) == 0x000008, "Wrong alignment on GObject_RemoveRelation");
static_assert(sizeof(GObject_RemoveRelation) == 0x000010, "Wrong size on GObject_RemoveRelation");
static_assert(offsetof(GObject_RemoveRelation, Obj) == 0x000000, "Member 'GObject_RemoveRelation::Obj' has a wrong offset!");
static_assert(offsetof(GObject_RemoveRelation, RelationType) == 0x000008, "Member 'GObject_RemoveRelation::RelationType' has a wrong offset!");

// Function FairyGUI.GObject.RootToLocal
// 0x0010 (0x0010 - 0x0000)
struct GObject_RootToLocal final
{
public:
	struct FVector2D                              InPoint;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_RootToLocal) == 0x000004, "Wrong alignment on GObject_RootToLocal");
static_assert(sizeof(GObject_RootToLocal) == 0x000010, "Wrong size on GObject_RootToLocal");
static_assert(offsetof(GObject_RootToLocal, InPoint) == 0x000000, "Member 'GObject_RootToLocal::InPoint' has a wrong offset!");
static_assert(offsetof(GObject_RootToLocal, ReturnValue) == 0x000008, "Member 'GObject_RootToLocal::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.RootToLocalRect
// 0x0028 (0x0028 - 0x0000)
struct GObject_RootToLocalRect final
{
public:
	struct FBox2D                                 InRect;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_RootToLocalRect) == 0x000004, "Wrong alignment on GObject_RootToLocalRect");
static_assert(sizeof(GObject_RootToLocalRect) == 0x000028, "Wrong size on GObject_RootToLocalRect");
static_assert(offsetof(GObject_RootToLocalRect, InRect) == 0x000000, "Member 'GObject_RootToLocalRect::InRect' has a wrong offset!");
static_assert(offsetof(GObject_RootToLocalRect, ReturnValue) == 0x000014, "Member 'GObject_RootToLocalRect::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetAlpha final
{
public:
	float                                         InAlpha;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetAlpha) == 0x000004, "Wrong alignment on GObject_SetAlpha");
static_assert(sizeof(GObject_SetAlpha) == 0x000004, "Wrong size on GObject_SetAlpha");
static_assert(offsetof(GObject_SetAlpha, InAlpha) == 0x000000, "Member 'GObject_SetAlpha::InAlpha' has a wrong offset!");

// Function FairyGUI.GObject.SetDragBounds
// 0x0014 (0x0014 - 0x0000)
struct GObject_SetDragBounds final
{
public:
	struct FBox2D                                 InBounds;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetDragBounds) == 0x000004, "Wrong alignment on GObject_SetDragBounds");
static_assert(sizeof(GObject_SetDragBounds) == 0x000014, "Wrong size on GObject_SetDragBounds");
static_assert(offsetof(GObject_SetDragBounds, InBounds) == 0x000000, "Member 'GObject_SetDragBounds::InBounds' has a wrong offset!");

// Function FairyGUI.GObject.SetDraggable
// 0x0001 (0x0001 - 0x0000)
struct GObject_SetDraggable final
{
public:
	bool                                          bInDraggable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetDraggable) == 0x000001, "Wrong alignment on GObject_SetDraggable");
static_assert(sizeof(GObject_SetDraggable) == 0x000001, "Wrong size on GObject_SetDraggable");
static_assert(offsetof(GObject_SetDraggable, bInDraggable) == 0x000000, "Member 'GObject_SetDraggable::bInDraggable' has a wrong offset!");

// Function FairyGUI.GObject.SetGrayed
// 0x0001 (0x0001 - 0x0000)
struct GObject_SetGrayed final
{
public:
	bool                                          bInGrayed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetGrayed) == 0x000001, "Wrong alignment on GObject_SetGrayed");
static_assert(sizeof(GObject_SetGrayed) == 0x000001, "Wrong size on GObject_SetGrayed");
static_assert(offsetof(GObject_SetGrayed, bInGrayed) == 0x000000, "Member 'GObject_SetGrayed::bInGrayed' has a wrong offset!");

// Function FairyGUI.GObject.SetGroup
// 0x0008 (0x0008 - 0x0000)
struct GObject_SetGroup final
{
public:
	class UGGroup*                                InGroup;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetGroup) == 0x000008, "Wrong alignment on GObject_SetGroup");
static_assert(sizeof(GObject_SetGroup) == 0x000008, "Wrong size on GObject_SetGroup");
static_assert(offsetof(GObject_SetGroup, InGroup) == 0x000000, "Member 'GObject_SetGroup::InGroup' has a wrong offset!");

// Function FairyGUI.GObject.SetHeight
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetHeight final
{
public:
	float                                         InHeight;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetHeight) == 0x000004, "Wrong alignment on GObject_SetHeight");
static_assert(sizeof(GObject_SetHeight) == 0x000004, "Wrong size on GObject_SetHeight");
static_assert(offsetof(GObject_SetHeight, InHeight) == 0x000000, "Member 'GObject_SetHeight::InHeight' has a wrong offset!");

// Function FairyGUI.GObject.SetIcon
// 0x0010 (0x0010 - 0x0000)
struct GObject_SetIcon final
{
public:
	class FString                                 InIcon;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetIcon) == 0x000008, "Wrong alignment on GObject_SetIcon");
static_assert(sizeof(GObject_SetIcon) == 0x000010, "Wrong size on GObject_SetIcon");
static_assert(offsetof(GObject_SetIcon, InIcon) == 0x000000, "Member 'GObject_SetIcon::InIcon' has a wrong offset!");

// Function FairyGUI.GObject.SetParent
// 0x0008 (0x0008 - 0x0000)
struct GObject_SetParent final
{
public:
	class UGObject*                               InParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetParent) == 0x000008, "Wrong alignment on GObject_SetParent");
static_assert(sizeof(GObject_SetParent) == 0x000008, "Wrong size on GObject_SetParent");
static_assert(offsetof(GObject_SetParent, InParent) == 0x000000, "Member 'GObject_SetParent::InParent' has a wrong offset!");

// Function FairyGUI.GObject.SetPivot
// 0x000C (0x000C - 0x0000)
struct GObject_SetPivot final
{
public:
	struct FVector2D                              InPivot;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsAnchor;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GObject_SetPivot) == 0x000004, "Wrong alignment on GObject_SetPivot");
static_assert(sizeof(GObject_SetPivot) == 0x00000C, "Wrong size on GObject_SetPivot");
static_assert(offsetof(GObject_SetPivot, InPivot) == 0x000000, "Member 'GObject_SetPivot::InPivot' has a wrong offset!");
static_assert(offsetof(GObject_SetPivot, bAsAnchor) == 0x000008, "Member 'GObject_SetPivot::bAsAnchor' has a wrong offset!");

// Function FairyGUI.GObject.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct GObject_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetPosition) == 0x000004, "Wrong alignment on GObject_SetPosition");
static_assert(sizeof(GObject_SetPosition) == 0x000008, "Wrong size on GObject_SetPosition");
static_assert(offsetof(GObject_SetPosition, InPosition) == 0x000000, "Member 'GObject_SetPosition::InPosition' has a wrong offset!");

// Function FairyGUI.GObject.SetRotation
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetRotation final
{
public:
	float                                         InRotation;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetRotation) == 0x000004, "Wrong alignment on GObject_SetRotation");
static_assert(sizeof(GObject_SetRotation) == 0x000004, "Wrong size on GObject_SetRotation");
static_assert(offsetof(GObject_SetRotation, InRotation) == 0x000000, "Member 'GObject_SetRotation::InRotation' has a wrong offset!");

// Function FairyGUI.GObject.SetScale
// 0x0008 (0x0008 - 0x0000)
struct GObject_SetScale final
{
public:
	struct FVector2D                              InScale;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetScale) == 0x000004, "Wrong alignment on GObject_SetScale");
static_assert(sizeof(GObject_SetScale) == 0x000008, "Wrong size on GObject_SetScale");
static_assert(offsetof(GObject_SetScale, InScale) == 0x000000, "Member 'GObject_SetScale::InScale' has a wrong offset!");

// Function FairyGUI.GObject.SetScaleX
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetScaleX final
{
public:
	float                                         InScaleX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetScaleX) == 0x000004, "Wrong alignment on GObject_SetScaleX");
static_assert(sizeof(GObject_SetScaleX) == 0x000004, "Wrong size on GObject_SetScaleX");
static_assert(offsetof(GObject_SetScaleX, InScaleX) == 0x000000, "Member 'GObject_SetScaleX::InScaleX' has a wrong offset!");

// Function FairyGUI.GObject.SetScaleY
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetScaleY final
{
public:
	float                                         InScaleY;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetScaleY) == 0x000004, "Wrong alignment on GObject_SetScaleY");
static_assert(sizeof(GObject_SetScaleY) == 0x000004, "Wrong size on GObject_SetScaleY");
static_assert(offsetof(GObject_SetScaleY, InScaleY) == 0x000000, "Member 'GObject_SetScaleY::InScaleY' has a wrong offset!");

// Function FairyGUI.GObject.SetSize
// 0x000C (0x000C - 0x0000)
struct GObject_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePivot;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GObject_SetSize) == 0x000004, "Wrong alignment on GObject_SetSize");
static_assert(sizeof(GObject_SetSize) == 0x00000C, "Wrong size on GObject_SetSize");
static_assert(offsetof(GObject_SetSize, InSize) == 0x000000, "Member 'GObject_SetSize::InSize' has a wrong offset!");
static_assert(offsetof(GObject_SetSize, bIgnorePivot) == 0x000008, "Member 'GObject_SetSize::bIgnorePivot' has a wrong offset!");

// Function FairyGUI.GObject.SetSkew
// 0x0008 (0x0008 - 0x0000)
struct GObject_SetSkew final
{
public:
	struct FVector2D                              InSkew;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetSkew) == 0x000004, "Wrong alignment on GObject_SetSkew");
static_assert(sizeof(GObject_SetSkew) == 0x000008, "Wrong size on GObject_SetSkew");
static_assert(offsetof(GObject_SetSkew, InSkew) == 0x000000, "Member 'GObject_SetSkew::InSkew' has a wrong offset!");

// Function FairyGUI.GObject.SetSortingOrder
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetSortingOrder final
{
public:
	int32                                         InSortingOrder;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetSortingOrder) == 0x000004, "Wrong alignment on GObject_SetSortingOrder");
static_assert(sizeof(GObject_SetSortingOrder) == 0x000004, "Wrong size on GObject_SetSortingOrder");
static_assert(offsetof(GObject_SetSortingOrder, InSortingOrder) == 0x000000, "Member 'GObject_SetSortingOrder::InSortingOrder' has a wrong offset!");

// Function FairyGUI.GObject.SetText
// 0x0010 (0x0010 - 0x0000)
struct GObject_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetText) == 0x000008, "Wrong alignment on GObject_SetText");
static_assert(sizeof(GObject_SetText) == 0x000010, "Wrong size on GObject_SetText");
static_assert(offsetof(GObject_SetText, InText) == 0x000000, "Member 'GObject_SetText::InText' has a wrong offset!");

// Function FairyGUI.GObject.SetTooltips
// 0x0010 (0x0010 - 0x0000)
struct GObject_SetTooltips final
{
public:
	class FString                                 InTooltips;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetTooltips) == 0x000008, "Wrong alignment on GObject_SetTooltips");
static_assert(sizeof(GObject_SetTooltips) == 0x000010, "Wrong size on GObject_SetTooltips");
static_assert(offsetof(GObject_SetTooltips, InTooltips) == 0x000000, "Member 'GObject_SetTooltips::InTooltips' has a wrong offset!");

// Function FairyGUI.GObject.SetTouchable
// 0x0001 (0x0001 - 0x0000)
struct GObject_SetTouchable final
{
public:
	bool                                          bInTouchable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetTouchable) == 0x000001, "Wrong alignment on GObject_SetTouchable");
static_assert(sizeof(GObject_SetTouchable) == 0x000001, "Wrong size on GObject_SetTouchable");
static_assert(offsetof(GObject_SetTouchable, bInTouchable) == 0x000000, "Member 'GObject_SetTouchable::bInTouchable' has a wrong offset!");

// Function FairyGUI.GObject.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct GObject_SetVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetVisible) == 0x000001, "Wrong alignment on GObject_SetVisible");
static_assert(sizeof(GObject_SetVisible) == 0x000001, "Wrong size on GObject_SetVisible");
static_assert(offsetof(GObject_SetVisible, bInVisible) == 0x000000, "Member 'GObject_SetVisible::bInVisible' has a wrong offset!");

// Function FairyGUI.GObject.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetWidth final
{
public:
	float                                         InWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetWidth) == 0x000004, "Wrong alignment on GObject_SetWidth");
static_assert(sizeof(GObject_SetWidth) == 0x000004, "Wrong size on GObject_SetWidth");
static_assert(offsetof(GObject_SetWidth, InWidth) == 0x000000, "Member 'GObject_SetWidth::InWidth' has a wrong offset!");

// Function FairyGUI.GObject.SetX
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetX final
{
public:
	float                                         InX;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetX) == 0x000004, "Wrong alignment on GObject_SetX");
static_assert(sizeof(GObject_SetX) == 0x000004, "Wrong size on GObject_SetX");
static_assert(offsetof(GObject_SetX, InX) == 0x000000, "Member 'GObject_SetX::InX' has a wrong offset!");

// Function FairyGUI.GObject.SetXMin
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetXMin final
{
public:
	float                                         InXMin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetXMin) == 0x000004, "Wrong alignment on GObject_SetXMin");
static_assert(sizeof(GObject_SetXMin) == 0x000004, "Wrong size on GObject_SetXMin");
static_assert(offsetof(GObject_SetXMin, InXMin) == 0x000000, "Member 'GObject_SetXMin::InXMin' has a wrong offset!");

// Function FairyGUI.GObject.SetY
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetY final
{
public:
	float                                         InY;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetY) == 0x000004, "Wrong alignment on GObject_SetY");
static_assert(sizeof(GObject_SetY) == 0x000004, "Wrong size on GObject_SetY");
static_assert(offsetof(GObject_SetY, InY) == 0x000000, "Member 'GObject_SetY::InY' has a wrong offset!");

// Function FairyGUI.GObject.SetYMin
// 0x0004 (0x0004 - 0x0000)
struct GObject_SetYMin final
{
public:
	float                                         InYMin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_SetYMin) == 0x000004, "Wrong alignment on GObject_SetYMin");
static_assert(sizeof(GObject_SetYMin) == 0x000004, "Wrong size on GObject_SetYMin");
static_assert(offsetof(GObject_SetYMin, InYMin) == 0x000000, "Member 'GObject_SetYMin::InYMin' has a wrong offset!");

// Function FairyGUI.GObject.StartDrag
// 0x0008 (0x0008 - 0x0000)
struct GObject_StartDrag final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointerIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_StartDrag) == 0x000004, "Wrong alignment on GObject_StartDrag");
static_assert(sizeof(GObject_StartDrag) == 0x000008, "Wrong size on GObject_StartDrag");
static_assert(offsetof(GObject_StartDrag, UserIndex) == 0x000000, "Member 'GObject_StartDrag::UserIndex' has a wrong offset!");
static_assert(offsetof(GObject_StartDrag, PointerIndex) == 0x000004, "Member 'GObject_StartDrag::PointerIndex' has a wrong offset!");

// Function FairyGUI.GObject.CastTo
// 0x0010 (0x0010 - 0x0000)
struct GObject_CastTo final
{
public:
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_CastTo) == 0x000008, "Wrong alignment on GObject_CastTo");
static_assert(sizeof(GObject_CastTo) == 0x000010, "Wrong size on GObject_CastTo");
static_assert(offsetof(GObject_CastTo, ClassType) == 0x000000, "Member 'GObject_CastTo::ClassType' has a wrong offset!");
static_assert(offsetof(GObject_CastTo, ReturnValue) == 0x000008, "Member 'GObject_CastTo::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetAlpha) == 0x000004, "Wrong alignment on GObject_GetAlpha");
static_assert(sizeof(GObject_GetAlpha) == 0x000004, "Wrong size on GObject_GetAlpha");
static_assert(offsetof(GObject_GetAlpha, ReturnValue) == 0x000000, "Member 'GObject_GetAlpha::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetApp
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetApp final
{
public:
	class UFairyApplication*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetApp) == 0x000008, "Wrong alignment on GObject_GetApp");
static_assert(sizeof(GObject_GetApp) == 0x000008, "Wrong size on GObject_GetApp");
static_assert(offsetof(GObject_GetApp, ReturnValue) == 0x000000, "Member 'GObject_GetApp::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetDragBounds
// 0x0014 (0x0014 - 0x0000)
struct GObject_GetDragBounds final
{
public:
	struct FBox2D                                 ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetDragBounds) == 0x000004, "Wrong alignment on GObject_GetDragBounds");
static_assert(sizeof(GObject_GetDragBounds) == 0x000014, "Wrong size on GObject_GetDragBounds");
static_assert(offsetof(GObject_GetDragBounds, ReturnValue) == 0x000000, "Member 'GObject_GetDragBounds::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetGroup
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetGroup final
{
public:
	class UGGroup*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetGroup) == 0x000008, "Wrong alignment on GObject_GetGroup");
static_assert(sizeof(GObject_GetGroup) == 0x000008, "Wrong size on GObject_GetGroup");
static_assert(offsetof(GObject_GetGroup, ReturnValue) == 0x000000, "Member 'GObject_GetGroup::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetHeight) == 0x000004, "Wrong alignment on GObject_GetHeight");
static_assert(sizeof(GObject_GetHeight) == 0x000004, "Wrong size on GObject_GetHeight");
static_assert(offsetof(GObject_GetHeight, ReturnValue) == 0x000000, "Member 'GObject_GetHeight::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetIcon
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetIcon final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetIcon) == 0x000008, "Wrong alignment on GObject_GetIcon");
static_assert(sizeof(GObject_GetIcon) == 0x000010, "Wrong size on GObject_GetIcon");
static_assert(offsetof(GObject_GetIcon, ReturnValue) == 0x000000, "Member 'GObject_GetIcon::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetPackageName
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetPackageName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetPackageName) == 0x000008, "Wrong alignment on GObject_GetPackageName");
static_assert(sizeof(GObject_GetPackageName) == 0x000010, "Wrong size on GObject_GetPackageName");
static_assert(offsetof(GObject_GetPackageName, ReturnValue) == 0x000000, "Member 'GObject_GetPackageName::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetParent
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetParent final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetParent) == 0x000008, "Wrong alignment on GObject_GetParent");
static_assert(sizeof(GObject_GetParent) == 0x000008, "Wrong size on GObject_GetParent");
static_assert(offsetof(GObject_GetParent, ReturnValue) == 0x000000, "Member 'GObject_GetParent::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetPivot
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetPivot final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetPivot) == 0x000004, "Wrong alignment on GObject_GetPivot");
static_assert(sizeof(GObject_GetPivot) == 0x000008, "Wrong size on GObject_GetPivot");
static_assert(offsetof(GObject_GetPivot, ReturnValue) == 0x000000, "Member 'GObject_GetPivot::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetPosition) == 0x000004, "Wrong alignment on GObject_GetPosition");
static_assert(sizeof(GObject_GetPosition) == 0x000008, "Wrong size on GObject_GetPosition");
static_assert(offsetof(GObject_GetPosition, ReturnValue) == 0x000000, "Member 'GObject_GetPosition::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetResourceName
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetResourceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetResourceName) == 0x000008, "Wrong alignment on GObject_GetResourceName");
static_assert(sizeof(GObject_GetResourceName) == 0x000010, "Wrong size on GObject_GetResourceName");
static_assert(offsetof(GObject_GetResourceName, ReturnValue) == 0x000000, "Member 'GObject_GetResourceName::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetResourceURL
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetResourceURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetResourceURL) == 0x000008, "Wrong alignment on GObject_GetResourceURL");
static_assert(sizeof(GObject_GetResourceURL) == 0x000010, "Wrong size on GObject_GetResourceURL");
static_assert(offsetof(GObject_GetResourceURL, ReturnValue) == 0x000000, "Member 'GObject_GetResourceURL::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetRotation
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetRotation) == 0x000004, "Wrong alignment on GObject_GetRotation");
static_assert(sizeof(GObject_GetRotation) == 0x000004, "Wrong size on GObject_GetRotation");
static_assert(offsetof(GObject_GetRotation, ReturnValue) == 0x000000, "Member 'GObject_GetRotation::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetScale
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetScale) == 0x000004, "Wrong alignment on GObject_GetScale");
static_assert(sizeof(GObject_GetScale) == 0x000008, "Wrong size on GObject_GetScale");
static_assert(offsetof(GObject_GetScale, ReturnValue) == 0x000000, "Member 'GObject_GetScale::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetScaleX
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetScaleX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetScaleX) == 0x000004, "Wrong alignment on GObject_GetScaleX");
static_assert(sizeof(GObject_GetScaleX) == 0x000004, "Wrong size on GObject_GetScaleX");
static_assert(offsetof(GObject_GetScaleX, ReturnValue) == 0x000000, "Member 'GObject_GetScaleX::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetScaleY
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetScaleY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetScaleY) == 0x000004, "Wrong alignment on GObject_GetScaleY");
static_assert(sizeof(GObject_GetScaleY) == 0x000004, "Wrong size on GObject_GetScaleY");
static_assert(offsetof(GObject_GetScaleY, ReturnValue) == 0x000000, "Member 'GObject_GetScaleY::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetSize
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetSize) == 0x000004, "Wrong alignment on GObject_GetSize");
static_assert(sizeof(GObject_GetSize) == 0x000008, "Wrong size on GObject_GetSize");
static_assert(offsetof(GObject_GetSize, ReturnValue) == 0x000000, "Member 'GObject_GetSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetSkew
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetSkew final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetSkew) == 0x000004, "Wrong alignment on GObject_GetSkew");
static_assert(sizeof(GObject_GetSkew) == 0x000008, "Wrong size on GObject_GetSkew");
static_assert(offsetof(GObject_GetSkew, ReturnValue) == 0x000000, "Member 'GObject_GetSkew::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetSortingOrder
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetSortingOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetSortingOrder) == 0x000004, "Wrong alignment on GObject_GetSortingOrder");
static_assert(sizeof(GObject_GetSortingOrder) == 0x000004, "Wrong size on GObject_GetSortingOrder");
static_assert(offsetof(GObject_GetSortingOrder, ReturnValue) == 0x000000, "Member 'GObject_GetSortingOrder::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetText
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetText) == 0x000008, "Wrong alignment on GObject_GetText");
static_assert(sizeof(GObject_GetText) == 0x000010, "Wrong size on GObject_GetText");
static_assert(offsetof(GObject_GetText, ReturnValue) == 0x000000, "Member 'GObject_GetText::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetTooltips
// 0x0010 (0x0010 - 0x0000)
struct GObject_GetTooltips final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetTooltips) == 0x000008, "Wrong alignment on GObject_GetTooltips");
static_assert(sizeof(GObject_GetTooltips) == 0x000010, "Wrong size on GObject_GetTooltips");
static_assert(offsetof(GObject_GetTooltips, ReturnValue) == 0x000000, "Member 'GObject_GetTooltips::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetTreeNode
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetTreeNode final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetTreeNode) == 0x000008, "Wrong alignment on GObject_GetTreeNode");
static_assert(sizeof(GObject_GetTreeNode) == 0x000008, "Wrong size on GObject_GetTreeNode");
static_assert(offsetof(GObject_GetTreeNode, ReturnValue) == 0x000000, "Member 'GObject_GetTreeNode::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetUIRoot
// 0x0008 (0x0008 - 0x0000)
struct GObject_GetUIRoot final
{
public:
	class UGRoot*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetUIRoot) == 0x000008, "Wrong alignment on GObject_GetUIRoot");
static_assert(sizeof(GObject_GetUIRoot) == 0x000008, "Wrong size on GObject_GetUIRoot");
static_assert(offsetof(GObject_GetUIRoot, ReturnValue) == 0x000000, "Member 'GObject_GetUIRoot::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetWidth) == 0x000004, "Wrong alignment on GObject_GetWidth");
static_assert(sizeof(GObject_GetWidth) == 0x000004, "Wrong size on GObject_GetWidth");
static_assert(offsetof(GObject_GetWidth, ReturnValue) == 0x000000, "Member 'GObject_GetWidth::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetX
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetX) == 0x000004, "Wrong alignment on GObject_GetX");
static_assert(sizeof(GObject_GetX) == 0x000004, "Wrong size on GObject_GetX");
static_assert(offsetof(GObject_GetX, ReturnValue) == 0x000000, "Member 'GObject_GetX::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetXMin
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetXMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetXMin) == 0x000004, "Wrong alignment on GObject_GetXMin");
static_assert(sizeof(GObject_GetXMin) == 0x000004, "Wrong size on GObject_GetXMin");
static_assert(offsetof(GObject_GetXMin, ReturnValue) == 0x000000, "Member 'GObject_GetXMin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetY
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetY) == 0x000004, "Wrong alignment on GObject_GetY");
static_assert(sizeof(GObject_GetY) == 0x000004, "Wrong size on GObject_GetY");
static_assert(offsetof(GObject_GetY, ReturnValue) == 0x000000, "Member 'GObject_GetY::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.GetYMin
// 0x0004 (0x0004 - 0x0000)
struct GObject_GetYMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_GetYMin) == 0x000004, "Wrong alignment on GObject_GetYMin");
static_assert(sizeof(GObject_GetYMin) == 0x000004, "Wrong size on GObject_GetYMin");
static_assert(offsetof(GObject_GetYMin, ReturnValue) == 0x000000, "Member 'GObject_GetYMin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.IsDraggable
// 0x0001 (0x0001 - 0x0000)
struct GObject_IsDraggable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_IsDraggable) == 0x000001, "Wrong alignment on GObject_IsDraggable");
static_assert(sizeof(GObject_IsDraggable) == 0x000001, "Wrong size on GObject_IsDraggable");
static_assert(offsetof(GObject_IsDraggable, ReturnValue) == 0x000000, "Member 'GObject_IsDraggable::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.IsGrayed
// 0x0001 (0x0001 - 0x0000)
struct GObject_IsGrayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_IsGrayed) == 0x000001, "Wrong alignment on GObject_IsGrayed");
static_assert(sizeof(GObject_IsGrayed) == 0x000001, "Wrong size on GObject_IsGrayed");
static_assert(offsetof(GObject_IsGrayed, ReturnValue) == 0x000000, "Member 'GObject_IsGrayed::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.IsPivotAsAnchor
// 0x0001 (0x0001 - 0x0000)
struct GObject_IsPivotAsAnchor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_IsPivotAsAnchor) == 0x000001, "Wrong alignment on GObject_IsPivotAsAnchor");
static_assert(sizeof(GObject_IsPivotAsAnchor) == 0x000001, "Wrong size on GObject_IsPivotAsAnchor");
static_assert(offsetof(GObject_IsPivotAsAnchor, ReturnValue) == 0x000000, "Member 'GObject_IsPivotAsAnchor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.IsTouchable
// 0x0001 (0x0001 - 0x0000)
struct GObject_IsTouchable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_IsTouchable) == 0x000001, "Wrong alignment on GObject_IsTouchable");
static_assert(sizeof(GObject_IsTouchable) == 0x000001, "Wrong size on GObject_IsTouchable");
static_assert(offsetof(GObject_IsTouchable, ReturnValue) == 0x000000, "Member 'GObject_IsTouchable::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct GObject_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_IsVisible) == 0x000001, "Wrong alignment on GObject_IsVisible");
static_assert(sizeof(GObject_IsVisible) == 0x000001, "Wrong size on GObject_IsVisible");
static_assert(offsetof(GObject_IsVisible, ReturnValue) == 0x000000, "Member 'GObject_IsVisible::ReturnValue' has a wrong offset!");

// Function FairyGUI.GObject.OnStage
// 0x0001 (0x0001 - 0x0000)
struct GObject_OnStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GObject_OnStage) == 0x000001, "Wrong alignment on GObject_OnStage");
static_assert(sizeof(GObject_OnStage) == 0x000001, "Wrong size on GObject_OnStage");
static_assert(offsetof(GObject_OnStage, ReturnValue) == 0x000000, "Member 'GObject_OnStage::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.AddChild
// 0x0010 (0x0010 - 0x0000)
struct GComponent_AddChild final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_AddChild) == 0x000008, "Wrong alignment on GComponent_AddChild");
static_assert(sizeof(GComponent_AddChild) == 0x000010, "Wrong size on GComponent_AddChild");
static_assert(offsetof(GComponent_AddChild, Child) == 0x000000, "Member 'GComponent_AddChild::Child' has a wrong offset!");
static_assert(offsetof(GComponent_AddChild, ReturnValue) == 0x000008, "Member 'GComponent_AddChild::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.AddChildAt
// 0x0018 (0x0018 - 0x0000)
struct GComponent_AddChildAt final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGObject*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_AddChildAt) == 0x000008, "Wrong alignment on GComponent_AddChildAt");
static_assert(sizeof(GComponent_AddChildAt) == 0x000018, "Wrong size on GComponent_AddChildAt");
static_assert(offsetof(GComponent_AddChildAt, Child) == 0x000000, "Member 'GComponent_AddChildAt::Child' has a wrong offset!");
static_assert(offsetof(GComponent_AddChildAt, Index_0) == 0x000008, "Member 'GComponent_AddChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(GComponent_AddChildAt, ReturnValue) == 0x000010, "Member 'GComponent_AddChildAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetMargin
// 0x0010 (0x0010 - 0x0000)
struct GComponent_GetMargin final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetMargin) == 0x000004, "Wrong alignment on GComponent_GetMargin");
static_assert(sizeof(GComponent_GetMargin) == 0x000010, "Wrong size on GComponent_GetMargin");
static_assert(offsetof(GComponent_GetMargin, ReturnValue) == 0x000000, "Member 'GComponent_GetMargin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.OnClickChild
// 0x0020 (0x0020 - 0x0000)
struct GComponent_OnClickChild final
{
public:
	class FString                                 ChildName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UEventContext* EventContext)> Delegate;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_OnClickChild) == 0x000008, "Wrong alignment on GComponent_OnClickChild");
static_assert(sizeof(GComponent_OnClickChild) == 0x000020, "Wrong size on GComponent_OnClickChild");
static_assert(offsetof(GComponent_OnClickChild, ChildName) == 0x000000, "Member 'GComponent_OnClickChild::ChildName' has a wrong offset!");
static_assert(offsetof(GComponent_OnClickChild, Delegate) == 0x000010, "Member 'GComponent_OnClickChild::Delegate' has a wrong offset!");

// Function FairyGUI.GComponent.RemoveChild
// 0x0008 (0x0008 - 0x0000)
struct GComponent_RemoveChild final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_RemoveChild) == 0x000008, "Wrong alignment on GComponent_RemoveChild");
static_assert(sizeof(GComponent_RemoveChild) == 0x000008, "Wrong size on GComponent_RemoveChild");
static_assert(offsetof(GComponent_RemoveChild, Child) == 0x000000, "Member 'GComponent_RemoveChild::Child' has a wrong offset!");

// Function FairyGUI.GComponent.RemoveChildAt
// 0x0004 (0x0004 - 0x0000)
struct GComponent_RemoveChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_RemoveChildAt) == 0x000004, "Wrong alignment on GComponent_RemoveChildAt");
static_assert(sizeof(GComponent_RemoveChildAt) == 0x000004, "Wrong size on GComponent_RemoveChildAt");
static_assert(offsetof(GComponent_RemoveChildAt, Index_0) == 0x000000, "Member 'GComponent_RemoveChildAt::Index_0' has a wrong offset!");

// Function FairyGUI.GComponent.RemoveChildren
// 0x0008 (0x0008 - 0x0000)
struct GComponent_RemoveChildren final
{
public:
	int32                                         BeginIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_RemoveChildren) == 0x000004, "Wrong alignment on GComponent_RemoveChildren");
static_assert(sizeof(GComponent_RemoveChildren) == 0x000008, "Wrong size on GComponent_RemoveChildren");
static_assert(offsetof(GComponent_RemoveChildren, BeginIndex) == 0x000000, "Member 'GComponent_RemoveChildren::BeginIndex' has a wrong offset!");
static_assert(offsetof(GComponent_RemoveChildren, EndIndex) == 0x000004, "Member 'GComponent_RemoveChildren::EndIndex' has a wrong offset!");

// Function FairyGUI.GComponent.SetApexIndex
// 0x0004 (0x0004 - 0x0000)
struct GComponent_SetApexIndex final
{
public:
	int32                                         InApedIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetApexIndex) == 0x000004, "Wrong alignment on GComponent_SetApexIndex");
static_assert(sizeof(GComponent_SetApexIndex) == 0x000004, "Wrong size on GComponent_SetApexIndex");
static_assert(offsetof(GComponent_SetApexIndex, InApedIndex) == 0x000000, "Member 'GComponent_SetApexIndex::InApedIndex' has a wrong offset!");

// Function FairyGUI.GComponent.SetChildIndex
// 0x0010 (0x0010 - 0x0000)
struct GComponent_SetChildIndex final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GComponent_SetChildIndex) == 0x000008, "Wrong alignment on GComponent_SetChildIndex");
static_assert(sizeof(GComponent_SetChildIndex) == 0x000010, "Wrong size on GComponent_SetChildIndex");
static_assert(offsetof(GComponent_SetChildIndex, Child) == 0x000000, "Member 'GComponent_SetChildIndex::Child' has a wrong offset!");
static_assert(offsetof(GComponent_SetChildIndex, Index_0) == 0x000008, "Member 'GComponent_SetChildIndex::Index_0' has a wrong offset!");

// Function FairyGUI.GComponent.SetChildIndexBefore
// 0x0010 (0x0010 - 0x0000)
struct GComponent_SetChildIndexBefore final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetChildIndexBefore) == 0x000008, "Wrong alignment on GComponent_SetChildIndexBefore");
static_assert(sizeof(GComponent_SetChildIndexBefore) == 0x000010, "Wrong size on GComponent_SetChildIndexBefore");
static_assert(offsetof(GComponent_SetChildIndexBefore, Child) == 0x000000, "Member 'GComponent_SetChildIndexBefore::Child' has a wrong offset!");
static_assert(offsetof(GComponent_SetChildIndexBefore, Index_0) == 0x000008, "Member 'GComponent_SetChildIndexBefore::Index_0' has a wrong offset!");
static_assert(offsetof(GComponent_SetChildIndexBefore, ReturnValue) == 0x00000C, "Member 'GComponent_SetChildIndexBefore::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.SetChildrenRenderOrder
// 0x0001 (0x0001 - 0x0000)
struct GComponent_SetChildrenRenderOrder final
{
public:
	EChildrenRenderOrder                          InChildrenRenderOrder;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetChildrenRenderOrder) == 0x000001, "Wrong alignment on GComponent_SetChildrenRenderOrder");
static_assert(sizeof(GComponent_SetChildrenRenderOrder) == 0x000001, "Wrong size on GComponent_SetChildrenRenderOrder");
static_assert(offsetof(GComponent_SetChildrenRenderOrder, InChildrenRenderOrder) == 0x000000, "Member 'GComponent_SetChildrenRenderOrder::InChildrenRenderOrder' has a wrong offset!");

// Function FairyGUI.GComponent.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct GComponent_SetMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetMargin) == 0x000004, "Wrong alignment on GComponent_SetMargin");
static_assert(sizeof(GComponent_SetMargin) == 0x000010, "Wrong size on GComponent_SetMargin");
static_assert(offsetof(GComponent_SetMargin, InMargin) == 0x000000, "Member 'GComponent_SetMargin::InMargin' has a wrong offset!");

// Function FairyGUI.GComponent.SetOpaque
// 0x0001 (0x0001 - 0x0000)
struct GComponent_SetOpaque final
{
public:
	bool                                          bInOpaque;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetOpaque) == 0x000001, "Wrong alignment on GComponent_SetOpaque");
static_assert(sizeof(GComponent_SetOpaque) == 0x000001, "Wrong size on GComponent_SetOpaque");
static_assert(offsetof(GComponent_SetOpaque, bInOpaque) == 0x000000, "Member 'GComponent_SetOpaque::bInOpaque' has a wrong offset!");

// Function FairyGUI.GComponent.SetViewHeight
// 0x0004 (0x0004 - 0x0000)
struct GComponent_SetViewHeight final
{
public:
	float                                         InViewHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetViewHeight) == 0x000004, "Wrong alignment on GComponent_SetViewHeight");
static_assert(sizeof(GComponent_SetViewHeight) == 0x000004, "Wrong size on GComponent_SetViewHeight");
static_assert(offsetof(GComponent_SetViewHeight, InViewHeight) == 0x000000, "Member 'GComponent_SetViewHeight::InViewHeight' has a wrong offset!");

// Function FairyGUI.GComponent.SetViewWidth
// 0x0004 (0x0004 - 0x0000)
struct GComponent_SetViewWidth final
{
public:
	float                                         InViewWidth;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SetViewWidth) == 0x000004, "Wrong alignment on GComponent_SetViewWidth");
static_assert(sizeof(GComponent_SetViewWidth) == 0x000004, "Wrong size on GComponent_SetViewWidth");
static_assert(offsetof(GComponent_SetViewWidth, InViewWidth) == 0x000000, "Member 'GComponent_SetViewWidth::InViewWidth' has a wrong offset!");

// Function FairyGUI.GComponent.SwapChildren
// 0x0010 (0x0010 - 0x0000)
struct GComponent_SwapChildren final
{
public:
	class UGObject*                               Child1;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               Child2;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SwapChildren) == 0x000008, "Wrong alignment on GComponent_SwapChildren");
static_assert(sizeof(GComponent_SwapChildren) == 0x000010, "Wrong size on GComponent_SwapChildren");
static_assert(offsetof(GComponent_SwapChildren, Child1) == 0x000000, "Member 'GComponent_SwapChildren::Child1' has a wrong offset!");
static_assert(offsetof(GComponent_SwapChildren, Child2) == 0x000008, "Member 'GComponent_SwapChildren::Child2' has a wrong offset!");

// Function FairyGUI.GComponent.SwapChildrenAt
// 0x0008 (0x0008 - 0x0000)
struct GComponent_SwapChildrenAt final
{
public:
	int32                                         Index1;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index2;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_SwapChildrenAt) == 0x000004, "Wrong alignment on GComponent_SwapChildrenAt");
static_assert(sizeof(GComponent_SwapChildrenAt) == 0x000008, "Wrong size on GComponent_SwapChildrenAt");
static_assert(offsetof(GComponent_SwapChildrenAt, Index1) == 0x000000, "Member 'GComponent_SwapChildrenAt::Index1' has a wrong offset!");
static_assert(offsetof(GComponent_SwapChildrenAt, Index2) == 0x000004, "Member 'GComponent_SwapChildrenAt::Index2' has a wrong offset!");

// Function FairyGUI.GComponent.GetApexIndex
// 0x0004 (0x0004 - 0x0000)
struct GComponent_GetApexIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetApexIndex) == 0x000004, "Wrong alignment on GComponent_GetApexIndex");
static_assert(sizeof(GComponent_GetApexIndex) == 0x000004, "Wrong size on GComponent_GetApexIndex");
static_assert(offsetof(GComponent_GetApexIndex, ReturnValue) == 0x000000, "Member 'GComponent_GetApexIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChild
// 0x0020 (0x0020 - 0x0000)
struct GComponent_GetChild final
{
public:
	class FString                                 ChildName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetChild) == 0x000008, "Wrong alignment on GComponent_GetChild");
static_assert(sizeof(GComponent_GetChild) == 0x000020, "Wrong size on GComponent_GetChild");
static_assert(offsetof(GComponent_GetChild, ChildName) == 0x000000, "Member 'GComponent_GetChild::ChildName' has a wrong offset!");
static_assert(offsetof(GComponent_GetChild, ClassType) == 0x000010, "Member 'GComponent_GetChild::ClassType' has a wrong offset!");
static_assert(offsetof(GComponent_GetChild, ReturnValue) == 0x000018, "Member 'GComponent_GetChild::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChildAt
// 0x0018 (0x0018 - 0x0000)
struct GComponent_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetChildAt) == 0x000008, "Wrong alignment on GComponent_GetChildAt");
static_assert(sizeof(GComponent_GetChildAt) == 0x000018, "Wrong size on GComponent_GetChildAt");
static_assert(offsetof(GComponent_GetChildAt, Index_0) == 0x000000, "Member 'GComponent_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildAt, ClassType) == 0x000008, "Member 'GComponent_GetChildAt::ClassType' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildAt, ReturnValue) == 0x000010, "Member 'GComponent_GetChildAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChildByPath
// 0x0020 (0x0020 - 0x0000)
struct GComponent_GetChildByPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetChildByPath) == 0x000008, "Wrong alignment on GComponent_GetChildByPath");
static_assert(sizeof(GComponent_GetChildByPath) == 0x000020, "Wrong size on GComponent_GetChildByPath");
static_assert(offsetof(GComponent_GetChildByPath, Path) == 0x000000, "Member 'GComponent_GetChildByPath::Path' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildByPath, ClassType) == 0x000010, "Member 'GComponent_GetChildByPath::ClassType' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildByPath, ReturnValue) == 0x000018, "Member 'GComponent_GetChildByPath::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChildIndex
// 0x0010 (0x0010 - 0x0000)
struct GComponent_GetChildIndex final
{
public:
	const class UGObject*                         Child;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GComponent_GetChildIndex) == 0x000008, "Wrong alignment on GComponent_GetChildIndex");
static_assert(sizeof(GComponent_GetChildIndex) == 0x000010, "Wrong size on GComponent_GetChildIndex");
static_assert(offsetof(GComponent_GetChildIndex, Child) == 0x000000, "Member 'GComponent_GetChildIndex::Child' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildIndex, ReturnValue) == 0x000008, "Member 'GComponent_GetChildIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChildInGroup
// 0x0028 (0x0028 - 0x0000)
struct GComponent_GetChildInGroup final
{
public:
	const class UGGroup*                          Group;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChildName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetChildInGroup) == 0x000008, "Wrong alignment on GComponent_GetChildInGroup");
static_assert(sizeof(GComponent_GetChildInGroup) == 0x000028, "Wrong size on GComponent_GetChildInGroup");
static_assert(offsetof(GComponent_GetChildInGroup, Group) == 0x000000, "Member 'GComponent_GetChildInGroup::Group' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildInGroup, ChildName) == 0x000008, "Member 'GComponent_GetChildInGroup::ChildName' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildInGroup, ClassType) == 0x000018, "Member 'GComponent_GetChildInGroup::ClassType' has a wrong offset!");
static_assert(offsetof(GComponent_GetChildInGroup, ReturnValue) == 0x000020, "Member 'GComponent_GetChildInGroup::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetChildrenRenderOrder
// 0x0001 (0x0001 - 0x0000)
struct GComponent_GetChildrenRenderOrder final
{
public:
	EChildrenRenderOrder                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetChildrenRenderOrder) == 0x000001, "Wrong alignment on GComponent_GetChildrenRenderOrder");
static_assert(sizeof(GComponent_GetChildrenRenderOrder) == 0x000001, "Wrong size on GComponent_GetChildrenRenderOrder");
static_assert(offsetof(GComponent_GetChildrenRenderOrder, ReturnValue) == 0x000000, "Member 'GComponent_GetChildrenRenderOrder::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetController
// 0x0018 (0x0018 - 0x0000)
struct GComponent_GetController final
{
public:
	class FString                                 ControllerName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGController*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetController) == 0x000008, "Wrong alignment on GComponent_GetController");
static_assert(sizeof(GComponent_GetController) == 0x000018, "Wrong size on GComponent_GetController");
static_assert(offsetof(GComponent_GetController, ControllerName) == 0x000000, "Member 'GComponent_GetController::ControllerName' has a wrong offset!");
static_assert(offsetof(GComponent_GetController, ReturnValue) == 0x000010, "Member 'GComponent_GetController::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetControllerAt
// 0x0010 (0x0010 - 0x0000)
struct GComponent_GetControllerAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGController*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetControllerAt) == 0x000008, "Wrong alignment on GComponent_GetControllerAt");
static_assert(sizeof(GComponent_GetControllerAt) == 0x000010, "Wrong size on GComponent_GetControllerAt");
static_assert(offsetof(GComponent_GetControllerAt, Index_0) == 0x000000, "Member 'GComponent_GetControllerAt::Index_0' has a wrong offset!");
static_assert(offsetof(GComponent_GetControllerAt, ReturnValue) == 0x000008, "Member 'GComponent_GetControllerAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetFirstChildInView
// 0x0004 (0x0004 - 0x0000)
struct GComponent_GetFirstChildInView final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetFirstChildInView) == 0x000004, "Wrong alignment on GComponent_GetFirstChildInView");
static_assert(sizeof(GComponent_GetFirstChildInView) == 0x000004, "Wrong size on GComponent_GetFirstChildInView");
static_assert(offsetof(GComponent_GetFirstChildInView, ReturnValue) == 0x000000, "Member 'GComponent_GetFirstChildInView::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetScrollPane
// 0x0008 (0x0008 - 0x0000)
struct GComponent_GetScrollPane final
{
public:
	class UScrollPane*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetScrollPane) == 0x000008, "Wrong alignment on GComponent_GetScrollPane");
static_assert(sizeof(GComponent_GetScrollPane) == 0x000008, "Wrong size on GComponent_GetScrollPane");
static_assert(offsetof(GComponent_GetScrollPane, ReturnValue) == 0x000000, "Member 'GComponent_GetScrollPane::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetTransition
// 0x0018 (0x0018 - 0x0000)
struct GComponent_GetTransition final
{
public:
	class FString                                 TransitionName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTransition*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetTransition) == 0x000008, "Wrong alignment on GComponent_GetTransition");
static_assert(sizeof(GComponent_GetTransition) == 0x000018, "Wrong size on GComponent_GetTransition");
static_assert(offsetof(GComponent_GetTransition, TransitionName) == 0x000000, "Member 'GComponent_GetTransition::TransitionName' has a wrong offset!");
static_assert(offsetof(GComponent_GetTransition, ReturnValue) == 0x000010, "Member 'GComponent_GetTransition::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetTransitionAt
// 0x0010 (0x0010 - 0x0000)
struct GComponent_GetTransitionAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTransition*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetTransitionAt) == 0x000008, "Wrong alignment on GComponent_GetTransitionAt");
static_assert(sizeof(GComponent_GetTransitionAt) == 0x000010, "Wrong size on GComponent_GetTransitionAt");
static_assert(offsetof(GComponent_GetTransitionAt, Index_0) == 0x000000, "Member 'GComponent_GetTransitionAt::Index_0' has a wrong offset!");
static_assert(offsetof(GComponent_GetTransitionAt, ReturnValue) == 0x000008, "Member 'GComponent_GetTransitionAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetViewHeight
// 0x0004 (0x0004 - 0x0000)
struct GComponent_GetViewHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetViewHeight) == 0x000004, "Wrong alignment on GComponent_GetViewHeight");
static_assert(sizeof(GComponent_GetViewHeight) == 0x000004, "Wrong size on GComponent_GetViewHeight");
static_assert(offsetof(GComponent_GetViewHeight, ReturnValue) == 0x000000, "Member 'GComponent_GetViewHeight::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.GetViewWidth
// 0x0004 (0x0004 - 0x0000)
struct GComponent_GetViewWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_GetViewWidth) == 0x000004, "Wrong alignment on GComponent_GetViewWidth");
static_assert(sizeof(GComponent_GetViewWidth) == 0x000004, "Wrong size on GComponent_GetViewWidth");
static_assert(offsetof(GComponent_GetViewWidth, ReturnValue) == 0x000000, "Member 'GComponent_GetViewWidth::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.IsAncestorOf
// 0x0010 (0x0010 - 0x0000)
struct GComponent_IsAncestorOf final
{
public:
	const class UGObject*                         Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GComponent_IsAncestorOf) == 0x000008, "Wrong alignment on GComponent_IsAncestorOf");
static_assert(sizeof(GComponent_IsAncestorOf) == 0x000010, "Wrong size on GComponent_IsAncestorOf");
static_assert(offsetof(GComponent_IsAncestorOf, Obj) == 0x000000, "Member 'GComponent_IsAncestorOf::Obj' has a wrong offset!");
static_assert(offsetof(GComponent_IsAncestorOf, ReturnValue) == 0x000008, "Member 'GComponent_IsAncestorOf::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.IsChildInView
// 0x0010 (0x0010 - 0x0000)
struct GComponent_IsChildInView final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GComponent_IsChildInView) == 0x000008, "Wrong alignment on GComponent_IsChildInView");
static_assert(sizeof(GComponent_IsChildInView) == 0x000010, "Wrong size on GComponent_IsChildInView");
static_assert(offsetof(GComponent_IsChildInView, Child) == 0x000000, "Member 'GComponent_IsChildInView::Child' has a wrong offset!");
static_assert(offsetof(GComponent_IsChildInView, ReturnValue) == 0x000008, "Member 'GComponent_IsChildInView::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.IsOpaque
// 0x0001 (0x0001 - 0x0000)
struct GComponent_IsOpaque final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_IsOpaque) == 0x000001, "Wrong alignment on GComponent_IsOpaque");
static_assert(sizeof(GComponent_IsOpaque) == 0x000001, "Wrong size on GComponent_IsOpaque");
static_assert(offsetof(GComponent_IsOpaque, ReturnValue) == 0x000000, "Member 'GComponent_IsOpaque::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComponent.NumChildren
// 0x0004 (0x0004 - 0x0000)
struct GComponent_NumChildren final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComponent_NumChildren) == 0x000004, "Wrong alignment on GComponent_NumChildren");
static_assert(sizeof(GComponent_NumChildren) == 0x000004, "Wrong size on GComponent_NumChildren");
static_assert(offsetof(GComponent_NumChildren, ReturnValue) == 0x000000, "Member 'GComponent_NumChildren::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.SetRelatedController
// 0x0008 (0x0008 - 0x0000)
struct GButton_SetRelatedController final
{
public:
	class UGController*                           InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetRelatedController) == 0x000008, "Wrong alignment on GButton_SetRelatedController");
static_assert(sizeof(GButton_SetRelatedController) == 0x000008, "Wrong size on GButton_SetRelatedController");
static_assert(offsetof(GButton_SetRelatedController, InController) == 0x000000, "Member 'GButton_SetRelatedController::InController' has a wrong offset!");

// Function FairyGUI.GButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct GButton_SetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetSelected) == 0x000001, "Wrong alignment on GButton_SetSelected");
static_assert(sizeof(GButton_SetSelected) == 0x000001, "Wrong size on GButton_SetSelected");
static_assert(offsetof(GButton_SetSelected, bInSelected) == 0x000000, "Member 'GButton_SetSelected::bInSelected' has a wrong offset!");

// Function FairyGUI.GButton.SetSelectedIcon
// 0x0010 (0x0010 - 0x0000)
struct GButton_SetSelectedIcon final
{
public:
	class FString                                 InIcon;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetSelectedIcon) == 0x000008, "Wrong alignment on GButton_SetSelectedIcon");
static_assert(sizeof(GButton_SetSelectedIcon) == 0x000010, "Wrong size on GButton_SetSelectedIcon");
static_assert(offsetof(GButton_SetSelectedIcon, InIcon) == 0x000000, "Member 'GButton_SetSelectedIcon::InIcon' has a wrong offset!");

// Function FairyGUI.GButton.SetSelectedTitle
// 0x0010 (0x0010 - 0x0000)
struct GButton_SetSelectedTitle final
{
public:
	class FString                                 InTitle;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetSelectedTitle) == 0x000008, "Wrong alignment on GButton_SetSelectedTitle");
static_assert(sizeof(GButton_SetSelectedTitle) == 0x000010, "Wrong size on GButton_SetSelectedTitle");
static_assert(offsetof(GButton_SetSelectedTitle, InTitle) == 0x000000, "Member 'GButton_SetSelectedTitle::InTitle' has a wrong offset!");

// Function FairyGUI.GButton.SetTitle
// 0x0010 (0x0010 - 0x0000)
struct GButton_SetTitle final
{
public:
	class FString                                 InTitle;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetTitle) == 0x000008, "Wrong alignment on GButton_SetTitle");
static_assert(sizeof(GButton_SetTitle) == 0x000010, "Wrong size on GButton_SetTitle");
static_assert(offsetof(GButton_SetTitle, InTitle) == 0x000000, "Member 'GButton_SetTitle::InTitle' has a wrong offset!");

// Function FairyGUI.GButton.SetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GButton_SetTitleColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetTitleColor) == 0x000004, "Wrong alignment on GButton_SetTitleColor");
static_assert(sizeof(GButton_SetTitleColor) == 0x000004, "Wrong size on GButton_SetTitleColor");
static_assert(offsetof(GButton_SetTitleColor, InColor) == 0x000000, "Member 'GButton_SetTitleColor::InColor' has a wrong offset!");

// Function FairyGUI.GButton.SetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GButton_SetTitleFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_SetTitleFontSize) == 0x000004, "Wrong alignment on GButton_SetTitleFontSize");
static_assert(sizeof(GButton_SetTitleFontSize) == 0x000004, "Wrong size on GButton_SetTitleFontSize");
static_assert(offsetof(GButton_SetTitleFontSize, InFontSize) == 0x000000, "Member 'GButton_SetTitleFontSize::InFontSize' has a wrong offset!");

// Function FairyGUI.GButton.GetRelatedController
// 0x0008 (0x0008 - 0x0000)
struct GButton_GetRelatedController final
{
public:
	class UGController*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetRelatedController) == 0x000008, "Wrong alignment on GButton_GetRelatedController");
static_assert(sizeof(GButton_GetRelatedController) == 0x000008, "Wrong size on GButton_GetRelatedController");
static_assert(offsetof(GButton_GetRelatedController, ReturnValue) == 0x000000, "Member 'GButton_GetRelatedController::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.GetSelectedIcon
// 0x0010 (0x0010 - 0x0000)
struct GButton_GetSelectedIcon final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetSelectedIcon) == 0x000008, "Wrong alignment on GButton_GetSelectedIcon");
static_assert(sizeof(GButton_GetSelectedIcon) == 0x000010, "Wrong size on GButton_GetSelectedIcon");
static_assert(offsetof(GButton_GetSelectedIcon, ReturnValue) == 0x000000, "Member 'GButton_GetSelectedIcon::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.GetSelectedTitle
// 0x0010 (0x0010 - 0x0000)
struct GButton_GetSelectedTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetSelectedTitle) == 0x000008, "Wrong alignment on GButton_GetSelectedTitle");
static_assert(sizeof(GButton_GetSelectedTitle) == 0x000010, "Wrong size on GButton_GetSelectedTitle");
static_assert(offsetof(GButton_GetSelectedTitle, ReturnValue) == 0x000000, "Member 'GButton_GetSelectedTitle::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct GButton_GetTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetTitle) == 0x000008, "Wrong alignment on GButton_GetTitle");
static_assert(sizeof(GButton_GetTitle) == 0x000010, "Wrong size on GButton_GetTitle");
static_assert(offsetof(GButton_GetTitle, ReturnValue) == 0x000000, "Member 'GButton_GetTitle::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.GetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GButton_GetTitleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetTitleColor) == 0x000004, "Wrong alignment on GButton_GetTitleColor");
static_assert(sizeof(GButton_GetTitleColor) == 0x000004, "Wrong size on GButton_GetTitleColor");
static_assert(offsetof(GButton_GetTitleColor, ReturnValue) == 0x000000, "Member 'GButton_GetTitleColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.GetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GButton_GetTitleFontSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_GetTitleFontSize) == 0x000004, "Wrong alignment on GButton_GetTitleFontSize");
static_assert(sizeof(GButton_GetTitleFontSize) == 0x000004, "Wrong size on GButton_GetTitleFontSize");
static_assert(offsetof(GButton_GetTitleFontSize, ReturnValue) == 0x000000, "Member 'GButton_GetTitleFontSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GButton.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct GButton_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GButton_IsSelected) == 0x000001, "Wrong alignment on GButton_IsSelected");
static_assert(sizeof(GButton_IsSelected) == 0x000001, "Wrong size on GButton_IsSelected");
static_assert(offsetof(GButton_IsSelected, ReturnValue) == 0x000000, "Member 'GButton_IsSelected::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_SetSelectedIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetSelectedIndex) == 0x000004, "Wrong alignment on GComboBox_SetSelectedIndex");
static_assert(sizeof(GComboBox_SetSelectedIndex) == 0x000004, "Wrong size on GComboBox_SetSelectedIndex");
static_assert(offsetof(GComboBox_SetSelectedIndex, InIndex) == 0x000000, "Member 'GComboBox_SetSelectedIndex::InIndex' has a wrong offset!");

// Function FairyGUI.GComboBox.SetSelectionController
// 0x0008 (0x0008 - 0x0000)
struct GComboBox_SetSelectionController final
{
public:
	class UGController*                           InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetSelectionController) == 0x000008, "Wrong alignment on GComboBox_SetSelectionController");
static_assert(sizeof(GComboBox_SetSelectionController) == 0x000008, "Wrong size on GComboBox_SetSelectionController");
static_assert(offsetof(GComboBox_SetSelectionController, InController) == 0x000000, "Member 'GComboBox_SetSelectionController::InController' has a wrong offset!");

// Function FairyGUI.GComboBox.SetTitle
// 0x0010 (0x0010 - 0x0000)
struct GComboBox_SetTitle final
{
public:
	class FString                                 InTitle;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetTitle) == 0x000008, "Wrong alignment on GComboBox_SetTitle");
static_assert(sizeof(GComboBox_SetTitle) == 0x000010, "Wrong size on GComboBox_SetTitle");
static_assert(offsetof(GComboBox_SetTitle, InTitle) == 0x000000, "Member 'GComboBox_SetTitle::InTitle' has a wrong offset!");

// Function FairyGUI.GComboBox.SetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_SetTitleColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetTitleColor) == 0x000004, "Wrong alignment on GComboBox_SetTitleColor");
static_assert(sizeof(GComboBox_SetTitleColor) == 0x000004, "Wrong size on GComboBox_SetTitleColor");
static_assert(offsetof(GComboBox_SetTitleColor, InColor) == 0x000000, "Member 'GComboBox_SetTitleColor::InColor' has a wrong offset!");

// Function FairyGUI.GComboBox.SetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_SetTitleFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetTitleFontSize) == 0x000004, "Wrong alignment on GComboBox_SetTitleFontSize");
static_assert(sizeof(GComboBox_SetTitleFontSize) == 0x000004, "Wrong size on GComboBox_SetTitleFontSize");
static_assert(offsetof(GComboBox_SetTitleFontSize, InFontSize) == 0x000000, "Member 'GComboBox_SetTitleFontSize::InFontSize' has a wrong offset!");

// Function FairyGUI.GComboBox.SetValue
// 0x0010 (0x0010 - 0x0000)
struct GComboBox_SetValue final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_SetValue) == 0x000008, "Wrong alignment on GComboBox_SetValue");
static_assert(sizeof(GComboBox_SetValue) == 0x000010, "Wrong size on GComboBox_SetValue");
static_assert(offsetof(GComboBox_SetValue, InValue) == 0x000000, "Member 'GComboBox_SetValue::InValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetDropdown
// 0x0008 (0x0008 - 0x0000)
struct GComboBox_GetDropdown final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetDropdown) == 0x000008, "Wrong alignment on GComboBox_GetDropdown");
static_assert(sizeof(GComboBox_GetDropdown) == 0x000008, "Wrong size on GComboBox_GetDropdown");
static_assert(offsetof(GComboBox_GetDropdown, ReturnValue) == 0x000000, "Member 'GComboBox_GetDropdown::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetSelectedIndex) == 0x000004, "Wrong alignment on GComboBox_GetSelectedIndex");
static_assert(sizeof(GComboBox_GetSelectedIndex) == 0x000004, "Wrong size on GComboBox_GetSelectedIndex");
static_assert(offsetof(GComboBox_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GComboBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetSelectionController
// 0x0008 (0x0008 - 0x0000)
struct GComboBox_GetSelectionController final
{
public:
	class UGController*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetSelectionController) == 0x000008, "Wrong alignment on GComboBox_GetSelectionController");
static_assert(sizeof(GComboBox_GetSelectionController) == 0x000008, "Wrong size on GComboBox_GetSelectionController");
static_assert(offsetof(GComboBox_GetSelectionController, ReturnValue) == 0x000000, "Member 'GComboBox_GetSelectionController::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct GComboBox_GetTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetTitle) == 0x000008, "Wrong alignment on GComboBox_GetTitle");
static_assert(sizeof(GComboBox_GetTitle) == 0x000010, "Wrong size on GComboBox_GetTitle");
static_assert(offsetof(GComboBox_GetTitle, ReturnValue) == 0x000000, "Member 'GComboBox_GetTitle::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_GetTitleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetTitleColor) == 0x000004, "Wrong alignment on GComboBox_GetTitleColor");
static_assert(sizeof(GComboBox_GetTitleColor) == 0x000004, "Wrong size on GComboBox_GetTitleColor");
static_assert(offsetof(GComboBox_GetTitleColor, ReturnValue) == 0x000000, "Member 'GComboBox_GetTitleColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GComboBox_GetTitleFontSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetTitleFontSize) == 0x000004, "Wrong alignment on GComboBox_GetTitleFontSize");
static_assert(sizeof(GComboBox_GetTitleFontSize) == 0x000004, "Wrong size on GComboBox_GetTitleFontSize");
static_assert(offsetof(GComboBox_GetTitleFontSize, ReturnValue) == 0x000000, "Member 'GComboBox_GetTitleFontSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GComboBox.GetValue
// 0x0010 (0x0010 - 0x0000)
struct GComboBox_GetValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GComboBox_GetValue) == 0x000008, "Wrong alignment on GComboBox_GetValue");
static_assert(sizeof(GComboBox_GetValue) == 0x000010, "Wrong size on GComboBox_GetValue");
static_assert(offsetof(GComboBox_GetValue, ReturnValue) == 0x000000, "Member 'GComboBox_GetValue::ReturnValue' has a wrong offset!");

// Function FairyGUI.GController.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GController_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GController_SetSelectedIndex) == 0x000004, "Wrong alignment on GController_SetSelectedIndex");
static_assert(sizeof(GController_SetSelectedIndex) == 0x000004, "Wrong size on GController_SetSelectedIndex");
static_assert(offsetof(GController_SetSelectedIndex, Index_0) == 0x000000, "Member 'GController_SetSelectedIndex::Index_0' has a wrong offset!");

// Function FairyGUI.GController.SetSelectedPage
// 0x0010 (0x0010 - 0x0000)
struct GController_SetSelectedPage final
{
public:
	class FString                                 PageName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GController_SetSelectedPage) == 0x000008, "Wrong alignment on GController_SetSelectedPage");
static_assert(sizeof(GController_SetSelectedPage) == 0x000010, "Wrong size on GController_SetSelectedPage");
static_assert(offsetof(GController_SetSelectedPage, PageName) == 0x000000, "Member 'GController_SetSelectedPage::PageName' has a wrong offset!");

// Function FairyGUI.GController.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GController_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GController_GetSelectedIndex) == 0x000004, "Wrong alignment on GController_GetSelectedIndex");
static_assert(sizeof(GController_GetSelectedIndex) == 0x000004, "Wrong size on GController_GetSelectedIndex");
static_assert(offsetof(GController_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GController_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GController.GetSelectedPage
// 0x0010 (0x0010 - 0x0000)
struct GController_GetSelectedPage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GController_GetSelectedPage) == 0x000008, "Wrong alignment on GController_GetSelectedPage");
static_assert(sizeof(GController_GetSelectedPage) == 0x000010, "Wrong size on GController_GetSelectedPage");
static_assert(offsetof(GController_GetSelectedPage, ReturnValue) == 0x000000, "Member 'GController_GetSelectedPage::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGraph.DrawEllipse
// 0x0014 (0x0014 - 0x0000)
struct GGraph_DrawEllipse final
{
public:
	float                                         LineWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FillColor;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDegree;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDegree;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_DrawEllipse) == 0x000004, "Wrong alignment on GGraph_DrawEllipse");
static_assert(sizeof(GGraph_DrawEllipse) == 0x000014, "Wrong size on GGraph_DrawEllipse");
static_assert(offsetof(GGraph_DrawEllipse, LineWidth) == 0x000000, "Member 'GGraph_DrawEllipse::LineWidth' has a wrong offset!");
static_assert(offsetof(GGraph_DrawEllipse, LineColor) == 0x000004, "Member 'GGraph_DrawEllipse::LineColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawEllipse, FillColor) == 0x000008, "Member 'GGraph_DrawEllipse::FillColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawEllipse, StartDegree) == 0x00000C, "Member 'GGraph_DrawEllipse::StartDegree' has a wrong offset!");
static_assert(offsetof(GGraph_DrawEllipse, EndDegree) == 0x000010, "Member 'GGraph_DrawEllipse::EndDegree' has a wrong offset!");

// Function FairyGUI.GGraph.DrawPolygon
// 0x0020 (0x0020 - 0x0000)
struct GGraph_DrawPolygon final
{
public:
	float                                         LineWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FillColor;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Points;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_DrawPolygon) == 0x000008, "Wrong alignment on GGraph_DrawPolygon");
static_assert(sizeof(GGraph_DrawPolygon) == 0x000020, "Wrong size on GGraph_DrawPolygon");
static_assert(offsetof(GGraph_DrawPolygon, LineWidth) == 0x000000, "Member 'GGraph_DrawPolygon::LineWidth' has a wrong offset!");
static_assert(offsetof(GGraph_DrawPolygon, LineColor) == 0x000004, "Member 'GGraph_DrawPolygon::LineColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawPolygon, FillColor) == 0x000008, "Member 'GGraph_DrawPolygon::FillColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawPolygon, Points) == 0x000010, "Member 'GGraph_DrawPolygon::Points' has a wrong offset!");

// Function FairyGUI.GGraph.DrawRect
// 0x000C (0x000C - 0x0000)
struct GGraph_DrawRect final
{
public:
	float                                         LineWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FillColor;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_DrawRect) == 0x000004, "Wrong alignment on GGraph_DrawRect");
static_assert(sizeof(GGraph_DrawRect) == 0x00000C, "Wrong size on GGraph_DrawRect");
static_assert(offsetof(GGraph_DrawRect, LineWidth) == 0x000000, "Member 'GGraph_DrawRect::LineWidth' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRect, LineColor) == 0x000004, "Member 'GGraph_DrawRect::LineColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRect, FillColor) == 0x000008, "Member 'GGraph_DrawRect::FillColor' has a wrong offset!");

// Function FairyGUI.GGraph.DrawRegularPolygon
// 0x0028 (0x0028 - 0x0000)
struct GGraph_DrawRegularPolygon final
{
public:
	int32                                         Sides;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineWidth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FillColor;                                         // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Distances;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_DrawRegularPolygon) == 0x000008, "Wrong alignment on GGraph_DrawRegularPolygon");
static_assert(sizeof(GGraph_DrawRegularPolygon) == 0x000028, "Wrong size on GGraph_DrawRegularPolygon");
static_assert(offsetof(GGraph_DrawRegularPolygon, Sides) == 0x000000, "Member 'GGraph_DrawRegularPolygon::Sides' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRegularPolygon, LineWidth) == 0x000004, "Member 'GGraph_DrawRegularPolygon::LineWidth' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRegularPolygon, LineColor) == 0x000008, "Member 'GGraph_DrawRegularPolygon::LineColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRegularPolygon, FillColor) == 0x00000C, "Member 'GGraph_DrawRegularPolygon::FillColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRegularPolygon, Rotation) == 0x000010, "Member 'GGraph_DrawRegularPolygon::Rotation' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRegularPolygon, Distances) == 0x000018, "Member 'GGraph_DrawRegularPolygon::Distances' has a wrong offset!");

// Function FairyGUI.GGraph.DrawRoundRect
// 0x001C (0x001C - 0x0000)
struct GGraph_DrawRoundRect final
{
public:
	float                                         LineWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FillColor;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopLeftRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopRightRadius;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomLeftRadius;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomRightRadius;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_DrawRoundRect) == 0x000004, "Wrong alignment on GGraph_DrawRoundRect");
static_assert(sizeof(GGraph_DrawRoundRect) == 0x00001C, "Wrong size on GGraph_DrawRoundRect");
static_assert(offsetof(GGraph_DrawRoundRect, LineWidth) == 0x000000, "Member 'GGraph_DrawRoundRect::LineWidth' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, LineColor) == 0x000004, "Member 'GGraph_DrawRoundRect::LineColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, FillColor) == 0x000008, "Member 'GGraph_DrawRoundRect::FillColor' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, TopLeftRadius) == 0x00000C, "Member 'GGraph_DrawRoundRect::TopLeftRadius' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, TopRightRadius) == 0x000010, "Member 'GGraph_DrawRoundRect::TopRightRadius' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, BottomLeftRadius) == 0x000014, "Member 'GGraph_DrawRoundRect::BottomLeftRadius' has a wrong offset!");
static_assert(offsetof(GGraph_DrawRoundRect, BottomRightRadius) == 0x000018, "Member 'GGraph_DrawRoundRect::BottomRightRadius' has a wrong offset!");

// Function FairyGUI.GGraph.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GGraph_SetColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_SetColor) == 0x000004, "Wrong alignment on GGraph_SetColor");
static_assert(sizeof(GGraph_SetColor) == 0x000004, "Wrong size on GGraph_SetColor");
static_assert(offsetof(GGraph_SetColor, InColor) == 0x000000, "Member 'GGraph_SetColor::InColor' has a wrong offset!");

// Function FairyGUI.GGraph.GetColor
// 0x0004 (0x0004 - 0x0000)
struct GGraph_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_GetColor) == 0x000004, "Wrong alignment on GGraph_GetColor");
static_assert(sizeof(GGraph_GetColor) == 0x000004, "Wrong size on GGraph_GetColor");
static_assert(offsetof(GGraph_GetColor, ReturnValue) == 0x000000, "Member 'GGraph_GetColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGraph.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct GGraph_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGraph_IsEmpty) == 0x000001, "Wrong alignment on GGraph_IsEmpty");
static_assert(sizeof(GGraph_IsEmpty) == 0x000001, "Wrong size on GGraph_IsEmpty");
static_assert(offsetof(GGraph_IsEmpty, ReturnValue) == 0x000000, "Member 'GGraph_IsEmpty::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.GetColumnGap
// 0x0004 (0x0004 - 0x0000)
struct GGroup_GetColumnGap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_GetColumnGap) == 0x000004, "Wrong alignment on GGroup_GetColumnGap");
static_assert(sizeof(GGroup_GetColumnGap) == 0x000004, "Wrong size on GGroup_GetColumnGap");
static_assert(offsetof(GGroup_GetColumnGap, ReturnValue) == 0x000000, "Member 'GGroup_GetColumnGap::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.GetLayout
// 0x0001 (0x0001 - 0x0000)
struct GGroup_GetLayout final
{
public:
	EGroupLayoutType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_GetLayout) == 0x000001, "Wrong alignment on GGroup_GetLayout");
static_assert(sizeof(GGroup_GetLayout) == 0x000001, "Wrong size on GGroup_GetLayout");
static_assert(offsetof(GGroup_GetLayout, ReturnValue) == 0x000000, "Member 'GGroup_GetLayout::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.GetLineGap
// 0x0004 (0x0004 - 0x0000)
struct GGroup_GetLineGap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_GetLineGap) == 0x000004, "Wrong alignment on GGroup_GetLineGap");
static_assert(sizeof(GGroup_GetLineGap) == 0x000004, "Wrong size on GGroup_GetLineGap");
static_assert(offsetof(GGroup_GetLineGap, ReturnValue) == 0x000000, "Member 'GGroup_GetLineGap::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.GetMainGridIndex
// 0x0004 (0x0004 - 0x0000)
struct GGroup_GetMainGridIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_GetMainGridIndex) == 0x000004, "Wrong alignment on GGroup_GetMainGridIndex");
static_assert(sizeof(GGroup_GetMainGridIndex) == 0x000004, "Wrong size on GGroup_GetMainGridIndex");
static_assert(offsetof(GGroup_GetMainGridIndex, ReturnValue) == 0x000000, "Member 'GGroup_GetMainGridIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.GetMainGridMinSize
// 0x0004 (0x0004 - 0x0000)
struct GGroup_GetMainGridMinSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_GetMainGridMinSize) == 0x000004, "Wrong alignment on GGroup_GetMainGridMinSize");
static_assert(sizeof(GGroup_GetMainGridMinSize) == 0x000004, "Wrong size on GGroup_GetMainGridMinSize");
static_assert(offsetof(GGroup_GetMainGridMinSize, ReturnValue) == 0x000000, "Member 'GGroup_GetMainGridMinSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.IsAutoSizeDisabled
// 0x0001 (0x0001 - 0x0000)
struct GGroup_IsAutoSizeDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_IsAutoSizeDisabled) == 0x000001, "Wrong alignment on GGroup_IsAutoSizeDisabled");
static_assert(sizeof(GGroup_IsAutoSizeDisabled) == 0x000001, "Wrong size on GGroup_IsAutoSizeDisabled");
static_assert(offsetof(GGroup_IsAutoSizeDisabled, ReturnValue) == 0x000000, "Member 'GGroup_IsAutoSizeDisabled::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.IsExcludeInvisibles
// 0x0001 (0x0001 - 0x0000)
struct GGroup_IsExcludeInvisibles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_IsExcludeInvisibles) == 0x000001, "Wrong alignment on GGroup_IsExcludeInvisibles");
static_assert(sizeof(GGroup_IsExcludeInvisibles) == 0x000001, "Wrong size on GGroup_IsExcludeInvisibles");
static_assert(offsetof(GGroup_IsExcludeInvisibles, ReturnValue) == 0x000000, "Member 'GGroup_IsExcludeInvisibles::ReturnValue' has a wrong offset!");

// Function FairyGUI.GGroup.SetAutoSizeDisabled
// 0x0001 (0x0001 - 0x0000)
struct GGroup_SetAutoSizeDisabled final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetAutoSizeDisabled) == 0x000001, "Wrong alignment on GGroup_SetAutoSizeDisabled");
static_assert(sizeof(GGroup_SetAutoSizeDisabled) == 0x000001, "Wrong size on GGroup_SetAutoSizeDisabled");
static_assert(offsetof(GGroup_SetAutoSizeDisabled, bInFlag) == 0x000000, "Member 'GGroup_SetAutoSizeDisabled::bInFlag' has a wrong offset!");

// Function FairyGUI.GGroup.SetBoundsChangedFlag
// 0x0001 (0x0001 - 0x0000)
struct GGroup_SetBoundsChangedFlag final
{
public:
	bool                                          bPositionChangedOnly;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetBoundsChangedFlag) == 0x000001, "Wrong alignment on GGroup_SetBoundsChangedFlag");
static_assert(sizeof(GGroup_SetBoundsChangedFlag) == 0x000001, "Wrong size on GGroup_SetBoundsChangedFlag");
static_assert(offsetof(GGroup_SetBoundsChangedFlag, bPositionChangedOnly) == 0x000000, "Member 'GGroup_SetBoundsChangedFlag::bPositionChangedOnly' has a wrong offset!");

// Function FairyGUI.GGroup.SetColumnGap
// 0x0004 (0x0004 - 0x0000)
struct GGroup_SetColumnGap final
{
public:
	int32                                         InColumnGap;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetColumnGap) == 0x000004, "Wrong alignment on GGroup_SetColumnGap");
static_assert(sizeof(GGroup_SetColumnGap) == 0x000004, "Wrong size on GGroup_SetColumnGap");
static_assert(offsetof(GGroup_SetColumnGap, InColumnGap) == 0x000000, "Member 'GGroup_SetColumnGap::InColumnGap' has a wrong offset!");

// Function FairyGUI.GGroup.SetExcludeInvisibles
// 0x0001 (0x0001 - 0x0000)
struct GGroup_SetExcludeInvisibles final
{
public:
	bool                                          bInFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetExcludeInvisibles) == 0x000001, "Wrong alignment on GGroup_SetExcludeInvisibles");
static_assert(sizeof(GGroup_SetExcludeInvisibles) == 0x000001, "Wrong size on GGroup_SetExcludeInvisibles");
static_assert(offsetof(GGroup_SetExcludeInvisibles, bInFlag) == 0x000000, "Member 'GGroup_SetExcludeInvisibles::bInFlag' has a wrong offset!");

// Function FairyGUI.GGroup.SetLayout
// 0x0001 (0x0001 - 0x0000)
struct GGroup_SetLayout final
{
public:
	EGroupLayoutType                              InLayout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetLayout) == 0x000001, "Wrong alignment on GGroup_SetLayout");
static_assert(sizeof(GGroup_SetLayout) == 0x000001, "Wrong size on GGroup_SetLayout");
static_assert(offsetof(GGroup_SetLayout, InLayout) == 0x000000, "Member 'GGroup_SetLayout::InLayout' has a wrong offset!");

// Function FairyGUI.GGroup.SetLineGap
// 0x0004 (0x0004 - 0x0000)
struct GGroup_SetLineGap final
{
public:
	int32                                         InLineGap;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetLineGap) == 0x000004, "Wrong alignment on GGroup_SetLineGap");
static_assert(sizeof(GGroup_SetLineGap) == 0x000004, "Wrong size on GGroup_SetLineGap");
static_assert(offsetof(GGroup_SetLineGap, InLineGap) == 0x000000, "Member 'GGroup_SetLineGap::InLineGap' has a wrong offset!");

// Function FairyGUI.GGroup.SetMainGridIndex
// 0x0004 (0x0004 - 0x0000)
struct GGroup_SetMainGridIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetMainGridIndex) == 0x000004, "Wrong alignment on GGroup_SetMainGridIndex");
static_assert(sizeof(GGroup_SetMainGridIndex) == 0x000004, "Wrong size on GGroup_SetMainGridIndex");
static_assert(offsetof(GGroup_SetMainGridIndex, InIndex) == 0x000000, "Member 'GGroup_SetMainGridIndex::InIndex' has a wrong offset!");

// Function FairyGUI.GGroup.SetMainGridMinSize
// 0x0004 (0x0004 - 0x0000)
struct GGroup_SetMainGridMinSize final
{
public:
	int32                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGroup_SetMainGridMinSize) == 0x000004, "Wrong alignment on GGroup_SetMainGridMinSize");
static_assert(sizeof(GGroup_SetMainGridMinSize) == 0x000004, "Wrong size on GGroup_SetMainGridMinSize");
static_assert(offsetof(GGroup_SetMainGridMinSize, InSize) == 0x000000, "Member 'GGroup_SetMainGridMinSize::InSize' has a wrong offset!");

// Function FairyGUI.GImage.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GImage_SetColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetColor) == 0x000004, "Wrong alignment on GImage_SetColor");
static_assert(sizeof(GImage_SetColor) == 0x000004, "Wrong size on GImage_SetColor");
static_assert(offsetof(GImage_SetColor, InColor) == 0x000000, "Member 'GImage_SetColor::InColor' has a wrong offset!");

// Function FairyGUI.GImage.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct GImage_SetFillAmount final
{
public:
	float                                         amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetFillAmount) == 0x000004, "Wrong alignment on GImage_SetFillAmount");
static_assert(sizeof(GImage_SetFillAmount) == 0x000004, "Wrong size on GImage_SetFillAmount");
static_assert(offsetof(GImage_SetFillAmount, amount) == 0x000000, "Member 'GImage_SetFillAmount::amount' has a wrong offset!");

// Function FairyGUI.GImage.SetFillClockwise
// 0x0001 (0x0001 - 0x0000)
struct GImage_SetFillClockwise final
{
public:
	bool                                          bClockwise;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetFillClockwise) == 0x000001, "Wrong alignment on GImage_SetFillClockwise");
static_assert(sizeof(GImage_SetFillClockwise) == 0x000001, "Wrong size on GImage_SetFillClockwise");
static_assert(offsetof(GImage_SetFillClockwise, bClockwise) == 0x000000, "Member 'GImage_SetFillClockwise::bClockwise' has a wrong offset!");

// Function FairyGUI.GImage.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct GImage_SetFillMethod final
{
public:
	EFillMethod                                   Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetFillMethod) == 0x000001, "Wrong alignment on GImage_SetFillMethod");
static_assert(sizeof(GImage_SetFillMethod) == 0x000001, "Wrong size on GImage_SetFillMethod");
static_assert(offsetof(GImage_SetFillMethod, Method) == 0x000000, "Member 'GImage_SetFillMethod::Method' has a wrong offset!");

// Function FairyGUI.GImage.SetFillOrigin
// 0x0004 (0x0004 - 0x0000)
struct GImage_SetFillOrigin final
{
public:
	int32                                         Origin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetFillOrigin) == 0x000004, "Wrong alignment on GImage_SetFillOrigin");
static_assert(sizeof(GImage_SetFillOrigin) == 0x000004, "Wrong size on GImage_SetFillOrigin");
static_assert(offsetof(GImage_SetFillOrigin, Origin) == 0x000000, "Member 'GImage_SetFillOrigin::Origin' has a wrong offset!");

// Function FairyGUI.GImage.SetFlip
// 0x0001 (0x0001 - 0x0000)
struct GImage_SetFlip final
{
public:
	EFlipType                                     InFlip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_SetFlip) == 0x000001, "Wrong alignment on GImage_SetFlip");
static_assert(sizeof(GImage_SetFlip) == 0x000001, "Wrong size on GImage_SetFlip");
static_assert(offsetof(GImage_SetFlip, InFlip) == 0x000000, "Member 'GImage_SetFlip::InFlip' has a wrong offset!");

// Function FairyGUI.GImage.GetColor
// 0x0004 (0x0004 - 0x0000)
struct GImage_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_GetColor) == 0x000004, "Wrong alignment on GImage_GetColor");
static_assert(sizeof(GImage_GetColor) == 0x000004, "Wrong size on GImage_GetColor");
static_assert(offsetof(GImage_GetColor, ReturnValue) == 0x000000, "Member 'GImage_GetColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GImage.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct GImage_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_GetFillAmount) == 0x000004, "Wrong alignment on GImage_GetFillAmount");
static_assert(sizeof(GImage_GetFillAmount) == 0x000004, "Wrong size on GImage_GetFillAmount");
static_assert(offsetof(GImage_GetFillAmount, ReturnValue) == 0x000000, "Member 'GImage_GetFillAmount::ReturnValue' has a wrong offset!");

// Function FairyGUI.GImage.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct GImage_GetFillMethod final
{
public:
	EFillMethod                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_GetFillMethod) == 0x000001, "Wrong alignment on GImage_GetFillMethod");
static_assert(sizeof(GImage_GetFillMethod) == 0x000001, "Wrong size on GImage_GetFillMethod");
static_assert(offsetof(GImage_GetFillMethod, ReturnValue) == 0x000000, "Member 'GImage_GetFillMethod::ReturnValue' has a wrong offset!");

// Function FairyGUI.GImage.GetFillOrigin
// 0x0004 (0x0004 - 0x0000)
struct GImage_GetFillOrigin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_GetFillOrigin) == 0x000004, "Wrong alignment on GImage_GetFillOrigin");
static_assert(sizeof(GImage_GetFillOrigin) == 0x000004, "Wrong size on GImage_GetFillOrigin");
static_assert(offsetof(GImage_GetFillOrigin, ReturnValue) == 0x000000, "Member 'GImage_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GImage.GetFlip
// 0x0001 (0x0001 - 0x0000)
struct GImage_GetFlip final
{
public:
	EFlipType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_GetFlip) == 0x000001, "Wrong alignment on GImage_GetFlip");
static_assert(sizeof(GImage_GetFlip) == 0x000001, "Wrong size on GImage_GetFlip");
static_assert(offsetof(GImage_GetFlip, ReturnValue) == 0x000000, "Member 'GImage_GetFlip::ReturnValue' has a wrong offset!");

// Function FairyGUI.GImage.IsFillClockwise
// 0x0001 (0x0001 - 0x0000)
struct GImage_IsFillClockwise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GImage_IsFillClockwise) == 0x000001, "Wrong alignment on GImage_IsFillClockwise");
static_assert(sizeof(GImage_IsFillClockwise) == 0x000001, "Wrong size on GImage_IsFillClockwise");
static_assert(offsetof(GImage_IsFillClockwise, ReturnValue) == 0x000000, "Member 'GImage_IsFillClockwise::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLabel.SetTitle
// 0x0010 (0x0010 - 0x0000)
struct GLabel_SetTitle final
{
public:
	class FString                                 InTitle;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_SetTitle) == 0x000008, "Wrong alignment on GLabel_SetTitle");
static_assert(sizeof(GLabel_SetTitle) == 0x000010, "Wrong size on GLabel_SetTitle");
static_assert(offsetof(GLabel_SetTitle, InTitle) == 0x000000, "Member 'GLabel_SetTitle::InTitle' has a wrong offset!");

// Function FairyGUI.GLabel.SetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GLabel_SetTitleColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_SetTitleColor) == 0x000004, "Wrong alignment on GLabel_SetTitleColor");
static_assert(sizeof(GLabel_SetTitleColor) == 0x000004, "Wrong size on GLabel_SetTitleColor");
static_assert(offsetof(GLabel_SetTitleColor, InColor) == 0x000000, "Member 'GLabel_SetTitleColor::InColor' has a wrong offset!");

// Function FairyGUI.GLabel.SetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GLabel_SetTitleFontSize final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_SetTitleFontSize) == 0x000004, "Wrong alignment on GLabel_SetTitleFontSize");
static_assert(sizeof(GLabel_SetTitleFontSize) == 0x000004, "Wrong size on GLabel_SetTitleFontSize");
static_assert(offsetof(GLabel_SetTitleFontSize, Value) == 0x000000, "Member 'GLabel_SetTitleFontSize::Value' has a wrong offset!");

// Function FairyGUI.GLabel.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct GLabel_GetTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_GetTitle) == 0x000008, "Wrong alignment on GLabel_GetTitle");
static_assert(sizeof(GLabel_GetTitle) == 0x000010, "Wrong size on GLabel_GetTitle");
static_assert(offsetof(GLabel_GetTitle, ReturnValue) == 0x000000, "Member 'GLabel_GetTitle::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLabel.GetTitleColor
// 0x0004 (0x0004 - 0x0000)
struct GLabel_GetTitleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_GetTitleColor) == 0x000004, "Wrong alignment on GLabel_GetTitleColor");
static_assert(sizeof(GLabel_GetTitleColor) == 0x000004, "Wrong size on GLabel_GetTitleColor");
static_assert(offsetof(GLabel_GetTitleColor, ReturnValue) == 0x000000, "Member 'GLabel_GetTitleColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLabel.GetTitleFontSize
// 0x0004 (0x0004 - 0x0000)
struct GLabel_GetTitleFontSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLabel_GetTitleFontSize) == 0x000004, "Wrong alignment on GLabel_GetTitleFontSize");
static_assert(sizeof(GLabel_GetTitleFontSize) == 0x000004, "Wrong size on GLabel_GetTitleFontSize");
static_assert(offsetof(GLabel_GetTitleFontSize, ReturnValue) == 0x000000, "Member 'GLabel_GetTitleFontSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.AddItemFromPool
// 0x0018 (0x0018 - 0x0000)
struct GList_AddItemFromPool final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_AddItemFromPool) == 0x000008, "Wrong alignment on GList_AddItemFromPool");
static_assert(sizeof(GList_AddItemFromPool) == 0x000018, "Wrong size on GList_AddItemFromPool");
static_assert(offsetof(GList_AddItemFromPool, URL) == 0x000000, "Member 'GList_AddItemFromPool::URL' has a wrong offset!");
static_assert(offsetof(GList_AddItemFromPool, ReturnValue) == 0x000010, "Member 'GList_AddItemFromPool::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.AddSelection
// 0x0008 (0x0008 - 0x0000)
struct GList_AddSelection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollItToView;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GList_AddSelection) == 0x000004, "Wrong alignment on GList_AddSelection");
static_assert(sizeof(GList_AddSelection) == 0x000008, "Wrong size on GList_AddSelection");
static_assert(offsetof(GList_AddSelection, Index_0) == 0x000000, "Member 'GList_AddSelection::Index_0' has a wrong offset!");
static_assert(offsetof(GList_AddSelection, bScrollItToView) == 0x000004, "Member 'GList_AddSelection::bScrollItToView' has a wrong offset!");

// Function FairyGUI.GList.GetColumnCount
// 0x0004 (0x0004 - 0x0000)
struct GList_GetColumnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetColumnCount) == 0x000004, "Wrong alignment on GList_GetColumnCount");
static_assert(sizeof(GList_GetColumnCount) == 0x000004, "Wrong size on GList_GetColumnCount");
static_assert(offsetof(GList_GetColumnCount, ReturnValue) == 0x000000, "Member 'GList_GetColumnCount::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.OnClickItemHandler
// 0x0008 (0x0008 - 0x0000)
struct GList_OnClickItemHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_OnClickItemHandler) == 0x000008, "Wrong alignment on GList_OnClickItemHandler");
static_assert(sizeof(GList_OnClickItemHandler) == 0x000008, "Wrong size on GList_OnClickItemHandler");
static_assert(offsetof(GList_OnClickItemHandler, Context) == 0x000000, "Member 'GList_OnClickItemHandler::Context' has a wrong offset!");

// Function FairyGUI.GList.RemoveChildrenToPool
// 0x0008 (0x0008 - 0x0000)
struct GList_RemoveChildrenToPool final
{
public:
	int32                                         BeginIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_RemoveChildrenToPool) == 0x000004, "Wrong alignment on GList_RemoveChildrenToPool");
static_assert(sizeof(GList_RemoveChildrenToPool) == 0x000008, "Wrong size on GList_RemoveChildrenToPool");
static_assert(offsetof(GList_RemoveChildrenToPool, BeginIndex) == 0x000000, "Member 'GList_RemoveChildrenToPool::BeginIndex' has a wrong offset!");
static_assert(offsetof(GList_RemoveChildrenToPool, EndIndex) == 0x000004, "Member 'GList_RemoveChildrenToPool::EndIndex' has a wrong offset!");

// Function FairyGUI.GList.RemoveChildToPool
// 0x0008 (0x0008 - 0x0000)
struct GList_RemoveChildToPool final
{
public:
	class UGObject*                               Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_RemoveChildToPool) == 0x000008, "Wrong alignment on GList_RemoveChildToPool");
static_assert(sizeof(GList_RemoveChildToPool) == 0x000008, "Wrong size on GList_RemoveChildToPool");
static_assert(offsetof(GList_RemoveChildToPool, Child) == 0x000000, "Member 'GList_RemoveChildToPool::Child' has a wrong offset!");

// Function FairyGUI.GList.RemoveChildToPoolAt
// 0x0004 (0x0004 - 0x0000)
struct GList_RemoveChildToPoolAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_RemoveChildToPoolAt) == 0x000004, "Wrong alignment on GList_RemoveChildToPoolAt");
static_assert(sizeof(GList_RemoveChildToPoolAt) == 0x000004, "Wrong size on GList_RemoveChildToPoolAt");
static_assert(offsetof(GList_RemoveChildToPoolAt, Index_0) == 0x000000, "Member 'GList_RemoveChildToPoolAt::Index_0' has a wrong offset!");

// Function FairyGUI.GList.RemoveSelection
// 0x0004 (0x0004 - 0x0000)
struct GList_RemoveSelection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_RemoveSelection) == 0x000004, "Wrong alignment on GList_RemoveSelection");
static_assert(sizeof(GList_RemoveSelection) == 0x000004, "Wrong size on GList_RemoveSelection");
static_assert(offsetof(GList_RemoveSelection, Index_0) == 0x000000, "Member 'GList_RemoveSelection::Index_0' has a wrong offset!");

// Function FairyGUI.GList.ResizeToFit
// 0x0008 (0x0008 - 0x0000)
struct GList_ResizeToFit final
{
public:
	int32                                         ItemCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_ResizeToFit) == 0x000004, "Wrong alignment on GList_ResizeToFit");
static_assert(sizeof(GList_ResizeToFit) == 0x000008, "Wrong size on GList_ResizeToFit");
static_assert(offsetof(GList_ResizeToFit, ItemCount) == 0x000000, "Member 'GList_ResizeToFit::ItemCount' has a wrong offset!");
static_assert(offsetof(GList_ResizeToFit, InMinSize) == 0x000004, "Member 'GList_ResizeToFit::InMinSize' has a wrong offset!");

// Function FairyGUI.GList.ScrollToView
// 0x0008 (0x0008 - 0x0000)
struct GList_ScrollToView final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFirst;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GList_ScrollToView) == 0x000004, "Wrong alignment on GList_ScrollToView");
static_assert(sizeof(GList_ScrollToView) == 0x000008, "Wrong size on GList_ScrollToView");
static_assert(offsetof(GList_ScrollToView, Index_0) == 0x000000, "Member 'GList_ScrollToView::Index_0' has a wrong offset!");
static_assert(offsetof(GList_ScrollToView, bAnimation) == 0x000004, "Member 'GList_ScrollToView::bAnimation' has a wrong offset!");
static_assert(offsetof(GList_ScrollToView, bSetFirst) == 0x000005, "Member 'GList_ScrollToView::bSetFirst' has a wrong offset!");

// Function FairyGUI.GList.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct GList_SetAlign final
{
public:
	EAlignType                                    InAlign;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetAlign) == 0x000001, "Wrong alignment on GList_SetAlign");
static_assert(sizeof(GList_SetAlign) == 0x000001, "Wrong size on GList_SetAlign");
static_assert(offsetof(GList_SetAlign, InAlign) == 0x000000, "Member 'GList_SetAlign::InAlign' has a wrong offset!");

// Function FairyGUI.GList.SetAutoResizeItem
// 0x0001 (0x0001 - 0x0000)
struct GList_SetAutoResizeItem final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetAutoResizeItem) == 0x000001, "Wrong alignment on GList_SetAutoResizeItem");
static_assert(sizeof(GList_SetAutoResizeItem) == 0x000001, "Wrong size on GList_SetAutoResizeItem");
static_assert(offsetof(GList_SetAutoResizeItem, bFlag) == 0x000000, "Member 'GList_SetAutoResizeItem::bFlag' has a wrong offset!");

// Function FairyGUI.GList.SetColumnCount
// 0x0004 (0x0004 - 0x0000)
struct GList_SetColumnCount final
{
public:
	int32                                         InColumnCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetColumnCount) == 0x000004, "Wrong alignment on GList_SetColumnCount");
static_assert(sizeof(GList_SetColumnCount) == 0x000004, "Wrong size on GList_SetColumnCount");
static_assert(offsetof(GList_SetColumnCount, InColumnCount) == 0x000000, "Member 'GList_SetColumnCount::InColumnCount' has a wrong offset!");

// Function FairyGUI.GList.SetColumnGap
// 0x0004 (0x0004 - 0x0000)
struct GList_SetColumnGap final
{
public:
	int32                                         InColumnGap;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetColumnGap) == 0x000004, "Wrong alignment on GList_SetColumnGap");
static_assert(sizeof(GList_SetColumnGap) == 0x000004, "Wrong size on GList_SetColumnGap");
static_assert(offsetof(GList_SetColumnGap, InColumnGap) == 0x000000, "Member 'GList_SetColumnGap::InColumnGap' has a wrong offset!");

// Function FairyGUI.GList.SetDefaultItem
// 0x0010 (0x0010 - 0x0000)
struct GList_SetDefaultItem final
{
public:
	class FString                                 InDefaultItem;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetDefaultItem) == 0x000008, "Wrong alignment on GList_SetDefaultItem");
static_assert(sizeof(GList_SetDefaultItem) == 0x000010, "Wrong size on GList_SetDefaultItem");
static_assert(offsetof(GList_SetDefaultItem, InDefaultItem) == 0x000000, "Member 'GList_SetDefaultItem::InDefaultItem' has a wrong offset!");

// Function FairyGUI.GList.SetItemProvider
// 0x0010 (0x0010 - 0x0000)
struct GList_SetItemProvider final
{
public:
	TDelegate<void(int32 Index)>                  InItemProvider;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetItemProvider) == 0x000004, "Wrong alignment on GList_SetItemProvider");
static_assert(sizeof(GList_SetItemProvider) == 0x000010, "Wrong size on GList_SetItemProvider");
static_assert(offsetof(GList_SetItemProvider, InItemProvider) == 0x000000, "Member 'GList_SetItemProvider::InItemProvider' has a wrong offset!");

// Function FairyGUI.GList.SetItemRenderer
// 0x0010 (0x0010 - 0x0000)
struct GList_SetItemRenderer final
{
public:
	TDelegate<void(int32 Index, class UGObject* Obj)> InItemRenderer;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetItemRenderer) == 0x000004, "Wrong alignment on GList_SetItemRenderer");
static_assert(sizeof(GList_SetItemRenderer) == 0x000010, "Wrong size on GList_SetItemRenderer");
static_assert(offsetof(GList_SetItemRenderer, InItemRenderer) == 0x000000, "Member 'GList_SetItemRenderer::InItemRenderer' has a wrong offset!");

// Function FairyGUI.GList.SetLayout
// 0x0001 (0x0001 - 0x0000)
struct GList_SetLayout final
{
public:
	EListLayoutType                               InLayout;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetLayout) == 0x000001, "Wrong alignment on GList_SetLayout");
static_assert(sizeof(GList_SetLayout) == 0x000001, "Wrong size on GList_SetLayout");
static_assert(offsetof(GList_SetLayout, InLayout) == 0x000000, "Member 'GList_SetLayout::InLayout' has a wrong offset!");

// Function FairyGUI.GList.SetLineCount
// 0x0004 (0x0004 - 0x0000)
struct GList_SetLineCount final
{
public:
	int32                                         InLineCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetLineCount) == 0x000004, "Wrong alignment on GList_SetLineCount");
static_assert(sizeof(GList_SetLineCount) == 0x000004, "Wrong size on GList_SetLineCount");
static_assert(offsetof(GList_SetLineCount, InLineCount) == 0x000000, "Member 'GList_SetLineCount::InLineCount' has a wrong offset!");

// Function FairyGUI.GList.SetLineGap
// 0x0004 (0x0004 - 0x0000)
struct GList_SetLineGap final
{
public:
	int32                                         InLineGap;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetLineGap) == 0x000004, "Wrong alignment on GList_SetLineGap");
static_assert(sizeof(GList_SetLineGap) == 0x000004, "Wrong size on GList_SetLineGap");
static_assert(offsetof(GList_SetLineGap, InLineGap) == 0x000000, "Member 'GList_SetLineGap::InLineGap' has a wrong offset!");

// Function FairyGUI.GList.SetNumItems
// 0x0004 (0x0004 - 0x0000)
struct GList_SetNumItems final
{
public:
	int32                                         InNumItems;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetNumItems) == 0x000004, "Wrong alignment on GList_SetNumItems");
static_assert(sizeof(GList_SetNumItems) == 0x000004, "Wrong size on GList_SetNumItems");
static_assert(offsetof(GList_SetNumItems, InNumItems) == 0x000000, "Member 'GList_SetNumItems::InNumItems' has a wrong offset!");

// Function FairyGUI.GList.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GList_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetSelectedIndex) == 0x000004, "Wrong alignment on GList_SetSelectedIndex");
static_assert(sizeof(GList_SetSelectedIndex) == 0x000004, "Wrong size on GList_SetSelectedIndex");
static_assert(offsetof(GList_SetSelectedIndex, Index_0) == 0x000000, "Member 'GList_SetSelectedIndex::Index_0' has a wrong offset!");

// Function FairyGUI.GList.SetSelectionController
// 0x0008 (0x0008 - 0x0000)
struct GList_SetSelectionController final
{
public:
	class UGController*                           InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetSelectionController) == 0x000008, "Wrong alignment on GList_SetSelectionController");
static_assert(sizeof(GList_SetSelectionController) == 0x000008, "Wrong size on GList_SetSelectionController");
static_assert(offsetof(GList_SetSelectionController, InController) == 0x000000, "Member 'GList_SetSelectionController::InController' has a wrong offset!");

// Function FairyGUI.GList.SetSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct GList_SetSelectionMode final
{
public:
	EListSelectionMode                            InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetSelectionMode) == 0x000001, "Wrong alignment on GList_SetSelectionMode");
static_assert(sizeof(GList_SetSelectionMode) == 0x000001, "Wrong size on GList_SetSelectionMode");
static_assert(offsetof(GList_SetSelectionMode, InMode) == 0x000000, "Member 'GList_SetSelectionMode::InMode' has a wrong offset!");

// Function FairyGUI.GList.SetVerticalAlign
// 0x0001 (0x0001 - 0x0000)
struct GList_SetVerticalAlign final
{
public:
	EVerticalAlignType                            InVerticalAlign;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_SetVerticalAlign) == 0x000001, "Wrong alignment on GList_SetVerticalAlign");
static_assert(sizeof(GList_SetVerticalAlign) == 0x000001, "Wrong size on GList_SetVerticalAlign");
static_assert(offsetof(GList_SetVerticalAlign, InVerticalAlign) == 0x000000, "Member 'GList_SetVerticalAlign::InVerticalAlign' has a wrong offset!");

// Function FairyGUI.GList.ChildIndexToItemIndex
// 0x0008 (0x0008 - 0x0000)
struct GList_ChildIndexToItemIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_ChildIndexToItemIndex) == 0x000004, "Wrong alignment on GList_ChildIndexToItemIndex");
static_assert(sizeof(GList_ChildIndexToItemIndex) == 0x000008, "Wrong size on GList_ChildIndexToItemIndex");
static_assert(offsetof(GList_ChildIndexToItemIndex, Index_0) == 0x000000, "Member 'GList_ChildIndexToItemIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GList_ChildIndexToItemIndex, ReturnValue) == 0x000004, "Member 'GList_ChildIndexToItemIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct GList_GetAlign final
{
public:
	EAlignType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetAlign) == 0x000001, "Wrong alignment on GList_GetAlign");
static_assert(sizeof(GList_GetAlign) == 0x000001, "Wrong size on GList_GetAlign");
static_assert(offsetof(GList_GetAlign, ReturnValue) == 0x000000, "Member 'GList_GetAlign::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetAutoResizeItem
// 0x0001 (0x0001 - 0x0000)
struct GList_GetAutoResizeItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetAutoResizeItem) == 0x000001, "Wrong alignment on GList_GetAutoResizeItem");
static_assert(sizeof(GList_GetAutoResizeItem) == 0x000001, "Wrong size on GList_GetAutoResizeItem");
static_assert(offsetof(GList_GetAutoResizeItem, ReturnValue) == 0x000000, "Member 'GList_GetAutoResizeItem::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetColumnGap
// 0x0004 (0x0004 - 0x0000)
struct GList_GetColumnGap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetColumnGap) == 0x000004, "Wrong alignment on GList_GetColumnGap");
static_assert(sizeof(GList_GetColumnGap) == 0x000004, "Wrong size on GList_GetColumnGap");
static_assert(offsetof(GList_GetColumnGap, ReturnValue) == 0x000000, "Member 'GList_GetColumnGap::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetDefaultItem
// 0x0010 (0x0010 - 0x0000)
struct GList_GetDefaultItem final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetDefaultItem) == 0x000008, "Wrong alignment on GList_GetDefaultItem");
static_assert(sizeof(GList_GetDefaultItem) == 0x000010, "Wrong size on GList_GetDefaultItem");
static_assert(offsetof(GList_GetDefaultItem, ReturnValue) == 0x000000, "Member 'GList_GetDefaultItem::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetLayout
// 0x0001 (0x0001 - 0x0000)
struct GList_GetLayout final
{
public:
	EListLayoutType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetLayout) == 0x000001, "Wrong alignment on GList_GetLayout");
static_assert(sizeof(GList_GetLayout) == 0x000001, "Wrong size on GList_GetLayout");
static_assert(offsetof(GList_GetLayout, ReturnValue) == 0x000000, "Member 'GList_GetLayout::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetLineCount
// 0x0004 (0x0004 - 0x0000)
struct GList_GetLineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetLineCount) == 0x000004, "Wrong alignment on GList_GetLineCount");
static_assert(sizeof(GList_GetLineCount) == 0x000004, "Wrong size on GList_GetLineCount");
static_assert(offsetof(GList_GetLineCount, ReturnValue) == 0x000000, "Member 'GList_GetLineCount::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetLineGap
// 0x0004 (0x0004 - 0x0000)
struct GList_GetLineGap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetLineGap) == 0x000004, "Wrong alignment on GList_GetLineGap");
static_assert(sizeof(GList_GetLineGap) == 0x000004, "Wrong size on GList_GetLineGap");
static_assert(offsetof(GList_GetLineGap, ReturnValue) == 0x000000, "Member 'GList_GetLineGap::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct GList_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetNumItems) == 0x000004, "Wrong alignment on GList_GetNumItems");
static_assert(sizeof(GList_GetNumItems) == 0x000004, "Wrong size on GList_GetNumItems");
static_assert(offsetof(GList_GetNumItems, ReturnValue) == 0x000000, "Member 'GList_GetNumItems::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GList_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetSelectedIndex) == 0x000004, "Wrong alignment on GList_GetSelectedIndex");
static_assert(sizeof(GList_GetSelectedIndex) == 0x000004, "Wrong size on GList_GetSelectedIndex");
static_assert(offsetof(GList_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GList_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetSelectionController
// 0x0008 (0x0008 - 0x0000)
struct GList_GetSelectionController final
{
public:
	class UGController*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetSelectionController) == 0x000008, "Wrong alignment on GList_GetSelectionController");
static_assert(sizeof(GList_GetSelectionController) == 0x000008, "Wrong size on GList_GetSelectionController");
static_assert(offsetof(GList_GetSelectionController, ReturnValue) == 0x000000, "Member 'GList_GetSelectionController::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct GList_GetSelectionMode final
{
public:
	EListSelectionMode                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetSelectionMode) == 0x000001, "Wrong alignment on GList_GetSelectionMode");
static_assert(sizeof(GList_GetSelectionMode) == 0x000001, "Wrong size on GList_GetSelectionMode");
static_assert(offsetof(GList_GetSelectionMode, ReturnValue) == 0x000000, "Member 'GList_GetSelectionMode::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.GetVerticalAlign
// 0x0001 (0x0001 - 0x0000)
struct GList_GetVerticalAlign final
{
public:
	EVerticalAlignType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_GetVerticalAlign) == 0x000001, "Wrong alignment on GList_GetVerticalAlign");
static_assert(sizeof(GList_GetVerticalAlign) == 0x000001, "Wrong size on GList_GetVerticalAlign");
static_assert(offsetof(GList_GetVerticalAlign, ReturnValue) == 0x000000, "Member 'GList_GetVerticalAlign::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.IsVirtual
// 0x0001 (0x0001 - 0x0000)
struct GList_IsVirtual final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_IsVirtual) == 0x000001, "Wrong alignment on GList_IsVirtual");
static_assert(sizeof(GList_IsVirtual) == 0x000001, "Wrong size on GList_IsVirtual");
static_assert(offsetof(GList_IsVirtual, ReturnValue) == 0x000000, "Member 'GList_IsVirtual::ReturnValue' has a wrong offset!");

// Function FairyGUI.GList.ItemIndexToChildIndex
// 0x0008 (0x0008 - 0x0000)
struct GList_ItemIndexToChildIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GList_ItemIndexToChildIndex) == 0x000004, "Wrong alignment on GList_ItemIndexToChildIndex");
static_assert(sizeof(GList_ItemIndexToChildIndex) == 0x000008, "Wrong size on GList_ItemIndexToChildIndex");
static_assert(offsetof(GList_ItemIndexToChildIndex, Index_0) == 0x000000, "Member 'GList_ItemIndexToChildIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GList_ItemIndexToChildIndex, ReturnValue) == 0x000004, "Member 'GList_ItemIndexToChildIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetAlign final
{
public:
	EAlignType                                    InAlign;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetAlign) == 0x000001, "Wrong alignment on GLoader_SetAlign");
static_assert(sizeof(GLoader_SetAlign) == 0x000001, "Wrong size on GLoader_SetAlign");
static_assert(offsetof(GLoader_SetAlign, InAlign) == 0x000000, "Member 'GLoader_SetAlign::InAlign' has a wrong offset!");

// Function FairyGUI.GLoader.SetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetAutoSize final
{
public:
	bool                                          bInAutoSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetAutoSize) == 0x000001, "Wrong alignment on GLoader_SetAutoSize");
static_assert(sizeof(GLoader_SetAutoSize) == 0x000001, "Wrong size on GLoader_SetAutoSize");
static_assert(offsetof(GLoader_SetAutoSize, bInAutoSize) == 0x000000, "Member 'GLoader_SetAutoSize::bInAutoSize' has a wrong offset!");

// Function FairyGUI.GLoader.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GLoader_SetColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetColor) == 0x000004, "Wrong alignment on GLoader_SetColor");
static_assert(sizeof(GLoader_SetColor) == 0x000004, "Wrong size on GLoader_SetColor");
static_assert(offsetof(GLoader_SetColor, InColor) == 0x000000, "Member 'GLoader_SetColor::InColor' has a wrong offset!");

// Function FairyGUI.GLoader.SetFill
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetFill final
{
public:
	ELoaderFillType                               InFillType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFill) == 0x000001, "Wrong alignment on GLoader_SetFill");
static_assert(sizeof(GLoader_SetFill) == 0x000001, "Wrong size on GLoader_SetFill");
static_assert(offsetof(GLoader_SetFill, InFillType) == 0x000000, "Member 'GLoader_SetFill::InFillType' has a wrong offset!");

// Function FairyGUI.GLoader.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct GLoader_SetFillAmount final
{
public:
	float                                         amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFillAmount) == 0x000004, "Wrong alignment on GLoader_SetFillAmount");
static_assert(sizeof(GLoader_SetFillAmount) == 0x000004, "Wrong size on GLoader_SetFillAmount");
static_assert(offsetof(GLoader_SetFillAmount, amount) == 0x000000, "Member 'GLoader_SetFillAmount::amount' has a wrong offset!");

// Function FairyGUI.GLoader.SetFillClockwise
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetFillClockwise final
{
public:
	bool                                          bClockwise;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFillClockwise) == 0x000001, "Wrong alignment on GLoader_SetFillClockwise");
static_assert(sizeof(GLoader_SetFillClockwise) == 0x000001, "Wrong size on GLoader_SetFillClockwise");
static_assert(offsetof(GLoader_SetFillClockwise, bClockwise) == 0x000000, "Member 'GLoader_SetFillClockwise::bClockwise' has a wrong offset!");

// Function FairyGUI.GLoader.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetFillMethod final
{
public:
	EFillMethod                                   Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFillMethod) == 0x000001, "Wrong alignment on GLoader_SetFillMethod");
static_assert(sizeof(GLoader_SetFillMethod) == 0x000001, "Wrong size on GLoader_SetFillMethod");
static_assert(offsetof(GLoader_SetFillMethod, Method) == 0x000000, "Member 'GLoader_SetFillMethod::Method' has a wrong offset!");

// Function FairyGUI.GLoader.SetFillOrigin
// 0x0004 (0x0004 - 0x0000)
struct GLoader_SetFillOrigin final
{
public:
	int32                                         Origin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFillOrigin) == 0x000004, "Wrong alignment on GLoader_SetFillOrigin");
static_assert(sizeof(GLoader_SetFillOrigin) == 0x000004, "Wrong size on GLoader_SetFillOrigin");
static_assert(offsetof(GLoader_SetFillOrigin, Origin) == 0x000000, "Member 'GLoader_SetFillOrigin::Origin' has a wrong offset!");

// Function FairyGUI.GLoader.SetFlip
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetFlip final
{
public:
	EFlipType                                     InFlip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFlip) == 0x000001, "Wrong alignment on GLoader_SetFlip");
static_assert(sizeof(GLoader_SetFlip) == 0x000001, "Wrong size on GLoader_SetFlip");
static_assert(offsetof(GLoader_SetFlip, InFlip) == 0x000000, "Member 'GLoader_SetFlip::InFlip' has a wrong offset!");

// Function FairyGUI.GLoader.SetFrame
// 0x0004 (0x0004 - 0x0000)
struct GLoader_SetFrame final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetFrame) == 0x000004, "Wrong alignment on GLoader_SetFrame");
static_assert(sizeof(GLoader_SetFrame) == 0x000004, "Wrong size on GLoader_SetFrame");
static_assert(offsetof(GLoader_SetFrame, InFrame) == 0x000000, "Member 'GLoader_SetFrame::InFrame' has a wrong offset!");

// Function FairyGUI.GLoader.SetPlaying
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetPlaying final
{
public:
	bool                                          bInPlaying;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetPlaying) == 0x000001, "Wrong alignment on GLoader_SetPlaying");
static_assert(sizeof(GLoader_SetPlaying) == 0x000001, "Wrong size on GLoader_SetPlaying");
static_assert(offsetof(GLoader_SetPlaying, bInPlaying) == 0x000000, "Member 'GLoader_SetPlaying::bInPlaying' has a wrong offset!");

// Function FairyGUI.GLoader.SetShrinkOnly
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetShrinkOnly final
{
public:
	bool                                          bInShrinkOnly;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetShrinkOnly) == 0x000001, "Wrong alignment on GLoader_SetShrinkOnly");
static_assert(sizeof(GLoader_SetShrinkOnly) == 0x000001, "Wrong size on GLoader_SetShrinkOnly");
static_assert(offsetof(GLoader_SetShrinkOnly, bInShrinkOnly) == 0x000000, "Member 'GLoader_SetShrinkOnly::bInShrinkOnly' has a wrong offset!");

// Function FairyGUI.GLoader.SetURL
// 0x0010 (0x0010 - 0x0000)
struct GLoader_SetURL final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetURL) == 0x000008, "Wrong alignment on GLoader_SetURL");
static_assert(sizeof(GLoader_SetURL) == 0x000010, "Wrong size on GLoader_SetURL");
static_assert(offsetof(GLoader_SetURL, InUrl) == 0x000000, "Member 'GLoader_SetURL::InUrl' has a wrong offset!");

// Function FairyGUI.GLoader.SetVerticalAlign
// 0x0001 (0x0001 - 0x0000)
struct GLoader_SetVerticalAlign final
{
public:
	EVerticalAlignType                            InVerticalAlign;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_SetVerticalAlign) == 0x000001, "Wrong alignment on GLoader_SetVerticalAlign");
static_assert(sizeof(GLoader_SetVerticalAlign) == 0x000001, "Wrong size on GLoader_SetVerticalAlign");
static_assert(offsetof(GLoader_SetVerticalAlign, InVerticalAlign) == 0x000000, "Member 'GLoader_SetVerticalAlign::InVerticalAlign' has a wrong offset!");

// Function FairyGUI.GLoader.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetAlign final
{
public:
	EAlignType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetAlign) == 0x000001, "Wrong alignment on GLoader_GetAlign");
static_assert(sizeof(GLoader_GetAlign) == 0x000001, "Wrong size on GLoader_GetAlign");
static_assert(offsetof(GLoader_GetAlign, ReturnValue) == 0x000000, "Member 'GLoader_GetAlign::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetAutoSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetAutoSize) == 0x000001, "Wrong alignment on GLoader_GetAutoSize");
static_assert(sizeof(GLoader_GetAutoSize) == 0x000001, "Wrong size on GLoader_GetAutoSize");
static_assert(offsetof(GLoader_GetAutoSize, ReturnValue) == 0x000000, "Member 'GLoader_GetAutoSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetColor
// 0x0004 (0x0004 - 0x0000)
struct GLoader_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetColor) == 0x000004, "Wrong alignment on GLoader_GetColor");
static_assert(sizeof(GLoader_GetColor) == 0x000004, "Wrong size on GLoader_GetColor");
static_assert(offsetof(GLoader_GetColor, ReturnValue) == 0x000000, "Member 'GLoader_GetColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFill
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetFill final
{
public:
	ELoaderFillType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFill) == 0x000001, "Wrong alignment on GLoader_GetFill");
static_assert(sizeof(GLoader_GetFill) == 0x000001, "Wrong size on GLoader_GetFill");
static_assert(offsetof(GLoader_GetFill, ReturnValue) == 0x000000, "Member 'GLoader_GetFill::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct GLoader_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFillAmount) == 0x000004, "Wrong alignment on GLoader_GetFillAmount");
static_assert(sizeof(GLoader_GetFillAmount) == 0x000004, "Wrong size on GLoader_GetFillAmount");
static_assert(offsetof(GLoader_GetFillAmount, ReturnValue) == 0x000000, "Member 'GLoader_GetFillAmount::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetFillMethod final
{
public:
	EFillMethod                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFillMethod) == 0x000001, "Wrong alignment on GLoader_GetFillMethod");
static_assert(sizeof(GLoader_GetFillMethod) == 0x000001, "Wrong size on GLoader_GetFillMethod");
static_assert(offsetof(GLoader_GetFillMethod, ReturnValue) == 0x000000, "Member 'GLoader_GetFillMethod::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFillOrigin
// 0x0004 (0x0004 - 0x0000)
struct GLoader_GetFillOrigin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFillOrigin) == 0x000004, "Wrong alignment on GLoader_GetFillOrigin");
static_assert(sizeof(GLoader_GetFillOrigin) == 0x000004, "Wrong size on GLoader_GetFillOrigin");
static_assert(offsetof(GLoader_GetFillOrigin, ReturnValue) == 0x000000, "Member 'GLoader_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFlip
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetFlip final
{
public:
	EFlipType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFlip) == 0x000001, "Wrong alignment on GLoader_GetFlip");
static_assert(sizeof(GLoader_GetFlip) == 0x000001, "Wrong size on GLoader_GetFlip");
static_assert(offsetof(GLoader_GetFlip, ReturnValue) == 0x000000, "Member 'GLoader_GetFlip::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetFrame
// 0x0004 (0x0004 - 0x0000)
struct GLoader_GetFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetFrame) == 0x000004, "Wrong alignment on GLoader_GetFrame");
static_assert(sizeof(GLoader_GetFrame) == 0x000004, "Wrong size on GLoader_GetFrame");
static_assert(offsetof(GLoader_GetFrame, ReturnValue) == 0x000000, "Member 'GLoader_GetFrame::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct GLoader_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetUrl) == 0x000008, "Wrong alignment on GLoader_GetUrl");
static_assert(sizeof(GLoader_GetUrl) == 0x000010, "Wrong size on GLoader_GetUrl");
static_assert(offsetof(GLoader_GetUrl, ReturnValue) == 0x000000, "Member 'GLoader_GetUrl::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.GetVerticalAlign
// 0x0001 (0x0001 - 0x0000)
struct GLoader_GetVerticalAlign final
{
public:
	EVerticalAlignType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_GetVerticalAlign) == 0x000001, "Wrong alignment on GLoader_GetVerticalAlign");
static_assert(sizeof(GLoader_GetVerticalAlign) == 0x000001, "Wrong size on GLoader_GetVerticalAlign");
static_assert(offsetof(GLoader_GetVerticalAlign, ReturnValue) == 0x000000, "Member 'GLoader_GetVerticalAlign::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.IsFillClockwise
// 0x0001 (0x0001 - 0x0000)
struct GLoader_IsFillClockwise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_IsFillClockwise) == 0x000001, "Wrong alignment on GLoader_IsFillClockwise");
static_assert(sizeof(GLoader_IsFillClockwise) == 0x000001, "Wrong size on GLoader_IsFillClockwise");
static_assert(offsetof(GLoader_IsFillClockwise, ReturnValue) == 0x000000, "Member 'GLoader_IsFillClockwise::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct GLoader_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_IsPlaying) == 0x000001, "Wrong alignment on GLoader_IsPlaying");
static_assert(sizeof(GLoader_IsPlaying) == 0x000001, "Wrong size on GLoader_IsPlaying");
static_assert(offsetof(GLoader_IsPlaying, ReturnValue) == 0x000000, "Member 'GLoader_IsPlaying::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader.IsShrinkOnly
// 0x0001 (0x0001 - 0x0000)
struct GLoader_IsShrinkOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader_IsShrinkOnly) == 0x000001, "Wrong alignment on GLoader_IsShrinkOnly");
static_assert(sizeof(GLoader_IsShrinkOnly) == 0x000001, "Wrong size on GLoader_IsShrinkOnly");
static_assert(offsetof(GLoader_IsShrinkOnly, ReturnValue) == 0x000000, "Member 'GLoader_IsShrinkOnly::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader3D.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GLoader3D_SetColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader3D_SetColor) == 0x000004, "Wrong alignment on GLoader3D_SetColor");
static_assert(sizeof(GLoader3D_SetColor) == 0x000004, "Wrong size on GLoader3D_SetColor");
static_assert(offsetof(GLoader3D_SetColor, InColor) == 0x000000, "Member 'GLoader3D_SetColor::InColor' has a wrong offset!");

// Function FairyGUI.GLoader3D.SetURL
// 0x0010 (0x0010 - 0x0000)
struct GLoader3D_SetURL final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader3D_SetURL) == 0x000008, "Wrong alignment on GLoader3D_SetURL");
static_assert(sizeof(GLoader3D_SetURL) == 0x000010, "Wrong size on GLoader3D_SetURL");
static_assert(offsetof(GLoader3D_SetURL, InUrl) == 0x000000, "Member 'GLoader3D_SetURL::InUrl' has a wrong offset!");

// Function FairyGUI.GLoader3D.GetColor
// 0x0004 (0x0004 - 0x0000)
struct GLoader3D_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader3D_GetColor) == 0x000004, "Wrong alignment on GLoader3D_GetColor");
static_assert(sizeof(GLoader3D_GetColor) == 0x000004, "Wrong size on GLoader3D_GetColor");
static_assert(offsetof(GLoader3D_GetColor, ReturnValue) == 0x000000, "Member 'GLoader3D_GetColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GLoader3D.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct GLoader3D_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GLoader3D_GetUrl) == 0x000008, "Wrong alignment on GLoader3D_GetUrl");
static_assert(sizeof(GLoader3D_GetUrl) == 0x000010, "Wrong size on GLoader3D_GetUrl");
static_assert(offsetof(GLoader3D_GetUrl, ReturnValue) == 0x000000, "Member 'GLoader3D_GetUrl::ReturnValue' has a wrong offset!");

// Function FairyGUI.GMovieClip.Advance
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_Advance final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_Advance) == 0x000004, "Wrong alignment on GMovieClip_Advance");
static_assert(sizeof(GMovieClip_Advance) == 0x000004, "Wrong size on GMovieClip_Advance");
static_assert(offsetof(GMovieClip_Advance, Time) == 0x000000, "Member 'GMovieClip_Advance::Time' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_SetColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetColor) == 0x000004, "Wrong alignment on GMovieClip_SetColor");
static_assert(sizeof(GMovieClip_SetColor) == 0x000004, "Wrong size on GMovieClip_SetColor");
static_assert(offsetof(GMovieClip_SetColor, InColor) == 0x000000, "Member 'GMovieClip_SetColor::InColor' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetFlip
// 0x0001 (0x0001 - 0x0000)
struct GMovieClip_SetFlip final
{
public:
	EFlipType                                     InFlip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetFlip) == 0x000001, "Wrong alignment on GMovieClip_SetFlip");
static_assert(sizeof(GMovieClip_SetFlip) == 0x000001, "Wrong size on GMovieClip_SetFlip");
static_assert(offsetof(GMovieClip_SetFlip, InFlip) == 0x000000, "Member 'GMovieClip_SetFlip::InFlip' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetFrame
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_SetFrame final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetFrame) == 0x000004, "Wrong alignment on GMovieClip_SetFrame");
static_assert(sizeof(GMovieClip_SetFrame) == 0x000004, "Wrong size on GMovieClip_SetFrame");
static_assert(offsetof(GMovieClip_SetFrame, InFrame) == 0x000000, "Member 'GMovieClip_SetFrame::InFrame' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetPlaying
// 0x0001 (0x0001 - 0x0000)
struct GMovieClip_SetPlaying final
{
public:
	bool                                          bInPlaying;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetPlaying) == 0x000001, "Wrong alignment on GMovieClip_SetPlaying");
static_assert(sizeof(GMovieClip_SetPlaying) == 0x000001, "Wrong size on GMovieClip_SetPlaying");
static_assert(offsetof(GMovieClip_SetPlaying, bInPlaying) == 0x000000, "Member 'GMovieClip_SetPlaying::bInPlaying' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetPlaySettings
// 0x0020 (0x0020 - 0x0000)
struct GMovieClip_SetPlaySettings final
{
public:
	TDelegate<void()>                             InCompleteCallback;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InStart;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEnd;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTimes;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEndAt;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetPlaySettings) == 0x000004, "Wrong alignment on GMovieClip_SetPlaySettings");
static_assert(sizeof(GMovieClip_SetPlaySettings) == 0x000020, "Wrong size on GMovieClip_SetPlaySettings");
static_assert(offsetof(GMovieClip_SetPlaySettings, InCompleteCallback) == 0x000000, "Member 'GMovieClip_SetPlaySettings::InCompleteCallback' has a wrong offset!");
static_assert(offsetof(GMovieClip_SetPlaySettings, InStart) == 0x000010, "Member 'GMovieClip_SetPlaySettings::InStart' has a wrong offset!");
static_assert(offsetof(GMovieClip_SetPlaySettings, InEnd) == 0x000014, "Member 'GMovieClip_SetPlaySettings::InEnd' has a wrong offset!");
static_assert(offsetof(GMovieClip_SetPlaySettings, InTimes) == 0x000018, "Member 'GMovieClip_SetPlaySettings::InTimes' has a wrong offset!");
static_assert(offsetof(GMovieClip_SetPlaySettings, InEndAt) == 0x00001C, "Member 'GMovieClip_SetPlaySettings::InEndAt' has a wrong offset!");

// Function FairyGUI.GMovieClip.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_SetTimeScale final
{
public:
	float                                         InTimeScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_SetTimeScale) == 0x000004, "Wrong alignment on GMovieClip_SetTimeScale");
static_assert(sizeof(GMovieClip_SetTimeScale) == 0x000004, "Wrong size on GMovieClip_SetTimeScale");
static_assert(offsetof(GMovieClip_SetTimeScale, InTimeScale) == 0x000000, "Member 'GMovieClip_SetTimeScale::InTimeScale' has a wrong offset!");

// Function FairyGUI.GMovieClip.GetColor
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_GetColor) == 0x000004, "Wrong alignment on GMovieClip_GetColor");
static_assert(sizeof(GMovieClip_GetColor) == 0x000004, "Wrong size on GMovieClip_GetColor");
static_assert(offsetof(GMovieClip_GetColor, ReturnValue) == 0x000000, "Member 'GMovieClip_GetColor::ReturnValue' has a wrong offset!");

// Function FairyGUI.GMovieClip.GetFlip
// 0x0001 (0x0001 - 0x0000)
struct GMovieClip_GetFlip final
{
public:
	EFlipType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_GetFlip) == 0x000001, "Wrong alignment on GMovieClip_GetFlip");
static_assert(sizeof(GMovieClip_GetFlip) == 0x000001, "Wrong size on GMovieClip_GetFlip");
static_assert(offsetof(GMovieClip_GetFlip, ReturnValue) == 0x000000, "Member 'GMovieClip_GetFlip::ReturnValue' has a wrong offset!");

// Function FairyGUI.GMovieClip.GetFrame
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_GetFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_GetFrame) == 0x000004, "Wrong alignment on GMovieClip_GetFrame");
static_assert(sizeof(GMovieClip_GetFrame) == 0x000004, "Wrong size on GMovieClip_GetFrame");
static_assert(offsetof(GMovieClip_GetFrame, ReturnValue) == 0x000000, "Member 'GMovieClip_GetFrame::ReturnValue' has a wrong offset!");

// Function FairyGUI.GMovieClip.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct GMovieClip_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_GetTimeScale) == 0x000004, "Wrong alignment on GMovieClip_GetTimeScale");
static_assert(sizeof(GMovieClip_GetTimeScale) == 0x000004, "Wrong size on GMovieClip_GetTimeScale");
static_assert(offsetof(GMovieClip_GetTimeScale, ReturnValue) == 0x000000, "Member 'GMovieClip_GetTimeScale::ReturnValue' has a wrong offset!");

// Function FairyGUI.GMovieClip.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct GMovieClip_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMovieClip_IsPlaying) == 0x000001, "Wrong alignment on GMovieClip_IsPlaying");
static_assert(sizeof(GMovieClip_IsPlaying) == 0x000001, "Wrong size on GMovieClip_IsPlaying");
static_assert(offsetof(GMovieClip_IsPlaying, ReturnValue) == 0x000000, "Member 'GMovieClip_IsPlaying::ReturnValue' has a wrong offset!");

// Function FairyGUI.GProgressBar.SetMax
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_SetMax final
{
public:
	float                                         InMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_SetMax) == 0x000004, "Wrong alignment on GProgressBar_SetMax");
static_assert(sizeof(GProgressBar_SetMax) == 0x000004, "Wrong size on GProgressBar_SetMax");
static_assert(offsetof(GProgressBar_SetMax, InMax) == 0x000000, "Member 'GProgressBar_SetMax::InMax' has a wrong offset!");

// Function FairyGUI.GProgressBar.SetMin
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_SetMin final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_SetMin) == 0x000004, "Wrong alignment on GProgressBar_SetMin");
static_assert(sizeof(GProgressBar_SetMin) == 0x000004, "Wrong size on GProgressBar_SetMin");
static_assert(offsetof(GProgressBar_SetMin, InMin) == 0x000000, "Member 'GProgressBar_SetMin::InMin' has a wrong offset!");

// Function FairyGUI.GProgressBar.SetTitleType
// 0x0001 (0x0001 - 0x0000)
struct GProgressBar_SetTitleType final
{
public:
	EProgressTitleType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_SetTitleType) == 0x000001, "Wrong alignment on GProgressBar_SetTitleType");
static_assert(sizeof(GProgressBar_SetTitleType) == 0x000001, "Wrong size on GProgressBar_SetTitleType");
static_assert(offsetof(GProgressBar_SetTitleType, InType) == 0x000000, "Member 'GProgressBar_SetTitleType::InType' has a wrong offset!");

// Function FairyGUI.GProgressBar.SetValue
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_SetValue) == 0x000004, "Wrong alignment on GProgressBar_SetValue");
static_assert(sizeof(GProgressBar_SetValue) == 0x000004, "Wrong size on GProgressBar_SetValue");
static_assert(offsetof(GProgressBar_SetValue, InValue) == 0x000000, "Member 'GProgressBar_SetValue::InValue' has a wrong offset!");

// Function FairyGUI.GProgressBar.TweenValue
// 0x0008 (0x0008 - 0x0000)
struct GProgressBar_TweenValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_TweenValue) == 0x000004, "Wrong alignment on GProgressBar_TweenValue");
static_assert(sizeof(GProgressBar_TweenValue) == 0x000008, "Wrong size on GProgressBar_TweenValue");
static_assert(offsetof(GProgressBar_TweenValue, InValue) == 0x000000, "Member 'GProgressBar_TweenValue::InValue' has a wrong offset!");
static_assert(offsetof(GProgressBar_TweenValue, Duration) == 0x000004, "Member 'GProgressBar_TweenValue::Duration' has a wrong offset!");

// Function FairyGUI.GProgressBar.GetMax
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_GetMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_GetMax) == 0x000004, "Wrong alignment on GProgressBar_GetMax");
static_assert(sizeof(GProgressBar_GetMax) == 0x000004, "Wrong size on GProgressBar_GetMax");
static_assert(offsetof(GProgressBar_GetMax, ReturnValue) == 0x000000, "Member 'GProgressBar_GetMax::ReturnValue' has a wrong offset!");

// Function FairyGUI.GProgressBar.GetMin
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_GetMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_GetMin) == 0x000004, "Wrong alignment on GProgressBar_GetMin");
static_assert(sizeof(GProgressBar_GetMin) == 0x000004, "Wrong size on GProgressBar_GetMin");
static_assert(offsetof(GProgressBar_GetMin, ReturnValue) == 0x000000, "Member 'GProgressBar_GetMin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GProgressBar.GetTitleType
// 0x0001 (0x0001 - 0x0000)
struct GProgressBar_GetTitleType final
{
public:
	EProgressTitleType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_GetTitleType) == 0x000001, "Wrong alignment on GProgressBar_GetTitleType");
static_assert(sizeof(GProgressBar_GetTitleType) == 0x000001, "Wrong size on GProgressBar_GetTitleType");
static_assert(offsetof(GProgressBar_GetTitleType, ReturnValue) == 0x000000, "Member 'GProgressBar_GetTitleType::ReturnValue' has a wrong offset!");

// Function FairyGUI.GProgressBar.GetValue
// 0x0004 (0x0004 - 0x0000)
struct GProgressBar_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GProgressBar_GetValue) == 0x000004, "Wrong alignment on GProgressBar_GetValue");
static_assert(sizeof(GProgressBar_GetValue) == 0x000004, "Wrong size on GProgressBar_GetValue");
static_assert(offsetof(GProgressBar_GetValue, ReturnValue) == 0x000000, "Member 'GProgressBar_GetValue::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.GetTextFormat
// 0x0040 (0x0040 - 0x0000)
struct GTextField_GetTextFormat final
{
public:
	struct FNTextFormat                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_GetTextFormat) == 0x000008, "Wrong alignment on GTextField_GetTextFormat");
static_assert(sizeof(GTextField_GetTextFormat) == 0x000040, "Wrong size on GTextField_GetTextFormat");
static_assert(offsetof(GTextField_GetTextFormat, ReturnValue) == 0x000000, "Member 'GTextField_GetTextFormat::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.GetTextSize
// 0x0008 (0x0008 - 0x0000)
struct GTextField_GetTextSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_GetTextSize) == 0x000004, "Wrong alignment on GTextField_GetTextSize");
static_assert(sizeof(GTextField_GetTextSize) == 0x000008, "Wrong size on GTextField_GetTextSize");
static_assert(offsetof(GTextField_GetTextSize, ReturnValue) == 0x000000, "Member 'GTextField_GetTextSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.SetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct GTextField_SetAutoSize final
{
public:
	EAutoSizeType                                 InAutoSize;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_SetAutoSize) == 0x000001, "Wrong alignment on GTextField_SetAutoSize");
static_assert(sizeof(GTextField_SetAutoSize) == 0x000001, "Wrong size on GTextField_SetAutoSize");
static_assert(offsetof(GTextField_SetAutoSize, InAutoSize) == 0x000000, "Member 'GTextField_SetAutoSize::InAutoSize' has a wrong offset!");

// Function FairyGUI.GTextField.SetSingleLine
// 0x0001 (0x0001 - 0x0000)
struct GTextField_SetSingleLine final
{
public:
	bool                                          InSingleLine;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_SetSingleLine) == 0x000001, "Wrong alignment on GTextField_SetSingleLine");
static_assert(sizeof(GTextField_SetSingleLine) == 0x000001, "Wrong size on GTextField_SetSingleLine");
static_assert(offsetof(GTextField_SetSingleLine, InSingleLine) == 0x000000, "Member 'GTextField_SetSingleLine::InSingleLine' has a wrong offset!");

// Function FairyGUI.GTextField.SetTextFormat
// 0x0040 (0x0040 - 0x0000)
struct GTextField_SetTextFormat final
{
public:
	struct FNTextFormat                           InTextFormat;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_SetTextFormat) == 0x000008, "Wrong alignment on GTextField_SetTextFormat");
static_assert(sizeof(GTextField_SetTextFormat) == 0x000040, "Wrong size on GTextField_SetTextFormat");
static_assert(offsetof(GTextField_SetTextFormat, InTextFormat) == 0x000000, "Member 'GTextField_SetTextFormat::InTextFormat' has a wrong offset!");

// Function FairyGUI.GTextField.SetUBBEnabled
// 0x0001 (0x0001 - 0x0000)
struct GTextField_SetUBBEnabled final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_SetUBBEnabled) == 0x000001, "Wrong alignment on GTextField_SetUBBEnabled");
static_assert(sizeof(GTextField_SetUBBEnabled) == 0x000001, "Wrong size on GTextField_SetUBBEnabled");
static_assert(offsetof(GTextField_SetUBBEnabled, InEnabled) == 0x000000, "Member 'GTextField_SetUBBEnabled::InEnabled' has a wrong offset!");

// Function FairyGUI.GTextField.SetVar
// 0x0028 (0x0028 - 0x0000)
struct GTextField_SetVar final
{
public:
	class FString                                 VarKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VarValue;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGTextField*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_SetVar) == 0x000008, "Wrong alignment on GTextField_SetVar");
static_assert(sizeof(GTextField_SetVar) == 0x000028, "Wrong size on GTextField_SetVar");
static_assert(offsetof(GTextField_SetVar, VarKey) == 0x000000, "Member 'GTextField_SetVar::VarKey' has a wrong offset!");
static_assert(offsetof(GTextField_SetVar, VarValue) == 0x000010, "Member 'GTextField_SetVar::VarValue' has a wrong offset!");
static_assert(offsetof(GTextField_SetVar, ReturnValue) == 0x000020, "Member 'GTextField_SetVar::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.GetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct GTextField_GetAutoSize final
{
public:
	EAutoSizeType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_GetAutoSize) == 0x000001, "Wrong alignment on GTextField_GetAutoSize");
static_assert(sizeof(GTextField_GetAutoSize) == 0x000001, "Wrong size on GTextField_GetAutoSize");
static_assert(offsetof(GTextField_GetAutoSize, ReturnValue) == 0x000000, "Member 'GTextField_GetAutoSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.IsSingleLine
// 0x0001 (0x0001 - 0x0000)
struct GTextField_IsSingleLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_IsSingleLine) == 0x000001, "Wrong alignment on GTextField_IsSingleLine");
static_assert(sizeof(GTextField_IsSingleLine) == 0x000001, "Wrong size on GTextField_IsSingleLine");
static_assert(offsetof(GTextField_IsSingleLine, ReturnValue) == 0x000000, "Member 'GTextField_IsSingleLine::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextField.IsUBBEnabled
// 0x0001 (0x0001 - 0x0000)
struct GTextField_IsUBBEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextField_IsUBBEnabled) == 0x000001, "Wrong alignment on GTextField_IsUBBEnabled");
static_assert(sizeof(GTextField_IsUBBEnabled) == 0x000001, "Wrong size on GTextField_IsUBBEnabled");
static_assert(offsetof(GTextField_IsUBBEnabled, ReturnValue) == 0x000000, "Member 'GTextField_IsUBBEnabled::ReturnValue' has a wrong offset!");

// Function FairyGUI.GRoot.Get
// 0x0010 (0x0010 - 0x0000)
struct GRoot_Get final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGRoot*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_Get) == 0x000008, "Wrong alignment on GRoot_Get");
static_assert(sizeof(GRoot_Get) == 0x000010, "Wrong size on GRoot_Get");
static_assert(offsetof(GRoot_Get, WorldContextObject) == 0x000000, "Member 'GRoot_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GRoot_Get, ReturnValue) == 0x000008, "Member 'GRoot_Get::ReturnValue' has a wrong offset!");

// Function FairyGUI.GRoot.BringToFront
// 0x0008 (0x0008 - 0x0000)
struct GRoot_BringToFront final
{
public:
	class UGWindow*                               Window;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_BringToFront) == 0x000008, "Wrong alignment on GRoot_BringToFront");
static_assert(sizeof(GRoot_BringToFront) == 0x000008, "Wrong size on GRoot_BringToFront");
static_assert(offsetof(GRoot_BringToFront, Window) == 0x000000, "Member 'GRoot_BringToFront::Window' has a wrong offset!");

// Function FairyGUI.GRoot.HidePopup
// 0x0008 (0x0008 - 0x0000)
struct GRoot_HidePopup final
{
public:
	class UGObject*                               Popup;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_HidePopup) == 0x000008, "Wrong alignment on GRoot_HidePopup");
static_assert(sizeof(GRoot_HidePopup) == 0x000008, "Wrong size on GRoot_HidePopup");
static_assert(offsetof(GRoot_HidePopup, Popup) == 0x000000, "Member 'GRoot_HidePopup::Popup' has a wrong offset!");

// Function FairyGUI.GRoot.ShowPopup
// 0x0018 (0x0018 - 0x0000)
struct GRoot_ShowPopup final
{
public:
	class UGObject*                               Popup;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               AtObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupDirection                               Direction;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GRoot_ShowPopup) == 0x000008, "Wrong alignment on GRoot_ShowPopup");
static_assert(sizeof(GRoot_ShowPopup) == 0x000018, "Wrong size on GRoot_ShowPopup");
static_assert(offsetof(GRoot_ShowPopup, Popup) == 0x000000, "Member 'GRoot_ShowPopup::Popup' has a wrong offset!");
static_assert(offsetof(GRoot_ShowPopup, AtObject) == 0x000008, "Member 'GRoot_ShowPopup::AtObject' has a wrong offset!");
static_assert(offsetof(GRoot_ShowPopup, Direction) == 0x000010, "Member 'GRoot_ShowPopup::Direction' has a wrong offset!");

// Function FairyGUI.GRoot.ShowTooltips
// 0x0010 (0x0010 - 0x0000)
struct GRoot_ShowTooltips final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_ShowTooltips) == 0x000008, "Wrong alignment on GRoot_ShowTooltips");
static_assert(sizeof(GRoot_ShowTooltips) == 0x000010, "Wrong size on GRoot_ShowTooltips");
static_assert(offsetof(GRoot_ShowTooltips, Text) == 0x000000, "Member 'GRoot_ShowTooltips::Text' has a wrong offset!");

// Function FairyGUI.GRoot.ShowTooltipsWin
// 0x0008 (0x0008 - 0x0000)
struct GRoot_ShowTooltipsWin final
{
public:
	class UGObject*                               InTooltipWin;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_ShowTooltipsWin) == 0x000008, "Wrong alignment on GRoot_ShowTooltipsWin");
static_assert(sizeof(GRoot_ShowTooltipsWin) == 0x000008, "Wrong size on GRoot_ShowTooltipsWin");
static_assert(offsetof(GRoot_ShowTooltipsWin, InTooltipWin) == 0x000000, "Member 'GRoot_ShowTooltipsWin::InTooltipWin' has a wrong offset!");

// Function FairyGUI.GRoot.TogglePopup
// 0x0018 (0x0018 - 0x0000)
struct GRoot_TogglePopup final
{
public:
	class UGObject*                               Popup;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               AtObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupDirection                               Direction;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GRoot_TogglePopup) == 0x000008, "Wrong alignment on GRoot_TogglePopup");
static_assert(sizeof(GRoot_TogglePopup) == 0x000018, "Wrong size on GRoot_TogglePopup");
static_assert(offsetof(GRoot_TogglePopup, Popup) == 0x000000, "Member 'GRoot_TogglePopup::Popup' has a wrong offset!");
static_assert(offsetof(GRoot_TogglePopup, AtObject) == 0x000008, "Member 'GRoot_TogglePopup::AtObject' has a wrong offset!");
static_assert(offsetof(GRoot_TogglePopup, Direction) == 0x000010, "Member 'GRoot_TogglePopup::Direction' has a wrong offset!");

// Function FairyGUI.GRoot.GetTopWindow
// 0x0008 (0x0008 - 0x0000)
struct GRoot_GetTopWindow final
{
public:
	class UGWindow*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_GetTopWindow) == 0x000008, "Wrong alignment on GRoot_GetTopWindow");
static_assert(sizeof(GRoot_GetTopWindow) == 0x000008, "Wrong size on GRoot_GetTopWindow");
static_assert(offsetof(GRoot_GetTopWindow, ReturnValue) == 0x000000, "Member 'GRoot_GetTopWindow::ReturnValue' has a wrong offset!");

// Function FairyGUI.GRoot.HasAnyPopup
// 0x0001 (0x0001 - 0x0000)
struct GRoot_HasAnyPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_HasAnyPopup) == 0x000001, "Wrong alignment on GRoot_HasAnyPopup");
static_assert(sizeof(GRoot_HasAnyPopup) == 0x000001, "Wrong size on GRoot_HasAnyPopup");
static_assert(offsetof(GRoot_HasAnyPopup, ReturnValue) == 0x000000, "Member 'GRoot_HasAnyPopup::ReturnValue' has a wrong offset!");

// Function FairyGUI.GRoot.HasModalWindow
// 0x0001 (0x0001 - 0x0000)
struct GRoot_HasModalWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_HasModalWindow) == 0x000001, "Wrong alignment on GRoot_HasModalWindow");
static_assert(sizeof(GRoot_HasModalWindow) == 0x000001, "Wrong size on GRoot_HasModalWindow");
static_assert(offsetof(GRoot_HasModalWindow, ReturnValue) == 0x000000, "Member 'GRoot_HasModalWindow::ReturnValue' has a wrong offset!");

// Function FairyGUI.GRoot.IsModalWaiting
// 0x0001 (0x0001 - 0x0000)
struct GRoot_IsModalWaiting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRoot_IsModalWaiting) == 0x000001, "Wrong alignment on GRoot_IsModalWaiting");
static_assert(sizeof(GRoot_IsModalWaiting) == 0x000001, "Wrong size on GRoot_IsModalWaiting");
static_assert(offsetof(GRoot_IsModalWaiting, ReturnValue) == 0x000000, "Member 'GRoot_IsModalWaiting::ReturnValue' has a wrong offset!");

// Function FairyGUI.GSlider.SetMax
// 0x0004 (0x0004 - 0x0000)
struct GSlider_SetMax final
{
public:
	float                                         InMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_SetMax) == 0x000004, "Wrong alignment on GSlider_SetMax");
static_assert(sizeof(GSlider_SetMax) == 0x000004, "Wrong size on GSlider_SetMax");
static_assert(offsetof(GSlider_SetMax, InMax) == 0x000000, "Member 'GSlider_SetMax::InMax' has a wrong offset!");

// Function FairyGUI.GSlider.SetMin
// 0x0004 (0x0004 - 0x0000)
struct GSlider_SetMin final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_SetMin) == 0x000004, "Wrong alignment on GSlider_SetMin");
static_assert(sizeof(GSlider_SetMin) == 0x000004, "Wrong size on GSlider_SetMin");
static_assert(offsetof(GSlider_SetMin, InMin) == 0x000000, "Member 'GSlider_SetMin::InMin' has a wrong offset!");

// Function FairyGUI.GSlider.SetTitleType
// 0x0001 (0x0001 - 0x0000)
struct GSlider_SetTitleType final
{
public:
	EProgressTitleType                            InTitleType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_SetTitleType) == 0x000001, "Wrong alignment on GSlider_SetTitleType");
static_assert(sizeof(GSlider_SetTitleType) == 0x000001, "Wrong size on GSlider_SetTitleType");
static_assert(offsetof(GSlider_SetTitleType, InTitleType) == 0x000000, "Member 'GSlider_SetTitleType::InTitleType' has a wrong offset!");

// Function FairyGUI.GSlider.SetValue
// 0x0004 (0x0004 - 0x0000)
struct GSlider_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_SetValue) == 0x000004, "Wrong alignment on GSlider_SetValue");
static_assert(sizeof(GSlider_SetValue) == 0x000004, "Wrong size on GSlider_SetValue");
static_assert(offsetof(GSlider_SetValue, InValue) == 0x000000, "Member 'GSlider_SetValue::InValue' has a wrong offset!");

// Function FairyGUI.GSlider.SetWholeNumbers
// 0x0001 (0x0001 - 0x0000)
struct GSlider_SetWholeNumbers final
{
public:
	bool                                          bWholeNumbers;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_SetWholeNumbers) == 0x000001, "Wrong alignment on GSlider_SetWholeNumbers");
static_assert(sizeof(GSlider_SetWholeNumbers) == 0x000001, "Wrong size on GSlider_SetWholeNumbers");
static_assert(offsetof(GSlider_SetWholeNumbers, bWholeNumbers) == 0x000000, "Member 'GSlider_SetWholeNumbers::bWholeNumbers' has a wrong offset!");

// Function FairyGUI.GSlider.GetMax
// 0x0004 (0x0004 - 0x0000)
struct GSlider_GetMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_GetMax) == 0x000004, "Wrong alignment on GSlider_GetMax");
static_assert(sizeof(GSlider_GetMax) == 0x000004, "Wrong size on GSlider_GetMax");
static_assert(offsetof(GSlider_GetMax, ReturnValue) == 0x000000, "Member 'GSlider_GetMax::ReturnValue' has a wrong offset!");

// Function FairyGUI.GSlider.GetMin
// 0x0004 (0x0004 - 0x0000)
struct GSlider_GetMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_GetMin) == 0x000004, "Wrong alignment on GSlider_GetMin");
static_assert(sizeof(GSlider_GetMin) == 0x000004, "Wrong size on GSlider_GetMin");
static_assert(offsetof(GSlider_GetMin, ReturnValue) == 0x000000, "Member 'GSlider_GetMin::ReturnValue' has a wrong offset!");

// Function FairyGUI.GSlider.GetTitleType
// 0x0001 (0x0001 - 0x0000)
struct GSlider_GetTitleType final
{
public:
	EProgressTitleType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_GetTitleType) == 0x000001, "Wrong alignment on GSlider_GetTitleType");
static_assert(sizeof(GSlider_GetTitleType) == 0x000001, "Wrong size on GSlider_GetTitleType");
static_assert(offsetof(GSlider_GetTitleType, ReturnValue) == 0x000000, "Member 'GSlider_GetTitleType::ReturnValue' has a wrong offset!");

// Function FairyGUI.GSlider.GetValue
// 0x0004 (0x0004 - 0x0000)
struct GSlider_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_GetValue) == 0x000004, "Wrong alignment on GSlider_GetValue");
static_assert(sizeof(GSlider_GetValue) == 0x000004, "Wrong size on GSlider_GetValue");
static_assert(offsetof(GSlider_GetValue, ReturnValue) == 0x000000, "Member 'GSlider_GetValue::ReturnValue' has a wrong offset!");

// Function FairyGUI.GSlider.GetWholeNumbers
// 0x0001 (0x0001 - 0x0000)
struct GSlider_GetWholeNumbers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSlider_GetWholeNumbers) == 0x000001, "Wrong alignment on GSlider_GetWholeNumbers");
static_assert(sizeof(GSlider_GetWholeNumbers) == 0x000001, "Wrong size on GSlider_GetWholeNumbers");
static_assert(offsetof(GSlider_GetWholeNumbers, ReturnValue) == 0x000000, "Member 'GSlider_GetWholeNumbers::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextInput.GetTextFormat
// 0x0040 (0x0040 - 0x0000)
struct GTextInput_GetTextFormat final
{
public:
	struct FNTextFormat                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_GetTextFormat) == 0x000008, "Wrong alignment on GTextInput_GetTextFormat");
static_assert(sizeof(GTextInput_GetTextFormat) == 0x000040, "Wrong size on GTextInput_GetTextFormat");
static_assert(offsetof(GTextInput_GetTextFormat, ReturnValue) == 0x000000, "Member 'GTextInput_GetTextFormat::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTextInput.SetKeyboardType
// 0x0004 (0x0004 - 0x0000)
struct GTextInput_SetKeyboardType final
{
public:
	int32                                         InKeyboardType;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetKeyboardType) == 0x000004, "Wrong alignment on GTextInput_SetKeyboardType");
static_assert(sizeof(GTextInput_SetKeyboardType) == 0x000004, "Wrong size on GTextInput_SetKeyboardType");
static_assert(offsetof(GTextInput_SetKeyboardType, InKeyboardType) == 0x000000, "Member 'GTextInput_SetKeyboardType::InKeyboardType' has a wrong offset!");

// Function FairyGUI.GTextInput.SetMaxLength
// 0x0004 (0x0004 - 0x0000)
struct GTextInput_SetMaxLength final
{
public:
	int32                                         InMaxLength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetMaxLength) == 0x000004, "Wrong alignment on GTextInput_SetMaxLength");
static_assert(sizeof(GTextInput_SetMaxLength) == 0x000004, "Wrong size on GTextInput_SetMaxLength");
static_assert(offsetof(GTextInput_SetMaxLength, InMaxLength) == 0x000000, "Member 'GTextInput_SetMaxLength::InMaxLength' has a wrong offset!");

// Function FairyGUI.GTextInput.SetPassword
// 0x0001 (0x0001 - 0x0000)
struct GTextInput_SetPassword final
{
public:
	bool                                          bInPassword;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetPassword) == 0x000001, "Wrong alignment on GTextInput_SetPassword");
static_assert(sizeof(GTextInput_SetPassword) == 0x000001, "Wrong size on GTextInput_SetPassword");
static_assert(offsetof(GTextInput_SetPassword, bInPassword) == 0x000000, "Member 'GTextInput_SetPassword::bInPassword' has a wrong offset!");

// Function FairyGUI.GTextInput.SetPrompt
// 0x0010 (0x0010 - 0x0000)
struct GTextInput_SetPrompt final
{
public:
	class FString                                 InPrompt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetPrompt) == 0x000008, "Wrong alignment on GTextInput_SetPrompt");
static_assert(sizeof(GTextInput_SetPrompt) == 0x000010, "Wrong size on GTextInput_SetPrompt");
static_assert(offsetof(GTextInput_SetPrompt, InPrompt) == 0x000000, "Member 'GTextInput_SetPrompt::InPrompt' has a wrong offset!");

// Function FairyGUI.GTextInput.SetRestrict
// 0x0010 (0x0010 - 0x0000)
struct GTextInput_SetRestrict final
{
public:
	class FString                                 InRestrict;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetRestrict) == 0x000008, "Wrong alignment on GTextInput_SetRestrict");
static_assert(sizeof(GTextInput_SetRestrict) == 0x000010, "Wrong size on GTextInput_SetRestrict");
static_assert(offsetof(GTextInput_SetRestrict, InRestrict) == 0x000000, "Member 'GTextInput_SetRestrict::InRestrict' has a wrong offset!");

// Function FairyGUI.GTextInput.SetSingleLine
// 0x0001 (0x0001 - 0x0000)
struct GTextInput_SetSingleLine final
{
public:
	bool                                          InSingleLine;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetSingleLine) == 0x000001, "Wrong alignment on GTextInput_SetSingleLine");
static_assert(sizeof(GTextInput_SetSingleLine) == 0x000001, "Wrong size on GTextInput_SetSingleLine");
static_assert(offsetof(GTextInput_SetSingleLine, InSingleLine) == 0x000000, "Member 'GTextInput_SetSingleLine::InSingleLine' has a wrong offset!");

// Function FairyGUI.GTextInput.SetTextFormat
// 0x0040 (0x0040 - 0x0000)
struct GTextInput_SetTextFormat final
{
public:
	struct FNTextFormat                           InTextFormat;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_SetTextFormat) == 0x000008, "Wrong alignment on GTextInput_SetTextFormat");
static_assert(sizeof(GTextInput_SetTextFormat) == 0x000040, "Wrong size on GTextInput_SetTextFormat");
static_assert(offsetof(GTextInput_SetTextFormat, InTextFormat) == 0x000000, "Member 'GTextInput_SetTextFormat::InTextFormat' has a wrong offset!");

// Function FairyGUI.GTextInput.IsSingleLine
// 0x0001 (0x0001 - 0x0000)
struct GTextInput_IsSingleLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTextInput_IsSingleLine) == 0x000001, "Wrong alignment on GTextInput_IsSingleLine");
static_assert(sizeof(GTextInput_IsSingleLine) == 0x000001, "Wrong size on GTextInput_IsSingleLine");
static_assert(offsetof(GTextInput_IsSingleLine, ReturnValue) == 0x000000, "Member 'GTextInput_IsSingleLine::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTree.CollapseAll
// 0x0008 (0x0008 - 0x0000)
struct GTree_CollapseAll final
{
public:
	class UGTreeNode*                             Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_CollapseAll) == 0x000008, "Wrong alignment on GTree_CollapseAll");
static_assert(sizeof(GTree_CollapseAll) == 0x000008, "Wrong size on GTree_CollapseAll");
static_assert(offsetof(GTree_CollapseAll, Node) == 0x000000, "Member 'GTree_CollapseAll::Node' has a wrong offset!");

// Function FairyGUI.GTree.ExpandAll
// 0x0008 (0x0008 - 0x0000)
struct GTree_ExpandAll final
{
public:
	class UGTreeNode*                             Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_ExpandAll) == 0x000008, "Wrong alignment on GTree_ExpandAll");
static_assert(sizeof(GTree_ExpandAll) == 0x000008, "Wrong size on GTree_ExpandAll");
static_assert(offsetof(GTree_ExpandAll, Node) == 0x000000, "Member 'GTree_ExpandAll::Node' has a wrong offset!");

// Function FairyGUI.GTree.OnCellTouchBegin
// 0x0008 (0x0008 - 0x0000)
struct GTree_OnCellTouchBegin final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_OnCellTouchBegin) == 0x000008, "Wrong alignment on GTree_OnCellTouchBegin");
static_assert(sizeof(GTree_OnCellTouchBegin) == 0x000008, "Wrong size on GTree_OnCellTouchBegin");
static_assert(offsetof(GTree_OnCellTouchBegin, Context) == 0x000000, "Member 'GTree_OnCellTouchBegin::Context' has a wrong offset!");

// Function FairyGUI.GTree.SelectNode
// 0x0010 (0x0010 - 0x0000)
struct GTree_SelectNode final
{
public:
	class UGTreeNode*                             Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollItToView;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GTree_SelectNode) == 0x000008, "Wrong alignment on GTree_SelectNode");
static_assert(sizeof(GTree_SelectNode) == 0x000010, "Wrong size on GTree_SelectNode");
static_assert(offsetof(GTree_SelectNode, Node) == 0x000000, "Member 'GTree_SelectNode::Node' has a wrong offset!");
static_assert(offsetof(GTree_SelectNode, bScrollItToView) == 0x000008, "Member 'GTree_SelectNode::bScrollItToView' has a wrong offset!");

// Function FairyGUI.GTree.SetOnTreeNodeWillExpand
// 0x0010 (0x0010 - 0x0000)
struct GTree_SetOnTreeNodeWillExpand final
{
public:
	TDelegate<void(class UGTreeNode* Node, bool bToExpand)> InDelegate;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_SetOnTreeNodeWillExpand) == 0x000004, "Wrong alignment on GTree_SetOnTreeNodeWillExpand");
static_assert(sizeof(GTree_SetOnTreeNodeWillExpand) == 0x000010, "Wrong size on GTree_SetOnTreeNodeWillExpand");
static_assert(offsetof(GTree_SetOnTreeNodeWillExpand, InDelegate) == 0x000000, "Member 'GTree_SetOnTreeNodeWillExpand::InDelegate' has a wrong offset!");

// Function FairyGUI.GTree.SetTreeNodeRenderer
// 0x0010 (0x0010 - 0x0000)
struct GTree_SetTreeNodeRenderer final
{
public:
	TDelegate<void(class UGTreeNode* Node, class UGComponent* Obj)> InDelegate;                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_SetTreeNodeRenderer) == 0x000004, "Wrong alignment on GTree_SetTreeNodeRenderer");
static_assert(sizeof(GTree_SetTreeNodeRenderer) == 0x000010, "Wrong size on GTree_SetTreeNodeRenderer");
static_assert(offsetof(GTree_SetTreeNodeRenderer, InDelegate) == 0x000000, "Member 'GTree_SetTreeNodeRenderer::InDelegate' has a wrong offset!");

// Function FairyGUI.GTree.UnselectNode
// 0x0008 (0x0008 - 0x0000)
struct GTree_UnselectNode final
{
public:
	class UGTreeNode*                             Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_UnselectNode) == 0x000008, "Wrong alignment on GTree_UnselectNode");
static_assert(sizeof(GTree_UnselectNode) == 0x000008, "Wrong size on GTree_UnselectNode");
static_assert(offsetof(GTree_UnselectNode, Node) == 0x000000, "Member 'GTree_UnselectNode::Node' has a wrong offset!");

// Function FairyGUI.GTree.GetRootNode
// 0x0008 (0x0008 - 0x0000)
struct GTree_GetRootNode final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_GetRootNode) == 0x000008, "Wrong alignment on GTree_GetRootNode");
static_assert(sizeof(GTree_GetRootNode) == 0x000008, "Wrong size on GTree_GetRootNode");
static_assert(offsetof(GTree_GetRootNode, ReturnValue) == 0x000000, "Member 'GTree_GetRootNode::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTree.GetSelectedNode
// 0x0008 (0x0008 - 0x0000)
struct GTree_GetSelectedNode final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_GetSelectedNode) == 0x000008, "Wrong alignment on GTree_GetSelectedNode");
static_assert(sizeof(GTree_GetSelectedNode) == 0x000008, "Wrong size on GTree_GetSelectedNode");
static_assert(offsetof(GTree_GetSelectedNode, ReturnValue) == 0x000000, "Member 'GTree_GetSelectedNode::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTree.GetSelectedNodes
// 0x0010 (0x0010 - 0x0000)
struct GTree_GetSelectedNodes final
{
public:
	TArray<class UGTreeNode*>                     Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTree_GetSelectedNodes) == 0x000008, "Wrong alignment on GTree_GetSelectedNodes");
static_assert(sizeof(GTree_GetSelectedNodes) == 0x000010, "Wrong size on GTree_GetSelectedNodes");
static_assert(offsetof(GTree_GetSelectedNodes, Result) == 0x000000, "Member 'GTree_GetSelectedNodes::Result' has a wrong offset!");

// Function FairyGUI.GTreeNode.CreateNode
// 0x0020 (0x0020 - 0x0000)
struct GTreeNode_CreateNode final
{
public:
	bool                                          bIsFolder;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceURL;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGTreeNode*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_CreateNode) == 0x000008, "Wrong alignment on GTreeNode_CreateNode");
static_assert(sizeof(GTreeNode_CreateNode) == 0x000020, "Wrong size on GTreeNode_CreateNode");
static_assert(offsetof(GTreeNode_CreateNode, bIsFolder) == 0x000000, "Member 'GTreeNode_CreateNode::bIsFolder' has a wrong offset!");
static_assert(offsetof(GTreeNode_CreateNode, ResourceURL) == 0x000008, "Member 'GTreeNode_CreateNode::ResourceURL' has a wrong offset!");
static_assert(offsetof(GTreeNode_CreateNode, ReturnValue) == 0x000018, "Member 'GTreeNode_CreateNode::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.AddChild
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_AddChild final
{
public:
	class UGTreeNode*                             Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGTreeNode*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_AddChild) == 0x000008, "Wrong alignment on GTreeNode_AddChild");
static_assert(sizeof(GTreeNode_AddChild) == 0x000010, "Wrong size on GTreeNode_AddChild");
static_assert(offsetof(GTreeNode_AddChild, Child) == 0x000000, "Member 'GTreeNode_AddChild::Child' has a wrong offset!");
static_assert(offsetof(GTreeNode_AddChild, ReturnValue) == 0x000008, "Member 'GTreeNode_AddChild::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.AddChildAt
// 0x0018 (0x0018 - 0x0000)
struct GTreeNode_AddChildAt final
{
public:
	class UGTreeNode*                             Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGTreeNode*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_AddChildAt) == 0x000008, "Wrong alignment on GTreeNode_AddChildAt");
static_assert(sizeof(GTreeNode_AddChildAt) == 0x000018, "Wrong size on GTreeNode_AddChildAt");
static_assert(offsetof(GTreeNode_AddChildAt, Child) == 0x000000, "Member 'GTreeNode_AddChildAt::Child' has a wrong offset!");
static_assert(offsetof(GTreeNode_AddChildAt, Index_0) == 0x000008, "Member 'GTreeNode_AddChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(GTreeNode_AddChildAt, ReturnValue) == 0x000010, "Member 'GTreeNode_AddChildAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.RemoveChild
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_RemoveChild final
{
public:
	class UGTreeNode*                             Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_RemoveChild) == 0x000008, "Wrong alignment on GTreeNode_RemoveChild");
static_assert(sizeof(GTreeNode_RemoveChild) == 0x000008, "Wrong size on GTreeNode_RemoveChild");
static_assert(offsetof(GTreeNode_RemoveChild, Child) == 0x000000, "Member 'GTreeNode_RemoveChild::Child' has a wrong offset!");

// Function FairyGUI.GTreeNode.RemoveChildAt
// 0x0004 (0x0004 - 0x0000)
struct GTreeNode_RemoveChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_RemoveChildAt) == 0x000004, "Wrong alignment on GTreeNode_RemoveChildAt");
static_assert(sizeof(GTreeNode_RemoveChildAt) == 0x000004, "Wrong size on GTreeNode_RemoveChildAt");
static_assert(offsetof(GTreeNode_RemoveChildAt, Index_0) == 0x000000, "Member 'GTreeNode_RemoveChildAt::Index_0' has a wrong offset!");

// Function FairyGUI.GTreeNode.RemoveChildren
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_RemoveChildren final
{
public:
	int32                                         BeginIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_RemoveChildren) == 0x000004, "Wrong alignment on GTreeNode_RemoveChildren");
static_assert(sizeof(GTreeNode_RemoveChildren) == 0x000008, "Wrong size on GTreeNode_RemoveChildren");
static_assert(offsetof(GTreeNode_RemoveChildren, BeginIndex) == 0x000000, "Member 'GTreeNode_RemoveChildren::BeginIndex' has a wrong offset!");
static_assert(offsetof(GTreeNode_RemoveChildren, EndIndex) == 0x000004, "Member 'GTreeNode_RemoveChildren::EndIndex' has a wrong offset!");

// Function FairyGUI.GTreeNode.SetChildIndex
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_SetChildIndex final
{
public:
	class UGTreeNode*                             Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GTreeNode_SetChildIndex) == 0x000008, "Wrong alignment on GTreeNode_SetChildIndex");
static_assert(sizeof(GTreeNode_SetChildIndex) == 0x000010, "Wrong size on GTreeNode_SetChildIndex");
static_assert(offsetof(GTreeNode_SetChildIndex, Child) == 0x000000, "Member 'GTreeNode_SetChildIndex::Child' has a wrong offset!");
static_assert(offsetof(GTreeNode_SetChildIndex, Index_0) == 0x000008, "Member 'GTreeNode_SetChildIndex::Index_0' has a wrong offset!");

// Function FairyGUI.GTreeNode.SetExpaned
// 0x0001 (0x0001 - 0x0000)
struct GTreeNode_SetExpaned final
{
public:
	bool                                          bInExpanded;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SetExpaned) == 0x000001, "Wrong alignment on GTreeNode_SetExpaned");
static_assert(sizeof(GTreeNode_SetExpaned) == 0x000001, "Wrong size on GTreeNode_SetExpaned");
static_assert(offsetof(GTreeNode_SetExpaned, bInExpanded) == 0x000000, "Member 'GTreeNode_SetExpaned::bInExpanded' has a wrong offset!");

// Function FairyGUI.GTreeNode.SetIcon
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_SetIcon final
{
public:
	class FString                                 InIcon;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SetIcon) == 0x000008, "Wrong alignment on GTreeNode_SetIcon");
static_assert(sizeof(GTreeNode_SetIcon) == 0x000010, "Wrong size on GTreeNode_SetIcon");
static_assert(offsetof(GTreeNode_SetIcon, InIcon) == 0x000000, "Member 'GTreeNode_SetIcon::InIcon' has a wrong offset!");

// Function FairyGUI.GTreeNode.SetParent
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_SetParent final
{
public:
	class UGTreeNode*                             InParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SetParent) == 0x000008, "Wrong alignment on GTreeNode_SetParent");
static_assert(sizeof(GTreeNode_SetParent) == 0x000008, "Wrong size on GTreeNode_SetParent");
static_assert(offsetof(GTreeNode_SetParent, InParent) == 0x000000, "Member 'GTreeNode_SetParent::InParent' has a wrong offset!");

// Function FairyGUI.GTreeNode.SetText
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SetText) == 0x000008, "Wrong alignment on GTreeNode_SetText");
static_assert(sizeof(GTreeNode_SetText) == 0x000010, "Wrong size on GTreeNode_SetText");
static_assert(offsetof(GTreeNode_SetText, InText) == 0x000000, "Member 'GTreeNode_SetText::InText' has a wrong offset!");

// Function FairyGUI.GTreeNode.SwapChildren
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_SwapChildren final
{
public:
	class UGTreeNode*                             Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGTreeNode*                             Child2;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SwapChildren) == 0x000008, "Wrong alignment on GTreeNode_SwapChildren");
static_assert(sizeof(GTreeNode_SwapChildren) == 0x000010, "Wrong size on GTreeNode_SwapChildren");
static_assert(offsetof(GTreeNode_SwapChildren, Child) == 0x000000, "Member 'GTreeNode_SwapChildren::Child' has a wrong offset!");
static_assert(offsetof(GTreeNode_SwapChildren, Child2) == 0x000008, "Member 'GTreeNode_SwapChildren::Child2' has a wrong offset!");

// Function FairyGUI.GTreeNode.SwapChildrenAt
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_SwapChildrenAt final
{
public:
	int32                                         Index1;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index2;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_SwapChildrenAt) == 0x000004, "Wrong alignment on GTreeNode_SwapChildrenAt");
static_assert(sizeof(GTreeNode_SwapChildrenAt) == 0x000008, "Wrong size on GTreeNode_SwapChildrenAt");
static_assert(offsetof(GTreeNode_SwapChildrenAt, Index1) == 0x000000, "Member 'GTreeNode_SwapChildrenAt::Index1' has a wrong offset!");
static_assert(offsetof(GTreeNode_SwapChildrenAt, Index2) == 0x000004, "Member 'GTreeNode_SwapChildrenAt::Index2' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetCell
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_GetCell final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetCell) == 0x000008, "Wrong alignment on GTreeNode_GetCell");
static_assert(sizeof(GTreeNode_GetCell) == 0x000008, "Wrong size on GTreeNode_GetCell");
static_assert(offsetof(GTreeNode_GetCell, ReturnValue) == 0x000000, "Member 'GTreeNode_GetCell::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetChildAt
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGTreeNode*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetChildAt) == 0x000008, "Wrong alignment on GTreeNode_GetChildAt");
static_assert(sizeof(GTreeNode_GetChildAt) == 0x000010, "Wrong size on GTreeNode_GetChildAt");
static_assert(offsetof(GTreeNode_GetChildAt, Index_0) == 0x000000, "Member 'GTreeNode_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(GTreeNode_GetChildAt, ReturnValue) == 0x000008, "Member 'GTreeNode_GetChildAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetChildIndex
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_GetChildIndex final
{
public:
	const class UGTreeNode*                       Child;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GTreeNode_GetChildIndex) == 0x000008, "Wrong alignment on GTreeNode_GetChildIndex");
static_assert(sizeof(GTreeNode_GetChildIndex) == 0x000010, "Wrong size on GTreeNode_GetChildIndex");
static_assert(offsetof(GTreeNode_GetChildIndex, Child) == 0x000000, "Member 'GTreeNode_GetChildIndex::Child' has a wrong offset!");
static_assert(offsetof(GTreeNode_GetChildIndex, ReturnValue) == 0x000008, "Member 'GTreeNode_GetChildIndex::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetIcon
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_GetIcon final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetIcon) == 0x000008, "Wrong alignment on GTreeNode_GetIcon");
static_assert(sizeof(GTreeNode_GetIcon) == 0x000010, "Wrong size on GTreeNode_GetIcon");
static_assert(offsetof(GTreeNode_GetIcon, ReturnValue) == 0x000000, "Member 'GTreeNode_GetIcon::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetNextSibling
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_GetNextSibling final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetNextSibling) == 0x000008, "Wrong alignment on GTreeNode_GetNextSibling");
static_assert(sizeof(GTreeNode_GetNextSibling) == 0x000008, "Wrong size on GTreeNode_GetNextSibling");
static_assert(offsetof(GTreeNode_GetNextSibling, ReturnValue) == 0x000000, "Member 'GTreeNode_GetNextSibling::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetParent
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_GetParent final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetParent) == 0x000008, "Wrong alignment on GTreeNode_GetParent");
static_assert(sizeof(GTreeNode_GetParent) == 0x000008, "Wrong size on GTreeNode_GetParent");
static_assert(offsetof(GTreeNode_GetParent, ReturnValue) == 0x000000, "Member 'GTreeNode_GetParent::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetPrevSibling
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_GetPrevSibling final
{
public:
	class UGTreeNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetPrevSibling) == 0x000008, "Wrong alignment on GTreeNode_GetPrevSibling");
static_assert(sizeof(GTreeNode_GetPrevSibling) == 0x000008, "Wrong size on GTreeNode_GetPrevSibling");
static_assert(offsetof(GTreeNode_GetPrevSibling, ReturnValue) == 0x000000, "Member 'GTreeNode_GetPrevSibling::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetText
// 0x0010 (0x0010 - 0x0000)
struct GTreeNode_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetText) == 0x000008, "Wrong alignment on GTreeNode_GetText");
static_assert(sizeof(GTreeNode_GetText) == 0x000010, "Wrong size on GTreeNode_GetText");
static_assert(offsetof(GTreeNode_GetText, ReturnValue) == 0x000000, "Member 'GTreeNode_GetText::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.GetTree
// 0x0008 (0x0008 - 0x0000)
struct GTreeNode_GetTree final
{
public:
	class UGTree*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_GetTree) == 0x000008, "Wrong alignment on GTreeNode_GetTree");
static_assert(sizeof(GTreeNode_GetTree) == 0x000008, "Wrong size on GTreeNode_GetTree");
static_assert(offsetof(GTreeNode_GetTree, ReturnValue) == 0x000000, "Member 'GTreeNode_GetTree::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.IsExpanded
// 0x0001 (0x0001 - 0x0000)
struct GTreeNode_IsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_IsExpanded) == 0x000001, "Wrong alignment on GTreeNode_IsExpanded");
static_assert(sizeof(GTreeNode_IsExpanded) == 0x000001, "Wrong size on GTreeNode_IsExpanded");
static_assert(offsetof(GTreeNode_IsExpanded, ReturnValue) == 0x000000, "Member 'GTreeNode_IsExpanded::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.IsFolder
// 0x0001 (0x0001 - 0x0000)
struct GTreeNode_IsFolder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_IsFolder) == 0x000001, "Wrong alignment on GTreeNode_IsFolder");
static_assert(sizeof(GTreeNode_IsFolder) == 0x000001, "Wrong size on GTreeNode_IsFolder");
static_assert(offsetof(GTreeNode_IsFolder, ReturnValue) == 0x000000, "Member 'GTreeNode_IsFolder::ReturnValue' has a wrong offset!");

// Function FairyGUI.GTreeNode.NumChildren
// 0x0004 (0x0004 - 0x0000)
struct GTreeNode_NumChildren final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GTreeNode_NumChildren) == 0x000004, "Wrong alignment on GTreeNode_NumChildren");
static_assert(sizeof(GTreeNode_NumChildren) == 0x000004, "Wrong size on GTreeNode_NumChildren");
static_assert(offsetof(GTreeNode_NumChildren, ReturnValue) == 0x000000, "Member 'GTreeNode_NumChildren::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.CreateWidget
// 0x0030 (0x0030 - 0x0000)
struct GWindow_CreateWidget final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGWindow*                               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_CreateWidget) == 0x000008, "Wrong alignment on GWindow_CreateWidget");
static_assert(sizeof(GWindow_CreateWidget) == 0x000030, "Wrong size on GWindow_CreateWidget");
static_assert(offsetof(GWindow_CreateWidget, PackageName) == 0x000000, "Member 'GWindow_CreateWidget::PackageName' has a wrong offset!");
static_assert(offsetof(GWindow_CreateWidget, ResourceName) == 0x000010, "Member 'GWindow_CreateWidget::ResourceName' has a wrong offset!");
static_assert(offsetof(GWindow_CreateWidget, WorldContextObject) == 0x000020, "Member 'GWindow_CreateWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GWindow_CreateWidget, ReturnValue) == 0x000028, "Member 'GWindow_CreateWidget::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.CloseEventHandler
// 0x0008 (0x0008 - 0x0000)
struct GWindow_CloseEventHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_CloseEventHandler) == 0x000008, "Wrong alignment on GWindow_CloseEventHandler");
static_assert(sizeof(GWindow_CloseEventHandler) == 0x000008, "Wrong size on GWindow_CloseEventHandler");
static_assert(offsetof(GWindow_CloseEventHandler, Context) == 0x000000, "Member 'GWindow_CloseEventHandler::Context' has a wrong offset!");

// Function FairyGUI.GWindow.CloseModalWait
// 0x0008 (0x0008 - 0x0000)
struct GWindow_CloseModalWait final
{
public:
	int32                                         InRequestingCmd;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GWindow_CloseModalWait) == 0x000004, "Wrong alignment on GWindow_CloseModalWait");
static_assert(sizeof(GWindow_CloseModalWait) == 0x000008, "Wrong size on GWindow_CloseModalWait");
static_assert(offsetof(GWindow_CloseModalWait, InRequestingCmd) == 0x000000, "Member 'GWindow_CloseModalWait::InRequestingCmd' has a wrong offset!");
static_assert(offsetof(GWindow_CloseModalWait, ReturnValue) == 0x000004, "Member 'GWindow_CloseModalWait::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.OnDragStartHandler
// 0x0008 (0x0008 - 0x0000)
struct GWindow_OnDragStartHandler final
{
public:
	class UEventContext*                          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_OnDragStartHandler) == 0x000008, "Wrong alignment on GWindow_OnDragStartHandler");
static_assert(sizeof(GWindow_OnDragStartHandler) == 0x000008, "Wrong size on GWindow_OnDragStartHandler");
static_assert(offsetof(GWindow_OnDragStartHandler, Context) == 0x000000, "Member 'GWindow_OnDragStartHandler::Context' has a wrong offset!");

// Function FairyGUI.GWindow.SetCloseButton
// 0x0008 (0x0008 - 0x0000)
struct GWindow_SetCloseButton final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_SetCloseButton) == 0x000008, "Wrong alignment on GWindow_SetCloseButton");
static_assert(sizeof(GWindow_SetCloseButton) == 0x000008, "Wrong size on GWindow_SetCloseButton");
static_assert(offsetof(GWindow_SetCloseButton, Obj) == 0x000000, "Member 'GWindow_SetCloseButton::Obj' has a wrong offset!");

// Function FairyGUI.GWindow.SetContentArea
// 0x0008 (0x0008 - 0x0000)
struct GWindow_SetContentArea final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_SetContentArea) == 0x000008, "Wrong alignment on GWindow_SetContentArea");
static_assert(sizeof(GWindow_SetContentArea) == 0x000008, "Wrong size on GWindow_SetContentArea");
static_assert(offsetof(GWindow_SetContentArea, Obj) == 0x000000, "Member 'GWindow_SetContentArea::Obj' has a wrong offset!");

// Function FairyGUI.GWindow.SetContentPane
// 0x0008 (0x0008 - 0x0000)
struct GWindow_SetContentPane final
{
public:
	class UGComponent*                            Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_SetContentPane) == 0x000008, "Wrong alignment on GWindow_SetContentPane");
static_assert(sizeof(GWindow_SetContentPane) == 0x000008, "Wrong size on GWindow_SetContentPane");
static_assert(offsetof(GWindow_SetContentPane, Obj) == 0x000000, "Member 'GWindow_SetContentPane::Obj' has a wrong offset!");

// Function FairyGUI.GWindow.SetDragArea
// 0x0008 (0x0008 - 0x0000)
struct GWindow_SetDragArea final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_SetDragArea) == 0x000008, "Wrong alignment on GWindow_SetDragArea");
static_assert(sizeof(GWindow_SetDragArea) == 0x000008, "Wrong size on GWindow_SetDragArea");
static_assert(offsetof(GWindow_SetDragArea, Obj) == 0x000000, "Member 'GWindow_SetDragArea::Obj' has a wrong offset!");

// Function FairyGUI.GWindow.SetModal
// 0x0001 (0x0001 - 0x0000)
struct GWindow_SetModal final
{
public:
	bool                                          bInModal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_SetModal) == 0x000001, "Wrong alignment on GWindow_SetModal");
static_assert(sizeof(GWindow_SetModal) == 0x000001, "Wrong size on GWindow_SetModal");
static_assert(offsetof(GWindow_SetModal, bInModal) == 0x000000, "Member 'GWindow_SetModal::bInModal' has a wrong offset!");

// Function FairyGUI.GWindow.ShowModalWait
// 0x0004 (0x0004 - 0x0000)
struct GWindow_ShowModalWait final
{
public:
	int32                                         InRequestingCmd;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_ShowModalWait) == 0x000004, "Wrong alignment on GWindow_ShowModalWait");
static_assert(sizeof(GWindow_ShowModalWait) == 0x000004, "Wrong size on GWindow_ShowModalWait");
static_assert(offsetof(GWindow_ShowModalWait, InRequestingCmd) == 0x000000, "Member 'GWindow_ShowModalWait::InRequestingCmd' has a wrong offset!");

// Function FairyGUI.GWindow.GetCloseButton
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetCloseButton final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetCloseButton) == 0x000008, "Wrong alignment on GWindow_GetCloseButton");
static_assert(sizeof(GWindow_GetCloseButton) == 0x000008, "Wrong size on GWindow_GetCloseButton");
static_assert(offsetof(GWindow_GetCloseButton, ReturnValue) == 0x000000, "Member 'GWindow_GetCloseButton::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.GetContentArea
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetContentArea final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetContentArea) == 0x000008, "Wrong alignment on GWindow_GetContentArea");
static_assert(sizeof(GWindow_GetContentArea) == 0x000008, "Wrong size on GWindow_GetContentArea");
static_assert(offsetof(GWindow_GetContentArea, ReturnValue) == 0x000000, "Member 'GWindow_GetContentArea::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.GetContentPane
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetContentPane final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetContentPane) == 0x000008, "Wrong alignment on GWindow_GetContentPane");
static_assert(sizeof(GWindow_GetContentPane) == 0x000008, "Wrong size on GWindow_GetContentPane");
static_assert(offsetof(GWindow_GetContentPane, ReturnValue) == 0x000000, "Member 'GWindow_GetContentPane::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.GetDragArea
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetDragArea final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetDragArea) == 0x000008, "Wrong alignment on GWindow_GetDragArea");
static_assert(sizeof(GWindow_GetDragArea) == 0x000008, "Wrong size on GWindow_GetDragArea");
static_assert(offsetof(GWindow_GetDragArea, ReturnValue) == 0x000000, "Member 'GWindow_GetDragArea::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.GetFrame
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetFrame final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetFrame) == 0x000008, "Wrong alignment on GWindow_GetFrame");
static_assert(sizeof(GWindow_GetFrame) == 0x000008, "Wrong size on GWindow_GetFrame");
static_assert(offsetof(GWindow_GetFrame, ReturnValue) == 0x000000, "Member 'GWindow_GetFrame::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.GetModalWaitingPane
// 0x0008 (0x0008 - 0x0000)
struct GWindow_GetModalWaitingPane final
{
public:
	class UGObject*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_GetModalWaitingPane) == 0x000008, "Wrong alignment on GWindow_GetModalWaitingPane");
static_assert(sizeof(GWindow_GetModalWaitingPane) == 0x000008, "Wrong size on GWindow_GetModalWaitingPane");
static_assert(offsetof(GWindow_GetModalWaitingPane, ReturnValue) == 0x000000, "Member 'GWindow_GetModalWaitingPane::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.IsModal
// 0x0001 (0x0001 - 0x0000)
struct GWindow_IsModal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_IsModal) == 0x000001, "Wrong alignment on GWindow_IsModal");
static_assert(sizeof(GWindow_IsModal) == 0x000001, "Wrong size on GWindow_IsModal");
static_assert(offsetof(GWindow_IsModal, ReturnValue) == 0x000000, "Member 'GWindow_IsModal::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.IsShowing
// 0x0001 (0x0001 - 0x0000)
struct GWindow_IsShowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_IsShowing) == 0x000001, "Wrong alignment on GWindow_IsShowing");
static_assert(sizeof(GWindow_IsShowing) == 0x000001, "Wrong size on GWindow_IsShowing");
static_assert(offsetof(GWindow_IsShowing, ReturnValue) == 0x000000, "Member 'GWindow_IsShowing::ReturnValue' has a wrong offset!");

// Function FairyGUI.GWindow.IsTop
// 0x0001 (0x0001 - 0x0000)
struct GWindow_IsTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GWindow_IsTop) == 0x000001, "Wrong alignment on GWindow_IsTop");
static_assert(sizeof(GWindow_IsTop) == 0x000001, "Wrong size on GWindow_IsTop");
static_assert(offsetof(GWindow_IsTop, ReturnValue) == 0x000000, "Member 'GWindow_IsTop::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.CreatePopupMenu
// 0x0020 (0x0020 - 0x0000)
struct PopupMenu_CreatePopupMenu final
{
public:
	class FString                                 ResourceURL;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupMenu*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_CreatePopupMenu) == 0x000008, "Wrong alignment on PopupMenu_CreatePopupMenu");
static_assert(sizeof(PopupMenu_CreatePopupMenu) == 0x000020, "Wrong size on PopupMenu_CreatePopupMenu");
static_assert(offsetof(PopupMenu_CreatePopupMenu, ResourceURL) == 0x000000, "Member 'PopupMenu_CreatePopupMenu::ResourceURL' has a wrong offset!");
static_assert(offsetof(PopupMenu_CreatePopupMenu, WorldContextObject) == 0x000010, "Member 'PopupMenu_CreatePopupMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PopupMenu_CreatePopupMenu, ReturnValue) == 0x000018, "Member 'PopupMenu_CreatePopupMenu::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.AddItem
// 0x0028 (0x0028 - 0x0000)
struct PopupMenu_AddItem final
{
public:
	class FString                                 Caption;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UEventContext* EventContext)> Callback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UGButton*                               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_AddItem) == 0x000008, "Wrong alignment on PopupMenu_AddItem");
static_assert(sizeof(PopupMenu_AddItem) == 0x000028, "Wrong size on PopupMenu_AddItem");
static_assert(offsetof(PopupMenu_AddItem, Caption) == 0x000000, "Member 'PopupMenu_AddItem::Caption' has a wrong offset!");
static_assert(offsetof(PopupMenu_AddItem, Callback) == 0x000010, "Member 'PopupMenu_AddItem::Callback' has a wrong offset!");
static_assert(offsetof(PopupMenu_AddItem, ReturnValue) == 0x000020, "Member 'PopupMenu_AddItem::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.AddItemAt
// 0x0030 (0x0030 - 0x0000)
struct PopupMenu_AddItemAt final
{
public:
	class FString                                 Caption;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UEventContext* EventContext)> Callback;                                     // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGButton*                               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_AddItemAt) == 0x000008, "Wrong alignment on PopupMenu_AddItemAt");
static_assert(sizeof(PopupMenu_AddItemAt) == 0x000030, "Wrong size on PopupMenu_AddItemAt");
static_assert(offsetof(PopupMenu_AddItemAt, Caption) == 0x000000, "Member 'PopupMenu_AddItemAt::Caption' has a wrong offset!");
static_assert(offsetof(PopupMenu_AddItemAt, Index_0) == 0x000010, "Member 'PopupMenu_AddItemAt::Index_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_AddItemAt, Callback) == 0x000014, "Member 'PopupMenu_AddItemAt::Callback' has a wrong offset!");
static_assert(offsetof(PopupMenu_AddItemAt, ReturnValue) == 0x000028, "Member 'PopupMenu_AddItemAt::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.RemoveItem
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_RemoveItem final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_RemoveItem) == 0x000008, "Wrong alignment on PopupMenu_RemoveItem");
static_assert(sizeof(PopupMenu_RemoveItem) == 0x000018, "Wrong size on PopupMenu_RemoveItem");
static_assert(offsetof(PopupMenu_RemoveItem, Name_0) == 0x000000, "Member 'PopupMenu_RemoveItem::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_RemoveItem, ReturnValue) == 0x000010, "Member 'PopupMenu_RemoveItem::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.SetItemCheckable
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_SetItemCheckable final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckable;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_SetItemCheckable) == 0x000008, "Wrong alignment on PopupMenu_SetItemCheckable");
static_assert(sizeof(PopupMenu_SetItemCheckable) == 0x000018, "Wrong size on PopupMenu_SetItemCheckable");
static_assert(offsetof(PopupMenu_SetItemCheckable, Name_0) == 0x000000, "Member 'PopupMenu_SetItemCheckable::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_SetItemCheckable, bCheckable) == 0x000010, "Member 'PopupMenu_SetItemCheckable::bCheckable' has a wrong offset!");

// Function FairyGUI.PopupMenu.SetItemChecked
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_SetItemChecked final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheck;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_SetItemChecked) == 0x000008, "Wrong alignment on PopupMenu_SetItemChecked");
static_assert(sizeof(PopupMenu_SetItemChecked) == 0x000018, "Wrong size on PopupMenu_SetItemChecked");
static_assert(offsetof(PopupMenu_SetItemChecked, Name_0) == 0x000000, "Member 'PopupMenu_SetItemChecked::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_SetItemChecked, bCheck) == 0x000010, "Member 'PopupMenu_SetItemChecked::bCheck' has a wrong offset!");

// Function FairyGUI.PopupMenu.SetItemGrayed
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_SetItemGrayed final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrayed;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_SetItemGrayed) == 0x000008, "Wrong alignment on PopupMenu_SetItemGrayed");
static_assert(sizeof(PopupMenu_SetItemGrayed) == 0x000018, "Wrong size on PopupMenu_SetItemGrayed");
static_assert(offsetof(PopupMenu_SetItemGrayed, Name_0) == 0x000000, "Member 'PopupMenu_SetItemGrayed::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_SetItemGrayed, bGrayed) == 0x000010, "Member 'PopupMenu_SetItemGrayed::bGrayed' has a wrong offset!");

// Function FairyGUI.PopupMenu.SetItemText
// 0x0020 (0x0020 - 0x0000)
struct PopupMenu_SetItemText final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Caption;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_SetItemText) == 0x000008, "Wrong alignment on PopupMenu_SetItemText");
static_assert(sizeof(PopupMenu_SetItemText) == 0x000020, "Wrong size on PopupMenu_SetItemText");
static_assert(offsetof(PopupMenu_SetItemText, Name_0) == 0x000000, "Member 'PopupMenu_SetItemText::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_SetItemText, Caption) == 0x000010, "Member 'PopupMenu_SetItemText::Caption' has a wrong offset!");

// Function FairyGUI.PopupMenu.SetItemVisible
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_SetItemVisible final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_SetItemVisible) == 0x000008, "Wrong alignment on PopupMenu_SetItemVisible");
static_assert(sizeof(PopupMenu_SetItemVisible) == 0x000018, "Wrong size on PopupMenu_SetItemVisible");
static_assert(offsetof(PopupMenu_SetItemVisible, Name_0) == 0x000000, "Member 'PopupMenu_SetItemVisible::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_SetItemVisible, bVisible) == 0x000010, "Member 'PopupMenu_SetItemVisible::bVisible' has a wrong offset!");

// Function FairyGUI.PopupMenu.Show
// 0x0010 (0x0010 - 0x0000)
struct PopupMenu_Show final
{
public:
	class UGObject*                               AtObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupDirection                               Dir;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_Show) == 0x000008, "Wrong alignment on PopupMenu_Show");
static_assert(sizeof(PopupMenu_Show) == 0x000010, "Wrong size on PopupMenu_Show");
static_assert(offsetof(PopupMenu_Show, AtObject) == 0x000000, "Member 'PopupMenu_Show::AtObject' has a wrong offset!");
static_assert(offsetof(PopupMenu_Show, Dir) == 0x000008, "Member 'PopupMenu_Show::Dir' has a wrong offset!");

// Function FairyGUI.PopupMenu.GetContentPane
// 0x0008 (0x0008 - 0x0000)
struct PopupMenu_GetContentPane final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_GetContentPane) == 0x000008, "Wrong alignment on PopupMenu_GetContentPane");
static_assert(sizeof(PopupMenu_GetContentPane) == 0x000008, "Wrong size on PopupMenu_GetContentPane");
static_assert(offsetof(PopupMenu_GetContentPane, ReturnValue) == 0x000000, "Member 'PopupMenu_GetContentPane::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct PopupMenu_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_GetItemCount) == 0x000004, "Wrong alignment on PopupMenu_GetItemCount");
static_assert(sizeof(PopupMenu_GetItemCount) == 0x000004, "Wrong size on PopupMenu_GetItemCount");
static_assert(offsetof(PopupMenu_GetItemCount, ReturnValue) == 0x000000, "Member 'PopupMenu_GetItemCount::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_GetItemName final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_GetItemName) == 0x000008, "Wrong alignment on PopupMenu_GetItemName");
static_assert(sizeof(PopupMenu_GetItemName) == 0x000018, "Wrong size on PopupMenu_GetItemName");
static_assert(offsetof(PopupMenu_GetItemName, Index_0) == 0x000000, "Member 'PopupMenu_GetItemName::Index_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_GetItemName, ReturnValue) == 0x000008, "Member 'PopupMenu_GetItemName::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.GetList
// 0x0008 (0x0008 - 0x0000)
struct PopupMenu_GetList final
{
public:
	class UGList*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupMenu_GetList) == 0x000008, "Wrong alignment on PopupMenu_GetList");
static_assert(sizeof(PopupMenu_GetList) == 0x000008, "Wrong size on PopupMenu_GetList");
static_assert(offsetof(PopupMenu_GetList, ReturnValue) == 0x000000, "Member 'PopupMenu_GetList::ReturnValue' has a wrong offset!");

// Function FairyGUI.PopupMenu.IsItemChecked
// 0x0018 (0x0018 - 0x0000)
struct PopupMenu_IsItemChecked final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PopupMenu_IsItemChecked) == 0x000008, "Wrong alignment on PopupMenu_IsItemChecked");
static_assert(sizeof(PopupMenu_IsItemChecked) == 0x000018, "Wrong size on PopupMenu_IsItemChecked");
static_assert(offsetof(PopupMenu_IsItemChecked, Name_0) == 0x000000, "Member 'PopupMenu_IsItemChecked::Name_0' has a wrong offset!");
static_assert(offsetof(PopupMenu_IsItemChecked, ReturnValue) == 0x000010, "Member 'PopupMenu_IsItemChecked::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.LockFooter
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_LockFooter final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_LockFooter) == 0x000004, "Wrong alignment on ScrollPane_LockFooter");
static_assert(sizeof(ScrollPane_LockFooter) == 0x000004, "Wrong size on ScrollPane_LockFooter");
static_assert(offsetof(ScrollPane_LockFooter, Size) == 0x000000, "Member 'ScrollPane_LockFooter::Size' has a wrong offset!");

// Function FairyGUI.ScrollPane.LockHeader
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_LockHeader final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_LockHeader) == 0x000004, "Wrong alignment on ScrollPane_LockHeader");
static_assert(sizeof(ScrollPane_LockHeader) == 0x000004, "Wrong size on ScrollPane_LockHeader");
static_assert(offsetof(ScrollPane_LockHeader, Size) == 0x000000, "Member 'ScrollPane_LockHeader::Size' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollBottom
// 0x0001 (0x0001 - 0x0000)
struct ScrollPane_ScrollBottom final
{
public:
	bool                                          bAnimation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_ScrollBottom) == 0x000001, "Wrong alignment on ScrollPane_ScrollBottom");
static_assert(sizeof(ScrollPane_ScrollBottom) == 0x000001, "Wrong size on ScrollPane_ScrollBottom");
static_assert(offsetof(ScrollPane_ScrollBottom, bAnimation) == 0x000000, "Member 'ScrollPane_ScrollBottom::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollDown
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_ScrollDown final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_ScrollDown) == 0x000004, "Wrong alignment on ScrollPane_ScrollDown");
static_assert(sizeof(ScrollPane_ScrollDown) == 0x000008, "Wrong size on ScrollPane_ScrollDown");
static_assert(offsetof(ScrollPane_ScrollDown, Ratio) == 0x000000, "Member 'ScrollPane_ScrollDown::Ratio' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollDown, bAnimation) == 0x000004, "Member 'ScrollPane_ScrollDown::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollLeft
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_ScrollLeft final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_ScrollLeft) == 0x000004, "Wrong alignment on ScrollPane_ScrollLeft");
static_assert(sizeof(ScrollPane_ScrollLeft) == 0x000008, "Wrong size on ScrollPane_ScrollLeft");
static_assert(offsetof(ScrollPane_ScrollLeft, Ratio) == 0x000000, "Member 'ScrollPane_ScrollLeft::Ratio' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollLeft, bAnimation) == 0x000004, "Member 'ScrollPane_ScrollLeft::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollRight
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_ScrollRight final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_ScrollRight) == 0x000004, "Wrong alignment on ScrollPane_ScrollRight");
static_assert(sizeof(ScrollPane_ScrollRight) == 0x000008, "Wrong size on ScrollPane_ScrollRight");
static_assert(offsetof(ScrollPane_ScrollRight, Ratio) == 0x000000, "Member 'ScrollPane_ScrollRight::Ratio' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollRight, bAnimation) == 0x000004, "Member 'ScrollPane_ScrollRight::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollTop
// 0x0001 (0x0001 - 0x0000)
struct ScrollPane_ScrollTop final
{
public:
	bool                                          bAnimation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_ScrollTop) == 0x000001, "Wrong alignment on ScrollPane_ScrollTop");
static_assert(sizeof(ScrollPane_ScrollTop) == 0x000001, "Wrong size on ScrollPane_ScrollTop");
static_assert(offsetof(ScrollPane_ScrollTop, bAnimation) == 0x000000, "Member 'ScrollPane_ScrollTop::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollToView
// 0x0010 (0x0010 - 0x0000)
struct ScrollPane_ScrollToView final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFirst;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_ScrollToView) == 0x000008, "Wrong alignment on ScrollPane_ScrollToView");
static_assert(sizeof(ScrollPane_ScrollToView) == 0x000010, "Wrong size on ScrollPane_ScrollToView");
static_assert(offsetof(ScrollPane_ScrollToView, Obj) == 0x000000, "Member 'ScrollPane_ScrollToView::Obj' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollToView, bAnimation) == 0x000008, "Member 'ScrollPane_ScrollToView::bAnimation' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollToView, bSetFirst) == 0x000009, "Member 'ScrollPane_ScrollToView::bSetFirst' has a wrong offset!");

// Function FairyGUI.ScrollPane.ScrollUp
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_ScrollUp final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_ScrollUp) == 0x000004, "Wrong alignment on ScrollPane_ScrollUp");
static_assert(sizeof(ScrollPane_ScrollUp) == 0x000008, "Wrong size on ScrollPane_ScrollUp");
static_assert(offsetof(ScrollPane_ScrollUp, Ratio) == 0x000000, "Member 'ScrollPane_ScrollUp::Ratio' has a wrong offset!");
static_assert(offsetof(ScrollPane_ScrollUp, bAnimation) == 0x000004, "Member 'ScrollPane_ScrollUp::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPageX
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPageX final
{
public:
	int32                                         PageX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPageX) == 0x000004, "Wrong alignment on ScrollPane_SetPageX");
static_assert(sizeof(ScrollPane_SetPageX) == 0x000008, "Wrong size on ScrollPane_SetPageX");
static_assert(offsetof(ScrollPane_SetPageX, PageX) == 0x000000, "Member 'ScrollPane_SetPageX::PageX' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPageX, bAnimation) == 0x000004, "Member 'ScrollPane_SetPageX::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPageY
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPageY final
{
public:
	int32                                         PageY;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPageY) == 0x000004, "Wrong alignment on ScrollPane_SetPageY");
static_assert(sizeof(ScrollPane_SetPageY) == 0x000008, "Wrong size on ScrollPane_SetPageY");
static_assert(offsetof(ScrollPane_SetPageY, PageY) == 0x000000, "Member 'ScrollPane_SetPageY::PageY' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPageY, bAnimation) == 0x000004, "Member 'ScrollPane_SetPageY::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPercX
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPercX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPercX) == 0x000004, "Wrong alignment on ScrollPane_SetPercX");
static_assert(sizeof(ScrollPane_SetPercX) == 0x000008, "Wrong size on ScrollPane_SetPercX");
static_assert(offsetof(ScrollPane_SetPercX, Value) == 0x000000, "Member 'ScrollPane_SetPercX::Value' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPercX, bAnimation) == 0x000004, "Member 'ScrollPane_SetPercX::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPercY
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPercY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPercY) == 0x000004, "Wrong alignment on ScrollPane_SetPercY");
static_assert(sizeof(ScrollPane_SetPercY) == 0x000008, "Wrong size on ScrollPane_SetPercY");
static_assert(offsetof(ScrollPane_SetPercY, Value) == 0x000000, "Member 'ScrollPane_SetPercY::Value' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPercY, bAnimation) == 0x000004, "Member 'ScrollPane_SetPercY::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPosX
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPosX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPosX) == 0x000004, "Wrong alignment on ScrollPane_SetPosX");
static_assert(sizeof(ScrollPane_SetPosX) == 0x000008, "Wrong size on ScrollPane_SetPosX");
static_assert(offsetof(ScrollPane_SetPosX, Value) == 0x000000, "Member 'ScrollPane_SetPosX::Value' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPosX, bAnimation) == 0x000004, "Member 'ScrollPane_SetPosX::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.SetPosY
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_SetPosY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimation;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_SetPosY) == 0x000004, "Wrong alignment on ScrollPane_SetPosY");
static_assert(sizeof(ScrollPane_SetPosY) == 0x000008, "Wrong size on ScrollPane_SetPosY");
static_assert(offsetof(ScrollPane_SetPosY, Value) == 0x000000, "Member 'ScrollPane_SetPosY::Value' has a wrong offset!");
static_assert(offsetof(ScrollPane_SetPosY, bAnimation) == 0x000004, "Member 'ScrollPane_SetPosY::bAnimation' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetContentSize
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetContentSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetContentSize) == 0x000004, "Wrong alignment on ScrollPane_GetContentSize");
static_assert(sizeof(ScrollPane_GetContentSize) == 0x000008, "Wrong size on ScrollPane_GetContentSize");
static_assert(offsetof(ScrollPane_GetContentSize, ReturnValue) == 0x000000, "Member 'ScrollPane_GetContentSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetFooter
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetFooter final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetFooter) == 0x000008, "Wrong alignment on ScrollPane_GetFooter");
static_assert(sizeof(ScrollPane_GetFooter) == 0x000008, "Wrong size on ScrollPane_GetFooter");
static_assert(offsetof(ScrollPane_GetFooter, ReturnValue) == 0x000000, "Member 'ScrollPane_GetFooter::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetHeader
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetHeader final
{
public:
	class UGComponent*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetHeader) == 0x000008, "Wrong alignment on ScrollPane_GetHeader");
static_assert(sizeof(ScrollPane_GetHeader) == 0x000008, "Wrong size on ScrollPane_GetHeader");
static_assert(offsetof(ScrollPane_GetHeader, ReturnValue) == 0x000000, "Member 'ScrollPane_GetHeader::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetHzScrollBar
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetHzScrollBar final
{
public:
	class UGScrollBar*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetHzScrollBar) == 0x000008, "Wrong alignment on ScrollPane_GetHzScrollBar");
static_assert(sizeof(ScrollPane_GetHzScrollBar) == 0x000008, "Wrong size on ScrollPane_GetHzScrollBar");
static_assert(offsetof(ScrollPane_GetHzScrollBar, ReturnValue) == 0x000000, "Member 'ScrollPane_GetHzScrollBar::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPageX
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPageX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPageX) == 0x000004, "Wrong alignment on ScrollPane_GetPageX");
static_assert(sizeof(ScrollPane_GetPageX) == 0x000004, "Wrong size on ScrollPane_GetPageX");
static_assert(offsetof(ScrollPane_GetPageX, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPageX::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPageY
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPageY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPageY) == 0x000004, "Wrong alignment on ScrollPane_GetPageY");
static_assert(sizeof(ScrollPane_GetPageY) == 0x000004, "Wrong size on ScrollPane_GetPageY");
static_assert(offsetof(ScrollPane_GetPageY, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPageY::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPercX
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPercX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPercX) == 0x000004, "Wrong alignment on ScrollPane_GetPercX");
static_assert(sizeof(ScrollPane_GetPercX) == 0x000004, "Wrong size on ScrollPane_GetPercX");
static_assert(offsetof(ScrollPane_GetPercX, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPercX::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPercY
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPercY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPercY) == 0x000004, "Wrong alignment on ScrollPane_GetPercY");
static_assert(sizeof(ScrollPane_GetPercY) == 0x000004, "Wrong size on ScrollPane_GetPercY");
static_assert(offsetof(ScrollPane_GetPercY, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPercY::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPosX
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPosX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPosX) == 0x000004, "Wrong alignment on ScrollPane_GetPosX");
static_assert(sizeof(ScrollPane_GetPosX) == 0x000004, "Wrong size on ScrollPane_GetPosX");
static_assert(offsetof(ScrollPane_GetPosX, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPosX::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetPosY
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetPosY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetPosY) == 0x000004, "Wrong alignment on ScrollPane_GetPosY");
static_assert(sizeof(ScrollPane_GetPosY) == 0x000004, "Wrong size on ScrollPane_GetPosY");
static_assert(offsetof(ScrollPane_GetPosY, ReturnValue) == 0x000000, "Member 'ScrollPane_GetPosY::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetScrollingPosX
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetScrollingPosX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetScrollingPosX) == 0x000004, "Wrong alignment on ScrollPane_GetScrollingPosX");
static_assert(sizeof(ScrollPane_GetScrollingPosX) == 0x000004, "Wrong size on ScrollPane_GetScrollingPosX");
static_assert(offsetof(ScrollPane_GetScrollingPosX, ReturnValue) == 0x000000, "Member 'ScrollPane_GetScrollingPosX::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetScrollingPosY
// 0x0004 (0x0004 - 0x0000)
struct ScrollPane_GetScrollingPosY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetScrollingPosY) == 0x000004, "Wrong alignment on ScrollPane_GetScrollingPosY");
static_assert(sizeof(ScrollPane_GetScrollingPosY) == 0x000004, "Wrong size on ScrollPane_GetScrollingPosY");
static_assert(offsetof(ScrollPane_GetScrollingPosY, ReturnValue) == 0x000000, "Member 'ScrollPane_GetScrollingPosY::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetViewSize
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetViewSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetViewSize) == 0x000004, "Wrong alignment on ScrollPane_GetViewSize");
static_assert(sizeof(ScrollPane_GetViewSize) == 0x000008, "Wrong size on ScrollPane_GetViewSize");
static_assert(offsetof(ScrollPane_GetViewSize, ReturnValue) == 0x000000, "Member 'ScrollPane_GetViewSize::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.GetVtScrollBar
// 0x0008 (0x0008 - 0x0000)
struct ScrollPane_GetVtScrollBar final
{
public:
	class UGScrollBar*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_GetVtScrollBar) == 0x000008, "Wrong alignment on ScrollPane_GetVtScrollBar");
static_assert(sizeof(ScrollPane_GetVtScrollBar) == 0x000008, "Wrong size on ScrollPane_GetVtScrollBar");
static_assert(offsetof(ScrollPane_GetVtScrollBar, ReturnValue) == 0x000000, "Member 'ScrollPane_GetVtScrollBar::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.IsBottomMost
// 0x0001 (0x0001 - 0x0000)
struct ScrollPane_IsBottomMost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_IsBottomMost) == 0x000001, "Wrong alignment on ScrollPane_IsBottomMost");
static_assert(sizeof(ScrollPane_IsBottomMost) == 0x000001, "Wrong size on ScrollPane_IsBottomMost");
static_assert(offsetof(ScrollPane_IsBottomMost, ReturnValue) == 0x000000, "Member 'ScrollPane_IsBottomMost::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.IsChildInView
// 0x0010 (0x0010 - 0x0000)
struct ScrollPane_IsChildInView final
{
public:
	class UGObject*                               Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPane_IsChildInView) == 0x000008, "Wrong alignment on ScrollPane_IsChildInView");
static_assert(sizeof(ScrollPane_IsChildInView) == 0x000010, "Wrong size on ScrollPane_IsChildInView");
static_assert(offsetof(ScrollPane_IsChildInView, Obj) == 0x000000, "Member 'ScrollPane_IsChildInView::Obj' has a wrong offset!");
static_assert(offsetof(ScrollPane_IsChildInView, ReturnValue) == 0x000008, "Member 'ScrollPane_IsChildInView::ReturnValue' has a wrong offset!");

// Function FairyGUI.ScrollPane.IsRightMost
// 0x0001 (0x0001 - 0x0000)
struct ScrollPane_IsRightMost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPane_IsRightMost) == 0x000001, "Wrong alignment on ScrollPane_IsRightMost");
static_assert(sizeof(ScrollPane_IsRightMost) == 0x000001, "Wrong size on ScrollPane_IsRightMost");
static_assert(offsetof(ScrollPane_IsRightMost, ReturnValue) == 0x000000, "Member 'ScrollPane_IsRightMost::ReturnValue' has a wrong offset!");

// Function FairyGUI.Transition.ChangePlayTimes
// 0x0004 (0x0004 - 0x0000)
struct Transition_ChangePlayTimes final
{
public:
	int32                                         InTimes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_ChangePlayTimes) == 0x000004, "Wrong alignment on Transition_ChangePlayTimes");
static_assert(sizeof(Transition_ChangePlayTimes) == 0x000004, "Wrong size on Transition_ChangePlayTimes");
static_assert(offsetof(Transition_ChangePlayTimes, InTimes) == 0x000000, "Member 'Transition_ChangePlayTimes::InTimes' has a wrong offset!");

// Function FairyGUI.Transition.Play
// 0x0020 (0x0020 - 0x0000)
struct Transition_Play final
{
public:
	TDelegate<void()>                             InCompleteCallback;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InTimes;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_Play) == 0x000004, "Wrong alignment on Transition_Play");
static_assert(sizeof(Transition_Play) == 0x000020, "Wrong size on Transition_Play");
static_assert(offsetof(Transition_Play, InCompleteCallback) == 0x000000, "Member 'Transition_Play::InCompleteCallback' has a wrong offset!");
static_assert(offsetof(Transition_Play, InTimes) == 0x000010, "Member 'Transition_Play::InTimes' has a wrong offset!");
static_assert(offsetof(Transition_Play, InDelay) == 0x000014, "Member 'Transition_Play::InDelay' has a wrong offset!");
static_assert(offsetof(Transition_Play, InStartTime) == 0x000018, "Member 'Transition_Play::InStartTime' has a wrong offset!");
static_assert(offsetof(Transition_Play, InEndTime) == 0x00001C, "Member 'Transition_Play::InEndTime' has a wrong offset!");

// Function FairyGUI.Transition.PlayReverse
// 0x0018 (0x0018 - 0x0000)
struct Transition_PlayReverse final
{
public:
	TDelegate<void()>                             InCompleteCallback;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InTimes;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_PlayReverse) == 0x000004, "Wrong alignment on Transition_PlayReverse");
static_assert(sizeof(Transition_PlayReverse) == 0x000018, "Wrong size on Transition_PlayReverse");
static_assert(offsetof(Transition_PlayReverse, InCompleteCallback) == 0x000000, "Member 'Transition_PlayReverse::InCompleteCallback' has a wrong offset!");
static_assert(offsetof(Transition_PlayReverse, InTimes) == 0x000010, "Member 'Transition_PlayReverse::InTimes' has a wrong offset!");
static_assert(offsetof(Transition_PlayReverse, InDelay) == 0x000014, "Member 'Transition_PlayReverse::InDelay' has a wrong offset!");

// Function FairyGUI.Transition.SetAutoPlay
// 0x000C (0x000C - 0x0000)
struct Transition_SetAutoPlay final
{
public:
	bool                                          bInAutoPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InTimes;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetAutoPlay) == 0x000004, "Wrong alignment on Transition_SetAutoPlay");
static_assert(sizeof(Transition_SetAutoPlay) == 0x00000C, "Wrong size on Transition_SetAutoPlay");
static_assert(offsetof(Transition_SetAutoPlay, bInAutoPlay) == 0x000000, "Member 'Transition_SetAutoPlay::bInAutoPlay' has a wrong offset!");
static_assert(offsetof(Transition_SetAutoPlay, InTimes) == 0x000004, "Member 'Transition_SetAutoPlay::InTimes' has a wrong offset!");
static_assert(offsetof(Transition_SetAutoPlay, InDelay) == 0x000008, "Member 'Transition_SetAutoPlay::InDelay' has a wrong offset!");

// Function FairyGUI.Transition.SetDuration
// 0x0018 (0x0018 - 0x0000)
struct Transition_SetDuration final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Transition_SetDuration) == 0x000008, "Wrong alignment on Transition_SetDuration");
static_assert(sizeof(Transition_SetDuration) == 0x000018, "Wrong size on Transition_SetDuration");
static_assert(offsetof(Transition_SetDuration, InLabel) == 0x000000, "Member 'Transition_SetDuration::InLabel' has a wrong offset!");
static_assert(offsetof(Transition_SetDuration, InDuration) == 0x000010, "Member 'Transition_SetDuration::InDuration' has a wrong offset!");

// Function FairyGUI.Transition.SetHook
// 0x0020 (0x0020 - 0x0000)
struct Transition_SetHook final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetHook) == 0x000008, "Wrong alignment on Transition_SetHook");
static_assert(sizeof(Transition_SetHook) == 0x000020, "Wrong size on Transition_SetHook");
static_assert(offsetof(Transition_SetHook, InLabel) == 0x000000, "Member 'Transition_SetHook::InLabel' has a wrong offset!");
static_assert(offsetof(Transition_SetHook, Callback) == 0x000010, "Member 'Transition_SetHook::Callback' has a wrong offset!");

// Function FairyGUI.Transition.SetPaused
// 0x0001 (0x0001 - 0x0000)
struct Transition_SetPaused final
{
public:
	bool                                          bInPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetPaused) == 0x000001, "Wrong alignment on Transition_SetPaused");
static_assert(sizeof(Transition_SetPaused) == 0x000001, "Wrong size on Transition_SetPaused");
static_assert(offsetof(Transition_SetPaused, bInPaused) == 0x000000, "Member 'Transition_SetPaused::bInPaused' has a wrong offset!");

// Function FairyGUI.Transition.SetTarget
// 0x0018 (0x0018 - 0x0000)
struct Transition_SetTarget final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               InTarget;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetTarget) == 0x000008, "Wrong alignment on Transition_SetTarget");
static_assert(sizeof(Transition_SetTarget) == 0x000018, "Wrong size on Transition_SetTarget");
static_assert(offsetof(Transition_SetTarget, InLabel) == 0x000000, "Member 'Transition_SetTarget::InLabel' has a wrong offset!");
static_assert(offsetof(Transition_SetTarget, InTarget) == 0x000010, "Member 'Transition_SetTarget::InTarget' has a wrong offset!");

// Function FairyGUI.Transition.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct Transition_SetTimeScale final
{
public:
	float                                         InTimeScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetTimeScale) == 0x000004, "Wrong alignment on Transition_SetTimeScale");
static_assert(sizeof(Transition_SetTimeScale) == 0x000004, "Wrong size on Transition_SetTimeScale");
static_assert(offsetof(Transition_SetTimeScale, InTimeScale) == 0x000000, "Member 'Transition_SetTimeScale::InTimeScale' has a wrong offset!");

// Function FairyGUI.Transition.SetValue
// 0x0020 (0x0020 - 0x0000)
struct Transition_SetValue final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNVariant>                      InValues;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_SetValue) == 0x000008, "Wrong alignment on Transition_SetValue");
static_assert(sizeof(Transition_SetValue) == 0x000020, "Wrong size on Transition_SetValue");
static_assert(offsetof(Transition_SetValue, InLabel) == 0x000000, "Member 'Transition_SetValue::InLabel' has a wrong offset!");
static_assert(offsetof(Transition_SetValue, InValues) == 0x000010, "Member 'Transition_SetValue::InValues' has a wrong offset!");

// Function FairyGUI.Transition.Stop
// 0x0002 (0x0002 - 0x0000)
struct Transition_Stop final
{
public:
	bool                                          bSetToComplete;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProcessCallback;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_Stop) == 0x000001, "Wrong alignment on Transition_Stop");
static_assert(sizeof(Transition_Stop) == 0x000002, "Wrong size on Transition_Stop");
static_assert(offsetof(Transition_Stop, bSetToComplete) == 0x000000, "Member 'Transition_Stop::bSetToComplete' has a wrong offset!");
static_assert(offsetof(Transition_Stop, bProcessCallback) == 0x000001, "Member 'Transition_Stop::bProcessCallback' has a wrong offset!");

// Function FairyGUI.Transition.GetLabelTime
// 0x0018 (0x0018 - 0x0000)
struct Transition_GetLabelTime final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Transition_GetLabelTime) == 0x000008, "Wrong alignment on Transition_GetLabelTime");
static_assert(sizeof(Transition_GetLabelTime) == 0x000018, "Wrong size on Transition_GetLabelTime");
static_assert(offsetof(Transition_GetLabelTime, InLabel) == 0x000000, "Member 'Transition_GetLabelTime::InLabel' has a wrong offset!");
static_assert(offsetof(Transition_GetLabelTime, ReturnValue) == 0x000010, "Member 'Transition_GetLabelTime::ReturnValue' has a wrong offset!");

// Function FairyGUI.Transition.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct Transition_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Transition_GetTimeScale) == 0x000004, "Wrong alignment on Transition_GetTimeScale");
static_assert(sizeof(Transition_GetTimeScale) == 0x000004, "Wrong size on Transition_GetTimeScale");
static_assert(offsetof(Transition_GetTimeScale, ReturnValue) == 0x000000, "Member 'Transition_GetTimeScale::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.AddPackage
// 0x0018 (0x0018 - 0x0000)
struct UIPackage_AddPackage final
{
public:
	class UUIPackageAsset*                        InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIPackage*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_AddPackage) == 0x000008, "Wrong alignment on UIPackage_AddPackage");
static_assert(sizeof(UIPackage_AddPackage) == 0x000018, "Wrong size on UIPackage_AddPackage");
static_assert(offsetof(UIPackage_AddPackage, InAsset) == 0x000000, "Member 'UIPackage_AddPackage::InAsset' has a wrong offset!");
static_assert(offsetof(UIPackage_AddPackage, WorldContextObject) == 0x000008, "Member 'UIPackage_AddPackage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIPackage_AddPackage, ReturnValue) == 0x000010, "Member 'UIPackage_AddPackage::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.CreateObject
// 0x0038 (0x0038 - 0x0000)
struct UIPackage_CreateObject final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_CreateObject) == 0x000008, "Wrong alignment on UIPackage_CreateObject");
static_assert(sizeof(UIPackage_CreateObject) == 0x000038, "Wrong size on UIPackage_CreateObject");
static_assert(offsetof(UIPackage_CreateObject, PackageName) == 0x000000, "Member 'UIPackage_CreateObject::PackageName' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObject, ResourceName) == 0x000010, "Member 'UIPackage_CreateObject::ResourceName' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObject, WorldContextObject) == 0x000020, "Member 'UIPackage_CreateObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObject, ClassType) == 0x000028, "Member 'UIPackage_CreateObject::ClassType' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObject, ReturnValue) == 0x000030, "Member 'UIPackage_CreateObject::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.CreateObjectFromURL
// 0x0028 (0x0028 - 0x0000)
struct UIPackage_CreateObjectFromURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGObject>                   ClassType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGObject*                               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_CreateObjectFromURL) == 0x000008, "Wrong alignment on UIPackage_CreateObjectFromURL");
static_assert(sizeof(UIPackage_CreateObjectFromURL) == 0x000028, "Wrong size on UIPackage_CreateObjectFromURL");
static_assert(offsetof(UIPackage_CreateObjectFromURL, URL) == 0x000000, "Member 'UIPackage_CreateObjectFromURL::URL' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObjectFromURL, WorldContextObject) == 0x000010, "Member 'UIPackage_CreateObjectFromURL::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObjectFromURL, ClassType) == 0x000018, "Member 'UIPackage_CreateObjectFromURL::ClassType' has a wrong offset!");
static_assert(offsetof(UIPackage_CreateObjectFromURL, ReturnValue) == 0x000020, "Member 'UIPackage_CreateObjectFromURL::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetBranch
// 0x0010 (0x0010 - 0x0000)
struct UIPackage_GetBranch final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetBranch) == 0x000008, "Wrong alignment on UIPackage_GetBranch");
static_assert(sizeof(UIPackage_GetBranch) == 0x000010, "Wrong size on UIPackage_GetBranch");
static_assert(offsetof(UIPackage_GetBranch, ReturnValue) == 0x000000, "Member 'UIPackage_GetBranch::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetPackageByID
// 0x0018 (0x0018 - 0x0000)
struct UIPackage_GetPackageByID final
{
public:
	class FString                                 PackageID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIPackage*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetPackageByID) == 0x000008, "Wrong alignment on UIPackage_GetPackageByID");
static_assert(sizeof(UIPackage_GetPackageByID) == 0x000018, "Wrong size on UIPackage_GetPackageByID");
static_assert(offsetof(UIPackage_GetPackageByID, PackageID) == 0x000000, "Member 'UIPackage_GetPackageByID::PackageID' has a wrong offset!");
static_assert(offsetof(UIPackage_GetPackageByID, ReturnValue) == 0x000010, "Member 'UIPackage_GetPackageByID::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetPackageByName
// 0x0018 (0x0018 - 0x0000)
struct UIPackage_GetPackageByName final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIPackage*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetPackageByName) == 0x000008, "Wrong alignment on UIPackage_GetPackageByName");
static_assert(sizeof(UIPackage_GetPackageByName) == 0x000018, "Wrong size on UIPackage_GetPackageByName");
static_assert(offsetof(UIPackage_GetPackageByName, PackageName) == 0x000000, "Member 'UIPackage_GetPackageByName::PackageName' has a wrong offset!");
static_assert(offsetof(UIPackage_GetPackageByName, ReturnValue) == 0x000010, "Member 'UIPackage_GetPackageByName::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetVar
// 0x0020 (0x0020 - 0x0000)
struct UIPackage_GetVar final
{
public:
	class FString                                 VarKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetVar) == 0x000008, "Wrong alignment on UIPackage_GetVar");
static_assert(sizeof(UIPackage_GetVar) == 0x000020, "Wrong size on UIPackage_GetVar");
static_assert(offsetof(UIPackage_GetVar, VarKey) == 0x000000, "Member 'UIPackage_GetVar::VarKey' has a wrong offset!");
static_assert(offsetof(UIPackage_GetVar, ReturnValue) == 0x000010, "Member 'UIPackage_GetVar::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.RegisterFont
// 0x0018 (0x0018 - 0x0000)
struct UIPackage_RegisterFont final
{
public:
	class FString                                 FontFace;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Font;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_RegisterFont) == 0x000008, "Wrong alignment on UIPackage_RegisterFont");
static_assert(sizeof(UIPackage_RegisterFont) == 0x000018, "Wrong size on UIPackage_RegisterFont");
static_assert(offsetof(UIPackage_RegisterFont, FontFace) == 0x000000, "Member 'UIPackage_RegisterFont::FontFace' has a wrong offset!");
static_assert(offsetof(UIPackage_RegisterFont, Font) == 0x000010, "Member 'UIPackage_RegisterFont::Font' has a wrong offset!");

// Function FairyGUI.UIPackage.RemovePackage
// 0x0018 (0x0018 - 0x0000)
struct UIPackage_RemovePackage final
{
public:
	class FString                                 IDOrName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_RemovePackage) == 0x000008, "Wrong alignment on UIPackage_RemovePackage");
static_assert(sizeof(UIPackage_RemovePackage) == 0x000018, "Wrong size on UIPackage_RemovePackage");
static_assert(offsetof(UIPackage_RemovePackage, IDOrName) == 0x000000, "Member 'UIPackage_RemovePackage::IDOrName' has a wrong offset!");
static_assert(offsetof(UIPackage_RemovePackage, WorldContextObject) == 0x000010, "Member 'UIPackage_RemovePackage::WorldContextObject' has a wrong offset!");

// Function FairyGUI.UIPackage.SetBranch
// 0x0010 (0x0010 - 0x0000)
struct UIPackage_SetBranch final
{
public:
	class FString                                 InBranch;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_SetBranch) == 0x000008, "Wrong alignment on UIPackage_SetBranch");
static_assert(sizeof(UIPackage_SetBranch) == 0x000010, "Wrong size on UIPackage_SetBranch");
static_assert(offsetof(UIPackage_SetBranch, InBranch) == 0x000000, "Member 'UIPackage_SetBranch::InBranch' has a wrong offset!");

// Function FairyGUI.UIPackage.SetVar
// 0x0020 (0x0020 - 0x0000)
struct UIPackage_SetVar final
{
public:
	class FString                                 VarKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VarValue;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_SetVar) == 0x000008, "Wrong alignment on UIPackage_SetVar");
static_assert(sizeof(UIPackage_SetVar) == 0x000020, "Wrong size on UIPackage_SetVar");
static_assert(offsetof(UIPackage_SetVar, VarKey) == 0x000000, "Member 'UIPackage_SetVar::VarKey' has a wrong offset!");
static_assert(offsetof(UIPackage_SetVar, VarValue) == 0x000010, "Member 'UIPackage_SetVar::VarValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetID
// 0x0010 (0x0010 - 0x0000)
struct UIPackage_GetID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetID) == 0x000008, "Wrong alignment on UIPackage_GetID");
static_assert(sizeof(UIPackage_GetID) == 0x000010, "Wrong size on UIPackage_GetID");
static_assert(offsetof(UIPackage_GetID, ReturnValue) == 0x000000, "Member 'UIPackage_GetID::ReturnValue' has a wrong offset!");

// Function FairyGUI.UIPackage.GetName
// 0x0010 (0x0010 - 0x0000)
struct UIPackage_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPackage_GetName) == 0x000008, "Wrong alignment on UIPackage_GetName");
static_assert(sizeof(UIPackage_GetName) == 0x000010, "Wrong size on UIPackage_GetName");
static_assert(offsetof(UIPackage_GetName, ReturnValue) == 0x000000, "Member 'UIPackage_GetName::ReturnValue' has a wrong offset!");

}

