#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerNav

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function PlayerNav.PlayerNav_C.ExecuteUbergraph_PlayerNav
// 0x0008 (0x0008 - 0x0000)
struct PlayerNav_C_ExecuteUbergraph_PlayerNav final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInDying;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerNav_C_ExecuteUbergraph_PlayerNav) == 0x000004, "Wrong alignment on PlayerNav_C_ExecuteUbergraph_PlayerNav");
static_assert(sizeof(PlayerNav_C_ExecuteUbergraph_PlayerNav) == 0x000008, "Wrong size on PlayerNav_C_ExecuteUbergraph_PlayerNav");
static_assert(offsetof(PlayerNav_C_ExecuteUbergraph_PlayerNav, EntryPoint) == 0x000000, "Member 'PlayerNav_C_ExecuteUbergraph_PlayerNav::EntryPoint' has a wrong offset!");
static_assert(offsetof(PlayerNav_C_ExecuteUbergraph_PlayerNav, K2Node_Event_bInDying) == 0x000004, "Member 'PlayerNav_C_ExecuteUbergraph_PlayerNav::K2Node_Event_bInDying' has a wrong offset!");
static_assert(offsetof(PlayerNav_C_ExecuteUbergraph_PlayerNav, K2Node_Event_IsDesignTime) == 0x000005, "Member 'PlayerNav_C_ExecuteUbergraph_PlayerNav::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function PlayerNav.PlayerNav_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PlayerNav_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerNav_C_PreConstruct) == 0x000001, "Wrong alignment on PlayerNav_C_PreConstruct");
static_assert(sizeof(PlayerNav_C_PreConstruct) == 0x000001, "Wrong size on PlayerNav_C_PreConstruct");
static_assert(offsetof(PlayerNav_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PlayerNav_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PlayerNav.PlayerNav_C.ReceivePlayerDying
// 0x0001 (0x0001 - 0x0000)
struct PlayerNav_C_ReceivePlayerDying final
{
public:
	bool                                          bInDying;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerNav_C_ReceivePlayerDying) == 0x000001, "Wrong alignment on PlayerNav_C_ReceivePlayerDying");
static_assert(sizeof(PlayerNav_C_ReceivePlayerDying) == 0x000001, "Wrong size on PlayerNav_C_ReceivePlayerDying");
static_assert(offsetof(PlayerNav_C_ReceivePlayerDying, bInDying) == 0x000000, "Member 'PlayerNav_C_ReceivePlayerDying::bInDying' has a wrong offset!");

// Function PlayerNav.PlayerNav_C.OnCollectDynamicAtlasImages
// 0x0040 (0x0040 - 0x0000)
struct PlayerNav_C_OnCollectDynamicAtlasImages final
{
public:
	TArray<struct FDynamicAtlasCollectParams>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FDynamicAtlasCollectParams             K2Node_MakeStruct_DynamicAtlasCollectParams;       // 0x0010(0x0010)(NoDestructor, ContainsInstancedReference)
	struct FDynamicAtlasCollectParams             K2Node_MakeStruct_DynamicAtlasCollectParams_1;     // 0x0020(0x0010)(NoDestructor, ContainsInstancedReference)
	TArray<struct FDynamicAtlasCollectParams>     K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(PlayerNav_C_OnCollectDynamicAtlasImages) == 0x000008, "Wrong alignment on PlayerNav_C_OnCollectDynamicAtlasImages");
static_assert(sizeof(PlayerNav_C_OnCollectDynamicAtlasImages) == 0x000040, "Wrong size on PlayerNav_C_OnCollectDynamicAtlasImages");
static_assert(offsetof(PlayerNav_C_OnCollectDynamicAtlasImages, ReturnValue) == 0x000000, "Member 'PlayerNav_C_OnCollectDynamicAtlasImages::ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerNav_C_OnCollectDynamicAtlasImages, K2Node_MakeStruct_DynamicAtlasCollectParams) == 0x000010, "Member 'PlayerNav_C_OnCollectDynamicAtlasImages::K2Node_MakeStruct_DynamicAtlasCollectParams' has a wrong offset!");
static_assert(offsetof(PlayerNav_C_OnCollectDynamicAtlasImages, K2Node_MakeStruct_DynamicAtlasCollectParams_1) == 0x000020, "Member 'PlayerNav_C_OnCollectDynamicAtlasImages::K2Node_MakeStruct_DynamicAtlasCollectParams_1' has a wrong offset!");
static_assert(offsetof(PlayerNav_C_OnCollectDynamicAtlasImages, K2Node_MakeArray_Array) == 0x000030, "Member 'PlayerNav_C_OnCollectDynamicAtlasImages::K2Node_MakeArray_Array' has a wrong offset!");

}

