#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarGameInstance

#include "Basic.hpp"

#include "LLHSDK_structs.hpp"
#include "SolarFramework_structs.hpp"
#include "Solarland_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SolarGameInstance.SolarGameInstance_C.ExecuteUbergraph_SolarGameInstance
// 0x0004 (0x0004 - 0x0000)
struct SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance) == 0x000004, "Wrong alignment on SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance");
static_assert(sizeof(SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance) == 0x000004, "Wrong size on SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance");
static_assert(offsetof(SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance, EntryPoint) == 0x000000, "Member 'SolarGameInstance_C_ExecuteUbergraph_SolarGameInstance::EntryPoint' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.LuaGetBroadcastHeroName
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_LuaGetBroadcastHeroName final
{
public:
	class FString                                 SolarPlayerId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BroadcastPlayerName;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarGameInstance_C_LuaGetBroadcastHeroName) == 0x000008, "Wrong alignment on SolarGameInstance_C_LuaGetBroadcastHeroName");
static_assert(sizeof(SolarGameInstance_C_LuaGetBroadcastHeroName) == 0x000020, "Wrong size on SolarGameInstance_C_LuaGetBroadcastHeroName");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastHeroName, SolarPlayerId) == 0x000000, "Member 'SolarGameInstance_C_LuaGetBroadcastHeroName::SolarPlayerId' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastHeroName, BroadcastPlayerName) == 0x000010, "Member 'SolarGameInstance_C_LuaGetBroadcastHeroName::BroadcastPlayerName' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.LuaGetBroadcastPlayerName
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_LuaGetBroadcastPlayerName final
{
public:
	class FString                                 SolarPlayerId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BroadcastPlayerName;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarGameInstance_C_LuaGetBroadcastPlayerName) == 0x000008, "Wrong alignment on SolarGameInstance_C_LuaGetBroadcastPlayerName");
static_assert(sizeof(SolarGameInstance_C_LuaGetBroadcastPlayerName) == 0x000020, "Wrong size on SolarGameInstance_C_LuaGetBroadcastPlayerName");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastPlayerName, SolarPlayerId) == 0x000000, "Member 'SolarGameInstance_C_LuaGetBroadcastPlayerName::SolarPlayerId' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastPlayerName, BroadcastPlayerName) == 0x000010, "Member 'SolarGameInstance_C_LuaGetBroadcastPlayerName::BroadcastPlayerName' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_AddCharacterSkinLua
// 0x0004 (0x0004 - 0x0000)
struct SolarGameInstance_C_SolarGM_AddCharacterSkinLua final
{
public:
	int32                                         SkinID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_AddCharacterSkinLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_AddCharacterSkinLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_AddCharacterSkinLua) == 0x000004, "Wrong size on SolarGameInstance_C_SolarGM_AddCharacterSkinLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddCharacterSkinLua, SkinID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_AddCharacterSkinLua::SkinID' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.ReportLoadingInfoToBI
// 0x0018 (0x0018 - 0x0000)
struct SolarGameInstance_C_ReportLoadingInfoToBI final
{
public:
	TArray<class FString>                         LoadingInfo;                                       // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinished;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_ReportLoadingInfoToBI) == 0x000008, "Wrong alignment on SolarGameInstance_C_ReportLoadingInfoToBI");
static_assert(sizeof(SolarGameInstance_C_ReportLoadingInfoToBI) == 0x000018, "Wrong size on SolarGameInstance_C_ReportLoadingInfoToBI");
static_assert(offsetof(SolarGameInstance_C_ReportLoadingInfoToBI, LoadingInfo) == 0x000000, "Member 'SolarGameInstance_C_ReportLoadingInfoToBI::LoadingInfo' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_ReportLoadingInfoToBI, LoadingTime) == 0x000010, "Member 'SolarGameInstance_C_ReportLoadingInfoToBI::LoadingTime' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_ReportLoadingInfoToBI, bIsFinished) == 0x000014, "Member 'SolarGameInstance_C_ReportLoadingInfoToBI::bIsFinished' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.GetLobbyPreloadAssetsFromLua
// 0x0018 (0x0018 - 0x0000)
struct SolarGameInstance_C_GetLobbyPreloadAssetsFromLua final
{
public:
	ESolarStageAssetPlatformFlags                 InPlatformFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_GetLobbyPreloadAssetsFromLua) == 0x000008, "Wrong alignment on SolarGameInstance_C_GetLobbyPreloadAssetsFromLua");
static_assert(sizeof(SolarGameInstance_C_GetLobbyPreloadAssetsFromLua) == 0x000018, "Wrong size on SolarGameInstance_C_GetLobbyPreloadAssetsFromLua");
static_assert(offsetof(SolarGameInstance_C_GetLobbyPreloadAssetsFromLua, InPlatformFlag) == 0x000000, "Member 'SolarGameInstance_C_GetLobbyPreloadAssetsFromLua::InPlatformFlag' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_GetLobbyPreloadAssetsFromLua, ReturnValue) == 0x000008, "Member 'SolarGameInstance_C_GetLobbyPreloadAssetsFromLua::ReturnValue' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.AsyncDownLoadConfigFile
// 0x0018 (0x0018 - 0x0000)
struct SolarGameInstance_C_AsyncDownLoadConfigFile final
{
public:
	int64                                         TaskID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_AsyncDownLoadConfigFile) == 0x000008, "Wrong alignment on SolarGameInstance_C_AsyncDownLoadConfigFile");
static_assert(sizeof(SolarGameInstance_C_AsyncDownLoadConfigFile) == 0x000018, "Wrong size on SolarGameInstance_C_AsyncDownLoadConfigFile");
static_assert(offsetof(SolarGameInstance_C_AsyncDownLoadConfigFile, TaskID) == 0x000000, "Member 'SolarGameInstance_C_AsyncDownLoadConfigFile::TaskID' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_AsyncDownLoadConfigFile, URL) == 0x000008, "Member 'SolarGameInstance_C_AsyncDownLoadConfigFile::URL' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_LobbyLua
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_SolarGM_LobbyLua final
{
public:
	class FString                                 CmdName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Params_0;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_LobbyLua) == 0x000008, "Wrong alignment on SolarGameInstance_C_SolarGM_LobbyLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_LobbyLua) == 0x000020, "Wrong size on SolarGameInstance_C_SolarGM_LobbyLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_LobbyLua, CmdName) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_LobbyLua::CmdName' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_LobbyLua, Params_0) == 0x000010, "Member 'SolarGameInstance_C_SolarGM_LobbyLua::Params_0' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.ExecuteChangeAudioModeLuaCall
// 0x0001 (0x0001 - 0x0000)
struct SolarGameInstance_C_ExecuteChangeAudioModeLuaCall final
{
public:
	bool                                          bTurnOn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_ExecuteChangeAudioModeLuaCall) == 0x000001, "Wrong alignment on SolarGameInstance_C_ExecuteChangeAudioModeLuaCall");
static_assert(sizeof(SolarGameInstance_C_ExecuteChangeAudioModeLuaCall) == 0x000001, "Wrong size on SolarGameInstance_C_ExecuteChangeAudioModeLuaCall");
static_assert(offsetof(SolarGameInstance_C_ExecuteChangeAudioModeLuaCall, bTurnOn) == 0x000000, "Member 'SolarGameInstance_C_ExecuteChangeAudioModeLuaCall::bTurnOn' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.CheckSavedDirFiles
// 0x0010 (0x0010 - 0x0000)
struct SolarGameInstance_C_CheckSavedDirFiles final
{
public:
	TArray<class FString>                         Files;                                             // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_CheckSavedDirFiles) == 0x000008, "Wrong alignment on SolarGameInstance_C_CheckSavedDirFiles");
static_assert(sizeof(SolarGameInstance_C_CheckSavedDirFiles) == 0x000010, "Wrong size on SolarGameInstance_C_CheckSavedDirFiles");
static_assert(offsetof(SolarGameInstance_C_CheckSavedDirFiles, Files) == 0x000000, "Member 'SolarGameInstance_C_CheckSavedDirFiles::Files' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.LuaGetBroadcastHeroNameCopy
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_LuaGetBroadcastHeroNameCopy final
{
public:
	class FString                                 SolarPlayerId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BroadcastPlayerName;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarGameInstance_C_LuaGetBroadcastHeroNameCopy) == 0x000008, "Wrong alignment on SolarGameInstance_C_LuaGetBroadcastHeroNameCopy");
static_assert(sizeof(SolarGameInstance_C_LuaGetBroadcastHeroNameCopy) == 0x000020, "Wrong size on SolarGameInstance_C_LuaGetBroadcastHeroNameCopy");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastHeroNameCopy, SolarPlayerId) == 0x000000, "Member 'SolarGameInstance_C_LuaGetBroadcastHeroNameCopy::SolarPlayerId' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastHeroNameCopy, BroadcastPlayerName) == 0x000010, "Member 'SolarGameInstance_C_LuaGetBroadcastHeroNameCopy::BroadcastPlayerName' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_DelWeaponSkinLua
// 0x0004 (0x0004 - 0x0000)
struct SolarGameInstance_C_SolarGM_DelWeaponSkinLua final
{
public:
	int32                                         SkinID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_DelWeaponSkinLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_DelWeaponSkinLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_DelWeaponSkinLua) == 0x000004, "Wrong size on SolarGameInstance_C_SolarGM_DelWeaponSkinLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_DelWeaponSkinLua, SkinID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_DelWeaponSkinLua::SkinID' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_DelCharacterSkinLua
// 0x0004 (0x0004 - 0x0000)
struct SolarGameInstance_C_SolarGM_DelCharacterSkinLua final
{
public:
	int32                                         SkinID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_DelCharacterSkinLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_DelCharacterSkinLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_DelCharacterSkinLua) == 0x000004, "Wrong size on SolarGameInstance_C_SolarGM_DelCharacterSkinLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_DelCharacterSkinLua, SkinID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_DelCharacterSkinLua::SkinID' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.LuaGetBroadcastPlayerNameCopy
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy final
{
public:
	class FString                                 SolarPlayerId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BroadcastPlayerName;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy) == 0x000008, "Wrong alignment on SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy");
static_assert(sizeof(SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy) == 0x000020, "Wrong size on SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy, SolarPlayerId) == 0x000000, "Member 'SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy::SolarPlayerId' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy, BroadcastPlayerName) == 0x000010, "Member 'SolarGameInstance_C_LuaGetBroadcastPlayerNameCopy::BroadcastPlayerName' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_QuickMatchLua
// 0x0008 (0x0008 - 0x0000)
struct SolarGameInstance_C_SolarGM_QuickMatchLua final
{
public:
	int32                                         MapID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RuleId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_QuickMatchLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_QuickMatchLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_QuickMatchLua) == 0x000008, "Wrong size on SolarGameInstance_C_SolarGM_QuickMatchLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_QuickMatchLua, MapID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_QuickMatchLua::MapID' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_QuickMatchLua, RuleId) == 0x000004, "Member 'SolarGameInstance_C_SolarGM_QuickMatchLua::RuleId' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_AddWeaponExpLua
// 0x0008 (0x0008 - 0x0000)
struct SolarGameInstance_C_SolarGM_AddWeaponExpLua final
{
public:
	int32                                         weaponid;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_AddWeaponExpLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_AddWeaponExpLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_AddWeaponExpLua) == 0x000008, "Wrong size on SolarGameInstance_C_SolarGM_AddWeaponExpLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddWeaponExpLua, weaponid) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_AddWeaponExpLua::weaponid' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddWeaponExpLua, Count) == 0x000004, "Member 'SolarGameInstance_C_SolarGM_AddWeaponExpLua::Count' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.HandleNetworkError
// 0x0002 (0x0002 - 0x0000)
struct SolarGameInstance_C_HandleNetworkError final
{
public:
	ENetworkFailure                               FailureType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsServer;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_HandleNetworkError) == 0x000001, "Wrong alignment on SolarGameInstance_C_HandleNetworkError");
static_assert(sizeof(SolarGameInstance_C_HandleNetworkError) == 0x000002, "Wrong size on SolarGameInstance_C_HandleNetworkError");
static_assert(offsetof(SolarGameInstance_C_HandleNetworkError, FailureType) == 0x000000, "Member 'SolarGameInstance_C_HandleNetworkError::FailureType' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_HandleNetworkError, bIsServer) == 0x000001, "Member 'SolarGameInstance_C_HandleNetworkError::bIsServer' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.GetGlobalPreloadAssetsFromLua
// 0x0010 (0x0010 - 0x0000)
struct SolarGameInstance_C_GetGlobalPreloadAssetsFromLua final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_GetGlobalPreloadAssetsFromLua) == 0x000008, "Wrong alignment on SolarGameInstance_C_GetGlobalPreloadAssetsFromLua");
static_assert(sizeof(SolarGameInstance_C_GetGlobalPreloadAssetsFromLua) == 0x000010, "Wrong size on SolarGameInstance_C_GetGlobalPreloadAssetsFromLua");
static_assert(offsetof(SolarGameInstance_C_GetGlobalPreloadAssetsFromLua, ReturnValue) == 0x000000, "Member 'SolarGameInstance_C_GetGlobalPreloadAssetsFromLua::ReturnValue' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_AddItemLua
// 0x0008 (0x0008 - 0x0000)
struct SolarGameInstance_C_SolarGM_AddItemLua final
{
public:
	int32                                         ItemID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_AddItemLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_AddItemLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_AddItemLua) == 0x000008, "Wrong size on SolarGameInstance_C_SolarGM_AddItemLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddItemLua, ItemID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_AddItemLua::ItemID' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddItemLua, Count) == 0x000004, "Member 'SolarGameInstance_C_SolarGM_AddItemLua::Count' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.IsTrainingMode
// 0x0001 (0x0001 - 0x0000)
struct SolarGameInstance_C_IsTrainingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_IsTrainingMode) == 0x000001, "Wrong alignment on SolarGameInstance_C_IsTrainingMode");
static_assert(sizeof(SolarGameInstance_C_IsTrainingMode) == 0x000001, "Wrong size on SolarGameInstance_C_IsTrainingMode");
static_assert(offsetof(SolarGameInstance_C_IsTrainingMode, ReturnValue) == 0x000000, "Member 'SolarGameInstance_C_IsTrainingMode::ReturnValue' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.ReceiveClientWasKicked
// 0x0010 (0x0010 - 0x0000)
struct SolarGameInstance_C_ReceiveClientWasKicked final
{
public:
	class FString                                 KickReason;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_ReceiveClientWasKicked) == 0x000008, "Wrong alignment on SolarGameInstance_C_ReceiveClientWasKicked");
static_assert(sizeof(SolarGameInstance_C_ReceiveClientWasKicked) == 0x000010, "Wrong size on SolarGameInstance_C_ReceiveClientWasKicked");
static_assert(offsetof(SolarGameInstance_C_ReceiveClientWasKicked, KickReason) == 0x000000, "Member 'SolarGameInstance_C_ReceiveClientWasKicked::KickReason' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_TransmitGMLua
// 0x0020 (0x0020 - 0x0000)
struct SolarGameInstance_C_SolarGM_TransmitGMLua final
{
public:
	class FString                                 playerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GmArray;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_TransmitGMLua) == 0x000008, "Wrong alignment on SolarGameInstance_C_SolarGM_TransmitGMLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_TransmitGMLua) == 0x000020, "Wrong size on SolarGameInstance_C_SolarGM_TransmitGMLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_TransmitGMLua, playerName) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_TransmitGMLua::playerName' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_TransmitGMLua, GmArray) == 0x000010, "Member 'SolarGameInstance_C_SolarGM_TransmitGMLua::GmArray' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SelectHeroAndSkinForPSOGathring
// 0x0008 (0x0008 - 0x0000)
struct SolarGameInstance_C_SelectHeroAndSkinForPSOGathring final
{
public:
	int32                                         CharacterID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SelectHeroAndSkinForPSOGathring) == 0x000004, "Wrong alignment on SolarGameInstance_C_SelectHeroAndSkinForPSOGathring");
static_assert(sizeof(SolarGameInstance_C_SelectHeroAndSkinForPSOGathring) == 0x000008, "Wrong size on SolarGameInstance_C_SelectHeroAndSkinForPSOGathring");
static_assert(offsetof(SolarGameInstance_C_SelectHeroAndSkinForPSOGathring, CharacterID) == 0x000000, "Member 'SolarGameInstance_C_SelectHeroAndSkinForPSOGathring::CharacterID' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SelectHeroAndSkinForPSOGathring, SkinID) == 0x000004, "Member 'SolarGameInstance_C_SelectHeroAndSkinForPSOGathring::SkinID' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_AddWeaponSkinLua
// 0x0004 (0x0004 - 0x0000)
struct SolarGameInstance_C_SolarGM_AddWeaponSkinLua final
{
public:
	int32                                         SkinID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_AddWeaponSkinLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_AddWeaponSkinLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_AddWeaponSkinLua) == 0x000004, "Wrong size on SolarGameInstance_C_SolarGM_AddWeaponSkinLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_AddWeaponSkinLua, SkinID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_AddWeaponSkinLua::SkinID' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.OnScopeChanged
// 0x0002 (0x0002 - 0x0000)
struct SolarGameInstance_C_OnScopeChanged final
{
public:
	EScope                                        InLastScope;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScope                                        InCurScope;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_OnScopeChanged) == 0x000001, "Wrong alignment on SolarGameInstance_C_OnScopeChanged");
static_assert(sizeof(SolarGameInstance_C_OnScopeChanged) == 0x000002, "Wrong size on SolarGameInstance_C_OnScopeChanged");
static_assert(offsetof(SolarGameInstance_C_OnScopeChanged, InLastScope) == 0x000000, "Member 'SolarGameInstance_C_OnScopeChanged::InLastScope' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_OnScopeChanged, InCurScope) == 0x000001, "Member 'SolarGameInstance_C_OnScopeChanged::InCurScope' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.SolarGM_SetRankScoreLua
// 0x0008 (0x0008 - 0x0000)
struct SolarGameInstance_C_SolarGM_SetRankScoreLua final
{
public:
	int32                                         ModeGroupID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_SolarGM_SetRankScoreLua) == 0x000004, "Wrong alignment on SolarGameInstance_C_SolarGM_SetRankScoreLua");
static_assert(sizeof(SolarGameInstance_C_SolarGM_SetRankScoreLua) == 0x000008, "Wrong size on SolarGameInstance_C_SolarGM_SetRankScoreLua");
static_assert(offsetof(SolarGameInstance_C_SolarGM_SetRankScoreLua, ModeGroupID) == 0x000000, "Member 'SolarGameInstance_C_SolarGM_SetRankScoreLua::ModeGroupID' has a wrong offset!");
static_assert(offsetof(SolarGameInstance_C_SolarGM_SetRankScoreLua, Score) == 0x000004, "Member 'SolarGameInstance_C_SolarGM_SetRankScoreLua::Score' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.OnStageFlagChanged
// 0x0001 (0x0001 - 0x0000)
struct SolarGameInstance_C_OnStageFlagChanged final
{
public:
	ESolarStageFlags                              InCurStageFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_OnStageFlagChanged) == 0x000001, "Wrong alignment on SolarGameInstance_C_OnStageFlagChanged");
static_assert(sizeof(SolarGameInstance_C_OnStageFlagChanged) == 0x000001, "Wrong size on SolarGameInstance_C_OnStageFlagChanged");
static_assert(offsetof(SolarGameInstance_C_OnStageFlagChanged, InCurStageFlag) == 0x000000, "Member 'SolarGameInstance_C_OnStageFlagChanged::InCurStageFlag' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.OnStageFlagLoadAssetsFinished
// 0x0001 (0x0001 - 0x0000)
struct SolarGameInstance_C_OnStageFlagLoadAssetsFinished final
{
public:
	ESolarStageFlags                              InCurStageFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_OnStageFlagLoadAssetsFinished) == 0x000001, "Wrong alignment on SolarGameInstance_C_OnStageFlagLoadAssetsFinished");
static_assert(sizeof(SolarGameInstance_C_OnStageFlagLoadAssetsFinished) == 0x000001, "Wrong size on SolarGameInstance_C_OnStageFlagLoadAssetsFinished");
static_assert(offsetof(SolarGameInstance_C_OnStageFlagLoadAssetsFinished, InCurStageFlag) == 0x000000, "Member 'SolarGameInstance_C_OnStageFlagLoadAssetsFinished::InCurStageFlag' has a wrong offset!");

// Function SolarGameInstance.SolarGameInstance_C.OnStageFlagLoadAssetsStarted
// 0x0001 (0x0001 - 0x0000)
struct SolarGameInstance_C_OnStageFlagLoadAssetsStarted final
{
public:
	ESolarStageFlags                              InCurStageFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarGameInstance_C_OnStageFlagLoadAssetsStarted) == 0x000001, "Wrong alignment on SolarGameInstance_C_OnStageFlagLoadAssetsStarted");
static_assert(sizeof(SolarGameInstance_C_OnStageFlagLoadAssetsStarted) == 0x000001, "Wrong size on SolarGameInstance_C_OnStageFlagLoadAssetsStarted");
static_assert(offsetof(SolarGameInstance_C_OnStageFlagLoadAssetsStarted, InCurStageFlag) == 0x000000, "Member 'SolarGameInstance_C_OnStageFlagLoadAssetsStarted::InCurStageFlag' has a wrong offset!");

}

