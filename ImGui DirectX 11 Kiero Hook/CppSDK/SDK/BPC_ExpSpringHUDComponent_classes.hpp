#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_ExpSpringHUDComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_ExpSpring_Notice_Data_structs.hpp"
#include "S_ExpSpring_Notice_Index_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C
// 0x0098 (0x0298 - 0x0200)
class UBPC_ExpSpringHUDComponent_C final : public USolarExpSpringHUDComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0200(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUI_EXPSpring_HUDNotice_C*              HUDNotice;                                         // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreOpenMessageID;                                  // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_ExpSpring_Notice_Data>       OpenMessageIDList;                                 // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                WorldMarkOffset;                                   // 0x0228(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, struct FS_ExpSpring_Notice_Index> MessageIndexMap;                                   // 0x0238(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ASolarExpSpringPointActor*              CurEnteredPoint;                                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EnterPointTimerHandle;                             // 0x0290(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnRewardDataUpdated(class ASolarExpSpringPointActor* Point);
	void OnCurRewardIndexSwitched(class ASolarExpSpringPointActor* Point);
	void SetHUDNoticeVisibility();
	void ShowHUDNotice();
	void ExecuteUbergraph_BPC_ExpSpringHUDComponent(int32 EntryPoint);
	bool ShouldShowHUDNotice(class ASolarExpSpringPointActor* Actor, class ASolarPlayerState* PlayerState);
	bool ShouldActorShowHUDNotice(class ASolarExpSpringPointActor* Target);
	void SetWorldMarkPointHasEnemy(class UWorldMark_Secondary_C* WorldMark, bool HasEnemy);
	void SetWorldMarkPointState(class UActorMarkBase* WorldMark, class ASolarExpSpringPointActor* Point, bool HasEnemy);
	class UActorMarkBase* CreateWorldMark();
	void NativeOnPointOpenClose(class ASolarExpSpringPointActor* Point, bool IsOpen);
	void PushPointOpenMessage(uint8 OpenID);
	void MoveNextMessage(uint8 OpenID);
	void SetPointMarkInfo(const struct FExpSpringPointMarkInfo& Info, const bool SetVisible);
	void SetPointMarkInvisible(const struct FExpSpringPointMarkInfo& Info);
	void InitWorldMark(class ASolarExpSpringPointActor* Point, class UActorMarkBase* WorldMark);
	void ReceiveTick(float DeltaSeconds);
	void OnPlayerEnterPoint(class ASolarExpSpringPointActor* EnteredPoint);
	void ShowOpenMessage(uint8 OpenID);
	void NativeOnPointStateUpdated(const struct FExpSpringPointMarkInfo& PointData, EExpSpringPointState PointState, EExpSpringPointState LastPointState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_ExpSpringHUDComponent_C">();
	}
	static class UBPC_ExpSpringHUDComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_ExpSpringHUDComponent_C>();
	}
};
static_assert(alignof(UBPC_ExpSpringHUDComponent_C) == 0x000008, "Wrong alignment on UBPC_ExpSpringHUDComponent_C");
static_assert(sizeof(UBPC_ExpSpringHUDComponent_C) == 0x000298, "Wrong size on UBPC_ExpSpringHUDComponent_C");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, UberGraphFrame) == 0x000200, "Member 'UBPC_ExpSpringHUDComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, HUDNotice) == 0x000208, "Member 'UBPC_ExpSpringHUDComponent_C::HUDNotice' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, PreOpenMessageID) == 0x000210, "Member 'UBPC_ExpSpringHUDComponent_C::PreOpenMessageID' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, OpenMessageIDList) == 0x000218, "Member 'UBPC_ExpSpringHUDComponent_C::OpenMessageIDList' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, WorldMarkOffset) == 0x000228, "Member 'UBPC_ExpSpringHUDComponent_C::WorldMarkOffset' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, MessageIndexMap) == 0x000238, "Member 'UBPC_ExpSpringHUDComponent_C::MessageIndexMap' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, CurEnteredPoint) == 0x000288, "Member 'UBPC_ExpSpringHUDComponent_C::CurEnteredPoint' has a wrong offset!");
static_assert(offsetof(UBPC_ExpSpringHUDComponent_C, EnterPointTimerHandle) == 0x000290, "Member 'UBPC_ExpSpringHUDComponent_C::EnterPointTimerHandle' has a wrong offset!");

}

