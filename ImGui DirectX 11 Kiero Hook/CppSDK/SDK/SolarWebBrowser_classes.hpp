#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarWebBrowser

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class SolarWebBrowser.WebBrowser
// 0x0090 (0x01D0 - 0x0140)
class UWebBrowser final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const class FText& Text)> OnUrlChanged;                            // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& URL, const class FString& Frame)> OnBeforePopup; // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& URL)> OnBeforeNavigation;                     // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCloseWindow;                                     // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FString>                         URLKeywordWithoutNavigation;                       // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InitialURL;                                        // 0x0190(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsTransparency;                             // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameRate;                                         // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableMouseTransparency;                          // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseTransparencyThreshold;                        // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MouseTransparencyDelay;                            // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableVirtualPointerTransparency;                 // 0x01B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VirtualPointerTransparencyThreshold;               // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomCursors;                                    // 0x01BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BD[0x13];                                     // 0x01BD(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Bind(const class FString& Name_0, class UObject* Object);
	void CallJavascriptFunction(const class FString& Function, const class FString& Data);
	void CloseSelf();
	void DisableIME();
	void EnableIME();
	void ExecuteJavascript(const class FString& ScriptText);
	void Focus(EMouseLockMode MouseLockMode);
	void LoadString(const class FString& Contents, const class FString& DummyURL);
	void LoadURL(const class FString& NewURL);
	struct FColor ReadTexturePixel(int32 X, int32 Y);
	TArray<struct FColor> ReadTexturePixels(int32 X, int32 Y, int32 Width, int32 Height);
	void Reload();
	void ResetMousePosition();
	void SetURLWithoutNavigation(const TArray<class FString>& URLs);
	void StopLoad();
	void Unbind(const class FString& Name_0, class UObject* Object);
	void Unfocus(EMouseCaptureMode MouseCaptureMode);

	int32 GetTextureHeight() const;
	int32 GetTextureWidth() const;
	class FText GetTitleText() const;
	class FString GetUrl() const;
	bool IsMouseTransparencyEnabled() const;
	bool IsVirtualPointerTransparencyEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebBrowser">();
	}
	static class UWebBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebBrowser>();
	}
};
static_assert(alignof(UWebBrowser) == 0x000008, "Wrong alignment on UWebBrowser");
static_assert(sizeof(UWebBrowser) == 0x0001D0, "Wrong size on UWebBrowser");
static_assert(offsetof(UWebBrowser, OnUrlChanged) == 0x000140, "Member 'UWebBrowser::OnUrlChanged' has a wrong offset!");
static_assert(offsetof(UWebBrowser, OnBeforePopup) == 0x000150, "Member 'UWebBrowser::OnBeforePopup' has a wrong offset!");
static_assert(offsetof(UWebBrowser, OnBeforeNavigation) == 0x000160, "Member 'UWebBrowser::OnBeforeNavigation' has a wrong offset!");
static_assert(offsetof(UWebBrowser, OnCloseWindow) == 0x000170, "Member 'UWebBrowser::OnCloseWindow' has a wrong offset!");
static_assert(offsetof(UWebBrowser, URLKeywordWithoutNavigation) == 0x000180, "Member 'UWebBrowser::URLKeywordWithoutNavigation' has a wrong offset!");
static_assert(offsetof(UWebBrowser, InitialURL) == 0x000190, "Member 'UWebBrowser::InitialURL' has a wrong offset!");
static_assert(offsetof(UWebBrowser, bSupportsTransparency) == 0x0001A0, "Member 'UWebBrowser::bSupportsTransparency' has a wrong offset!");
static_assert(offsetof(UWebBrowser, FrameRate) == 0x0001A4, "Member 'UWebBrowser::FrameRate' has a wrong offset!");
static_assert(offsetof(UWebBrowser, bEnableMouseTransparency) == 0x0001A8, "Member 'UWebBrowser::bEnableMouseTransparency' has a wrong offset!");
static_assert(offsetof(UWebBrowser, MouseTransparencyThreshold) == 0x0001AC, "Member 'UWebBrowser::MouseTransparencyThreshold' has a wrong offset!");
static_assert(offsetof(UWebBrowser, MouseTransparencyDelay) == 0x0001B0, "Member 'UWebBrowser::MouseTransparencyDelay' has a wrong offset!");
static_assert(offsetof(UWebBrowser, bEnableVirtualPointerTransparency) == 0x0001B4, "Member 'UWebBrowser::bEnableVirtualPointerTransparency' has a wrong offset!");
static_assert(offsetof(UWebBrowser, VirtualPointerTransparencyThreshold) == 0x0001B8, "Member 'UWebBrowser::VirtualPointerTransparencyThreshold' has a wrong offset!");
static_assert(offsetof(UWebBrowser, bCustomCursors) == 0x0001BC, "Member 'UWebBrowser::bCustomCursors' has a wrong offset!");

}

