#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_Death_BattleRoyale

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.ExecuteUbergraph_BPC_Death_BattleRoyale
// 0x02A8 (0x02A8 - 0x0000)
struct BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_Killer;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_Killed;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                K2Node_Event_Assists;                              // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FSolarPointDamageEvent                 K2Node_Event_InDamageEvent_1;                      // 0x0028(0x0128)(ConstParm, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_InDamageCauser_1;                     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_InAttacker;                           // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_InDeathVergePlayer;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSolarPointDamageEvent                 K2Node_Event_InDamageEvent;                        // 0x0168(0x0128)(ConstParm, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_InDamageCauser;                       // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_Event_ResurrectCharacter;                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_ResurrectPlayer;                      // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale");
static_assert(sizeof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale) == 0x0002A8, "Wrong size on BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, EntryPoint) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_Killer) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_Killer' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_Killed) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_Killed' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_Assists) == 0x000018, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_Assists' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InDamageEvent_1) == 0x000028, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InDamageEvent_1' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InDamageCauser_1) == 0x000150, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InDamageCauser_1' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InAttacker) == 0x000158, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InAttacker' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InDeathVergePlayer) == 0x000160, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InDeathVergePlayer' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InDamageEvent) == 0x000168, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InDamageEvent' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_InDamageCauser) == 0x000290, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_InDamageCauser' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_ResurrectCharacter) == 0x000298, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_ResurrectCharacter' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale, K2Node_Event_ResurrectPlayer) == 0x0002A0, "Member 'BPC_Death_BattleRoyale_C_ExecuteUbergraph_BPC_Death_BattleRoyale::K2Node_Event_ResurrectPlayer' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.ReceivePlayerKill
// 0x0150 (0x0150 - 0x0000)
struct BPC_Death_BattleRoyale_C_ReceivePlayerKill final
{
public:
	class ASCMPlayerState*                        Killer_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        Killed_0;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                Assists;                                           // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FSolarPointDamageEvent                 InDamageEvent;                                     // 0x0020(0x0128)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class AActor*                                 InDamageCauser;                                    // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_ReceivePlayerKill) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_ReceivePlayerKill");
static_assert(sizeof(BPC_Death_BattleRoyale_C_ReceivePlayerKill) == 0x000150, "Wrong size on BPC_Death_BattleRoyale_C_ReceivePlayerKill");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerKill, Killer_0) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerKill::Killer_0' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerKill, Killed_0) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerKill::Killed_0' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerKill, Assists) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerKill::Assists' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerKill, InDamageEvent) == 0x000020, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerKill::InDamageEvent' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerKill, InDamageCauser) == 0x000148, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerKill::InDamageCauser' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.ReceivePlayerDeathVerge
// 0x0140 (0x0140 - 0x0000)
struct BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge final
{
public:
	class ASCMPlayerState*                        InAttacker;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        InDeathVergePlayer;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSolarPointDamageEvent                 InDamageEvent;                                     // 0x0010(0x0128)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class AActor*                                 InDamageCauser;                                    // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge");
static_assert(sizeof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge) == 0x000140, "Wrong size on BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge, InAttacker) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge::InAttacker' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge, InDeathVergePlayer) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge::InDeathVergePlayer' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge, InDamageEvent) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge::InDamageEvent' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge, InDamageCauser) == 0x000138, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerDeathVerge::InDamageCauser' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.ReceivePlayerResurrect
// 0x0010 (0x0010 - 0x0000)
struct BPC_Death_BattleRoyale_C_ReceivePlayerResurrect final
{
public:
	class ASolarCharacter*                        ResurrectCharacter;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        ResurrectPlayer;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_ReceivePlayerResurrect) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_ReceivePlayerResurrect");
static_assert(sizeof(BPC_Death_BattleRoyale_C_ReceivePlayerResurrect) == 0x000010, "Wrong size on BPC_Death_BattleRoyale_C_ReceivePlayerResurrect");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerResurrect, ResurrectCharacter) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerResurrect::ResurrectCharacter' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_ReceivePlayerResurrect, ResurrectPlayer) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_ReceivePlayerResurrect::ResurrectPlayer' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.Out Put Kill Log
// 0x00F0 (0x00F0 - 0x0000)
struct BPC_Death_BattleRoyale_C_Out_Put_Kill_Log final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KilledSide;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 KilledType;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 KilledID;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 KillerID;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasBeenEliminated_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0070(0x0050)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_Out_Put_Kill_Log");
static_assert(sizeof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log) == 0x0000F0, "Wrong size on BPC_Death_BattleRoyale_C_Out_Put_Kill_Log");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, InBool) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::InBool' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, KilledSide) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::KilledSide' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, KilledType) == 0x000018, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::KilledType' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, KilledID) == 0x000028, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::KilledID' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, KillerID) == 0x000038, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::KillerID' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_Conv_BoolToString_ReturnValue) == 0x000048, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_HasBeenEliminated_ReturnValue) == 0x000058, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_HasBeenEliminated_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000060, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, K2Node_MakeMap_Map) == 0x000070, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_GetTeamName_ReturnValue) == 0x0000C8, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_Conv_ByteToString_ReturnValue) == 0x0000D8, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_Out_Put_Kill_Log, CallFunc_IsValid_ReturnValue_1) == 0x0000E8, "Member 'BPC_Death_BattleRoyale_C_Out_Put_Kill_Log::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.TryRevivePlayerByCoin
// 0x0020 (0x0020 - 0x0000)
struct BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin final
{
public:
	class ABP_PlayerState_BattleRoyale_C*         Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Succeed;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayerCanRebirth_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ReviveItemManger_BattleRoyale_C*    CallFunc_GetConiReviveManager_Output_Get;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryToRevivePlayerWithItem_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin");
static_assert(sizeof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin) == 0x000020, "Wrong size on BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin");
static_assert(offsetof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin, Player) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin::Player' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin, Succeed) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin::Succeed' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin, CallFunc_PlayerCanRebirth_ReturnValue) == 0x000009, "Member 'BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin::CallFunc_PlayerCanRebirth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin, CallFunc_GetConiReviveManager_Output_Get) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin::CallFunc_GetConiReviveManager_Output_Get' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin, CallFunc_TryToRevivePlayerWithItem_ReturnValue) == 0x000018, "Member 'BPC_Death_BattleRoyale_C_TryRevivePlayerByCoin::CallFunc_TryToRevivePlayerWithItem_ReturnValue' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.CanPlayerBattle
// 0x0038 (0x0038 - 0x0000)
struct BPC_Death_BattleRoyale_C_CanPlayerBattle final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          IsBot;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanRevive;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Alive;                                             // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsAlive_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ReviveItemManger_BattleRoyale_C*    CallFunc_GetConiReviveManager_Output_Get;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayerUseReviveItem_ReturnValue;       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_CanPlayerBattle) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_CanPlayerBattle");
static_assert(sizeof(BPC_Death_BattleRoyale_C_CanPlayerBattle) == 0x000038, "Wrong size on BPC_Death_BattleRoyale_C_CanPlayerBattle");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Player) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Player' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, ReturnValue) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, IsBot) == 0x000009, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::IsBot' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CanRevive) == 0x00000A, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CanRevive' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Alive) == 0x00000B, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Alive' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable) == 0x00000C, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_GetSolarCharacter_ReturnValue) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_K2_IsAlive_ReturnValue) == 0x000019, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_K2_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_1) == 0x00001A, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_2) == 0x00001C, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_3) == 0x00001D, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_4) == 0x00001E, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_5) == 0x00001F, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, Temp_bool_Variable_6) == 0x000020, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, K2Node_Select_Default) == 0x000021, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, K2Node_Select_Default_1) == 0x000022, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_GetConiReviveManager_Output_Get) == 0x000028, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_GetConiReviveManager_Output_Get' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, K2Node_Select_Default_2) == 0x000030, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_CanPlayerBattle, CallFunc_CanPlayerUseReviveItem_ReturnValue) == 0x000031, "Member 'BPC_Death_BattleRoyale_C_CanPlayerBattle::CallFunc_CanPlayerUseReviveItem_ReturnValue' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.GetMainLogic
// 0x0018 (0x0018 - 0x0000)
struct BPC_Death_BattleRoyale_C_GetMainLogic final
{
public:
	class UBP_Logic_BattleRoyale_C*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Logic_BattleRoyale_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_GetMainLogic) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_GetMainLogic");
static_assert(sizeof(BPC_Death_BattleRoyale_C_GetMainLogic) == 0x000018, "Wrong size on BPC_Death_BattleRoyale_C_GetMainLogic");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetMainLogic, ReturnValue) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_GetMainLogic::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetMainLogic, CallFunc_GetGameMode_ReturnValue) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_GetMainLogic::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetMainLogic, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_GetMainLogic::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BPC_Death_BattleRoyale.BPC_Death_BattleRoyale_C.GetConiReviveManager
// 0x0018 (0x0018 - 0x0000)
struct BPC_Death_BattleRoyale_C_GetConiReviveManager final
{
public:
	class ABP_ReviveItemManger_BattleRoyale_C*    Output_Get;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ReviveItemManger_BattleRoyale_C*    CallFunc_GetActorOfClass_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_Death_BattleRoyale_C_GetConiReviveManager) == 0x000008, "Wrong alignment on BPC_Death_BattleRoyale_C_GetConiReviveManager");
static_assert(sizeof(BPC_Death_BattleRoyale_C_GetConiReviveManager) == 0x000018, "Wrong size on BPC_Death_BattleRoyale_C_GetConiReviveManager");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetConiReviveManager, Output_Get) == 0x000000, "Member 'BPC_Death_BattleRoyale_C_GetConiReviveManager::Output_Get' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetConiReviveManager, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BPC_Death_BattleRoyale_C_GetConiReviveManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_Death_BattleRoyale_C_GetConiReviveManager, CallFunc_GetActorOfClass_ReturnValue) == 0x000010, "Member 'BPC_Death_BattleRoyale_C_GetConiReviveManager::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");

}

