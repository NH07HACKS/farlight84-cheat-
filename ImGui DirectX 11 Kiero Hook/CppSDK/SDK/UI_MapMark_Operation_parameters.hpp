#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_MapMark_Operation

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function UI_MapMark_Operation.UI_MapMark_Operation_C.ExecuteUbergraph_UI_MapMark_Operation
// 0x0020 (0x0020 - 0x0000)
struct UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinimapDetailKeyExpressType                  K2Node_Event_IsMarking;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinimapDetailKeyExpressType                  Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation) == 0x000004, "Wrong alignment on UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation");
static_assert(sizeof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation) == 0x000020, "Wrong size on UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, EntryPoint) == 0x000000, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, K2Node_Event_IsMarking) == 0x000004, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::K2Node_Event_IsMarking' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, Temp_byte_Variable) == 0x000005, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, Temp_int_Variable) == 0x000008, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, Temp_int_Variable_1) == 0x00000C, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, Temp_int_Variable_2) == 0x000010, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, Temp_int_Variable_3) == 0x000014, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, K2Node_Event_IsDesignTime) == 0x000018, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation, K2Node_Select_Default) == 0x00001C, "Member 'UI_MapMark_Operation_C_ExecuteUbergraph_UI_MapMark_Operation::K2Node_Select_Default' has a wrong offset!");

// Function UI_MapMark_Operation.UI_MapMark_Operation_C.SetKeyExpress
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMark_Operation_C_SetKeyExpress final
{
public:
	EMinimapDetailKeyExpressType                  IsMarking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_MapMark_Operation_C_SetKeyExpress) == 0x000001, "Wrong alignment on UI_MapMark_Operation_C_SetKeyExpress");
static_assert(sizeof(UI_MapMark_Operation_C_SetKeyExpress) == 0x000001, "Wrong size on UI_MapMark_Operation_C_SetKeyExpress");
static_assert(offsetof(UI_MapMark_Operation_C_SetKeyExpress, IsMarking) == 0x000000, "Member 'UI_MapMark_Operation_C_SetKeyExpress::IsMarking' has a wrong offset!");

// Function UI_MapMark_Operation.UI_MapMark_Operation_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMark_Operation_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMark_Operation_C_PreConstruct) == 0x000001, "Wrong alignment on UI_MapMark_Operation_C_PreConstruct");
static_assert(sizeof(UI_MapMark_Operation_C_PreConstruct) == 0x000001, "Wrong size on UI_MapMark_Operation_C_PreConstruct");
static_assert(offsetof(UI_MapMark_Operation_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_MapMark_Operation_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_MapMark_Operation.UI_MapMark_Operation_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_MapMark_Operation_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_MapMark_Operation_C_GetModuleName) == 0x000008, "Wrong alignment on UI_MapMark_Operation_C_GetModuleName");
static_assert(sizeof(UI_MapMark_Operation_C_GetModuleName) == 0x000010, "Wrong size on UI_MapMark_Operation_C_GetModuleName");
static_assert(offsetof(UI_MapMark_Operation_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_MapMark_Operation_C_GetModuleName::ReturnValue' has a wrong offset!");

}

