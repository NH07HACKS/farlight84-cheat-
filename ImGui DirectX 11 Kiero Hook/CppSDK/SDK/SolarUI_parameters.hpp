#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarUI

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SolarUI_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function SolarUI.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetParameters
// 0x0010 (0x0010 - 0x0000)
struct SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters final
{
public:
	TArray<struct FWidgetOverrideParam>           Params_0;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters) == 0x000008, "Wrong alignment on SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters");
static_assert(sizeof(SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters) == 0x000010, "Wrong size on SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters");
static_assert(offsetof(SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters, Params_0) == 0x000000, "Member 'SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters::Params_0' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetAutoWrapText final
{
public:
	bool                                          bInAutoWrapText;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetAutoWrapText) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetAutoWrapText");
static_assert(sizeof(SolarScrollTextBase_SetAutoWrapText) == 0x000001, "Wrong size on SolarScrollTextBase_SetAutoWrapText");
static_assert(offsetof(SolarScrollTextBase_SetAutoWrapText, bInAutoWrapText) == 0x000000, "Member 'SolarScrollTextBase_SetAutoWrapText::bInAutoWrapText' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetDisplayTime
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetDisplayTime final
{
public:
	float                                         InDisplayTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetDisplayTime) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetDisplayTime");
static_assert(sizeof(SolarScrollTextBase_SetDisplayTime) == 0x000004, "Wrong size on SolarScrollTextBase_SetDisplayTime");
static_assert(offsetof(SolarScrollTextBase_SetDisplayTime, InDisplayTime) == 0x000000, "Member 'SolarScrollTextBase_SetDisplayTime::InDisplayTime' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetInterval
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetInterval final
{
public:
	float                                         InFixedInterval;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetInterval) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetInterval");
static_assert(sizeof(SolarScrollTextBase_SetInterval) == 0x000004, "Wrong size on SolarScrollTextBase_SetInterval");
static_assert(offsetof(SolarScrollTextBase_SetInterval, InFixedInterval) == 0x000000, "Member 'SolarScrollTextBase_SetInterval::InFixedInterval' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetJustification) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetJustification");
static_assert(sizeof(SolarScrollTextBase_SetJustification) == 0x000001, "Wrong size on SolarScrollTextBase_SetJustification");
static_assert(offsetof(SolarScrollTextBase_SetJustification, InJustification) == 0x000000, "Member 'SolarScrollTextBase_SetJustification::InJustification' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetLineHeightPercentage
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetLineHeightPercentage final
{
public:
	float                                         InLineHeightPercentage;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetLineHeightPercentage) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetLineHeightPercentage");
static_assert(sizeof(SolarScrollTextBase_SetLineHeightPercentage) == 0x000004, "Wrong size on SolarScrollTextBase_SetLineHeightPercentage");
static_assert(offsetof(SolarScrollTextBase_SetLineHeightPercentage, InLineHeightPercentage) == 0x000000, "Member 'SolarScrollTextBase_SetLineHeightPercentage::InLineHeightPercentage' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct SolarScrollTextBase_SetMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetMargin) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetMargin");
static_assert(sizeof(SolarScrollTextBase_SetMargin) == 0x000010, "Wrong size on SolarScrollTextBase_SetMargin");
static_assert(offsetof(SolarScrollTextBase_SetMargin, InMargin) == 0x000000, "Member 'SolarScrollTextBase_SetMargin::InMargin' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetMinDesiredWidth) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetMinDesiredWidth");
static_assert(sizeof(SolarScrollTextBase_SetMinDesiredWidth) == 0x000004, "Wrong size on SolarScrollTextBase_SetMinDesiredWidth");
static_assert(offsetof(SolarScrollTextBase_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'SolarScrollTextBase_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetOverrideTextLayoutSize
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetOverrideTextLayoutSize final
{
public:
	bool                                          bInOverrideTextLayoutSize;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetOverrideTextLayoutSize) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetOverrideTextLayoutSize");
static_assert(sizeof(SolarScrollTextBase_SetOverrideTextLayoutSize) == 0x000001, "Wrong size on SolarScrollTextBase_SetOverrideTextLayoutSize");
static_assert(offsetof(SolarScrollTextBase_SetOverrideTextLayoutSize, bInOverrideTextLayoutSize) == 0x000000, "Member 'SolarScrollTextBase_SetOverrideTextLayoutSize::bInOverrideTextLayoutSize' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct SolarScrollTextBase_SetPosition final
{
public:
	float                                         InStartPosition;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndPosition;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetPosition) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetPosition");
static_assert(sizeof(SolarScrollTextBase_SetPosition) == 0x000008, "Wrong size on SolarScrollTextBase_SetPosition");
static_assert(offsetof(SolarScrollTextBase_SetPosition, InStartPosition) == 0x000000, "Member 'SolarScrollTextBase_SetPosition::InStartPosition' has a wrong offset!");
static_assert(offsetof(SolarScrollTextBase_SetPosition, InEndPosition) == 0x000004, "Member 'SolarScrollTextBase_SetPosition::InEndPosition' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetScrollDirection
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetScrollDirection final
{
public:
	ESolarScrollTextDirection                     InScrollDirection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetScrollDirection) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetScrollDirection");
static_assert(sizeof(SolarScrollTextBase_SetScrollDirection) == 0x000001, "Wrong size on SolarScrollTextBase_SetScrollDirection");
static_assert(offsetof(SolarScrollTextBase_SetScrollDirection, InScrollDirection) == 0x000000, "Member 'SolarScrollTextBase_SetScrollDirection::InScrollDirection' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetScrollSpeed
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetScrollSpeed final
{
public:
	float                                         InScrollSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetScrollSpeed) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetScrollSpeed");
static_assert(sizeof(SolarScrollTextBase_SetScrollSpeed) == 0x000004, "Wrong size on SolarScrollTextBase_SetScrollSpeed");
static_assert(offsetof(SolarScrollTextBase_SetScrollSpeed, InScrollSpeed) == 0x000000, "Member 'SolarScrollTextBase_SetScrollSpeed::InScrollSpeed' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetScrollType
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetScrollType final
{
public:
	ESolarScrollTextType                          InScrollType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetScrollType) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetScrollType");
static_assert(sizeof(SolarScrollTextBase_SetScrollType) == 0x000001, "Wrong size on SolarScrollTextBase_SetScrollType");
static_assert(offsetof(SolarScrollTextBase_SetScrollType, InScrollType) == 0x000000, "Member 'SolarScrollTextBase_SetScrollType::InScrollType' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetText
// 0x0018 (0x0018 - 0x0000)
struct SolarScrollTextBase_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetText) == 0x000008, "Wrong alignment on SolarScrollTextBase_SetText");
static_assert(sizeof(SolarScrollTextBase_SetText) == 0x000018, "Wrong size on SolarScrollTextBase_SetText");
static_assert(offsetof(SolarScrollTextBase_SetText, InText) == 0x000000, "Member 'SolarScrollTextBase_SetText::InText' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetTextBlockStyle
// 0x0540 (0x0540 - 0x0000)
struct SolarScrollTextBase_SetTextBlockStyle final
{
public:
	struct FTextBlockStyle                        InTextStyle;                                       // 0x0000(0x0540)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetTextBlockStyle) == 0x000010, "Wrong alignment on SolarScrollTextBase_SetTextBlockStyle");
static_assert(sizeof(SolarScrollTextBase_SetTextBlockStyle) == 0x000540, "Wrong size on SolarScrollTextBase_SetTextBlockStyle");
static_assert(offsetof(SolarScrollTextBase_SetTextBlockStyle, InTextStyle) == 0x000000, "Member 'SolarScrollTextBase_SetTextBlockStyle::InTextStyle' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetTextLayoutSize
// 0x0008 (0x0008 - 0x0000)
struct SolarScrollTextBase_SetTextLayoutSize final
{
public:
	struct FVector2D                              InTextLayoutSize;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetTextLayoutSize) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetTextLayoutSize");
static_assert(sizeof(SolarScrollTextBase_SetTextLayoutSize) == 0x000008, "Wrong size on SolarScrollTextBase_SetTextLayoutSize");
static_assert(offsetof(SolarScrollTextBase_SetTextLayoutSize, InTextLayoutSize) == 0x000000, "Member 'SolarScrollTextBase_SetTextLayoutSize::InTextLayoutSize' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetWaitingType
// 0x0001 (0x0001 - 0x0000)
struct SolarScrollTextBase_SetWaitingType final
{
public:
	ESolarScrollTextWaitingType                   InWaitingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetWaitingType) == 0x000001, "Wrong alignment on SolarScrollTextBase_SetWaitingType");
static_assert(sizeof(SolarScrollTextBase_SetWaitingType) == 0x000001, "Wrong size on SolarScrollTextBase_SetWaitingType");
static_assert(offsetof(SolarScrollTextBase_SetWaitingType, InWaitingType) == 0x000000, "Member 'SolarScrollTextBase_SetWaitingType::InWaitingType' has a wrong offset!");

// Function SolarUI.SolarScrollTextBase.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct SolarScrollTextBase_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarScrollTextBase_SetWrapTextAt) == 0x000004, "Wrong alignment on SolarScrollTextBase_SetWrapTextAt");
static_assert(sizeof(SolarScrollTextBase_SetWrapTextAt) == 0x000004, "Wrong size on SolarScrollTextBase_SetWrapTextAt");
static_assert(offsetof(SolarScrollTextBase_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'SolarScrollTextBase_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.RefreshUIByOverrideParams
// 0x0010 (0x0010 - 0x0000)
struct SolarAdapterWidgetBase_RefreshUIByOverrideParams final
{
public:
	TArray<struct FWidgetOverrideParam>           WidgetOverrideParams;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_RefreshUIByOverrideParams) == 0x000008, "Wrong alignment on SolarAdapterWidgetBase_RefreshUIByOverrideParams");
static_assert(sizeof(SolarAdapterWidgetBase_RefreshUIByOverrideParams) == 0x000010, "Wrong size on SolarAdapterWidgetBase_RefreshUIByOverrideParams");
static_assert(offsetof(SolarAdapterWidgetBase_RefreshUIByOverrideParams, WidgetOverrideParams) == 0x000000, "Member 'SolarAdapterWidgetBase_RefreshUIByOverrideParams::WidgetOverrideParams' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.SetAdapterMargin
// 0x0010 (0x0010 - 0x0000)
struct SolarAdapterWidgetBase_SetAdapterMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_SetAdapterMargin) == 0x000004, "Wrong alignment on SolarAdapterWidgetBase_SetAdapterMargin");
static_assert(sizeof(SolarAdapterWidgetBase_SetAdapterMargin) == 0x000010, "Wrong size on SolarAdapterWidgetBase_SetAdapterMargin");
static_assert(offsetof(SolarAdapterWidgetBase_SetAdapterMargin, InMargin) == 0x000000, "Member 'SolarAdapterWidgetBase_SetAdapterMargin::InMargin' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.SetNeedExecuteWidgetOpened
// 0x0001 (0x0001 - 0x0000)
struct SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened final
{
public:
	bool                                          bInNeedExecuteWidgetOpened;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened) == 0x000001, "Wrong alignment on SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened");
static_assert(sizeof(SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened) == 0x000001, "Wrong size on SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened");
static_assert(offsetof(SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened, bInNeedExecuteWidgetOpened) == 0x000000, "Member 'SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened::bInNeedExecuteWidgetOpened' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.SetUseDesktopWidgetType
// 0x0001 (0x0001 - 0x0000)
struct SolarAdapterWidgetBase_SetUseDesktopWidgetType final
{
public:
	EUseDesktopWidgetType                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_SetUseDesktopWidgetType) == 0x000001, "Wrong alignment on SolarAdapterWidgetBase_SetUseDesktopWidgetType");
static_assert(sizeof(SolarAdapterWidgetBase_SetUseDesktopWidgetType) == 0x000001, "Wrong size on SolarAdapterWidgetBase_SetUseDesktopWidgetType");
static_assert(offsetof(SolarAdapterWidgetBase_SetUseDesktopWidgetType, InType) == 0x000000, "Member 'SolarAdapterWidgetBase_SetUseDesktopWidgetType::InType' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.GetAdapteeWidget
// 0x0008 (0x0008 - 0x0000)
struct SolarAdapterWidgetBase_GetAdapteeWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_GetAdapteeWidget) == 0x000008, "Wrong alignment on SolarAdapterWidgetBase_GetAdapteeWidget");
static_assert(sizeof(SolarAdapterWidgetBase_GetAdapteeWidget) == 0x000008, "Wrong size on SolarAdapterWidgetBase_GetAdapteeWidget");
static_assert(offsetof(SolarAdapterWidgetBase_GetAdapteeWidget, ReturnValue) == 0x000000, "Member 'SolarAdapterWidgetBase_GetAdapteeWidget::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.GetChildAdapterWidgetFromName_BP
// 0x0018 (0x0018 - 0x0000)
struct SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP final
{
public:
	class FString                                 InWidgetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarAdapterWidgetBase*                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP");
static_assert(sizeof(SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP) == 0x000018, "Wrong size on SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP, ReturnValue) == 0x000010, "Member 'SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.GetChildUserWidgetFromName_BP
// 0x0018 (0x0018 - 0x0000)
struct SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP final
{
public:
	class FString                                 InWidgetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarUserWidgetBase*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP");
static_assert(sizeof(SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP) == 0x000018, "Wrong size on SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP, ReturnValue) == 0x000010, "Member 'SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.GetChildWidgetFromName_BP
// 0x0018 (0x0018 - 0x0000)
struct SolarAdapterWidgetBase_GetChildWidgetFromName_BP final
{
public:
	class FString                                 InWidgetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_GetChildWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarAdapterWidgetBase_GetChildWidgetFromName_BP");
static_assert(sizeof(SolarAdapterWidgetBase_GetChildWidgetFromName_BP) == 0x000018, "Wrong size on SolarAdapterWidgetBase_GetChildWidgetFromName_BP");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarAdapterWidgetBase_GetChildWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarAdapterWidgetBase_GetChildWidgetFromName_BP, ReturnValue) == 0x000010, "Member 'SolarAdapterWidgetBase_GetChildWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.GetNeedAdapter
// 0x0014 (0x0014 - 0x0000)
struct SolarAdapterWidgetBase_GetNeedAdapter final
{
public:
	struct FMargin                                OutMargin;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarAdapterWidgetBase_GetNeedAdapter) == 0x000004, "Wrong alignment on SolarAdapterWidgetBase_GetNeedAdapter");
static_assert(sizeof(SolarAdapterWidgetBase_GetNeedAdapter) == 0x000014, "Wrong size on SolarAdapterWidgetBase_GetNeedAdapter");
static_assert(offsetof(SolarAdapterWidgetBase_GetNeedAdapter, OutMargin) == 0x000000, "Member 'SolarAdapterWidgetBase_GetNeedAdapter::OutMargin' has a wrong offset!");
static_assert(offsetof(SolarAdapterWidgetBase_GetNeedAdapter, ReturnValue) == 0x000010, "Member 'SolarAdapterWidgetBase_GetNeedAdapter::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.IsLoadedWidget
// 0x0001 (0x0001 - 0x0000)
struct SolarAdapterWidgetBase_IsLoadedWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_IsLoadedWidget) == 0x000001, "Wrong alignment on SolarAdapterWidgetBase_IsLoadedWidget");
static_assert(sizeof(SolarAdapterWidgetBase_IsLoadedWidget) == 0x000001, "Wrong size on SolarAdapterWidgetBase_IsLoadedWidget");
static_assert(offsetof(SolarAdapterWidgetBase_IsLoadedWidget, ReturnValue) == 0x000000, "Member 'SolarAdapterWidgetBase_IsLoadedWidget::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarAdapterWidgetBase.IsNeedExecuteWidgetOpened
// 0x0001 (0x0001 - 0x0000)
struct SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened) == 0x000001, "Wrong alignment on SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened");
static_assert(sizeof(SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened) == 0x000001, "Wrong size on SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened");
static_assert(offsetof(SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened, ReturnValue) == 0x000000, "Member 'SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.PlayAnimationByExclusively
// 0x0020 (0x0020 - 0x0000)
struct SolarUserWidgetBase_PlayAnimationByExclusively final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreState;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarUserWidgetBase_PlayAnimationByExclusively) == 0x000008, "Wrong alignment on SolarUserWidgetBase_PlayAnimationByExclusively");
static_assert(sizeof(SolarUserWidgetBase_PlayAnimationByExclusively) == 0x000020, "Wrong size on SolarUserWidgetBase_PlayAnimationByExclusively");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, InAnimation) == 0x000000, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::InAnimation' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, StartAtTime) == 0x000008, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::StartAtTime' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, NumLoopsToPlay) == 0x00000C, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, PlayMode) == 0x000010, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::PlayMode' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, PlaybackSpeed) == 0x000014, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByExclusively, bRestoreState) == 0x000018, "Member 'SolarUserWidgetBase_PlayAnimationByExclusively::bRestoreState' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.PlayAnimationByName
// 0x001C (0x001C - 0x0000)
struct SolarUserWidgetBase_PlayAnimationByName final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarUserWidgetBase_PlayAnimationByName) == 0x000004, "Wrong alignment on SolarUserWidgetBase_PlayAnimationByName");
static_assert(sizeof(SolarUserWidgetBase_PlayAnimationByName) == 0x00001C, "Wrong size on SolarUserWidgetBase_PlayAnimationByName");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, AnimationName) == 0x000000, "Member 'SolarUserWidgetBase_PlayAnimationByName::AnimationName' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, StartAtTime) == 0x000008, "Member 'SolarUserWidgetBase_PlayAnimationByName::StartAtTime' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, NumLoopsToPlay) == 0x00000C, "Member 'SolarUserWidgetBase_PlayAnimationByName::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, PlayMode) == 0x000010, "Member 'SolarUserWidgetBase_PlayAnimationByName::PlayMode' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, PlaybackSpeed) == 0x000014, "Member 'SolarUserWidgetBase_PlayAnimationByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_PlayAnimationByName, ReturnValue) == 0x000018, "Member 'SolarUserWidgetBase_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct SolarUserWidgetBase_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_ReceivePlatformLayout) == 0x000001, "Wrong alignment on SolarUserWidgetBase_ReceivePlatformLayout");
static_assert(sizeof(SolarUserWidgetBase_ReceivePlatformLayout) == 0x000001, "Wrong size on SolarUserWidgetBase_ReceivePlatformLayout");
static_assert(offsetof(SolarUserWidgetBase_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'SolarUserWidgetBase_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.GetAnimationByName
// 0x0010 (0x0010 - 0x0000)
struct SolarUserWidgetBase_GetAnimationByName final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_GetAnimationByName) == 0x000008, "Wrong alignment on SolarUserWidgetBase_GetAnimationByName");
static_assert(sizeof(SolarUserWidgetBase_GetAnimationByName) == 0x000010, "Wrong size on SolarUserWidgetBase_GetAnimationByName");
static_assert(offsetof(SolarUserWidgetBase_GetAnimationByName, AnimationName) == 0x000000, "Member 'SolarUserWidgetBase_GetAnimationByName::AnimationName' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_GetAnimationByName, ReturnValue) == 0x000008, "Member 'SolarUserWidgetBase_GetAnimationByName::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.GetChildAdapterWidgetFromName_BP
// 0x0018 (0x0018 - 0x0000)
struct SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP final
{
public:
	class FString                                 InWidgetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarAdapterWidgetBase*                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP");
static_assert(sizeof(SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP) == 0x000018, "Wrong size on SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP");
static_assert(offsetof(SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP, ReturnValue) == 0x000010, "Member 'SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.GetChildUserWidgetFromName_BP
// 0x0018 (0x0018 - 0x0000)
struct SolarUserWidgetBase_GetChildUserWidgetFromName_BP final
{
public:
	class FString                                 InWidgetName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarUserWidgetBase*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_GetChildUserWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarUserWidgetBase_GetChildUserWidgetFromName_BP");
static_assert(sizeof(SolarUserWidgetBase_GetChildUserWidgetFromName_BP) == 0x000018, "Wrong size on SolarUserWidgetBase_GetChildUserWidgetFromName_BP");
static_assert(offsetof(SolarUserWidgetBase_GetChildUserWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarUserWidgetBase_GetChildUserWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_GetChildUserWidgetFromName_BP, ReturnValue) == 0x000010, "Member 'SolarUserWidgetBase_GetChildUserWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.GetChildWidgetFromName_BP
// 0x0010 (0x0010 - 0x0000)
struct SolarUserWidgetBase_GetChildWidgetFromName_BP final
{
public:
	class FName                                   InWidgetName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_GetChildWidgetFromName_BP) == 0x000008, "Wrong alignment on SolarUserWidgetBase_GetChildWidgetFromName_BP");
static_assert(sizeof(SolarUserWidgetBase_GetChildWidgetFromName_BP) == 0x000010, "Wrong size on SolarUserWidgetBase_GetChildWidgetFromName_BP");
static_assert(offsetof(SolarUserWidgetBase_GetChildWidgetFromName_BP, InWidgetName) == 0x000000, "Member 'SolarUserWidgetBase_GetChildWidgetFromName_BP::InWidgetName' has a wrong offset!");
static_assert(offsetof(SolarUserWidgetBase_GetChildWidgetFromName_BP, ReturnValue) == 0x000008, "Member 'SolarUserWidgetBase_GetChildWidgetFromName_BP::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarUserWidgetBase.IsPlatformDesktop
// 0x0001 (0x0001 - 0x0000)
struct SolarUserWidgetBase_IsPlatformDesktop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarUserWidgetBase_IsPlatformDesktop) == 0x000001, "Wrong alignment on SolarUserWidgetBase_IsPlatformDesktop");
static_assert(sizeof(SolarUserWidgetBase_IsPlatformDesktop) == 0x000001, "Wrong size on SolarUserWidgetBase_IsPlatformDesktop");
static_assert(offsetof(SolarUserWidgetBase_IsPlatformDesktop, ReturnValue) == 0x000000, "Member 'SolarUserWidgetBase_IsPlatformDesktop::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarNavigableWidgetBase.AcceptNavigate
// 0x00B8 (0x00B8 - 0x0000)
struct SolarNavigableWidgetBase_AcceptNavigate final
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarNavigableWidgetBase_AcceptNavigate) == 0x000008, "Wrong alignment on SolarNavigableWidgetBase_AcceptNavigate");
static_assert(sizeof(SolarNavigableWidgetBase_AcceptNavigate) == 0x0000B8, "Wrong size on SolarNavigableWidgetBase_AcceptNavigate");
static_assert(offsetof(SolarNavigableWidgetBase_AcceptNavigate, ReturnValue) == 0x000000, "Member 'SolarNavigableWidgetBase_AcceptNavigate::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarSpline.AddSplineCurve
// 0x0018 (0x0018 - 0x0000)
struct SolarSpline_AddSplineCurve final
{
public:
	struct FBezierSplineCurve                     InCurve;                                           // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarSpline_AddSplineCurve) == 0x000008, "Wrong alignment on SolarSpline_AddSplineCurve");
static_assert(sizeof(SolarSpline_AddSplineCurve) == 0x000018, "Wrong size on SolarSpline_AddSplineCurve");
static_assert(offsetof(SolarSpline_AddSplineCurve, InCurve) == 0x000000, "Member 'SolarSpline_AddSplineCurve::InCurve' has a wrong offset!");

// Function SolarUI.SolarSpline.SetDrawClosingMask
// 0x0001 (0x0001 - 0x0000)
struct SolarSpline_SetDrawClosingMask final
{
public:
	bool                                          bShouldDraw;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarSpline_SetDrawClosingMask) == 0x000001, "Wrong alignment on SolarSpline_SetDrawClosingMask");
static_assert(sizeof(SolarSpline_SetDrawClosingMask) == 0x000001, "Wrong size on SolarSpline_SetDrawClosingMask");
static_assert(offsetof(SolarSpline_SetDrawClosingMask, bShouldDraw) == 0x000000, "Member 'SolarSpline_SetDrawClosingMask::bShouldDraw' has a wrong offset!");

// Function SolarUI.SolarWidgetLibrary.BreakSlateBrushAtlasAdapter
// 0x0020 (0x0020 - 0x0000)
struct SolarWidgetLibrary_BreakSlateBrushAtlasAdapter final
{
public:
	struct FSlateBrushAtlasAdapter                InAtlasAdapter;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   OutSpriteName;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutResourceObject;                                 // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWidgetLibrary_BreakSlateBrushAtlasAdapter) == 0x000008, "Wrong alignment on SolarWidgetLibrary_BreakSlateBrushAtlasAdapter");
static_assert(sizeof(SolarWidgetLibrary_BreakSlateBrushAtlasAdapter) == 0x000020, "Wrong size on SolarWidgetLibrary_BreakSlateBrushAtlasAdapter");
static_assert(offsetof(SolarWidgetLibrary_BreakSlateBrushAtlasAdapter, InAtlasAdapter) == 0x000000, "Member 'SolarWidgetLibrary_BreakSlateBrushAtlasAdapter::InAtlasAdapter' has a wrong offset!");
static_assert(offsetof(SolarWidgetLibrary_BreakSlateBrushAtlasAdapter, OutSpriteName) == 0x000010, "Member 'SolarWidgetLibrary_BreakSlateBrushAtlasAdapter::OutSpriteName' has a wrong offset!");
static_assert(offsetof(SolarWidgetLibrary_BreakSlateBrushAtlasAdapter, OutResourceObject) == 0x000018, "Member 'SolarWidgetLibrary_BreakSlateBrushAtlasAdapter::OutResourceObject' has a wrong offset!");

// Function SolarUI.SolarWidgetLibrary.GetCustomLayoutJsonString
// 0x0020 (0x0020 - 0x0000)
struct SolarWidgetLibrary_GetCustomLayoutJsonString final
{
public:
	class FString                                 InWidgetBlueprintJsonPath;                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWidgetLibrary_GetCustomLayoutJsonString) == 0x000008, "Wrong alignment on SolarWidgetLibrary_GetCustomLayoutJsonString");
static_assert(sizeof(SolarWidgetLibrary_GetCustomLayoutJsonString) == 0x000020, "Wrong size on SolarWidgetLibrary_GetCustomLayoutJsonString");
static_assert(offsetof(SolarWidgetLibrary_GetCustomLayoutJsonString, InWidgetBlueprintJsonPath) == 0x000000, "Member 'SolarWidgetLibrary_GetCustomLayoutJsonString::InWidgetBlueprintJsonPath' has a wrong offset!");
static_assert(offsetof(SolarWidgetLibrary_GetCustomLayoutJsonString, ReturnValue) == 0x000010, "Member 'SolarWidgetLibrary_GetCustomLayoutJsonString::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarWidgetLibrary.NavigateTo
// 0x0008 (0x0008 - 0x0000)
struct SolarWidgetLibrary_NavigateTo final
{
public:
	class UWidget*                                WidgetToNavigate;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWidgetLibrary_NavigateTo) == 0x000008, "Wrong alignment on SolarWidgetLibrary_NavigateTo");
static_assert(sizeof(SolarWidgetLibrary_NavigateTo) == 0x000008, "Wrong size on SolarWidgetLibrary_NavigateTo");
static_assert(offsetof(SolarWidgetLibrary_NavigateTo, WidgetToNavigate) == 0x000000, "Member 'SolarWidgetLibrary_NavigateTo::WidgetToNavigate' has a wrong offset!");

// Function SolarUI.SolarWidgetLibrary.NavigateToWidget
// 0x0008 (0x0008 - 0x0000)
struct SolarWidgetLibrary_NavigateToWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWidgetLibrary_NavigateToWidget) == 0x000008, "Wrong alignment on SolarWidgetLibrary_NavigateToWidget");
static_assert(sizeof(SolarWidgetLibrary_NavigateToWidget) == 0x000008, "Wrong size on SolarWidgetLibrary_NavigateToWidget");
static_assert(offsetof(SolarWidgetLibrary_NavigateToWidget, Widget) == 0x000000, "Member 'SolarWidgetLibrary_NavigateToWidget::Widget' has a wrong offset!");

// Function SolarUI.SolarWidgetLibrary.SetListViewItemFocus
// 0x0010 (0x0010 - 0x0000)
struct SolarWidgetLibrary_SetListViewItemFocus final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarWidgetLibrary_SetListViewItemFocus) == 0x000008, "Wrong alignment on SolarWidgetLibrary_SetListViewItemFocus");
static_assert(sizeof(SolarWidgetLibrary_SetListViewItemFocus) == 0x000010, "Wrong size on SolarWidgetLibrary_SetListViewItemFocus");
static_assert(offsetof(SolarWidgetLibrary_SetListViewItemFocus, ListView) == 0x000000, "Member 'SolarWidgetLibrary_SetListViewItemFocus::ListView' has a wrong offset!");
static_assert(offsetof(SolarWidgetLibrary_SetListViewItemFocus, Index_0) == 0x000008, "Member 'SolarWidgetLibrary_SetListViewItemFocus::Index_0' has a wrong offset!");

// Function SolarUI.SolarCurveVector.GetVectorValue
// 0x0020 (0x0020 - 0x0000)
struct SolarCurveVector_GetVectorValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarCurveVector_GetVectorValue) == 0x000010, "Wrong alignment on SolarCurveVector_GetVectorValue");
static_assert(sizeof(SolarCurveVector_GetVectorValue) == 0x000020, "Wrong size on SolarCurveVector_GetVectorValue");
static_assert(offsetof(SolarCurveVector_GetVectorValue, InTime) == 0x000000, "Member 'SolarCurveVector_GetVectorValue::InTime' has a wrong offset!");
static_assert(offsetof(SolarCurveVector_GetVectorValue, ReturnValue) == 0x000010, "Member 'SolarCurveVector_GetVectorValue::ReturnValue' has a wrong offset!");

// Function SolarUI.SolarByteChannel.GetByteValue
// 0x000C (0x000C - 0x0000)
struct SolarByteChannel_GetByteValue final
{
public:
	float                                         OldTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversePlayback;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutValue;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarByteChannel_GetByteValue) == 0x000004, "Wrong alignment on SolarByteChannel_GetByteValue");
static_assert(sizeof(SolarByteChannel_GetByteValue) == 0x00000C, "Wrong size on SolarByteChannel_GetByteValue");
static_assert(offsetof(SolarByteChannel_GetByteValue, OldTime) == 0x000000, "Member 'SolarByteChannel_GetByteValue::OldTime' has a wrong offset!");
static_assert(offsetof(SolarByteChannel_GetByteValue, NewTime) == 0x000004, "Member 'SolarByteChannel_GetByteValue::NewTime' has a wrong offset!");
static_assert(offsetof(SolarByteChannel_GetByteValue, bReversePlayback) == 0x000008, "Member 'SolarByteChannel_GetByteValue::bReversePlayback' has a wrong offset!");
static_assert(offsetof(SolarByteChannel_GetByteValue, OutValue) == 0x000009, "Member 'SolarByteChannel_GetByteValue::OutValue' has a wrong offset!");
static_assert(offsetof(SolarByteChannel_GetByteValue, ReturnValue) == 0x00000A, "Member 'SolarByteChannel_GetByteValue::ReturnValue' has a wrong offset!");

}

