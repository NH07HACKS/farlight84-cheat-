#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BackPack_Capacity_Slot_Desktop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_BackPack_Capacity_Slot_Desktop.UI_BackPack_Capacity_Slot_Desktop_C
// 0x0030 (0x0628 - 0x05F8)
class UUI_BackPack_Capacity_Slot_Desktop_C final : public UUIBackpackCapacitySlot
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Img_Box;                                           // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Grid;                                          // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Lock;                                          // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_Capacity;                                     // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EBackpackCapacityState                        CapacityState;                                     // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNomal;                                           // 0x0621(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UI_BackPack_Capacity_Slot_Desktop(int32 EntryPoint);
	void BP_SetCapcityState(const EBackpackCapacityState State, const bool bIsFull);
	void PreConstruct(bool IsDesignTime);
	void SetCapcityStateColor(EBackpackCapacityState CapacityState_0, bool IsNomals);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_BackPack_Capacity_Slot_Desktop_C">();
	}
	static class UUI_BackPack_Capacity_Slot_Desktop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_BackPack_Capacity_Slot_Desktop_C>();
	}
};
static_assert(alignof(UUI_BackPack_Capacity_Slot_Desktop_C) == 0x000008, "Wrong alignment on UUI_BackPack_Capacity_Slot_Desktop_C");
static_assert(sizeof(UUI_BackPack_Capacity_Slot_Desktop_C) == 0x000628, "Wrong size on UUI_BackPack_Capacity_Slot_Desktop_C");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, UberGraphFrame) == 0x0005F8, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, Img_Box) == 0x000600, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::Img_Box' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, Img_Grid) == 0x000608, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::Img_Grid' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, Img_Lock) == 0x000610, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::Img_Lock' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, Size_Capacity) == 0x000618, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::Size_Capacity' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, CapacityState) == 0x000620, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::CapacityState' has a wrong offset!");
static_assert(offsetof(UUI_BackPack_Capacity_Slot_Desktop_C, IsNomal) == 0x000621, "Member 'UUI_BackPack_Capacity_Slot_Desktop_C::IsNomal' has a wrong offset!");

}

