#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInfoComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapInfoComponent.BP_MapInfoComponent_C
// 0x0108 (0x0360 - 0x0258)
class UBP_MapInfoComponent_C final : public UCGMMapInfo
{
public:
	TArray<struct FVector>                        SafeAreaCenters;                                   // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          StaticSafeArea;                                    // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_EventTimeline_BattleRoyale;                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePoisonCircleMarker;                             // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TempDir;                                           // 0x027C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFakePoint;                                      // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FVector2D>                 FakePointRangeArr;                                 // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseFakeBombPoint;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FVector2D>                 FakeBombPointRangeArr;                             // 0x02E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PreCirclePoint;                                    // 0x0330(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CircleRadiusArr;                                   // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInt32Range                            OverrideCenterIndex;                               // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Calculate_Required_Parameters(TArray<float>& RadiusArr, int32 Index_0, float* Radius, float* MaxOffset, float* GoToTheCentreRadius);
	void Random_Get_Fake_Bomb_Point(const int32& Key, struct FVector* Pos, bool* Success);
	void SetFakeBombPointRangeArrr(const TMap<int32, struct FVector2D>& FakeBombPointRangeArr_0);
	void SetFakePointRnageArr(const TMap<int32, struct FVector2D>& FakePointRnageArr);
	void Get_Safe_Area_Centers_Len(int32* Len);
	void CalculateFakePoint(const struct FVector& Centre, float SmallRadiu, float LargeRadiu, int32 Index_0, struct FVector* Pos);
	void Join_Next(float Radius, float MaxOffset, int32 LastIndex, TArray<struct FVector>& TargetArray, float GoToTheCentreRadius);
	void Random_Selection(float TargetDisMax, float Radius, TArray<struct FVector>& TargetArray, bool NeedCheckBoundary, bool* Add);
	void JudgeBoundary(const struct FVector& Pos, float Radius, bool* DontInBoundary);
	void Calculate_Poison_Circle_Point_Array(TArray<float>& RadiusArr);
	void Get_Safe_Area_Center(int32 Index_0, struct FVector* Pos);
	int32 GetAirline(struct FAirlineData* Airline);
	void SetStaticSafeArea(TArray<struct FVector>& SafeAreaCenters_0, const struct FInt32Range& OverrideIndexRange);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapInfoComponent_C">();
	}
	static class UBP_MapInfoComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MapInfoComponent_C>();
	}
};
static_assert(alignof(UBP_MapInfoComponent_C) == 0x000008, "Wrong alignment on UBP_MapInfoComponent_C");
static_assert(sizeof(UBP_MapInfoComponent_C) == 0x000360, "Wrong size on UBP_MapInfoComponent_C");
static_assert(offsetof(UBP_MapInfoComponent_C, SafeAreaCenters) == 0x000258, "Member 'UBP_MapInfoComponent_C::SafeAreaCenters' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, StaticSafeArea) == 0x000268, "Member 'UBP_MapInfoComponent_C::StaticSafeArea' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, DT_EventTimeline_BattleRoyale) == 0x000270, "Member 'UBP_MapInfoComponent_C::DT_EventTimeline_BattleRoyale' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, UsePoisonCircleMarker) == 0x000278, "Member 'UBP_MapInfoComponent_C::UsePoisonCircleMarker' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, TempDir) == 0x00027C, "Member 'UBP_MapInfoComponent_C::TempDir' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, UseFakePoint) == 0x000284, "Member 'UBP_MapInfoComponent_C::UseFakePoint' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, FakePointRangeArr) == 0x000288, "Member 'UBP_MapInfoComponent_C::FakePointRangeArr' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, UseFakeBombPoint) == 0x0002D8, "Member 'UBP_MapInfoComponent_C::UseFakeBombPoint' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, FakeBombPointRangeArr) == 0x0002E0, "Member 'UBP_MapInfoComponent_C::FakeBombPointRangeArr' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, PreCirclePoint) == 0x000330, "Member 'UBP_MapInfoComponent_C::PreCirclePoint' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, CircleRadiusArr) == 0x000340, "Member 'UBP_MapInfoComponent_C::CircleRadiusArr' has a wrong offset!");
static_assert(offsetof(UBP_MapInfoComponent_C, OverrideCenterIndex) == 0x000350, "Member 'UBP_MapInfoComponent_C::OverrideCenterIndex' has a wrong offset!");

}

