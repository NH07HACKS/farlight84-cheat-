#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicRepresentation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DynamicRepresentation.SpatialLODLevel
// NumValues: 0x0004
enum class ESpatialLODLevel : uint8
{
	None                                     = 255,
	LOD0                                     = 0,
	LOD1                                     = 1,
	SpatialLODLevel_MAX                      = 256,
};

// ScriptStruct DynamicRepresentation.ActorRegistrationInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FActorRegistrationInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorRegistrationInfo) == 0x000010, "Wrong alignment on FActorRegistrationInfo");
static_assert(sizeof(FActorRegistrationInfo) == 0x000080, "Wrong size on FActorRegistrationInfo");

// ScriptStruct DynamicRepresentation.ActorStreamingData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FActorStreamingData final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicRepresentationDefinition*       Definition;                                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                CustomActorData;                                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorStreamingData) == 0x000010, "Wrong alignment on FActorStreamingData");
static_assert(sizeof(FActorStreamingData) == 0x000070, "Wrong size on FActorStreamingData");
static_assert(offsetof(FActorStreamingData, Definition) == 0x000048, "Member 'FActorStreamingData::Definition' has a wrong offset!");
static_assert(offsetof(FActorStreamingData, CustomActorData) == 0x000050, "Member 'FActorStreamingData::CustomActorData' has a wrong offset!");

// ScriptStruct DynamicRepresentation.PlayerViewInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FPlayerViewInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerViewInfo) == 0x000004, "Wrong alignment on FPlayerViewInfo");
static_assert(sizeof(FPlayerViewInfo) == 0x000018, "Wrong size on FPlayerViewInfo");

// ScriptStruct DynamicRepresentation.ActorIdManager
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FActorIdManager final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorIdManager) == 0x000008, "Wrong alignment on FActorIdManager");
static_assert(sizeof(FActorIdManager) == 0x000018, "Wrong size on FActorIdManager");

// ScriptStruct DynamicRepresentation.ActorId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FActorId final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorId) == 0x000008, "Wrong alignment on FActorId");
static_assert(sizeof(FActorId) == 0x000010, "Wrong size on FActorId");

// ScriptStruct DynamicRepresentation.SpatialHashingSectorKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSpatialHashingSectorKey final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialHashingSectorKey) == 0x000008, "Wrong alignment on FSpatialHashingSectorKey");
static_assert(sizeof(FSpatialHashingSectorKey) == 0x000020, "Wrong size on FSpatialHashingSectorKey");

// ScriptStruct DynamicRepresentation.SpatialHashGridDesc
// 0x0020 (0x0020 - 0x0000)
struct FSpatialHashGridDesc final
{
public:
	class FName                                   GridName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectorSize;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODDistance;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseZCulling;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebuggingColor;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseZHash;                                          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialHashGridDesc) == 0x000004, "Wrong alignment on FSpatialHashGridDesc");
static_assert(sizeof(FSpatialHashGridDesc) == 0x000020, "Wrong size on FSpatialHashGridDesc");
static_assert(offsetof(FSpatialHashGridDesc, GridName) == 0x000000, "Member 'FSpatialHashGridDesc::GridName' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, SectorSize) == 0x000008, "Member 'FSpatialHashGridDesc::SectorSize' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, MaxRange) == 0x00000C, "Member 'FSpatialHashGridDesc::MaxRange' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, LODDistance) == 0x000010, "Member 'FSpatialHashGridDesc::LODDistance' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, UseZCulling) == 0x000014, "Member 'FSpatialHashGridDesc::UseZCulling' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, DebuggingColor) == 0x000018, "Member 'FSpatialHashGridDesc::DebuggingColor' has a wrong offset!");
static_assert(offsetof(FSpatialHashGridDesc, UseZHash) == 0x00001C, "Member 'FSpatialHashGridDesc::UseZHash' has a wrong offset!");

}

