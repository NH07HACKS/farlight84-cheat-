#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_Framework

#include "Basic.hpp"

#include "BP_Controller_Framework_classes.hpp"
#include "BP_Controller_Framework_parameters.hpp"


namespace SDK
{

// Function BP_Controller_Framework.BP_Controller_Framework_C.MeerkatTriggerReport
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::MeerkatTriggerReport(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "MeerkatTriggerReport");

	Params::BP_Controller_Framework_C_MeerkatTriggerReport Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.UpdateAiPalRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::UpdateAiPalRate(int32 Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "UpdateAiPalRate");

	Params::BP_Controller_Framework_C_UpdateAiPalRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.OnRep_EnableAiPalRate
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_Framework_C::OnRep_EnableAiPalRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "OnRep_EnableAiPalRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.OnNotifyLockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::OnNotifyLockPlayer(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "OnNotifyLockPlayer");

	Params::BP_Controller_Framework_C_OnNotifyLockPlayer Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.RequestNotifyLockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::RequestNotifyLockPlayer(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "RequestNotifyLockPlayer");

	Params::BP_Controller_Framework_C_RequestNotifyLockPlayer Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.ClientNotifyLockPlayer
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::ClientNotifyLockPlayer(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "ClientNotifyLockPlayer");

	Params::BP_Controller_Framework_C_ClientNotifyLockPlayer Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.RpcClientRepAceStatusToServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::RpcClientRepAceStatusToServer(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "RpcClientRepAceStatusToServer");

	Params::BP_Controller_Framework_C_RpcClientRepAceStatusToServer Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_Framework.BP_Controller_Framework_C.ExecuteUbergraph_BP_Controller_Framework
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_Framework_C::ExecuteUbergraph_BP_Controller_Framework(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_Framework_C", "ExecuteUbergraph_BP_Controller_Framework");

	Params::BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

