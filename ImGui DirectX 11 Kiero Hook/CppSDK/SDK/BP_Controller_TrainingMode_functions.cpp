#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_TrainingMode

#include "Basic.hpp"

#include "BP_Controller_TrainingMode_classes.hpp"
#include "BP_Controller_TrainingMode_parameters.hpp"


namespace SDK
{

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.OnCharacterRebirthLua
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::OnCharacterRebirthLua()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "OnCharacterRebirthLua");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SolarGM_BattleLua
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FString&                    CmdName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::SolarGM_BattleLua(const class FString& CmdName, const TArray<class FString>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "SolarGM_BattleLua");

	Params::BP_Controller_TrainingMode_C_SolarGM_BattleLua Parms{};

	Parms.CmdName = std::move(CmdName);
	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UploadReplayMonitor
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsKillCam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::UploadReplayMonitor(bool bIsKillCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "UploadReplayMonitor");

	Params::BP_Controller_TrainingMode_C_UploadReplayMonitor Parms{};

	Parms.bIsKillCam = bIsKillCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UpdateAiPalRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_TrainingMode_C::UpdateAiPalRate(int32 Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "UpdateAiPalRate");

	Params::BP_Controller_TrainingMode_C_UpdateAiPalRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.DebugSetPlayerData
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::DebugSetPlayerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "DebugSetPlayerData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SolarGM_ShowBattleResultReviewBusinessCard
// (Exec, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::SolarGM_ShowBattleResultReviewBusinessCard(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "SolarGM_ShowBattleResultReviewBusinessCard");

	Params::BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.ShowBackpackUI
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::ShowBackpackUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "ShowBackpackUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SetInputActionSwitch
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ActionID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOn                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::SetInputActionSwitch(int32 ActionID, bool bOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "SetInputActionSwitch");

	Params::BP_Controller_TrainingMode_C_SetInputActionSwitch Parms{};

	Parms.ActionID = ActionID;
	Parms.bOn = bOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetNoticeLocalText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InNoticeID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&InNoticeParams                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABP_Controller_TrainingMode_C::GetNoticeLocalText(int32 InNoticeID, const TMap<class FString, class FString>& InNoticeParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "GetNoticeLocalText");

	Params::BP_Controller_TrainingMode_C_GetNoticeLocalText Parms{};

	Parms.InNoticeID = InNoticeID;
	Parms.InNoticeParams = std::move(InNoticeParams);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.TryRecordBattlePlayerData
// (Event, Protected, BlueprintEvent)

void ABP_Controller_TrainingMode_C::TryRecordBattlePlayerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "TryRecordBattlePlayerData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "ReceiveEndPlay");

	Params::BP_Controller_TrainingMode_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UpdateEnableAiPalRate
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::UpdateEnableAiPalRate(int32 Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "UpdateEnableAiPalRate");

	Params::BP_Controller_TrainingMode_C_UpdateEnableAiPalRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.OnCharacterDeathLua
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::OnCharacterDeathLua()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "OnCharacterDeathLua");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Controller_TrainingMode_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.DebugInitTask
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::DebugInitTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "DebugInitTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.MeerkatTriggerReport
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_TrainingMode_C::MeerkatTriggerReport(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "MeerkatTriggerReport");

	Params::BP_Controller_TrainingMode_C_MeerkatTriggerReport Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.CustomModeShowNotice
// (Event, Public, BlueprintEvent)
// Parameters:
// const int32                             InType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InNoticeID                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InIcon                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InNoticeColor                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::CustomModeShowNotice(const int32 InType, const int32 InNoticeID, class UClass* InClass, const float InTime, const class FString& InText, class UObject* InIcon, const int32 InNoticeColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "CustomModeShowNotice");

	Params::BP_Controller_TrainingMode_C_CustomModeShowNotice Parms{};

	Parms.InType = InType;
	Parms.InNoticeID = InNoticeID;
	Parms.InClass = InClass;
	Parms.InTime = InTime;
	Parms.InText = std::move(InText);
	Parms.InIcon = InIcon;
	Parms.InNoticeColor = InNoticeColor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.NotifyMonsterSpawn
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::NotifyMonsterSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "NotifyMonsterSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.QueryStage
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABP_Controller_TrainingMode_C::QueryStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "QueryStage");

	Params::BP_Controller_TrainingMode_C_QueryStage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.NotifyCrouchIsLocked
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::NotifyCrouchIsLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "NotifyCrouchIsLocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.RecordSpectateInfoToBI
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSpectateReportInfo*             SpectateReportInfo                                     (Parm, OutParm, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::RecordSpectateInfoToBI(struct FSpectateReportInfo* SpectateReportInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "RecordSpectateInfoToBI");

	Params::BP_Controller_TrainingMode_C_RecordSpectateInfoToBI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpectateReportInfo != nullptr)
		*SpectateReportInfo = std::move(Parms.SpectateReportInfo);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.DebugUpdateTask
// (Event, Public, BlueprintEvent)

void ABP_Controller_TrainingMode_C::DebugUpdateTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "DebugUpdateTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.OnNotifyLockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_TrainingMode_C::OnNotifyLockPlayer(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "OnNotifyLockPlayer");

	Params::BP_Controller_TrainingMode_C_OnNotifyLockPlayer Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.IsMatching
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

bool ABP_Controller_TrainingMode_C::IsMatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "IsMatching");

	Params::BP_Controller_TrainingMode_C_IsMatching Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.LuaShowUI
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    WidgetPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UIName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABP_Controller_TrainingMode_C::LuaShowUI(const class FString& WidgetPath, const class FString& UIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "LuaShowUI");

	Params::BP_Controller_TrainingMode_C_LuaShowUI Parms{};

	Parms.WidgetPath = std::move(WidgetPath);
	Parms.UIName = std::move(UIName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetCustomStandardScreenSize
// (Event, Protected, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ABP_Controller_TrainingMode_C::GetCustomStandardScreenSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "GetCustomStandardScreenSize");

	Params::BP_Controller_TrainingMode_C_GetCustomStandardScreenSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetMobileStandardScreenSize
// (Event, Protected, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ABP_Controller_TrainingMode_C::GetMobileStandardScreenSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_TrainingMode_C", "GetMobileStandardScreenSize");

	Params::BP_Controller_TrainingMode_C_GetMobileStandardScreenSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

