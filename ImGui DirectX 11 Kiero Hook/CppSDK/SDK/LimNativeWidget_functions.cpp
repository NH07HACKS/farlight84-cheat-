#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimNativeWidget

#include "Basic.hpp"

#include "LimNativeWidget_classes.hpp"
#include "LimNativeWidget_parameters.hpp"


namespace SDK
{

// Function LimNativeWidget.AgoraManager.DestroyInstance
// (Final, Native, Static, Public, BlueprintCallable)

void UAgoraManager::DestroyInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AgoraManager", "DestroyInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAgoraManager*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAgoraManager* UAgoraManager::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AgoraManager", "GetInstance");

	Params::AgoraManager_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.IsInitialized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAgoraManager::IsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AgoraManager", "IsInitialized");

	Params::AgoraManager_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.EnableMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnableMic(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnableMic");

	Params::AgoraManager_EnableMic Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnableMicNoiseReduction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnableMicNoiseReduction(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnableMicNoiseReduction");

	Params::AgoraManager_EnableMicNoiseReduction Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.FinishSDKInitation
// (Event, Public, BlueprintEvent)

void UAgoraManager::FinishSDKInitation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "FinishSDKInitation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LimNativeWidget.AgoraManager.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableLog                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::Init(bool bEnableLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "Init");

	Params::AgoraManager_Init Parms{};

	Parms.bEnableLog = bEnableLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.InitVoiceSDK
// (Final, Native, Public)
// Parameters:
// bool                                    bEnableLog                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::InitVoiceSDK(bool bEnableLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "InitVoiceSDK");

	Params::AgoraManager_InitVoiceSDK Parms{};

	Parms.bEnableLog = bEnableLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.InnerEnableMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::InnerEnableMic(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "InnerEnableMic");

	Params::AgoraManager_InnerEnableMic Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.PreInit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Appkey                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::PreInit(const class FString& Appkey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "PreInit");

	Params::AgoraManager_PreInit Parms{};

	Parms.Appkey = std::move(Appkey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.UnInit
// (Final, Native, Public, BlueprintCallable)

void UAgoraManager::UnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "UnInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.UnRegisterLuaEvent
// (Event, Public, BlueprintEvent)

void UAgoraManager::UnRegisterLuaEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "UnRegisterLuaEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LimNativeWidget.AgoraManager.AgoraAudioDump
// (Final, Native, Public, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::AgoraAudioDump(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "AgoraAudioDump");

	Params::AgoraManager_AgoraAudioDump Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnableAudioIndication
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const int32                             Millions                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Smooth                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReportVad                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnableAudioIndication(const int32 Millions, const int32 Smooth, const bool bReportVad) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnableAudioIndication");

	Params::AgoraManager_EnableAudioIndication Parms{};

	Parms.Millions = Millions;
	Parms.Smooth = Smooth;
	Parms.bReportVad = bReportVad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnableAudioIndicationEx
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const int32                             Millions                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Smooth                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReportVad                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             LocalUID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnableAudioIndicationEx(const int32 Millions, const int32 Smooth, const bool bReportVad, const class FString& RoomID, const int32 LocalUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnableAudioIndicationEx");

	Params::AgoraManager_EnableAudioIndicationEx Parms{};

	Parms.Millions = Millions;
	Parms.Smooth = Smooth;
	Parms.bReportVad = bReportVad;
	Parms.RoomID = std::move(RoomID);
	Parms.LocalUID = LocalUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnableSpeaker
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnableSpeaker(const bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnableSpeaker");

	Params::AgoraManager_EnableSpeaker Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnterRoom
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnterRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnterRoom");

	Params::AgoraManager_EnterRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.EnterRoomPro
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoomToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgoraGamePublishOption           PublishOpt                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgoraGameSubscribeOption         SubscribeOpt                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::EnterRoomPro(const class FString& RoomID, const class FString& TeamID, const class FString& RoomToken, const class FString& TeamToken, const int32 Uid, const EAgoraGamePublishOption PublishOpt, const EAgoraGameSubscribeOption SubscribeOpt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "EnterRoomPro");

	Params::AgoraManager_EnterRoomPro Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.TeamID = std::move(TeamID);
	Parms.RoomToken = std::move(RoomToken);
	Parms.TeamToken = std::move(TeamToken);
	Parms.Uid = Uid;
	Parms.PublishOpt = PublishOpt;
	Parms.SubscribeOpt = SubscribeOpt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.ExitRoom
// (Final, Native, Public, BlueprintCallable, Const)

void UAgoraManager::ExitRoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "ExitRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.GameSetMicVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             MicVolume                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAgoraManager::GameSetMicVolume(const int32 MicVolume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "GameSetMicVolume");

	Params::AgoraManager_GameSetMicVolume Parms{};

	Parms.MicVolume = MicVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.GameSetSpeakerVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             Volume                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAgoraManager::GameSetSpeakerVolume(const int32 Volume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "GameSetSpeakerVolume");

	Params::AgoraManager_GameSetSpeakerVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.GameSetSpeakerVolumeByUid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Volume                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAgoraManager::GameSetSpeakerVolumeByUid(const int32 Uid, const int32 Volume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "GameSetSpeakerVolumeByUid");

	Params::AgoraManager_GameSetSpeakerVolumeByUid Parms{};

	Parms.Uid = Uid;
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.GetMicList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FRTCDeviceInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<struct FRTCDeviceInfo> UAgoraManager::GetMicList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "GetMicList");

	Params::AgoraManager_GetMicList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.GetSpeakerList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FRTCDeviceInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<struct FRTCDeviceInfo> UAgoraManager::GetSpeakerList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "GetSpeakerList");

	Params::AgoraManager_GetSpeakerList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.InnerEnterRoom
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::InnerEnterRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "InnerEnterRoom");

	Params::AgoraManager_InnerEnterRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.IsInRtcRoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAgoraManager::IsInRtcRoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "IsInRtcRoom");

	Params::AgoraManager_IsInRtcRoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.IsInRtcRoomEx
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAgoraManager::IsInRtcRoomEx(const class FString& RoomID, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "IsInRtcRoomEx");

	Params::AgoraManager_IsInRtcRoomEx Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AgoraManager.MediaMute
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::MediaMute(const class FString& RoomID, const class FString& TeamID, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "MediaMute");

	Params::AgoraManager_MediaMute Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.TeamID = std::move(TeamID);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.MuteLocalAudioStream
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             LocalUID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::MuteLocalAudioStream(bool bMute, const class FString& RoomID, const class FString& TeamID, const int32 LocalUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "MuteLocalAudioStream");

	Params::AgoraManager_MuteLocalAudioStream Parms{};

	Parms.bMute = bMute;
	Parms.RoomID = std::move(RoomID);
	Parms.TeamID = std::move(TeamID);
	Parms.LocalUID = LocalUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.MuteRemoteAudioStream
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const int32                             TargetUID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MuteRoomID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             LocalUID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::MuteRemoteAudioStream(const int32 TargetUID, const class FString& MuteRoomID, bool bMute, const int32 LocalUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "MuteRemoteAudioStream");

	Params::AgoraManager_MuteRemoteAudioStream Parms{};

	Parms.TargetUID = TargetUID;
	Parms.MuteRoomID = std::move(MuteRoomID);
	Parms.bMute = bMute;
	Parms.LocalUID = LocalUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SelectMic
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    InDeviceID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::SelectMic(const class FString& InDeviceID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SelectMic");

	Params::AgoraManager_SelectMic Parms{};

	Parms.InDeviceID = std::move(InDeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SelectSpeak
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    InDeviceID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::SelectSpeak(const class FString& InDeviceID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SelectSpeak");

	Params::AgoraManager_SelectSpeak Parms{};

	Parms.InDeviceID = std::move(InDeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SetAudioSessionRestriction
// (Final, Native, Public, BlueprintCallable, Const)

void UAgoraManager::SetAudioSessionRestriction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SetAudioSessionRestriction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SetChannelPublishSubscribeOption
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgoraGamePublishOption           SelectedPublishOption                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgoraGameSubscribeOption         SelectedSubscribeOption                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::SetChannelPublishSubscribeOption(const class FString& RoomID, const class FString& TeamID, const EAgoraGamePublishOption SelectedPublishOption, const EAgoraGameSubscribeOption SelectedSubscribeOption, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SetChannelPublishSubscribeOption");

	Params::AgoraManager_SetChannelPublishSubscribeOption Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.TeamID = std::move(TeamID);
	Parms.SelectedPublishOption = SelectedPublishOption;
	Parms.SelectedSubscribeOption = SelectedSubscribeOption;
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SetSubscribeAudioBlocklist
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>&                    OpenIDList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::SetSubscribeAudioBlocklist(const TArray<int32>& OpenIDList, const class FString& RoomID, const class FString& TeamID, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SetSubscribeAudioBlocklist");

	Params::AgoraManager_SetSubscribeAudioBlocklist Parms{};

	Parms.OpenIDList = std::move(OpenIDList);
	Parms.RoomID = std::move(RoomID);
	Parms.TeamID = std::move(TeamID);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AgoraManager.SwitchRoom
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAgoraManager::SwitchRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgoraManager", "SwitchRoom");

	Params::AgoraManager_SwitchRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AudioPermissionHelperProxy.CheckAndroidAudioPermission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioPermissionHelperProxy::CheckAndroidAudioPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AudioPermissionHelperProxy", "CheckAndroidAudioPermission");

	Params::AudioPermissionHelperProxy_CheckAndroidAudioPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AudioPermissionHelperProxy.CheckIOSAudioPermission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EIOSAudioPermissionState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EIOSAudioPermissionState UAudioPermissionHelperProxy::CheckIOSAudioPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AudioPermissionHelperProxy", "CheckIOSAudioPermission");

	Params::AudioPermissionHelperProxy_CheckIOSAudioPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.AudioPermissionHelperProxy.AcquireAndroidAudioPermission
// (Final, Native, Public, BlueprintCallable)

void UAudioPermissionHelperProxy::AcquireAndroidAudioPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioPermissionHelperProxy", "AcquireAndroidAudioPermission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AudioPermissionHelperProxy.AcquireIOSAudioPermission
// (Final, Native, Public, BlueprintCallable)

void UAudioPermissionHelperProxy::AcquireIOSAudioPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioPermissionHelperProxy", "AcquireIOSAudioPermission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.AudioPermissionHelperProxy.OnAndroidPermissionResult
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Permissions                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<bool>&                     Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioPermissionHelperProxy::OnAndroidPermissionResult(const TArray<class FString>& Permissions, const TArray<bool>& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioPermissionHelperProxy", "OnAndroidPermissionResult");

	Params::AudioPermissionHelperProxy_OnAndroidPermissionResult Parms{};

	Parms.Permissions = std::move(Permissions);
	Parms.Results = std::move(Results);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.LimNativeWidgetSettings.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULimNativeWidgetSettings*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULimNativeWidgetSettings* ULimNativeWidgetSettings::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LimNativeWidgetSettings", "GetInstance");

	Params::LimNativeWidgetSettings_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.DestroyInstance
// (Final, Native, Static, Public, BlueprintCallable)

void UNertcManager::DestroyInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NertcManager", "DestroyInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNertcManager*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNertcManager* UNertcManager::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NertcManager", "GetInstance");

	Params::NertcManager_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.GetRecordingLocalFilePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNertcManager::GetRecordingLocalFilePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NertcManager", "GetRecordingLocalFilePath");

	Params::NertcManager_GetRecordingLocalFilePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.IsInitialized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNertcManager::IsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NertcManager", "IsInitialized");

	Params::NertcManager_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.ApplyNertcAuth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Uid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::ApplyNertcAuth(int32 Uid, const class FString& Token)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "ApplyNertcAuth");

	Params::NertcManager_ApplyNertcAuth Parms{};

	Parms.Uid = Uid;
	Parms.Token = std::move(Token);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.CancelRecording
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::CancelRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "CancelRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.CheckPlatformMicPermission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNertcManager::CheckPlatformMicPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "CheckPlatformMicPermission");

	Params::NertcManager_CheckPlatformMicPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.DownloadRecordedFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FileID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::DownloadRecordedFile(const class FString& FileID, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "DownloadRecordedFile");

	Params::NertcManager_DownloadRecordedFile Parms{};

	Parms.FileID = std::move(FileID);
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnableAudioIndication
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Millions                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableLocal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnableAudioIndication(bool InEnable, int32 Millions, bool bEnableLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnableAudioIndication");

	Params::NertcManager_EnableAudioIndication Parms{};

	Parms.InEnable = InEnable;
	Parms.Millions = Millions;
	Parms.bEnableLocal = bEnableLocal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnableMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnableMic(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnableMic");

	Params::NertcManager_EnableMic Parms{};

	Parms.InEnable = InEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnableMicNoiseReduction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnableMicNoiseReduction(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnableMicNoiseReduction");

	Params::NertcManager_EnableMicNoiseReduction Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnableRangeVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnbale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnableRangeVoice(bool bEnbale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnableRangeVoice");

	Params::NertcManager_EnableRangeVoice Parms{};

	Parms.bEnbale = bEnbale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnableSpeaker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnableSpeaker(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnableSpeaker");

	Params::NertcManager_EnableSpeaker Parms{};

	Parms.InEnable = InEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.EnterRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Uid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::EnterRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "EnterRoom");

	Params::NertcManager_EnterRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.ExitRoom
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::ExitRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "ExitRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.GetFileSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::GetFileSize(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "GetFileSize");

	Params::NertcManager_GetFileSize Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.GetMicList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FRTCDeviceInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<struct FRTCDeviceInfo> UNertcManager::GetMicList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "GetMicList");

	Params::NertcManager_GetMicList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.GetSpeakerList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FRTCDeviceInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<struct FRTCDeviceInfo> UNertcManager::GetSpeakerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "GetSpeakerList");

	Params::NertcManager_GetSpeakerList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.GetVoiceFileDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNertcManager::GetVoiceFileDuration(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "GetVoiceFileDuration");

	Params::NertcManager_GetVoiceFileDuration Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableLog                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::Init(bool bEnableLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "Init");

	Params::NertcManager_Init Parms{};

	Parms.bEnableLog = bEnableLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.InnerEnableMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::InnerEnableMic(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "InnerEnableMic");

	Params::NertcManager_InnerEnableMic Parms{};

	Parms.InEnable = InEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.InnerEnterRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Uid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::InnerEnterRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "InnerEnterRoom");

	Params::NertcManager_InnerEnterRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.IsInRtcRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNertcManager::IsInRtcRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "IsInRtcRoom");

	Params::NertcManager_IsInRtcRoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimNativeWidget.NertcManager.MediaMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Uid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::MediaMute(int32 Uid, bool bMute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "MediaMute");

	Params::NertcManager_MediaMute Parms{};

	Parms.Uid = Uid;
	Parms.bMute = bMute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.PauseRecording
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::PauseRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "PauseRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.PlayRecordedFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::PlayRecordedFile(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "PlayRecordedFile");

	Params::NertcManager_PlayRecordedFile Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.PreInit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Appkey                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::PreInit(const class FString& Appkey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "PreInit");

	Params::NertcManager_PreInit Parms{};

	Parms.Appkey = std::move(Appkey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.ResumeRecording
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::ResumeRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "ResumeRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SelectMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SelectMic(const class FString& InDeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SelectMic");

	Params::NertcManager_SelectMic Parms{};

	Parms.InDeviceID = std::move(InDeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SelectSpeak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InDeviceID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SelectSpeak(const class FString& InDeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SelectSpeak");

	Params::NertcManager_SelectSpeak Parms{};

	Parms.InDeviceID = std::move(InDeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetAudioSendAndRecvRules
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ERTCAudioRouteSendType                  InSendType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    InSendOpenIDList                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERTCAudioRouteRecvType                  InRecvType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    InRecvOpenIDList                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetAudioSendAndRecvRules(ERTCAudioRouteSendType InSendType, const TArray<int32>& InSendOpenIDList, ERTCAudioRouteRecvType InRecvType, const TArray<int32>& InRecvOpenIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetAudioSendAndRecvRules");

	Params::NertcManager_SetAudioSendAndRecvRules Parms{};

	Parms.InSendType = InSendType;
	Parms.InSendOpenIDList = std::move(InSendOpenIDList);
	Parms.InRecvType = InRecvType;
	Parms.InRecvOpenIDList = std::move(InRecvOpenIDList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetMaxMessageLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MsTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetMaxMessageLength(int32 MsTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetMaxMessageLength");

	Params::NertcManager_SetMaxMessageLength Parms{};

	Parms.MsTime = MsTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetRangeAudioMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERTCRangeAudioMode                      InAudioMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetRangeAudioMode(ERTCRangeAudioMode InAudioMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetRangeAudioMode");

	Params::NertcManager_SetRangeAudioMode Parms{};

	Parms.InAudioMode = InAudioMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetRangeAudioTeamID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetRangeAudioTeamID(int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetRangeAudioTeamID");

	Params::NertcManager_SetRangeAudioTeamID Parms{};

	Parms.TeamID = TeamID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetSubscribeAudioAllowlist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    OpenIDList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetSubscribeAudioAllowlist(const TArray<int32>& OpenIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetSubscribeAudioAllowlist");

	Params::NertcManager_SetSubscribeAudioAllowlist Parms{};

	Parms.OpenIDList = std::move(OpenIDList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetSubscribeAudioBlocklist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    OpenIDList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetSubscribeAudioBlocklist(const TArray<int32>& OpenIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetSubscribeAudioBlocklist");

	Params::NertcManager_SetSubscribeAudioBlocklist Parms{};

	Parms.OpenIDList = std::move(OpenIDList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SetSubscribeAudioOnlyBy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    OpenIDList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SetSubscribeAudioOnlyBy(const TArray<int32>& OpenIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SetSubscribeAudioOnlyBy");

	Params::NertcManager_SetSubscribeAudioOnlyBy Parms{};

	Parms.OpenIDList = std::move(OpenIDList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.StartRecording
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::StartRecording(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "StartRecording");

	Params::NertcManager_StartRecording Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.StopPlayFile
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::StopPlayFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "StopPlayFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.StopRecording
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::StopRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "StopRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.SwitchRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RoomID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppToken                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Uid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AudioDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::SwitchRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid, int32 TeamID, int32 AudioDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "SwitchRoom");

	Params::NertcManager_SwitchRoom Parms{};

	Parms.RoomID = std::move(RoomID);
	Parms.AppToken = std::move(AppToken);
	Parms.Uid = Uid;
	Parms.TeamID = TeamID;
	Parms.AudioDistance = AudioDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.UnInit
// (Final, Native, Public, BlueprintCallable)

void UNertcManager::UnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "UnInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.UnRegisterLuaEvent
// (Event, Public, BlueprintEvent)

void UNertcManager::UnRegisterLuaEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "UnRegisterLuaEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LimNativeWidget.NertcManager.UpdateAudioRecvRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::UpdateAudioRecvRange(int32 InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "UpdateAudioRecvRange");

	Params::NertcManager_UpdateAudioRecvRange Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.UpdateSelfPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InSelfPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InSelfRotator                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UNertcManager::UpdateSelfPosition(const struct FVector& InSelfPosition, const struct FRotator& InSelfRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "UpdateSelfPosition");

	Params::NertcManager_UpdateSelfPosition Parms{};

	Parms.InSelfPosition = std::move(InSelfPosition);
	Parms.InSelfRotator = std::move(InSelfRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.UploadRecordedFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNertcManager::UploadRecordedFile(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "UploadRecordedFile");

	Params::NertcManager_UploadRecordedFile Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimNativeWidget.NertcManager.GameSetSpeakerVolumeByUid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             Uid                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Volume                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNertcManager::GameSetSpeakerVolumeByUid(const int32 Uid, const int32 Volume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NertcManager", "GameSetSpeakerVolumeByUid");

	Params::NertcManager_GameSetSpeakerVolumeByUid Parms{};

	Parms.Uid = Uid;
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

