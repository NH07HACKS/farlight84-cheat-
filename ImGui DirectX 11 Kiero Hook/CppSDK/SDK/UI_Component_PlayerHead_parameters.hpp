#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_PlayerHead

#include "Basic.hpp"

#include "E_Type_Gender_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Type_Social_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.ExecuteUbergraph_UI_Component_PlayerHead
// 0x0020 (0x0020 - 0x0000)
struct UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead) == 0x000004, "Wrong alignment on UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead");
static_assert(sizeof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead) == 0x000020, "Wrong size on UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, EntryPoint) == 0x000000, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_bool_Variable) == 0x000004, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_byte_Variable) == 0x000005, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_byte_Variable_1) == 0x000006, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_bool_Variable_1) == 0x000007, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_byte_Variable_2) == 0x000008, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_bool_Variable_2) == 0x000009, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_byte_Variable_3) == 0x00000A, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, Temp_byte_Variable_4) == 0x00000B, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, K2Node_Select_Default) == 0x00001C, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, K2Node_Select_Default_1) == 0x00001D, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead, K2Node_Select_Default_2) == 0x00001E, "Member 'UI_Component_PlayerHead_C_ExecuteUbergraph_UI_Component_PlayerHead::K2Node_Select_Default_2' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerHead_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerHead_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_PlayerHead_C_PreConstruct");
static_assert(sizeof(UI_Component_PlayerHead_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_PlayerHead_C_PreConstruct");
static_assert(offsetof(UI_Component_PlayerHead_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_PlayerHead_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetSocialIcon
// 0x0060 (0x0060 - 0x0000)
struct UI_Component_PlayerHead_C_SetSocialIcon final
{
public:
	E_Type_Social                                 Social_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Social                                 Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Social                                 Temp_byte_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetSocialIcon) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_SetSocialIcon");
static_assert(sizeof(UI_Component_PlayerHead_C_SetSocialIcon) == 0x000060, "Wrong size on UI_Component_PlayerHead_C_SetSocialIcon");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Social_0) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Social_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_bool_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_byte_Variable) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_byte_Variable_2) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_byte_Variable_3) == 0x000005, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_byte_Variable_4) == 0x000006, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_object_Variable) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_object_Variable_1) == 0x000010, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, Temp_object_Variable_2) == 0x000018, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, K2Node_Select_Default) == 0x000020, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000030, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_MakeVector2D_ReturnValue) == 0x000034, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, K2Node_MakeStruct_Margin) == 0x000040, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, K2Node_Select_Default_1) == 0x000050, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, K2Node_Select_Default_2) == 0x000051, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetSocialIcon, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000058, "Member 'UI_Component_PlayerHead_C_SetSocialIcon::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetPlayerGender
// 0x0100 (0x0100 - 0x0000)
struct UI_Component_PlayerHead_C_SetPlayerGender final
{
public:
	E_Type_Gender                                 Gender_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Gender                                 Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Gender                                 Temp_byte_Variable_4;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Gender                                 Temp_byte_Variable_5;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Select_Default_1;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetPlayerGender) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_SetPlayerGender");
static_assert(sizeof(UI_Component_PlayerHead_C_SetPlayerGender) == 0x000100, "Wrong size on UI_Component_PlayerHead_C_SetPlayerGender");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Gender_0) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Gender_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_bool_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_bool_Variable_1) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_2) == 0x000005, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_3) == 0x000006, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_struct_Variable) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_struct_Variable_1) == 0x000018, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_struct_Variable_2) == 0x000028, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_struct_Variable_3) == 0x000038, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_4) == 0x000048, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_Select_Default) == 0x00004C, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_object_Variable) == 0x000060, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_object_Variable_1) == 0x000068, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_object_Variable_2) == 0x000070, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_object_Variable_3) == 0x000078, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_5) == 0x000080, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_Select_Default_1) == 0x000088, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, Temp_byte_Variable_6) == 0x000090, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_Select_Default_2) == 0x000091, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000098, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A0, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000A4, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A8, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_MakeVector2D_ReturnValue) == 0x0000B0, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_MakeStruct_Margin) == 0x0000B8, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0000C8, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0000D0, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000D4, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000DC, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_MakeStruct_Margin_1) == 0x0000E0, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000F0, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_Select_Default_3) == 0x0000F8, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetPlayerGender, K2Node_Select_Default_4) == 0x0000F9, "Member 'UI_Component_PlayerHead_C_SetPlayerGender::K2Node_Select_Default_4' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetEmptyState
// 0x0140 (0x0140 - 0x0000)
struct UI_Component_PlayerHead_C_SetEmptyState final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0030(0x0110)()
};
static_assert(alignof(UI_Component_PlayerHead_C_SetEmptyState) == 0x000010, "Wrong alignment on UI_Component_PlayerHead_C_SetEmptyState");
static_assert(sizeof(UI_Component_PlayerHead_C_SetEmptyState) == 0x000140, "Wrong size on UI_Component_PlayerHead_C_SetEmptyState");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, IsEmpty) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetEmptyState::IsEmpty' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable_1) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_bool_Variable) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable_2) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable_3) == 0x000005, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_bool_Variable_1) == 0x000006, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, K2Node_Select_Default) == 0x000007, "Member 'UI_Component_PlayerHead_C_SetEmptyState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable_4) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_byte_Variable_5) == 0x000009, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, Temp_bool_Variable_2) == 0x00000A, "Member 'UI_Component_PlayerHead_C_SetEmptyState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, K2Node_Select_Default_1) == 0x00000B, "Member 'UI_Component_PlayerHead_C_SetEmptyState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, K2Node_Select_Default_2) == 0x00000C, "Member 'UI_Component_PlayerHead_C_SetEmptyState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'UI_Component_PlayerHead_C_SetEmptyState::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'UI_Component_PlayerHead_C_SetEmptyState::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'UI_Component_PlayerHead_C_SetEmptyState::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, CallFunc_MakeVector2D_ReturnValue) == 0x00001C, "Member 'UI_Component_PlayerHead_C_SetEmptyState::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetEmptyState, K2Node_MakeStruct_SlateBrush) == 0x000030, "Member 'UI_Component_PlayerHead_C_SetEmptyState::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetAvatarIcon
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_PlayerHead_C_SetAvatarIcon final
{
public:
	int32                                         InAvatarID;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetAvatarIconWithID_OutAvatar;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetAvatarIcon) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_SetAvatarIcon");
static_assert(sizeof(UI_Component_PlayerHead_C_SetAvatarIcon) == 0x000010, "Wrong size on UI_Component_PlayerHead_C_SetAvatarIcon");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarIcon, InAvatarID) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetAvatarIcon::InAvatarID' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarIcon, CallFunc_GetAvatarIconWithID_OutAvatar) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetAvatarIcon::CallFunc_GetAvatarIconWithID_OutAvatar' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetAvatarState
// 0x0005 (0x0005 - 0x0000)
struct UI_Component_PlayerHead_C_SetAvatarState final
{
public:
	bool                                          IsCollapsed;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetAvatarState) == 0x000001, "Wrong alignment on UI_Component_PlayerHead_C_SetAvatarState");
static_assert(sizeof(UI_Component_PlayerHead_C_SetAvatarState) == 0x000005, "Wrong size on UI_Component_PlayerHead_C_SetAvatarState");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarState, IsCollapsed) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetAvatarState::IsCollapsed' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarState, Temp_bool_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetAvatarState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarState, Temp_byte_Variable) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetAvatarState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarState, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetAvatarState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarState, K2Node_Select_Default) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetAvatarState::K2Node_Select_Default' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.OnTouchMoved
// 0x0218 (0x0218 - 0x0000)
struct UI_Component_PlayerHead_C_OnTouchMoved final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          InTouchEvent;                                      // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0160(0x00B8)()
};
static_assert(alignof(UI_Component_PlayerHead_C_OnTouchMoved) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_OnTouchMoved");
static_assert(sizeof(UI_Component_PlayerHead_C_OnTouchMoved) == 0x000218, "Wrong size on UI_Component_PlayerHead_C_OnTouchMoved");
static_assert(offsetof(UI_Component_PlayerHead_C_OnTouchMoved, MyGeometry) == 0x000000, "Member 'UI_Component_PlayerHead_C_OnTouchMoved::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_OnTouchMoved, InTouchEvent) == 0x000038, "Member 'UI_Component_PlayerHead_C_OnTouchMoved::InTouchEvent' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_OnTouchMoved, ReturnValue) == 0x0000A8, "Member 'UI_Component_PlayerHead_C_OnTouchMoved::ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_OnTouchMoved, CallFunc_Unhandled_ReturnValue) == 0x000160, "Member 'UI_Component_PlayerHead_C_OnTouchMoved::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetStateHD
// 0x0006 (0x0006 - 0x0000)
struct UI_Component_PlayerHead_C_SetStateHD final
{
public:
	uint8                                         StateHD_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetStateHD) == 0x000001, "Wrong alignment on UI_Component_PlayerHead_C_SetStateHD");
static_assert(sizeof(UI_Component_PlayerHead_C_SetStateHD) == 0x000006, "Wrong size on UI_Component_PlayerHead_C_SetStateHD");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, StateHD_0) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetStateHD::StateHD_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, Temp_byte_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetStateHD::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, Temp_byte_Variable_1) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetStateHD::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, Temp_byte_Variable_2) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetStateHD::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, Temp_byte_Variable_3) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetStateHD::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetStateHD, K2Node_Select_Default) == 0x000005, "Member 'UI_Component_PlayerHead_C_SetStateHD::K2Node_Select_Default' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetAvatar
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_PlayerHead_C_SetAvatar final
{
public:
	int32                                         AvatarID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvatarURL;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetAvatar) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_SetAvatar");
static_assert(sizeof(UI_Component_PlayerHead_C_SetAvatar) == 0x000018, "Wrong size on UI_Component_PlayerHead_C_SetAvatar");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatar, AvatarID) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetAvatar::AvatarID' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatar, AvatarURL) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetAvatar::AvatarURL' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetAvatarSize
// 0x001C (0x001C - 0x0000)
struct UI_Component_PlayerHead_C_SetAvatarSize final
{
public:
	bool                                          IsCustom_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetAvatarSize) == 0x000004, "Wrong alignment on UI_Component_PlayerHead_C_SetAvatarSize");
static_assert(sizeof(UI_Component_PlayerHead_C_SetAvatarSize) == 0x00001C, "Wrong size on UI_Component_PlayerHead_C_SetAvatarSize");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarSize, IsCustom_0) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetAvatarSize::IsCustom_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarSize, Temp_bool_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetAvatarSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarSize, Temp_struct_Variable) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetAvatarSize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarSize, Temp_struct_Variable_1) == 0x00000C, "Member 'UI_Component_PlayerHead_C_SetAvatarSize::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarSize, K2Node_Select_Default) == 0x000014, "Member 'UI_Component_PlayerHead_C_SetAvatarSize::K2Node_Select_Default' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.RefreshByPS
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_PlayerHead_C_RefreshByPS final
{
public:
	class ASolarPlayerState*                      PS;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWithoutGender;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerHead_C_RefreshByPS) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_RefreshByPS");
static_assert(sizeof(UI_Component_PlayerHead_C_RefreshByPS) == 0x000010, "Wrong size on UI_Component_PlayerHead_C_RefreshByPS");
static_assert(offsetof(UI_Component_PlayerHead_C_RefreshByPS, PS) == 0x000000, "Member 'UI_Component_PlayerHead_C_RefreshByPS::PS' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_RefreshByPS, bWithoutGender) == 0x000008, "Member 'UI_Component_PlayerHead_C_RefreshByPS::bWithoutGender' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.ForceShowFrame
// 0x0004 (0x0004 - 0x0000)
struct UI_Component_PlayerHead_C_ForceShowFrame final
{
public:
	int32                                         FrameID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_ForceShowFrame) == 0x000004, "Wrong alignment on UI_Component_PlayerHead_C_ForceShowFrame");
static_assert(sizeof(UI_Component_PlayerHead_C_ForceShowFrame) == 0x000004, "Wrong size on UI_Component_PlayerHead_C_ForceShowFrame");
static_assert(offsetof(UI_Component_PlayerHead_C_ForceShowFrame, FrameID) == 0x000000, "Member 'UI_Component_PlayerHead_C_ForceShowFrame::FrameID' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetBlackFrame
// 0x0005 (0x0005 - 0x0000)
struct UI_Component_PlayerHead_C_SetBlackFrame final
{
public:
	bool                                          IsBlackFrame_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetBlackFrame) == 0x000001, "Wrong alignment on UI_Component_PlayerHead_C_SetBlackFrame");
static_assert(sizeof(UI_Component_PlayerHead_C_SetBlackFrame) == 0x000005, "Wrong size on UI_Component_PlayerHead_C_SetBlackFrame");
static_assert(offsetof(UI_Component_PlayerHead_C_SetBlackFrame, IsBlackFrame_0) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetBlackFrame::IsBlackFrame_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetBlackFrame, Temp_bool_Variable) == 0x000001, "Member 'UI_Component_PlayerHead_C_SetBlackFrame::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetBlackFrame, Temp_byte_Variable) == 0x000002, "Member 'UI_Component_PlayerHead_C_SetBlackFrame::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetBlackFrame, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Component_PlayerHead_C_SetBlackFrame::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetBlackFrame, K2Node_Select_Default) == 0x000004, "Member 'UI_Component_PlayerHead_C_SetBlackFrame::K2Node_Select_Default' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.ForceShowFrameCopy
// 0x0004 (0x0004 - 0x0000)
struct UI_Component_PlayerHead_C_ForceShowFrameCopy final
{
public:
	int32                                         FrameID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_ForceShowFrameCopy) == 0x000004, "Wrong alignment on UI_Component_PlayerHead_C_ForceShowFrameCopy");
static_assert(sizeof(UI_Component_PlayerHead_C_ForceShowFrameCopy) == 0x000004, "Wrong size on UI_Component_PlayerHead_C_ForceShowFrameCopy");
static_assert(offsetof(UI_Component_PlayerHead_C_ForceShowFrameCopy, FrameID) == 0x000000, "Member 'UI_Component_PlayerHead_C_ForceShowFrameCopy::FrameID' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.SetAvatarCopy
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_PlayerHead_C_SetAvatarCopy final
{
public:
	int32                                         AvatarID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvatarURL;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_SetAvatarCopy) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_SetAvatarCopy");
static_assert(sizeof(UI_Component_PlayerHead_C_SetAvatarCopy) == 0x000018, "Wrong size on UI_Component_PlayerHead_C_SetAvatarCopy");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarCopy, AvatarID) == 0x000000, "Member 'UI_Component_PlayerHead_C_SetAvatarCopy::AvatarID' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_SetAvatarCopy, AvatarURL) == 0x000008, "Member 'UI_Component_PlayerHead_C_SetAvatarCopy::AvatarURL' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.RefreshByPSCopy
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_PlayerHead_C_RefreshByPSCopy final
{
public:
	class ASolarPlayerState*                      PS;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWithoutGender;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerHead_C_RefreshByPSCopy) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_RefreshByPSCopy");
static_assert(sizeof(UI_Component_PlayerHead_C_RefreshByPSCopy) == 0x000010, "Wrong size on UI_Component_PlayerHead_C_RefreshByPSCopy");
static_assert(offsetof(UI_Component_PlayerHead_C_RefreshByPSCopy, PS) == 0x000000, "Member 'UI_Component_PlayerHead_C_RefreshByPSCopy::PS' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerHead_C_RefreshByPSCopy, bWithoutGender) == 0x000008, "Member 'UI_Component_PlayerHead_C_RefreshByPSCopy::bWithoutGender' has a wrong offset!");

// Function UI_Component_PlayerHead.UI_Component_PlayerHead_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_PlayerHead_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerHead_C_GetModuleName) == 0x000008, "Wrong alignment on UI_Component_PlayerHead_C_GetModuleName");
static_assert(sizeof(UI_Component_PlayerHead_C_GetModuleName) == 0x000010, "Wrong size on UI_Component_PlayerHead_C_GetModuleName");
static_assert(offsetof(UI_Component_PlayerHead_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_Component_PlayerHead_C_GetModuleName::ReturnValue' has a wrong offset!");

}

