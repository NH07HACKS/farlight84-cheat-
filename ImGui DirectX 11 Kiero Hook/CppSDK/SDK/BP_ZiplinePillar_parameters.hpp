#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplinePillar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CalcAndSetExtent
// 0x019C (0x019C - 0x0000)
struct BP_ZiplinePillar_C_CalcAndSetExtent final
{
public:
	float                                         HorzExtentLength;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VertExtentLength;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempHorzExtentScale;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempVertExtentScale;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VertExtentScale;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorzExtentScale;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcSuitableScale_Scale;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0064(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplinePillar_C_CalcAndSetExtent) == 0x000004, "Wrong alignment on BP_ZiplinePillar_C_CalcAndSetExtent");
static_assert(sizeof(BP_ZiplinePillar_C_CalcAndSetExtent) == 0x00019C, "Wrong size on BP_ZiplinePillar_C_CalcAndSetExtent");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, HorzExtentLength) == 0x000000, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::HorzExtentLength' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, VertExtentLength) == 0x000004, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::VertExtentLength' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, TempHorzExtentScale) == 0x000008, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::TempHorzExtentScale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, TempVertExtentScale) == 0x00000C, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::TempVertExtentScale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, VertExtentScale) == 0x000010, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::VertExtentScale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, HorzExtentScale) == 0x000014, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::HorzExtentScale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, Scale) == 0x000018, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::Scale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_CalcSuitableScale_Scale) == 0x00001C, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_CalcSuitableScale_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_FMax_ReturnValue) == 0x000034, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000038, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_MakeVector_ReturnValue_1) == 0x00003C, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_FMax_ReturnValue_1) == 0x00004C, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_MakeVector_ReturnValue_2) == 0x000050, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000060, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000064, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_FMin_ReturnValue) == 0x0000EC, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000F0, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_MakeVector_ReturnValue_3) == 0x0000F4, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000100, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_FMax_ReturnValue_2) == 0x000104, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000108, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcAndSetExtent, CallFunc_MakeVector_ReturnValue_4) == 0x000190, "Member 'BP_ZiplinePillar_C_CalcAndSetExtent::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CalcSuitableScale
// 0x0034 (0x0034 - 0x0000)
struct BP_ZiplinePillar_C_CalcSuitableScale final
{
public:
	float                                         Horz;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vert;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempScale;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplinePillar_C_CalcSuitableScale) == 0x000004, "Wrong alignment on BP_ZiplinePillar_C_CalcSuitableScale");
static_assert(sizeof(BP_ZiplinePillar_C_CalcSuitableScale) == 0x000034, "Wrong size on BP_ZiplinePillar_C_CalcSuitableScale");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, Horz) == 0x000000, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::Horz' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, Vert) == 0x000004, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::Vert' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, Scale) == 0x000008, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::Scale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, TempScale) == 0x00000C, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::TempScale' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_GetFloatValue_ReturnValue) == 0x000020, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_GetFloatValue_ReturnValue_1) == 0x000024, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_FMin_ReturnValue) == 0x00002C, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CalcSuitableScale, CallFunc_FMin_ReturnValue_1) == 0x000030, "Member 'BP_ZiplinePillar_C_CalcSuitableScale::CallFunc_FMin_ReturnValue_1' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransform
// 0x0610 (0x0610 - 0x0000)
struct BP_ZiplinePillar_C_SetPillarTransform final
{
public:
	bool                                          bForceNomal;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorzExtent;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TarRot;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TarLoc;                                            // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZipRight;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZipForward;                                        // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZipPointLoc;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PillarForward;                                     // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PillarLoc;                                         // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0060(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_2;            // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_3;            // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegAcos_ReturnValue_1;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_4;            // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_5;            // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_6;            // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue_2;                    // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_7;            // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_3;           // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue_3;                    // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue_1;         // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue_1;                    // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_5;      // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue_2;         // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_8;            // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_9;            // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue;      // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_10;           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_4;           // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue_3;         // 0x02FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue_4;                    // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_5;                        // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_6;      // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeXY_ReturnValue_2;                    // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue_4;         // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_2;       // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0350(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEndPointLocation_EndPointLoc;          // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEndPointLocation_EndPointDir;          // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue_5;         // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SegmentIntersectionWithSpline_OutIntersection; // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SegmentIntersectionWithSpline_OutTangent; // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SegmentIntersectionWithSpline_ReturnValue; // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A6[0x2];                                      // 0x03A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_11;           // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x03B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x03C0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x03D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45B[0x1];                                      // 0x045B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0488(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x04A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x04C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x04CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_4; // 0x04D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0xC];                                      // 0x04E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0520(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_7;      // 0x05A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x3];                                      // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Point_Location_CorrectedLoc;          // 0x05CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZiplineType                                  CallFunc_Get_Point_Location_Zipline_Type;          // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Get_Point_Location_HorzDir;               // 0x05DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x3];                                      // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x05EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplinePillar_C_SetPillarTransform) == 0x000010, "Wrong alignment on BP_ZiplinePillar_C_SetPillarTransform");
static_assert(sizeof(BP_ZiplinePillar_C_SetPillarTransform) == 0x000610, "Wrong size on BP_ZiplinePillar_C_SetPillarTransform");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, bForceNomal) == 0x000000, "Member 'BP_ZiplinePillar_C_SetPillarTransform::bForceNomal' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, bSuccess) == 0x000001, "Member 'BP_ZiplinePillar_C_SetPillarTransform::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, HorzExtent) == 0x000004, "Member 'BP_ZiplinePillar_C_SetPillarTransform::HorzExtent' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, TarRot) == 0x000008, "Member 'BP_ZiplinePillar_C_SetPillarTransform::TarRot' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, TarLoc) == 0x000014, "Member 'BP_ZiplinePillar_C_SetPillarTransform::TarLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, ZipRight) == 0x000020, "Member 'BP_ZiplinePillar_C_SetPillarTransform::ZipRight' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, ZipForward) == 0x00002C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::ZipForward' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, ZipPointLoc) == 0x000038, "Member 'BP_ZiplinePillar_C_SetPillarTransform::ZipPointLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, PillarForward) == 0x000044, "Member 'BP_ZiplinePillar_C_SetPillarTransform::PillarForward' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, PillarLoc) == 0x000050, "Member 'BP_ZiplinePillar_C_SetPillarTransform::PillarLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, Temp_object_Variable) == 0x000060, "Member 'BP_ZiplinePillar_C_SetPillarTransform::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000070, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Array_Find_ReturnValue) == 0x00007C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000084, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000088, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue) == 0x000094, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_X) == 0x0000A0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Y) == 0x0000A4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Z) == 0x0000A8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_X_1) == 0x0000AC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Y_1) == 0x0000B0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Z_1) == 0x0000B4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeVector_ReturnValue_1) == 0x0000C4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, Temp_bool_Variable) == 0x0000D0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x0000E0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000EC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_DegAcos_ReturnValue) == 0x0000FC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_2) == 0x000100, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue) == 0x00010C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_3) == 0x000114, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue_1) == 0x000120, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000124, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_DegAcos_ReturnValue_1) == 0x00012C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_DegAcos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue_2) == 0x000130, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue) == 0x000134, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000140, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_SelectVector_ReturnValue) == 0x000144, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeRotator_ReturnValue) == 0x000150, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00015C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x000160, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeRotator_ReturnValue_1) == 0x00016C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_4) == 0x000178, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x000184, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_5) == 0x000190, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00019C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_6) == 0x0001A8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0001B4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x0001C0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_VSizeXY_ReturnValue) == 0x0001C4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_DegAcos_ReturnValue_2) == 0x0001C8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_DegAcos_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_7) == 0x0001CC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue_3) == 0x0001D8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Dot_VectorVector_ReturnValue_3) == 0x0001DC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Dot_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_DegAcos_ReturnValue_3) == 0x0001E0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_DegAcos_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue_4) == 0x0001E4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_FClamp_ReturnValue) == 0x0001EC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_SelectVector_ReturnValue_1) == 0x0001F0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue_1) == 0x0001FC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Normal_ReturnValue) == 0x000208, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000214, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000220, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x00022C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_X_2) == 0x000238, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Y_2) == 0x00023C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Z_2) == 0x000240, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_X_3) == 0x000244, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Y_3) == 0x000248, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Z_3) == 0x00024C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeVector_ReturnValue_2) == 0x000250, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeVector_ReturnValue_3) == 0x00025C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x000268, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_VSizeXY_ReturnValue_1) == 0x000274, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_VSizeXY_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_FClamp_ReturnValue_1) == 0x000278, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00027C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000280, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_5) == 0x00028C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue_2) == 0x000298, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_8) == 0x0002A4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0002B0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_9) == 0x0002BC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002C8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_ProjectVectorOnToVector_ReturnValue) == 0x0002D4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_ProjectVectorOnToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0002E0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_10) == 0x0002EC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Dot_VectorVector_ReturnValue_4) == 0x0002F8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Dot_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue_3) == 0x0002FC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_DegAcos_ReturnValue_4) == 0x000308, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_DegAcos_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Abs_ReturnValue_5) == 0x00030C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_6) == 0x000310, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00031C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_VSizeXY_ReturnValue_2) == 0x000320, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_VSizeXY_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, K2Node_Select_Default) == 0x000324, "Member 'BP_ZiplinePillar_C_SetPillarTransform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue_4) == 0x000330, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Conv_VectorToRotator_ReturnValue_2) == 0x00033C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Conv_VectorToRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000348, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_FClamp_ReturnValue_2) == 0x00034C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000350, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00035C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GetEndPointLocation_EndPointLoc) == 0x000368, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GetEndPointLocation_EndPointLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GetEndPointLocation_EndPointDir) == 0x000374, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GetEndPointLocation_EndPointDir' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Multiply_VectorInt_ReturnValue_5) == 0x000380, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Multiply_VectorInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_SegmentIntersectionWithSpline_OutIntersection) == 0x00038C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_SegmentIntersectionWithSpline_OutIntersection' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_SegmentIntersectionWithSpline_OutTangent) == 0x000398, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_SegmentIntersectionWithSpline_OutTangent' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_SegmentIntersectionWithSpline_ReturnValue) == 0x0003A4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_SegmentIntersectionWithSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_IsValid_ReturnValue) == 0x0003A5, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Vector_Normal2D_ReturnValue_11) == 0x0003A8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Vector_Normal2D_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0003B4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, K2Node_MakeArray_Array) == 0x0003C0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0003D0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000458, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_bBlockingHit) == 0x000459, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_bInitialOverlap) == 0x00045A, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_Time) == 0x00045C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_Distance) == 0x000460, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_Location) == 0x000464, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_ImpactPoint) == 0x000470, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_Normal) == 0x00047C, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_ImpactNormal) == 0x000488, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_PhysMat) == 0x000498, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_HitActor) == 0x0004A0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_HitComponent) == 0x0004A8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_HitBoneName) == 0x0004B0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_HitItem) == 0x0004B8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_FaceIndex) == 0x0004BC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_TraceStart) == 0x0004C0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakHitResult_TraceEnd) == 0x0004CC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue_4) == 0x0004D8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_MakeTransform_ReturnValue) == 0x0004F0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000520, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Subtract_VectorVector_ReturnValue_7) == 0x0005A8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Subtract_VectorVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_X_4) == 0x0005B4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Y_4) == 0x0005B8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_BreakVector_Z_4) == 0x0005BC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_IsValid_ReturnValue_1) == 0x0005C0, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_FClamp_ReturnValue_3) == 0x0005C4, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Add_FloatFloat_ReturnValue) == 0x0005C8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Get_Point_Location_CorrectedLoc) == 0x0005CC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Get_Point_Location_CorrectedLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Get_Point_Location_Zipline_Type) == 0x0005D8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Get_Point_Location_Zipline_Type' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_Get_Point_Location_HorzDir) == 0x0005DC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_Get_Point_Location_HorzDir' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0005E8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0005EC, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransform, CallFunc_GetForwardVector_ReturnValue) == 0x0005F8, "Member 'BP_ZiplinePillar_C_SetPillarTransform::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransformForEditor
// 0x0001 (0x0001 - 0x0000)
struct BP_ZiplinePillar_C_SetPillarTransformForEditor final
{
public:
	bool                                          CallFunc_SetPillarTransform_bSuccess;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplinePillar_C_SetPillarTransformForEditor) == 0x000001, "Wrong alignment on BP_ZiplinePillar_C_SetPillarTransformForEditor");
static_assert(sizeof(BP_ZiplinePillar_C_SetPillarTransformForEditor) == 0x000001, "Wrong size on BP_ZiplinePillar_C_SetPillarTransformForEditor");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransformForEditor, CallFunc_SetPillarTransform_bSuccess) == 0x000000, "Member 'BP_ZiplinePillar_C_SetPillarTransformForEditor::CallFunc_SetPillarTransform_bSuccess' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.Set Linked Zip and Refresh
// 0x0010 (0x0010 - 0x0000)
struct BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh final
{
public:
	class ABP_ZiplineBase_C*                      LinkedZip_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPillarTransform_bSuccess;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh) == 0x000008, "Wrong alignment on BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh");
static_assert(sizeof(BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh) == 0x000010, "Wrong size on BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh, LinkedZip_0) == 0x000000, "Member 'BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh::LinkedZip_0' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh, CallFunc_SetPillarTransform_bSuccess) == 0x000008, "Member 'BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh::CallFunc_SetPillarTransform_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransformWithCustomRotForEditor
// 0x0001 (0x0001 - 0x0000)
struct BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor final
{
public:
	bool                                          CallFunc_SetPillarTransform_bSuccess;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor) == 0x000001, "Wrong alignment on BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor");
static_assert(sizeof(BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor) == 0x000001, "Wrong size on BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor");
static_assert(offsetof(BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor, CallFunc_SetPillarTransform_bSuccess) == 0x000000, "Member 'BP_ZiplinePillar_C_SetPillarTransformWithCustomRotForEditor::CallFunc_SetPillarTransform_bSuccess' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.Set Linked Rail and Refresh
// 0x0010 (0x0010 - 0x0000)
struct BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh final
{
public:
	class ABP_SlidingRailBase_C*                  LinkedZip_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPillarTransform_bSuccess;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh) == 0x000008, "Wrong alignment on BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh");
static_assert(sizeof(BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh) == 0x000010, "Wrong size on BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh, LinkedZip_0) == 0x000000, "Member 'BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh::LinkedZip_0' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh, CallFunc_SetPillarTransform_bSuccess) == 0x000008, "Member 'BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh::CallFunc_SetPillarTransform_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetConnectorPitch
// 0x0398 (0x0398 - 0x0000)
struct BP_ZiplinePillar_C_SetConnectorPitch final
{
public:
	struct FVector                                PillarLoc;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PillarForward;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEndPointLocation_EndPointLoc;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEndPointLocation_EndPointDir;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_2;            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x009C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_3;            // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_1;             // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_4;            // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue_1;                    // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_5;            // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue_1;                    // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_6;            // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Yaw;                // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Pitch;              // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_2;         // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x02D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_5;                // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x02F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplinePillar_C_SetConnectorPitch) == 0x000008, "Wrong alignment on BP_ZiplinePillar_C_SetConnectorPitch");
static_assert(sizeof(BP_ZiplinePillar_C_SetConnectorPitch) == 0x000398, "Wrong size on BP_ZiplinePillar_C_SetConnectorPitch");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, PillarLoc) == 0x000000, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::PillarLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, PillarForward) == 0x00000C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::PillarForward' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, Temp_bool_Variable) == 0x000018, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetRightVector_ReturnValue) == 0x00001C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue) == 0x000028, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetEndPointLocation_EndPointLoc) == 0x000034, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetEndPointLocation_EndPointLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetEndPointLocation_EndPointDir) == 0x000040, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetEndPointLocation_EndPointDir' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_MakeRotator_ReturnValue) == 0x00004C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x000058, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_2) == 0x000064, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Dot_VectorVector_ReturnValue) == 0x000070, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Cross_VectorVector_ReturnValue) == 0x000074, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_DegAcos_ReturnValue) == 0x000080, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_X) == 0x000084, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Y) == 0x000088, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Z) == 0x00008C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000090, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Less_FloatFloat_ReturnValue) == 0x000094, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue) == 0x000098, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00009C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_MakeRotator_ReturnValue_1) == 0x000124, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000130, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_3) == 0x0001B8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetRightVector_ReturnValue_1) == 0x0001C4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_4) == 0x0001D0, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001DC, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0001E8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001F4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000200, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_VSizeXY_ReturnValue) == 0x00020C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_VSizeXY_ReturnValue_1) == 0x000210, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_VSizeXY_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000214, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000220, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Multiply_VectorInt_ReturnValue) == 0x000224, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, K2Node_Select_Default) == 0x000230, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_IsValid_ReturnValue) == 0x00023C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_5) == 0x000240, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x00024C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_X_1) == 0x000250, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Y_1) == 0x000254, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Z_1) == 0x000258, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_DegAcos_ReturnValue_1) == 0x00025C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_DegAcos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000260, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000264, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Vector_Normal2D_ReturnValue_6) == 0x000268, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Vector_Normal2D_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetYawPitchFromVector_Yaw) == 0x000274, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetYawPitchFromVector_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetYawPitchFromVector_Pitch) == 0x000278, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetYawPitchFromVector_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x00027C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x000288, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_X_2) == 0x00028C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Y_2) == 0x000290, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Z_2) == 0x000294, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Cross_VectorVector_ReturnValue_2) == 0x000298, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Cross_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0002A4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_X_3) == 0x0002A8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Y_3) == 0x0002AC, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_BreakVector_Z_3) == 0x0002B0, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue_1) == 0x0002B4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x0002B8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002BC, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue_2) == 0x0002C0, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue_3) == 0x0002C4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue_4) == 0x0002C8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Conv_FloatToString_ReturnValue) == 0x0002D0, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0002E0, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_SelectFloat_ReturnValue_5) == 0x0002E4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_SelectFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_MakeRotator_ReturnValue_2) == 0x0002E8, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x0002F4, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00037C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000380, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_SetConnectorPitch, CallFunc_GetForwardVector_ReturnValue) == 0x00038C, "Member 'BP_ZiplinePillar_C_SetConnectorPitch::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CheckZipReference
// 0x0118 (0x0118 - 0x0000)
struct BP_ZiplinePillar_C_CheckZipReference final
{
public:
	bool                                          bHasValidReferences;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplinePillar_C_CheckZipReference) == 0x000008, "Wrong alignment on BP_ZiplinePillar_C_CheckZipReference");
static_assert(sizeof(BP_ZiplinePillar_C_CheckZipReference) == 0x000118, "Wrong size on BP_ZiplinePillar_C_CheckZipReference");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, bHasValidReferences) == 0x000000, "Member 'BP_ZiplinePillar_C_CheckZipReference::bHasValidReferences' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_ZiplinePillar_C_CheckZipReference::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_ZiplinePillar_C_CheckZipReference::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_ZiplinePillar_C_CheckZipReference::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'BP_ZiplinePillar_C_CheckZipReference::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_GetObjectName_ReturnValue) == 0x000028, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Conv_StringToText_ReturnValue) == 0x000040, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'BP_ZiplinePillar_C_CheckZipReference::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, K2Node_MakeArray_Array) == 0x000098, "Member 'BP_ZiplinePillar_C_CheckZipReference::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Format_ReturnValue) == 0x0000B0, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_IsValid_ReturnValue_1) == 0x0000C8, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000E4, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_AddUnique_ReturnValue) == 0x0000E8, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Max_ReturnValue) == 0x0000EC, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_IsValid_ReturnValue_2) == 0x0000F0, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_Get_Item_1) == 0x0000F8, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_IsValid_ReturnValue_3) == 0x000100, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_Length_ReturnValue_1) == 0x000104, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000108, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Max_ReturnValue_1) == 0x00010C, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplinePillar_C_CheckZipReference, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000110, "Member 'BP_ZiplinePillar_C_CheckZipReference::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");

}

