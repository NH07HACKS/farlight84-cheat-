#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInfoComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Calculate Required Parameters
// 0x0068 (0x0068 - 0x0000)
struct BP_MapInfoComponent_C_Calculate_Required_Parameters final
{
public:
	TArray<float>                                 RadiusArr;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxOffset;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GoToTheCentreRadius;                               // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_4;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_5;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_6;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Calculate_Required_Parameters) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Calculate_Required_Parameters");
static_assert(sizeof(BP_MapInfoComponent_C_Calculate_Required_Parameters) == 0x000068, "Wrong size on BP_MapInfoComponent_C_Calculate_Required_Parameters");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, RadiusArr) == 0x000000, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::RadiusArr' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, Index_0) == 0x000010, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::Index_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, Radius) == 0x000014, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::Radius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, MaxOffset) == 0x000018, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::MaxOffset' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, GoToTheCentreRadius) == 0x00001C, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::GoToTheCentreRadius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_LastIndex_ReturnValue) == 0x000028, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Add_IntInt_ReturnValue_2) == 0x00002C, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_2) == 0x00003C, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_3) == 0x000044, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_4) == 0x000050, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_5) == 0x000054, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000058, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_Array_Get_Item_6) == 0x00005C, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Required_Parameters, CallFunc_FMin_ReturnValue) == 0x000060, "Member 'BP_MapInfoComponent_C_Calculate_Required_Parameters::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Random Get Fake Bomb Point
// 0x00C0 (0x00C0 - 0x0000)
struct BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue;                // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point");
static_assert(sizeof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point) == 0x0000C0, "Wrong size on BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, Key) == 0x000000, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::Key' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, Pos) == 0x000004, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::Pos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, Success) == 0x000010, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::Success' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc__s_GetPlayerManager_ReturnValue) == 0x000018, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc__s_GetPlayerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_GetPlayerList_ReturnValue) == 0x000028, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_GetSolarCharacter_ReturnValue) == 0x000048, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000054, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_RandomUnitVector_ReturnValue) == 0x000060, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x00006C, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Map_Find_Value) == 0x000074, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Map_Find_ReturnValue) == 0x00007C, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Normal2D_ReturnValue) == 0x000080, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000088, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000094, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_BreakVector2D_X) == 0x00009C, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_BreakVector2D_Y) == 0x0000A0, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000A4, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetFakeBombPointRangeArrr
// 0x0050 (0x0050 - 0x0000)
struct BP_MapInfoComponent_C_SetFakeBombPointRangeArrr final
{
public:
	TMap<int32, struct FVector2D>                 FakeBombPointRangeArr_0;                           // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_MapInfoComponent_C_SetFakeBombPointRangeArrr) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_SetFakeBombPointRangeArrr");
static_assert(sizeof(BP_MapInfoComponent_C_SetFakeBombPointRangeArrr) == 0x000050, "Wrong size on BP_MapInfoComponent_C_SetFakeBombPointRangeArrr");
static_assert(offsetof(BP_MapInfoComponent_C_SetFakeBombPointRangeArrr, FakeBombPointRangeArr_0) == 0x000000, "Member 'BP_MapInfoComponent_C_SetFakeBombPointRangeArrr::FakeBombPointRangeArr_0' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetFakePointRnageArr
// 0x0050 (0x0050 - 0x0000)
struct BP_MapInfoComponent_C_SetFakePointRnageArr final
{
public:
	TMap<int32, struct FVector2D>                 FakePointRnageArr;                                 // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_MapInfoComponent_C_SetFakePointRnageArr) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_SetFakePointRnageArr");
static_assert(sizeof(BP_MapInfoComponent_C_SetFakePointRnageArr) == 0x000050, "Wrong size on BP_MapInfoComponent_C_SetFakePointRnageArr");
static_assert(offsetof(BP_MapInfoComponent_C_SetFakePointRnageArr, FakePointRnageArr) == 0x000000, "Member 'BP_MapInfoComponent_C_SetFakePointRnageArr::FakePointRnageArr' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Get Safe Area Centers Len
// 0x0008 (0x0008 - 0x0000)
struct BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len final
{
public:
	int32                                         Len;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len) == 0x000004, "Wrong alignment on BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len");
static_assert(sizeof(BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len) == 0x000008, "Wrong size on BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len, Len) == 0x000000, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len::Len' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.CalculateFakePoint
// 0x014C (0x014C - 0x0000)
struct BP_MapInfoComponent_C_CalculateFakePoint final
{
public:
	struct FVector                                Centre;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallRadiu;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LargeRadiu;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pos;                                               // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempPos;                                           // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_JudgeBoundary_DontInBoundary;             // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_4;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JudgeBoundary_DontInBoundary_1;           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_CalculateFakePoint) == 0x000004, "Wrong alignment on BP_MapInfoComponent_C_CalculateFakePoint");
static_assert(sizeof(BP_MapInfoComponent_C_CalculateFakePoint) == 0x00014C, "Wrong size on BP_MapInfoComponent_C_CalculateFakePoint");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, Centre) == 0x000000, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::Centre' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, SmallRadiu) == 0x00000C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::SmallRadiu' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, LargeRadiu) == 0x000010, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::LargeRadiu' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, Index_0) == 0x000014, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::Index_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, Pos) == 0x000018, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::Pos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, TempPos) == 0x000024, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::TempPos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Max_ReturnValue) == 0x000038, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_RandomFloatInRange_ReturnValue) == 0x00003C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, Temp_bool_Variable) == 0x000040, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, Temp_int_Variable) == 0x000044, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Not_PreBool_ReturnValue) == 0x00004C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_Y) == 0x000054, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_MakeVector_ReturnValue) == 0x00005C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Get_Item) == 0x00006C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_X_1) == 0x000070, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_Y_1) == 0x000074, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_MakeVector_ReturnValue_1) == 0x00007C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00008C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Get_Item_2) == 0x000098, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Normal_ReturnValue) == 0x00009C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x0000AC, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Abs_ReturnValue) == 0x0000B4, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_VSize2D_ReturnValue) == 0x0000B8, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_FTrunc_ReturnValue) == 0x0000BC, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Get_Item_3) == 0x0000C0, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_JudgeBoundary_DontInBoundary) == 0x0000C5, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_JudgeBoundary_DontInBoundary' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BooleanAND_ReturnValue) == 0x0000C6, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C8, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Get_Item_4) == 0x0000D0, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Multiply_VectorInt_ReturnValue) == 0x0000D4, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000F0, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_SelectFloat_ReturnValue) == 0x0000F4, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_JudgeBoundary_DontInBoundary_1) == 0x0000F8, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_JudgeBoundary_DontInBoundary_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000FC, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_FMin_ReturnValue) == 0x000100, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000104, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000108, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x00010C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_MakeVector2D_ReturnValue) == 0x000114, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_BooleanAND_ReturnValue_1) == 0x00011C, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Normal2D_ReturnValue) == 0x000120, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000128, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000134, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_CalculateFakePoint, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000140, "Member 'BP_MapInfoComponent_C_CalculateFakePoint::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Join Next
// 0x0148 (0x0148 - 0x0000)
struct BP_MapInfoComponent_C_Join_Next final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxOffset;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TargetArray;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	float                                         GoToTheCentreRadius;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddFlag;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0078(0x0050)(ConstParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Random_Selection_Add;                     // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Join_Next) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Join_Next");
static_assert(sizeof(BP_MapInfoComponent_C_Join_Next) == 0x000148, "Wrong size on BP_MapInfoComponent_C_Join_Next");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, Radius) == 0x000000, "Member 'BP_MapInfoComponent_C_Join_Next::Radius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, MaxOffset) == 0x000004, "Member 'BP_MapInfoComponent_C_Join_Next::MaxOffset' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, LastIndex) == 0x000008, "Member 'BP_MapInfoComponent_C_Join_Next::LastIndex' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, TargetArray) == 0x000010, "Member 'BP_MapInfoComponent_C_Join_Next::TargetArray' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, GoToTheCentreRadius) == 0x000020, "Member 'BP_MapInfoComponent_C_Join_Next::GoToTheCentreRadius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, AddFlag) == 0x000024, "Member 'BP_MapInfoComponent_C_Join_Next::AddFlag' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Array_LastIndex_ReturnValue) == 0x00002C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Divide_IntInt_ReturnValue) == 0x000030, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Array_Get_Item) == 0x000034, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Conv_IntToString_ReturnValue) == 0x000040, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_BreakVector_Y) == 0x000054, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_RandomFloatInRange_ReturnValue) == 0x00005C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, Temp_bool_Variable) == 0x000060, "Member 'BP_MapInfoComponent_C_Join_Next::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Conv_FloatToString_ReturnValue) == 0x000068, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, K2Node_MakeMap_Map) == 0x000078, "Member 'BP_MapInfoComponent_C_Join_Next::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Not_PreBool_ReturnValue) == 0x0000C8, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000CC, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000D0, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, Temp_int_Variable) == 0x0000D4, "Member 'BP_MapInfoComponent_C_Join_Next::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_MakeVector_ReturnValue) == 0x0000D8, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000E4, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E8, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Vector_Normal2D_ReturnValue) == 0x0000F4, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Add_IntInt_ReturnValue) == 0x000100, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000104, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_BooleanAND_ReturnValue) == 0x000105, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000108, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x00010C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000110, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00011C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000120, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_SelectFloat_ReturnValue) == 0x00012C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Random_Selection_Add) == 0x00013C, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Random_Selection_Add' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Join_Next, CallFunc_Array_Add_ReturnValue) == 0x000140, "Member 'BP_MapInfoComponent_C_Join_Next::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Random Selection
// 0x0070 (0x0070 - 0x0000)
struct BP_MapInfoComponent_C_Random_Selection final
{
public:
	float                                         TargetDisMax;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        TargetArray;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          NeedCheckBoundary;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Add;                                               // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JudgeBoundary_DontInBoundary;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Random_Selection) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Random_Selection");
static_assert(sizeof(BP_MapInfoComponent_C_Random_Selection) == 0x000070, "Wrong size on BP_MapInfoComponent_C_Random_Selection");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, TargetDisMax) == 0x000000, "Member 'BP_MapInfoComponent_C_Random_Selection::TargetDisMax' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, Radius) == 0x000004, "Member 'BP_MapInfoComponent_C_Random_Selection::Radius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, TargetArray) == 0x000008, "Member 'BP_MapInfoComponent_C_Random_Selection::TargetArray' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, NeedCheckBoundary) == 0x000018, "Member 'BP_MapInfoComponent_C_Random_Selection::NeedCheckBoundary' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, Add) == 0x000019, "Member 'BP_MapInfoComponent_C_Random_Selection::Add' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Array_LastIndex_ReturnValue) == 0x00001C, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000030, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000034, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00004C, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_MakeVector2D_ReturnValue) == 0x00005C, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_JudgeBoundary_DontInBoundary) == 0x000064, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_JudgeBoundary_DontInBoundary' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Random_Selection, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'BP_MapInfoComponent_C_Random_Selection::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.JudgeBoundary
// 0x0088 (0x0088 - 0x0000)
struct BP_MapInfoComponent_C_JudgeBoundary final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DontInBoundary;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NewLocalVar_0;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarMapManager*                       CallFunc__A_GetMapManager_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarMapManager*                       CallFunc__A_GetMapManager_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMapDarkDataWithVector_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPointInBox_ReturnValue;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapInfoComponent_C_JudgeBoundary) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_JudgeBoundary");
static_assert(sizeof(BP_MapInfoComponent_C_JudgeBoundary) == 0x000088, "Wrong size on BP_MapInfoComponent_C_JudgeBoundary");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, Pos) == 0x000000, "Member 'BP_MapInfoComponent_C_JudgeBoundary::Pos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, Radius) == 0x00000C, "Member 'BP_MapInfoComponent_C_JudgeBoundary::Radius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, DontInBoundary) == 0x000010, "Member 'BP_MapInfoComponent_C_JudgeBoundary::DontInBoundary' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, NewLocalVar_0) == 0x000014, "Member 'BP_MapInfoComponent_C_JudgeBoundary::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc__A_GetMapManager_ReturnValue) == 0x000030, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc__A_GetMapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc__A_GetMapManager_ReturnValue_1) == 0x000048, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc__A_GetMapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_CheckMapDarkDataWithVector_ReturnValue) == 0x000050, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_CheckMapDarkDataWithVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000054, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00005C, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_BreakVector2D_X) == 0x000064, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_MakeVector_ReturnValue_1) == 0x000074, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_JudgeBoundary, CallFunc_IsPointInBox_ReturnValue) == 0x000080, "Member 'BP_MapInfoComponent_C_JudgeBoundary::CallFunc_IsPointInBox_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Calculate Poison Circle Point Array
// 0x00C0 (0x00C0 - 0x0000)
struct BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array final
{
public:
	TArray<float>                                 RadiusArr;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                FirstPoint;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Failed;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TempAreaPosArray;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calculate_Required_Parameters_Radius;     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calculate_Required_Parameters_MaxOffset;  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PoisonCircleMarker_C*               CallFunc_GetActorOfClass_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarMapManager*                       CallFunc__A_GetMapManager_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomVectorFromMapDarkData_ReturnValue; // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array");
static_assert(sizeof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array) == 0x0000C0, "Wrong size on BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, RadiusArr) == 0x000000, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::RadiusArr' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, FirstPoint) == 0x000010, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::FirstPoint' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, Failed) == 0x00001C, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::Failed' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, Index_0) == 0x000020, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::Index_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, TempAreaPosArray) == 0x000028, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::TempAreaPosArray' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_LastIndex_ReturnValue) == 0x00003C, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, Temp_int_Variable) == 0x00004C, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000050, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Calculate_Required_Parameters_Radius) == 0x000058, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Calculate_Required_Parameters_Radius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Calculate_Required_Parameters_MaxOffset) == 0x00005C, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Calculate_Required_Parameters_MaxOffset' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius) == 0x000060, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000064, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000065, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_GetActorOfClass_ReturnValue) == 0x000070, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00007C, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_Add_ReturnValue) == 0x000094, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc__A_GetMapManager_ReturnValue) == 0x0000A0, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc__A_GetMapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000A8, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_GetRandomVectorFromMapDarkData_ReturnValue) == 0x0000AC, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_GetRandomVectorFromMapDarkData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Max_ReturnValue) == 0x0000B8, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array, CallFunc_Array_Add_ReturnValue_1) == 0x0000BC, "Member 'BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Get Safe Area Center
// 0x0178 (0x0178 - 0x0000)
struct BP_MapInfoComponent_C_Get_Safe_Area_Center final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_StructToJson_Json;                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue;                // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCGMLogicComponent*                     CallFunc__s__Get_Logic_Component_Logic_Component;  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x00A8(0x0050)(ConstParm)
	class UBP_Logic_Framework_C*                  K2Node_DynamicCast_AsBP_Logic_Framework;           // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      CallFunc_Map_Values_Values;                        // 0x0110(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Array_Get_Item_1;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateFakePoint_Pos;                   // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_Select_Default_1;                           // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_Get_Safe_Area_Center) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_Get_Safe_Area_Center");
static_assert(sizeof(BP_MapInfoComponent_C_Get_Safe_Area_Center) == 0x000178, "Wrong size on BP_MapInfoComponent_C_Get_Safe_Area_Center");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, Index_0) == 0x000000, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::Index_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, Pos) == 0x000004, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::Pos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, Point) == 0x000010, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::Point' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, Temp_bool_Variable) == 0x00001C, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc__s_GetPlayerManager_ReturnValue) == 0x000030, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc__s_GetPlayerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_StructToJson_Json) == 0x000040, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_StructToJson_Json' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_GetPlayerList_ReturnValue) == 0x000050, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_GetSolarCharacter_ReturnValue) == 0x000070, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_IsValid_ReturnValue_1) == 0x000079, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00007C, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_InRange_IntInt_ReturnValue) == 0x000088, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Conv_BoolToString_ReturnValue) == 0x000090, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc__s__Get_Logic_Component_Logic_Component) == 0x0000A0, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc__s__Get_Logic_Component_Logic_Component' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, K2Node_MakeMap_Map) == 0x0000A8, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, K2Node_DynamicCast_AsBP_Logic_Framework) == 0x0000F8, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::K2Node_DynamicCast_AsBP_Logic_Framework' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, Temp_bool_Variable_1) == 0x000101, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Map_Find_Value) == 0x000104, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Map_Find_ReturnValue) == 0x00010C, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Map_Values_Values) == 0x000110, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Array_LastIndex_ReturnValue) == 0x000120, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_BooleanAND_ReturnValue) == 0x000124, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Array_Get_Item_1) == 0x000128, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, K2Node_Select_Default) == 0x000130, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000138, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_BreakVector2D_X) == 0x000140, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_BreakVector2D_Y) == 0x000144, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_CalculateFakePoint_Pos) == 0x000148, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_CalculateFakePoint_Pos' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, K2Node_Select_Default_1) == 0x000158, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_Get_Safe_Area_Center, CallFunc_Array_Get_Item_2) == 0x000168, "Member 'BP_MapInfoComponent_C_Get_Safe_Area_Center::CallFunc_Array_Get_Item_2' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.GetAirline
// 0x0058 (0x0058 - 0x0000)
struct BP_MapInfoComponent_C_GetAirline final
{
public:
	struct FAirlineData                           Airline;                                           // 0x0000(0x0028)(Parm, OutParm, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAirlineData                           CallFunc_GetUsedAirlineData_OutData;               // 0x002C(0x0028)(NoDestructor)
	int32                                         CallFunc_GetUsedAirlineData_ReturnValue;           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_GetAirline) == 0x000004, "Wrong alignment on BP_MapInfoComponent_C_GetAirline");
static_assert(sizeof(BP_MapInfoComponent_C_GetAirline) == 0x000058, "Wrong size on BP_MapInfoComponent_C_GetAirline");
static_assert(offsetof(BP_MapInfoComponent_C_GetAirline, Airline) == 0x000000, "Member 'BP_MapInfoComponent_C_GetAirline::Airline' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_GetAirline, ReturnValue) == 0x000028, "Member 'BP_MapInfoComponent_C_GetAirline::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_GetAirline, CallFunc_GetUsedAirlineData_OutData) == 0x00002C, "Member 'BP_MapInfoComponent_C_GetAirline::CallFunc_GetUsedAirlineData_OutData' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_GetAirline, CallFunc_GetUsedAirlineData_ReturnValue) == 0x000054, "Member 'BP_MapInfoComponent_C_GetAirline::CallFunc_GetUsedAirlineData_ReturnValue' has a wrong offset!");

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetStaticSafeArea
// 0x0020 (0x0020 - 0x0000)
struct BP_MapInfoComponent_C_SetStaticSafeArea final
{
public:
	TArray<struct FVector>                        SafeAreaCenters_0;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FInt32Range                            OverrideIndexRange;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoComponent_C_SetStaticSafeArea) == 0x000008, "Wrong alignment on BP_MapInfoComponent_C_SetStaticSafeArea");
static_assert(sizeof(BP_MapInfoComponent_C_SetStaticSafeArea) == 0x000020, "Wrong size on BP_MapInfoComponent_C_SetStaticSafeArea");
static_assert(offsetof(BP_MapInfoComponent_C_SetStaticSafeArea, SafeAreaCenters_0) == 0x000000, "Member 'BP_MapInfoComponent_C_SetStaticSafeArea::SafeAreaCenters_0' has a wrong offset!");
static_assert(offsetof(BP_MapInfoComponent_C_SetStaticSafeArea, OverrideIndexRange) == 0x000010, "Member 'BP_MapInfoComponent_C_SetStaticSafeArea::OverrideIndexRange' has a wrong offset!");

}

