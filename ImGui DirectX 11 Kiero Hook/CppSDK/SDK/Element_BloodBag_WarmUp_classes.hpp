#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Element_BloodBag_WarmUp

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C
// 0x0040 (0x03E0 - 0x03A0)
class AElement_BloodBag_WarmUp_C final : public ASolarRecoveryPackage
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           FloatingAnimTimerHandle;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpDownSpeed;                                       // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpDownLimit;                                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingAnimTickInterval;                          // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingAnimTimerCounter;                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisappearTimerCounter;                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisappearAnimTickInterval;                         // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickupAnimFactor;                                  // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DisappearAnimTimerHandle;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        PickupCharacter;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Element_BloodBag_WarmUp(int32 EntryPoint);
	void DisappearAnim();
	void FloatingAnim();
	void OnRecoveryPackageStateChanged(ERecoveryPackageState OldState);
	void PlayPickupByCharacterEffect(class ASolarCharacter* SolarCharacter);
	void PlayDisappearingEffect();
	void Event_MoveToDeathCharacterLocation(const struct FVector& NewLocation);
	void ReceiveBeginPlay();
	void FloatingAnimTick();
	void DisappearAnimTick();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Element_BloodBag_WarmUp_C">();
	}
	static class AElement_BloodBag_WarmUp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AElement_BloodBag_WarmUp_C>();
	}
};
static_assert(alignof(AElement_BloodBag_WarmUp_C) == 0x000008, "Wrong alignment on AElement_BloodBag_WarmUp_C");
static_assert(sizeof(AElement_BloodBag_WarmUp_C) == 0x0003E0, "Wrong size on AElement_BloodBag_WarmUp_C");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, UberGraphFrame) == 0x0003A0, "Member 'AElement_BloodBag_WarmUp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, FloatingAnimTimerHandle) == 0x0003A8, "Member 'AElement_BloodBag_WarmUp_C::FloatingAnimTimerHandle' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, RotationSpeed) == 0x0003B0, "Member 'AElement_BloodBag_WarmUp_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, UpDownSpeed) == 0x0003B4, "Member 'AElement_BloodBag_WarmUp_C::UpDownSpeed' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, UpDownLimit) == 0x0003B8, "Member 'AElement_BloodBag_WarmUp_C::UpDownLimit' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, FloatingAnimTickInterval) == 0x0003BC, "Member 'AElement_BloodBag_WarmUp_C::FloatingAnimTickInterval' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, FloatingAnimTimerCounter) == 0x0003C0, "Member 'AElement_BloodBag_WarmUp_C::FloatingAnimTimerCounter' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, DisappearTimerCounter) == 0x0003C4, "Member 'AElement_BloodBag_WarmUp_C::DisappearTimerCounter' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, DisappearAnimTickInterval) == 0x0003C8, "Member 'AElement_BloodBag_WarmUp_C::DisappearAnimTickInterval' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, PickupAnimFactor) == 0x0003CC, "Member 'AElement_BloodBag_WarmUp_C::PickupAnimFactor' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, DisappearAnimTimerHandle) == 0x0003D0, "Member 'AElement_BloodBag_WarmUp_C::DisappearAnimTimerHandle' has a wrong offset!");
static_assert(offsetof(AElement_BloodBag_WarmUp_C, PickupCharacter) == 0x0003D8, "Member 'AElement_BloodBag_WarmUp_C::PickupCharacter' has a wrong offset!");

}

