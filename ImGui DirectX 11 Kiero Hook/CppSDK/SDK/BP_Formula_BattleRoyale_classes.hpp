#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Formula_BattleRoyale

#include "Basic.hpp"

#include "BP_FormulaBase_classes.hpp"
#include "E_BattleState_BattleRoyale_structs.hpp"
#include "E_DefenderPlayerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Formula_BattleRoyale.BP_Formula_BattleRoyale_C
// 0x00A8 (0x0548 - 0x04A0)
class ABP_Formula_BattleRoyale_C final : public ABP_FormulaBase_C
{
public:
	int32                                         WarmGameExp;                                       // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class ASolarPlayerState*, bool>          WeaponExp;                                         // 0x04A0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TSet<int32>                                   WarmGameIdSet;                                     // 0x04F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_DefenderManager_C*                  DefenderManager;                                   // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	TArray<struct FSettlementReward> GetSettlementRewards(class ASolarPlayerState* InPS);
	bool IsSettlementBagItem(class ASolarPlayerState* InPS);
	void GetDefenderManager(class ABP_DefenderManager_C** Output_Get);
	void MVPLifeTimeScore(float Life_Time, float* LTMVPScore);
	void GetStrategyGuideConditions(class ASolarPlayerState* InPS, TArray<int32>* OutResult);
	int32 CalculateTeamRank(class ASolarPlayerState* InPS);
	int32 CalculatePlayerRank(class ASolarPlayerState* InPS);
	float BattleStateDealFloat(float Input);
	int32 BattleStateDealInt(int32 Input);
	void GetBattleState(E_BattleState_BattleRoyale* State);
	float GetKDA(class ASolarPlayerState* InPS);
	TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(class ASolarPlayerState* InPS);
	void GetPlayerData(class ASolarPlayerState* Player, int32* KillCount, int32* KillDown, int32* Assist, int32* SaveCount, float* LifeTime, float* CauseDamage, int32* Rank, int32* TeamRank, int32* DeathCount, bool* TeamAced, bool* IsMVP, bool* IsCustomRoomActive, E_DefenderPlayerType* DefenderType);
	int32 GetZomborg(class ASolarPlayerState* InPS);
	void GetCharacterExp(class ASolarPlayerState* InPS, int32* OutGetExp, TArray<int32>* OutReason);
	int32 GetAccountExp(class ASolarPlayerState* InPS);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Formula_BattleRoyale_C">();
	}
	static class ABP_Formula_BattleRoyale_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Formula_BattleRoyale_C>();
	}
};
static_assert(alignof(ABP_Formula_BattleRoyale_C) == 0x000008, "Wrong alignment on ABP_Formula_BattleRoyale_C");
static_assert(sizeof(ABP_Formula_BattleRoyale_C) == 0x000548, "Wrong size on ABP_Formula_BattleRoyale_C");
static_assert(offsetof(ABP_Formula_BattleRoyale_C, WarmGameExp) == 0x00049C, "Member 'ABP_Formula_BattleRoyale_C::WarmGameExp' has a wrong offset!");
static_assert(offsetof(ABP_Formula_BattleRoyale_C, WeaponExp) == 0x0004A0, "Member 'ABP_Formula_BattleRoyale_C::WeaponExp' has a wrong offset!");
static_assert(offsetof(ABP_Formula_BattleRoyale_C, WarmGameIdSet) == 0x0004F0, "Member 'ABP_Formula_BattleRoyale_C::WarmGameIdSet' has a wrong offset!");
static_assert(offsetof(ABP_Formula_BattleRoyale_C, DefenderManager) == 0x000540, "Member 'ABP_Formula_BattleRoyale_C::DefenderManager' has a wrong offset!");

}

