#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_NationalFlag

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_FlagType_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Component_NationalFlag.UI_Component_NationalFlag_C
// 0x0020 (0x0640 - 0x0620)
class UUI_Component_NationalFlag_C final : public UUIComponentNationalFlag
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0620(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               SizeBox_0;                                         // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_Flag;                               // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FlagType                                    FlagType;                                          // 0x063C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_Component_NationalFlag(int32 EntryPoint);
	void SetClanFlagType();
	void SetNationalFlagType();
	void PreConstruct(bool IsDesignTime);
	void Set_UI_State();
	void SetFlagType(E_FlagType FlagType_0);
	void SetEmptyClan();
	void Construct();
	void OnSolarUIOpened();
	bool IsBroadCastMode();
	void OnInitialized();
	void OnSolarUIClosed();
	void LoadClanFlagByUrl();
	void SetDefaultClanFlag();
	void Destruct();
	void SetDefaultNationalFlag();

	class FString GetModuleName() const;
	bool IsExclusiveFlagId(int32 InFlagID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Component_NationalFlag_C">();
	}
	static class UUI_Component_NationalFlag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Component_NationalFlag_C>();
	}
};
static_assert(alignof(UUI_Component_NationalFlag_C) == 0x000008, "Wrong alignment on UUI_Component_NationalFlag_C");
static_assert(sizeof(UUI_Component_NationalFlag_C) == 0x000640, "Wrong size on UUI_Component_NationalFlag_C");
static_assert(offsetof(UUI_Component_NationalFlag_C, UberGraphFrame) == 0x000620, "Member 'UUI_Component_NationalFlag_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Component_NationalFlag_C, SizeBox_0) == 0x000628, "Member 'UUI_Component_NationalFlag_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UUI_Component_NationalFlag_C, WidgetSwitcher_Flag) == 0x000630, "Member 'UUI_Component_NationalFlag_C::WidgetSwitcher_Flag' has a wrong offset!");
static_assert(offsetof(UUI_Component_NationalFlag_C, Size) == 0x000638, "Member 'UUI_Component_NationalFlag_C::Size' has a wrong offset!");
static_assert(offsetof(UUI_Component_NationalFlag_C, FlagType) == 0x00063C, "Member 'UUI_Component_NationalFlag_C::FlagType' has a wrong offset!");

}

