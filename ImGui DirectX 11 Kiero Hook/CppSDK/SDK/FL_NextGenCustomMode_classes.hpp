#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_NextGenCustomMode

#include "Basic.hpp"

#include "E_BattleControlWidgets_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_UI_Root_structs.hpp"
#include "E_BigMapSlot_structs.hpp"
#include "Solarland_structs.hpp"
#include "E_BackPackSlot_structs.hpp"
#include "E_PlayerType_structs.hpp"
#include "E_BattleControllerSlot_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_NextGenCustomMode.FL_NextGenCustomMode_C
// 0x0000 (0x0028 - 0x0028)
class UFL_NextGenCustomMode_C final : public UBlueprintFunctionLibrary
{
public:
	static void _C_InsertWidgetToBattleUI(class UUserWidget* Widget, E_BattleControllerSlot Slot, bool bReplaceOldWidget, class UObject* __WorldContext, class UPanelSlot** OutResultSlot, bool* Success);
	static void _C_RemoveAllWidgetsFromBattleUI(E_BattleControllerSlot Slot, class UObject* __WorldContext, bool* Success);
	static void _s__Get_Logic_Component(class UObject* __WorldContext, class UCGMLogicComponent** Logic_Component);
	static void _s__Set_Global_Damage_Enable(bool Enabled, class UObject* __WorldContext);
	static void _A_GetExcelTableReader(class UObject* __WorldContext, class USolarTables_TablesReader** TablesReader);
	static void _A_GetBotTemplete(class UObject* __WorldContext, TMap<int32, int32>* Templete);
	static void _S_PlayInEditor(class UObject* __WorldContext, bool* bIsEditor);
	static void _s_GetWarmGameInfo(class UObject* __WorldContext, bool* bIsWarmGame, struct FSolarTablesData_WarmGameMode* WarmGameInfo);
	static class ASolarCharacter* _C_GetLocalCharacter(class UObject* __WorldContext);
	static class USolarMapManager* _A_GetMapManager(class UObject* __WorldContext);
	static class USolarUserWidget* _c__Create_Widget_And_Display(const class UClass* WidgetClass, E_UI_Root DisplayLayer, class UObject* __WorldContext);
	static void _S_DeployPlayer(class ASolarPlayerState* TargetPlayer, class APlayerStart* PlayerStart, bool ClearPlayerItems, class UObject* __WorldContext);
	static class UCGMLogicComponent* _S_GetModeMainLogic(class UObject* __WorldContext);
	static void _S_GetMapIDByName(const class FString& LevelName, class UObject* __WorldContext, int32* MapID);
	static void _A_GetMiniMapSize(int32 MapID, class UObject* __WorldContext, struct FVector2D* Size);
	static void ToInt_StringArray_(TArray<class FString>& str, class UObject* __WorldContext, TArray<int32>* Int);
	static void 获取地面高度(const struct FVector& 位置, bool 从上到下, class UObject* __WorldContext, struct FVector* 地面位置, float* Z, bool* 是否在水中);
	static void Bool2String(bool Bool, class UObject* __WorldContext, class FString* String);
	static void Vector2String(const struct FVector& Vector, class UObject* __WorldContext, class FString* str);
	static void _S_Number2Letter(int32 Number, class UObject* __WorldContext, class FString* Letter, bool* Valid);
	static void _S_GetBuildPackageType(class UObject* __WorldContext, ESolarBuildConfiguration* 打包类型);
	static void 抽选随机数字(int32 下限, int32 上限, TArray<int32>& 排除, class UObject* __WorldContext, int32* Result);
	static void Vector2D2String(const struct FVector2D& Vector, class UObject* __WorldContext, class FString* str);
	static void VectorArray2String(TArray<struct FVector>& Vector, class UObject* __WorldContext, class FString* str);
	static void Vector2DArray2String(TArray<struct FVector2D>& Vector, class UObject* __WorldContext, class FString* str);
	static void _S_GetOutcomIDByChestID(int32 Key, class UObject* __WorldContext, int32* OutcomeID);
	static void _A_GetPlayerType(class ASCMPlayerState* Player, class UObject* __WorldContext, E_PlayerType* PlayerType);
	static void DeathReason2String(ESCMDamageType DamageType, class UObject* __WorldContext, class FString* TraceString);
	static void BattleOver(class UObject* __WorldContext);
	static void _A_GetRandomLocationNearby(const struct FVector& Center, float Radius, class UObject* __WorldContext, struct FVector* TargetLocation1);
	static void _A_DataInt__(ESCMHostType HostType, const class FString& HostID, const class FString& DataName, int32 InValue, class UObject* __WorldContext);
	static void _A_PrintStringArray(const class FString& Prefix, TArray<class FString>& Array, class UObject* __WorldContext);
	static void _A_GetAllRealPlayers(class UObject* __WorldContext, TArray<class ASCMPlayerState*>* RealPlayers);
	static void _s_IsTesting(class UObject* __WorldContext, bool* Testing);
	static void _C_InsertWidgetToBackpackUI(class UUserWidget* Widget, E_BackPackSlot Slot, bool bReplaceOldWidget, class UObject* __WorldContext, class UPanelSlot** OutResultSlot, bool* Success);
	static void _C_RemoveAllWidgetsFromBackpackUI(E_BackPackSlot Slot, class UObject* __WorldContext, bool* Success);
	static void _C_InsertWidgetToBigMapUI(class UUserWidget* Widget, E_BigMapSlot Slot, bool bReplaceOldWidget, class UObject* __WorldContext, class UPanelSlot** OutResultSlot, bool* Success);
	static void _C_RemoveAllWidgetsFromBigMapUI(E_BigMapSlot Slot, class UObject* __WorldContext, bool* Success);
	static void _c_FillInCanvas(class UCanvasPanelSlot* Slot, class UObject* __WorldContext);
	static void _S_SetTeamCountMax(int32 InValue, class UObject* __WorldContext);
	static void _A_GetTeamCountMax(class UObject* __WorldContext, int32* OutValue);
	static void _A_GetCharacters(bool OnlyRealPlayers, class UObject* __WorldContext, TArray<class ASolarCharacter*>* Characters);
	static void _A_PrintLog(const class FString& Prefix, const TMap<class FString, class FString>& InputPin, class UObject* __WorldContext);
	static void ToBool(const class FString& String, class UObject* __WorldContext, bool* Bool);
	static void _A_GetBattleTime(class UObject* __WorldContext, int32* Time);
	static void _C_SetWidgetVisibility(E_BattleControlWidgets Widget, bool Visibility, class UObject* __WorldContext);
	static void _A_GetModeConfig(class UObject* __WorldContext, class UCGMGameplayConfig** ModeConfig);
	static void GetTeamPlayerCount(class UObject* __WorldContext, int32* Num_Mode);
	static void GetRandomKeyInWidget(const TMap<int32, int32>& Key_Weight, class UObject* __WorldContext, int32* HitKey);
	static void _c_CreateWidget(const class UClass* WidgetClass, E_UI_Root Layer, class UObject* __WorldContext, class UUserWidget** WidgetObject);
	static class UUserWidget* _c_ShowWidget(const class UClass* WidgetClass, E_UI_Root Layer, class UObject* __WorldContext);
	static void SortMap(const TMap<class FString, float>& MapIn, bool Ascending, class UObject* __WorldContext, TMap<class FString, float>* Sorted);
	static void GetAiComp(class UObject* __WorldContext, class USBattleRoyaleGameModeAIComp** AiComp);
	static bool UseNewAiComp(class UObject* __WorldContext);
	static void __A_BindOnBasicSystemReady(const TDelegate<void()>& Event, class UObject* __WorldContext, bool* bReady);

	static void _A_MiniMapToWorldLocation(const struct FVector2D& MiniMapPosition, float Z, class UObject* __WorldContext, struct FVector* WorldLocation);
	static void _A_WorldLocationToMiniMap(const struct FVector& WorldLocation, class UObject* __WorldContext, struct FVector2D* MiniMapPosition);
	static void SumOfIntArray(TArray<int32>& Array, class UObject* __WorldContext, int32* Sum);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_NextGenCustomMode_C">();
	}
	static class UFL_NextGenCustomMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_NextGenCustomMode_C>();
	}
};
static_assert(alignof(UFL_NextGenCustomMode_C) == 0x000008, "Wrong alignment on UFL_NextGenCustomMode_C");
static_assert(sizeof(UFL_NextGenCustomMode_C) == 0x000028, "Wrong size on UFL_NextGenCustomMode_C");

}

