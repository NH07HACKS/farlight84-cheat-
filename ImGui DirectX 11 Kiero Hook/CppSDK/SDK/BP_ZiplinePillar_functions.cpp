#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplinePillar

#include "Basic.hpp"

#include "BP_ZiplinePillar_classes.hpp"
#include "BP_ZiplinePillar_parameters.hpp"


namespace SDK
{

// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CalcAndSetExtent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HorzExtentLength                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VertExtentLength                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplinePillar_C::CalcAndSetExtent(float HorzExtentLength, float VertExtentLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "CalcAndSetExtent");

	Params::BP_ZiplinePillar_C_CalcAndSetExtent Parms{};

	Parms.HorzExtentLength = HorzExtentLength;
	Parms.VertExtentLength = VertExtentLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CalcSuitableScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Horz                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Vert                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplinePillar_C::CalcSuitableScale(float Horz, float Vert, float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "CalcSuitableScale");

	Params::BP_ZiplinePillar_C_CalcSuitableScale Parms{};

	Parms.Horz = Horz;
	Parms.Vert = Vert;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForceNomal                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ZiplinePillar_C::SetPillarTransform(bool bForceNomal, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "SetPillarTransform");

	Params::BP_ZiplinePillar_C_SetPillarTransform Parms{};

	Parms.bForceNomal = bForceNomal;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransformForEditor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ZiplinePillar_C::SetPillarTransformForEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "SetPillarTransformForEditor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.Set Linked Zip and Refresh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ZiplineBase_C*                LinkedZip_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplinePillar_C::Set_Linked_Zip_and_Refresh(class ABP_ZiplineBase_C* LinkedZip_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "Set Linked Zip and Refresh");

	Params::BP_ZiplinePillar_C_Set_Linked_Zip_and_Refresh Parms{};

	Parms.LinkedZip_0 = LinkedZip_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetPillarTransformWithCustomRotForEditor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ZiplinePillar_C::SetPillarTransformWithCustomRotForEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "SetPillarTransformWithCustomRotForEditor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.Set Linked Rail and Refresh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_SlidingRailBase_C*            LinkedZip_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplinePillar_C::Set_Linked_Rail_and_Refresh(class ABP_SlidingRailBase_C* LinkedZip_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "Set Linked Rail and Refresh");

	Params::BP_ZiplinePillar_C_Set_Linked_Rail_and_Refresh Parms{};

	Parms.LinkedZip_0 = LinkedZip_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.SetConnectorPitch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ZiplinePillar_C::SetConnectorPitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "SetConnectorPitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplinePillar.BP_ZiplinePillar_C.CheckZipReference
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ZiplinePillar_C::CheckZipReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplinePillar_C", "CheckZipReference");

	UObject::ProcessEvent(Func, nullptr);
}

}

