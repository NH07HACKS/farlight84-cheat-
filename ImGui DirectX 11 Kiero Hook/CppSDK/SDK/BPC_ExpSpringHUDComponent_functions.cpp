#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_ExpSpringHUDComponent

#include "Basic.hpp"

#include "BPC_ExpSpringHUDComponent_classes.hpp"
#include "BPC_ExpSpringHUDComponent_parameters.hpp"


namespace SDK
{

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnRewardDataUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASolarExpSpringPointActor*        Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::OnRewardDataUpdated(class ASolarExpSpringPointActor* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "OnRewardDataUpdated");

	Params::BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated Parms{};

	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnCurRewardIndexSwitched
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASolarExpSpringPointActor*        Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::OnCurRewardIndexSwitched(class ASolarExpSpringPointActor* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "OnCurRewardIndexSwitched");

	Params::BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched Parms{};

	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetHUDNoticeVisibility
// (BlueprintCallable, BlueprintEvent)

void UBPC_ExpSpringHUDComponent_C::SetHUDNoticeVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "SetHUDNoticeVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShowHUDNotice
// (BlueprintCallable, BlueprintEvent)

void UBPC_ExpSpringHUDComponent_C::ShowHUDNotice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ShowHUDNotice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ExecuteUbergraph_BPC_ExpSpringHUDComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::ExecuteUbergraph_BPC_ExpSpringHUDComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ExecuteUbergraph_BPC_ExpSpringHUDComponent");

	Params::BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShouldShowHUDNotice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASolarExpSpringPointActor*        Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASolarPlayerState*                PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBPC_ExpSpringHUDComponent_C::ShouldShowHUDNotice(class ASolarExpSpringPointActor* Actor, class ASolarPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ShouldShowHUDNotice");

	Params::BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice Parms{};

	Parms.Actor = Actor;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShouldActorShowHUDNotice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASolarExpSpringPointActor*        Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBPC_ExpSpringHUDComponent_C::ShouldActorShowHUDNotice(class ASolarExpSpringPointActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ShouldActorShowHUDNotice");

	Params::BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetWorldMarkPointHasEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorldMark_Secondary_C*           WorldMark                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_ExpSpringHUDComponent_C::SetWorldMarkPointHasEnemy(class UWorldMark_Secondary_C* WorldMark, bool HasEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "SetWorldMarkPointHasEnemy");

	Params::BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy Parms{};

	Parms.WorldMark = WorldMark;
	Parms.HasEnemy = HasEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetWorldMarkPointState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorMarkBase*                   WorldMark                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASolarExpSpringPointActor*        Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_ExpSpringHUDComponent_C::SetWorldMarkPointState(class UActorMarkBase* WorldMark, class ASolarExpSpringPointActor* Point, bool HasEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "SetWorldMarkPointState");

	Params::BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState Parms{};

	Parms.WorldMark = WorldMark;
	Parms.Point = Point;
	Parms.HasEnemy = HasEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.CreateWorldMark
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorMarkBase*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UActorMarkBase* UBPC_ExpSpringHUDComponent_C::CreateWorldMark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "CreateWorldMark");

	Params::BPC_ExpSpringHUDComponent_C_CreateWorldMark Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.NativeOnPointOpenClose
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASolarExpSpringPointActor*        Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOpen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_ExpSpringHUDComponent_C::NativeOnPointOpenClose(class ASolarExpSpringPointActor* Point, bool IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "NativeOnPointOpenClose");

	Params::BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose Parms{};

	Parms.Point = Point;
	Parms.IsOpen = IsOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.PushPointOpenMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   OpenID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::PushPointOpenMessage(uint8 OpenID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "PushPointOpenMessage");

	Params::BPC_ExpSpringHUDComponent_C_PushPointOpenMessage Parms{};

	Parms.OpenID = OpenID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.MoveNextMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   OpenID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::MoveNextMessage(uint8 OpenID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "MoveNextMessage");

	Params::BPC_ExpSpringHUDComponent_C_MoveNextMessage Parms{};

	Parms.OpenID = OpenID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetPointMarkInfo
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FExpSpringPointMarkInfo&   Info                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// const bool                              SetVisible                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_ExpSpringHUDComponent_C::SetPointMarkInfo(const struct FExpSpringPointMarkInfo& Info, const bool SetVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "SetPointMarkInfo");

	Params::BPC_ExpSpringHUDComponent_C_SetPointMarkInfo Parms{};

	Parms.Info = std::move(Info);
	Parms.SetVisible = SetVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetPointMarkInvisible
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FExpSpringPointMarkInfo&   Info                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBPC_ExpSpringHUDComponent_C::SetPointMarkInvisible(const struct FExpSpringPointMarkInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "SetPointMarkInvisible");

	Params::BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible Parms{};

	Parms.Info = std::move(Info);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.InitWorldMark
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASolarExpSpringPointActor*        Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorMarkBase*                   WorldMark                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::InitWorldMark(class ASolarExpSpringPointActor* Point, class UActorMarkBase* WorldMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "InitWorldMark");

	Params::BPC_ExpSpringHUDComponent_C_InitWorldMark Parms{};

	Parms.Point = Point;
	Parms.WorldMark = WorldMark;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ReceiveTick");

	Params::BPC_ExpSpringHUDComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnPlayerEnterPoint
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASolarExpSpringPointActor*        EnteredPoint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::OnPlayerEnterPoint(class ASolarExpSpringPointActor* EnteredPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "OnPlayerEnterPoint");

	Params::BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint Parms{};

	Parms.EnteredPoint = EnteredPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShowOpenMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   OpenID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::ShowOpenMessage(uint8 OpenID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "ShowOpenMessage");

	Params::BPC_ExpSpringHUDComponent_C_ShowOpenMessage Parms{};

	Parms.OpenID = OpenID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.NativeOnPointStateUpdated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FExpSpringPointMarkInfo&   PointData                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// EExpSpringPointState                    PointState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EExpSpringPointState                    LastPointState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_ExpSpringHUDComponent_C::NativeOnPointStateUpdated(const struct FExpSpringPointMarkInfo& PointData, EExpSpringPointState PointState, EExpSpringPointState LastPointState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_ExpSpringHUDComponent_C", "NativeOnPointStateUpdated");

	Params::BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated Parms{};

	Parms.PointData = std::move(PointData);
	Parms.PointState = PointState;
	Parms.LastPointState = LastPointState;

	UObject::ProcessEvent(Func, &Parms);
}

}

