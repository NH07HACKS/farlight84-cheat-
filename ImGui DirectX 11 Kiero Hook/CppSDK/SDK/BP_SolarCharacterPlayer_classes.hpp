#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SolarCharacterPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SolarCharacterPlayer.BP_SolarCharacterPlayer_C
// 0x00A0 (0x3E10 - 0x3D70)
class ABP_SolarCharacterPlayer_C : public ASolarCharacter
{
public:
	uint8                                         Pad_3D68[0x8];                                     // 0x3D68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x3D70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                PreviousLocation;                                  // 0x3D78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x3D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x3D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousTime;                                      // 0x3D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x3D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeltaLocation;                                     // 0x3D94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnTouch;                                           // 0x3DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DA1[0x3];                                     // 0x3DA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x3DA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Direction;                                         // 0x3DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 SpeedRecord;                                       // 0x3DB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        LocationRecord;                                    // 0x3DC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 Record_X;                                          // 0x3DD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 Record_y;                                          // 0x3DE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SpeedFixBase;                                      // 0x3DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DF4[0x4];                                     // 0x3DF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedFix;                                          // 0x3DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PoisonDamageNum;                                   // 0x3E00(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E04[0x4];                                     // 0x3E04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        Shadow_AI;                                         // 0x3E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool Is_Observation_Target();
	float FixSpeed();
	void FigureSpeed();
	float GetFixedY(float NewParam);
	float GetFixedX(float NewParam);
	void SetCameraInput_2();
	void SetCameraInput();
	struct FVector GetFixedLocation(const struct FVector& InLocation);
	float GetFixedSpeed(float NewParam);
	void DecelerationEffectUpdate(float& Altitude, TArray<class UParticleSystemComponent*>& Effects);
	void UndecelerationEffectUpdate(float& Altitude, TArray<class UParticleSystemComponent*>& Effects);
	void InpActEvt_Delete_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_BackSpace_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Home_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void Event_UseReviveItem(class ASCMPlayerState* Player);
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int32 EntryPoint);

	class USolarCameraComponent* GetSolarCameraComponent() const;
	class USolarSpringArmComponent* GetSolarSpringArmComponent() const;
	void RefreshRenderConsoleVarForSkydive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SolarCharacterPlayer_C">();
	}
	static class ABP_SolarCharacterPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SolarCharacterPlayer_C>();
	}
};
static_assert(alignof(ABP_SolarCharacterPlayer_C) == 0x000010, "Wrong alignment on ABP_SolarCharacterPlayer_C");
static_assert(sizeof(ABP_SolarCharacterPlayer_C) == 0x003E10, "Wrong size on ABP_SolarCharacterPlayer_C");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, UberGraphFrame) == 0x003D70, "Member 'ABP_SolarCharacterPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, PreviousLocation) == 0x003D78, "Member 'ABP_SolarCharacterPlayer_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Time) == 0x003D84, "Member 'ABP_SolarCharacterPlayer_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, CurrentTime) == 0x003D88, "Member 'ABP_SolarCharacterPlayer_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, PreviousTime) == 0x003D8C, "Member 'ABP_SolarCharacterPlayer_C::PreviousTime' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, DeltaTime) == 0x003D90, "Member 'ABP_SolarCharacterPlayer_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, DeltaLocation) == 0x003D94, "Member 'ABP_SolarCharacterPlayer_C::DeltaLocation' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, OnTouch) == 0x003DA0, "Member 'ABP_SolarCharacterPlayer_C::OnTouch' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Speed) == 0x003DA4, "Member 'ABP_SolarCharacterPlayer_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Direction) == 0x003DA8, "Member 'ABP_SolarCharacterPlayer_C::Direction' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, SpeedRecord) == 0x003DB0, "Member 'ABP_SolarCharacterPlayer_C::SpeedRecord' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, LocationRecord) == 0x003DC0, "Member 'ABP_SolarCharacterPlayer_C::LocationRecord' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Record_X) == 0x003DD0, "Member 'ABP_SolarCharacterPlayer_C::Record_X' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Record_y) == 0x003DE0, "Member 'ABP_SolarCharacterPlayer_C::Record_y' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, SpeedFixBase) == 0x003DF0, "Member 'ABP_SolarCharacterPlayer_C::SpeedFixBase' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, SpeedFix) == 0x003DF8, "Member 'ABP_SolarCharacterPlayer_C::SpeedFix' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, PoisonDamageNum) == 0x003E00, "Member 'ABP_SolarCharacterPlayer_C::PoisonDamageNum' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacterPlayer_C, Shadow_AI) == 0x003E08, "Member 'ABP_SolarCharacterPlayer_C::Shadow_AI' has a wrong offset!");

}

