#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MeshWidget.EUIMeshTransform
// NumValues: 0x0003
enum class EUIMeshTransform : uint8
{
	Perspective                              = 0,
	Orthographic                             = 1,
	EUIMeshTransform_MAX                     = 2,
};

// ScriptStruct MeshWidget.UIMeshTransformInfo
// 0x0060 (0x0060 - 0x0000)
struct FUIMeshTransformInfo final
{
public:
	struct FTransform                             MeshTransform;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MeshScale;                                         // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshTranslate;                                     // 0x003C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRotate;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirty;                                            // 0x0054(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIMeshTransformInfo) == 0x000010, "Wrong alignment on FUIMeshTransformInfo");
static_assert(sizeof(FUIMeshTransformInfo) == 0x000060, "Wrong size on FUIMeshTransformInfo");
static_assert(offsetof(FUIMeshTransformInfo, MeshTransform) == 0x000000, "Member 'FUIMeshTransformInfo::MeshTransform' has a wrong offset!");
static_assert(offsetof(FUIMeshTransformInfo, MeshScale) == 0x000030, "Member 'FUIMeshTransformInfo::MeshScale' has a wrong offset!");
static_assert(offsetof(FUIMeshTransformInfo, MeshTranslate) == 0x00003C, "Member 'FUIMeshTransformInfo::MeshTranslate' has a wrong offset!");
static_assert(offsetof(FUIMeshTransformInfo, MeshRotate) == 0x000048, "Member 'FUIMeshTransformInfo::MeshRotate' has a wrong offset!");
static_assert(offsetof(FUIMeshTransformInfo, bDirty) == 0x000054, "Member 'FUIMeshTransformInfo::bDirty' has a wrong offset!");

// ScriptStruct MeshWidget.UIMeshVertex
// 0x0020 (0x0020 - 0x0000)
struct FUIMeshVertex final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV0;                                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIMeshVertex) == 0x000004, "Wrong alignment on FUIMeshVertex");
static_assert(sizeof(FUIMeshVertex) == 0x000020, "Wrong size on FUIMeshVertex");
static_assert(offsetof(FUIMeshVertex, Position) == 0x000000, "Member 'FUIMeshVertex::Position' has a wrong offset!");
static_assert(offsetof(FUIMeshVertex, Color) == 0x00000C, "Member 'FUIMeshVertex::Color' has a wrong offset!");
static_assert(offsetof(FUIMeshVertex, UV0) == 0x000010, "Member 'FUIMeshVertex::UV0' has a wrong offset!");
static_assert(offsetof(FUIMeshVertex, UV1) == 0x000018, "Member 'FUIMeshVertex::UV1' has a wrong offset!");

// ScriptStruct MeshWidget.UIMeshCameraInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FUIMeshCameraInfo final
{
public:
	EUIMeshTransform                              TransformType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldMeshTransform;                            // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomCameraParam;                             // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HalfFov;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearClip;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraRotate;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraPosition;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirty;                                            // 0x0024(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x5B];                                      // 0x0025(0x005B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIMeshCameraInfo) == 0x000010, "Wrong alignment on FUIMeshCameraInfo");
static_assert(sizeof(FUIMeshCameraInfo) == 0x000080, "Wrong size on FUIMeshCameraInfo");
static_assert(offsetof(FUIMeshCameraInfo, TransformType) == 0x000000, "Member 'FUIMeshCameraInfo::TransformType' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, bUseWorldMeshTransform) == 0x000001, "Member 'FUIMeshCameraInfo::bUseWorldMeshTransform' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, bUseCustomCameraParam) == 0x000002, "Member 'FUIMeshCameraInfo::bUseCustomCameraParam' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, HalfFov) == 0x000004, "Member 'FUIMeshCameraInfo::HalfFov' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, NearClip) == 0x000008, "Member 'FUIMeshCameraInfo::NearClip' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, CameraRotate) == 0x00000C, "Member 'FUIMeshCameraInfo::CameraRotate' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, CameraPosition) == 0x000018, "Member 'FUIMeshCameraInfo::CameraPosition' has a wrong offset!");
static_assert(offsetof(FUIMeshCameraInfo, bDirty) == 0x000024, "Member 'FUIMeshCameraInfo::bDirty' has a wrong offset!");

// ScriptStruct MeshWidget.Coefficent
// 0x0008 (0x0008 - 0x0000)
struct FCoefficent final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNearlyInf;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoefficent) == 0x000004, "Wrong alignment on FCoefficent");
static_assert(sizeof(FCoefficent) == 0x000008, "Wrong size on FCoefficent");
static_assert(offsetof(FCoefficent, A) == 0x000000, "Member 'FCoefficent::A' has a wrong offset!");
static_assert(offsetof(FCoefficent, bIsNearlyInf) == 0x000004, "Member 'FCoefficent::bIsNearlyInf' has a wrong offset!");

// ScriptStruct MeshWidget.UIMeshInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FUIMeshInstanceData final
{
public:
	struct FVector4                               InstanceData1;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               InstanceData2;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIMeshInstanceData) == 0x000010, "Wrong alignment on FUIMeshInstanceData");
static_assert(sizeof(FUIMeshInstanceData) == 0x000020, "Wrong size on FUIMeshInstanceData");
static_assert(offsetof(FUIMeshInstanceData, InstanceData1) == 0x000000, "Member 'FUIMeshInstanceData::InstanceData1' has a wrong offset!");
static_assert(offsetof(FUIMeshInstanceData, InstanceData2) == 0x000010, "Member 'FUIMeshInstanceData::InstanceData2' has a wrong offset!");

// ScriptStruct MeshWidget.VertexCluster
// 0x0090 (0x0090 - 0x0000)
struct FVertexCluster final
{
public:
	int32                                         ClusterNum;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Center;                                            // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FCoefficent>               ClusterSlope;                                      // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	struct FTransform                             ClusterTransform;                                  // 0x0060(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexCluster) == 0x000010, "Wrong alignment on FVertexCluster");
static_assert(sizeof(FVertexCluster) == 0x000090, "Wrong size on FVertexCluster");
static_assert(offsetof(FVertexCluster, ClusterNum) == 0x000000, "Member 'FVertexCluster::ClusterNum' has a wrong offset!");
static_assert(offsetof(FVertexCluster, Center) == 0x000004, "Member 'FVertexCluster::Center' has a wrong offset!");
static_assert(offsetof(FVertexCluster, ClusterSlope) == 0x000010, "Member 'FVertexCluster::ClusterSlope' has a wrong offset!");
static_assert(offsetof(FVertexCluster, ClusterTransform) == 0x000060, "Member 'FVertexCluster::ClusterTransform' has a wrong offset!");

}

