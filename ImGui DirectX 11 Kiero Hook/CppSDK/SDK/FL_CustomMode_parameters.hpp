#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_CustomMode

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Engine_structs.hpp"
#include "S_NoyaNoticeInfo_structs.hpp"
#include "S_MessageRequest_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_NoticeType_Noya_structs.hpp"
#include "UMG_structs.hpp"
#include "E_NoticeLevel_structs.hpp"
#include "S_Notice_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function FL_CustomMode.FL_CustomMode_C.Convert(ToString)
// 0x0058 (0x0058 - 0x0000)
struct FL_CustomMode_C_Convert_ToString_ final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 KeyString;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Key_GetDisplayName_ReturnValue;           // 0x0030(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_Convert_ToString_) == 0x000008, "Wrong alignment on FL_CustomMode_C_Convert_ToString_");
static_assert(sizeof(FL_CustomMode_C_Convert_ToString_) == 0x000058, "Wrong size on FL_CustomMode_C_Convert_ToString_");
static_assert(offsetof(FL_CustomMode_C_Convert_ToString_, Key) == 0x000000, "Member 'FL_CustomMode_C_Convert_ToString_::Key' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Convert_ToString_, __WorldContext) == 0x000018, "Member 'FL_CustomMode_C_Convert_ToString_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Convert_ToString_, KeyString) == 0x000020, "Member 'FL_CustomMode_C_Convert_ToString_::KeyString' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Convert_ToString_, CallFunc_Key_GetDisplayName_ReturnValue) == 0x000030, "Member 'FL_CustomMode_C_Convert_ToString_::CallFunc_Key_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Convert_ToString_, CallFunc_Conv_TextToString_ReturnValue) == 0x000048, "Member 'FL_CustomMode_C_Convert_ToString_::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.触发提示
// 0x0080 (0x0080 - 0x0000)
struct FL_CustomMode_C_触发提示 final
{
public:
	class UObject*                                图标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 文本;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_NoticeLevel                                 强度等级;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc__c_CreateWidget_WidgetObject;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUI_Notice_C*>                   CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UUI_Notice_C*                           K2Node_DynamicCast_AsUI_Notice;                    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Notice_C*                           CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Notice                              K2Node_MakeStruct_S_Notice;                        // 0x0060(0x0020)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_触发提示) == 0x000008, "Wrong alignment on FL_CustomMode_C_触发提示");
static_assert(sizeof(FL_CustomMode_C_触发提示) == 0x000080, "Wrong size on FL_CustomMode_C_触发提示");
static_assert(offsetof(FL_CustomMode_C_触发提示, 图标) == 0x000000, "Member 'FL_CustomMode_C_触发提示::图标' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, 文本) == 0x000008, "Member 'FL_CustomMode_C_触发提示::文本' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, 强度等级) == 0x000018, "Member 'FL_CustomMode_C_触发提示::强度等级' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, __WorldContext) == 0x000020, "Member 'FL_CustomMode_C_触发提示::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, CallFunc__c_CreateWidget_WidgetObject) == 0x000028, "Member 'FL_CustomMode_C_触发提示::CallFunc__c_CreateWidget_WidgetObject' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000030, "Member 'FL_CustomMode_C_触发提示::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, K2Node_DynamicCast_AsUI_Notice) == 0x000040, "Member 'FL_CustomMode_C_触发提示::K2Node_DynamicCast_AsUI_Notice' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'FL_CustomMode_C_触发提示::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, CallFunc_Array_Get_Item) == 0x000050, "Member 'FL_CustomMode_C_触发提示::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000058, "Member 'FL_CustomMode_C_触发提示::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发提示, K2Node_MakeStruct_S_Notice) == 0x000060, "Member 'FL_CustomMode_C_触发提示::K2Node_MakeStruct_S_Notice' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.角色是否存活
// 0x0018 (0x0018 - 0x0000)
struct FL_CustomMode_C_角色是否存活 final
{
public:
	class ASolarCharacter*                        角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否存活;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsAlive_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_角色是否存活) == 0x000008, "Wrong alignment on FL_CustomMode_C_角色是否存活");
static_assert(sizeof(FL_CustomMode_C_角色是否存活) == 0x000018, "Wrong size on FL_CustomMode_C_角色是否存活");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, 角色) == 0x000000, "Member 'FL_CustomMode_C_角色是否存活::角色' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_角色是否存活::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, 是否存活) == 0x000010, "Member 'FL_CustomMode_C_角色是否存活::是否存活' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'FL_CustomMode_C_角色是否存活::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, CallFunc_K2_IsAlive_ReturnValue) == 0x000012, "Member 'FL_CustomMode_C_角色是否存活::CallFunc_K2_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色是否存活, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'FL_CustomMode_C_角色是否存活::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.切换控件可见性
// 0x0028 (0x0028 - 0x0000)
struct FL_CustomMode_C_切换控件可见性 final
{
public:
	class UUserWidget*                            Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resault;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_切换控件可见性) == 0x000008, "Wrong alignment on FL_CustomMode_C_切换控件可见性");
static_assert(sizeof(FL_CustomMode_C_切换控件可见性) == 0x000028, "Wrong size on FL_CustomMode_C_切换控件可见性");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, Target) == 0x000000, "Member 'FL_CustomMode_C_切换控件可见性::Target' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_切换控件可见性::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, Visible) == 0x000010, "Member 'FL_CustomMode_C_切换控件可见性::Visible' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, Widget) == 0x000018, "Member 'FL_CustomMode_C_切换控件可见性::Widget' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, Resault) == 0x000020, "Member 'FL_CustomMode_C_切换控件可见性::Resault' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, CallFunc_GetVisibility_ReturnValue) == 0x000021, "Member 'FL_CustomMode_C_切换控件可见性::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_切换控件可见性, K2Node_SwitchEnum_CmpSuccess) == 0x000022, "Member 'FL_CustomMode_C_切换控件可见性::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.物品下标
// 0x0030 (0x0030 - 0x0000)
struct FL_CustomMode_C_物品下标 final
{
public:
	int32                                         单页物品数量;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         页码;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         物品序号;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         列表下标;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_物品下标) == 0x000008, "Wrong alignment on FL_CustomMode_C_物品下标");
static_assert(sizeof(FL_CustomMode_C_物品下标) == 0x000030, "Wrong size on FL_CustomMode_C_物品下标");
static_assert(offsetof(FL_CustomMode_C_物品下标, 单页物品数量) == 0x000000, "Member 'FL_CustomMode_C_物品下标::单页物品数量' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, 页码) == 0x000004, "Member 'FL_CustomMode_C_物品下标::页码' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, 物品序号) == 0x000008, "Member 'FL_CustomMode_C_物品下标::物品序号' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_物品下标::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, 列表下标) == 0x000018, "Member 'FL_CustomMode_C_物品下标::列表下标' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'FL_CustomMode_C_物品下标::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_物品下标::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, CallFunc_Multiply_IntInt_ReturnValue) == 0x000024, "Member 'FL_CustomMode_C_物品下标::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_物品下标, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C_物品下标::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取页码数量
// 0x0028 (0x0028 - 0x0000)
struct FL_CustomMode_C_获取页码数量 final
{
public:
	int32                                         ItemCount;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PageCapacity;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PageCount;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_获取页码数量) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取页码数量");
static_assert(sizeof(FL_CustomMode_C_获取页码数量) == 0x000028, "Wrong size on FL_CustomMode_C_获取页码数量");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, ItemCount) == 0x000000, "Member 'FL_CustomMode_C_获取页码数量::ItemCount' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, PageCapacity) == 0x000004, "Member 'FL_CustomMode_C_获取页码数量::PageCapacity' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_获取页码数量::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, PageCount) == 0x000010, "Member 'FL_CustomMode_C_获取页码数量::PageCount' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, Count) == 0x000014, "Member 'FL_CustomMode_C_获取页码数量::Count' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_获取页码数量::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'FL_CustomMode_C_获取页码数量::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, CallFunc_Divide_IntInt_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_获取页码数量::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取页码数量, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'FL_CustomMode_C_获取页码数量::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.设置可见性
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_设置可见性 final
{
public:
	class UWidget*                                Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visiable;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_设置可见性) == 0x000008, "Wrong alignment on FL_CustomMode_C_设置可见性");
static_assert(sizeof(FL_CustomMode_C_设置可见性) == 0x000020, "Wrong size on FL_CustomMode_C_设置可见性");
static_assert(offsetof(FL_CustomMode_C_设置可见性, Target) == 0x000000, "Member 'FL_CustomMode_C_设置可见性::Target' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, Visiable) == 0x000008, "Member 'FL_CustomMode_C_设置可见性::Visiable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_设置可见性::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, Temp_bool_Variable) == 0x000018, "Member 'FL_CustomMode_C_设置可见性::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, Temp_byte_Variable) == 0x000019, "Member 'FL_CustomMode_C_设置可见性::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, Temp_byte_Variable_1) == 0x00001A, "Member 'FL_CustomMode_C_设置可见性::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置可见性, K2Node_Select_Default) == 0x00001B, "Member 'FL_CustomMode_C_设置可见性::K2Node_Select_Default' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.随机POP元素
// 0x0098 (0x0098 - 0x0000)
struct FL_CustomMode_C_随机POP元素 final
{
public:
	TArray<class ASolarMapElementBase*>           Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         数量;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASolarMapElementBase*>           Resault;                                           // 0x0020(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class ASolarMapElementBase*>           Temp;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Temp_int_Variable_1;                               // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarMapElementBase*                   CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_随机POP元素) == 0x000008, "Wrong alignment on FL_CustomMode_C_随机POP元素");
static_assert(sizeof(FL_CustomMode_C_随机POP元素) == 0x000098, "Wrong size on FL_CustomMode_C_随机POP元素");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Array) == 0x000000, "Member 'FL_CustomMode_C_随机POP元素::Array' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, 数量) == 0x000010, "Member 'FL_CustomMode_C_随机POP元素::数量' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, __WorldContext) == 0x000018, "Member 'FL_CustomMode_C_随机POP元素::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Resault) == 0x000020, "Member 'FL_CustomMode_C_随机POP元素::Resault' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Temp) == 0x000030, "Member 'FL_CustomMode_C_随机POP元素::Temp' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Temp_int_Array_Index_Variable) == 0x000040, "Member 'FL_CustomMode_C_随机POP元素::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Temp_int_Variable) == 0x000050, "Member 'FL_CustomMode_C_随机POP元素::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000054, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Clamp_ReturnValue) == 0x000058, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'FL_CustomMode_C_随机POP元素::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, Temp_int_Variable_1) == 0x000070, "Member 'FL_CustomMode_C_随机POP元素::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Array_Get_Item) == 0x000088, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_随机POP元素, CallFunc_Array_Add_ReturnValue_1) == 0x000090, "Member 'FL_CustomMode_C_随机POP元素::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.是否为本地角色
// 0x0030 (0x0030 - 0x0000)
struct FL_CustomMode_C_是否为本地角色 final
{
public:
	class ASolarCharacter*                        角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          本地角色;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_GetLocalPlayer_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_是否为本地角色) == 0x000008, "Wrong alignment on FL_CustomMode_C_是否为本地角色");
static_assert(sizeof(FL_CustomMode_C_是否为本地角色) == 0x000030, "Wrong size on FL_CustomMode_C_是否为本地角色");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, 角色) == 0x000000, "Member 'FL_CustomMode_C_是否为本地角色::角色' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_是否为本地角色::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, 本地角色) == 0x000010, "Member 'FL_CustomMode_C_是否为本地角色::本地角色' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, CallFunc_GetLocalPlayer_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_是否为本地角色::CallFunc_GetLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, CallFunc_GetSolarCharacter_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_是否为本地角色::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C_是否为本地角色::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_是否为本地角色, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000029, "Member 'FL_CustomMode_C_是否为本地角色::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.ToInt(StringArray)
// 0x0068 (0x0068 - 0x0000)
struct FL_CustomMode_C_ToInt_StringArray_ final
{
public:
	TArray<class FString>                         str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Int;                                               // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 Temp;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_ToInt_StringArray_) == 0x000008, "Wrong alignment on FL_CustomMode_C_ToInt_StringArray_");
static_assert(sizeof(FL_CustomMode_C_ToInt_StringArray_) == 0x000068, "Wrong size on FL_CustomMode_C_ToInt_StringArray_");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, str) == 0x000000, "Member 'FL_CustomMode_C_ToInt_StringArray_::str' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_ToInt_StringArray_::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, Int) == 0x000018, "Member 'FL_CustomMode_C_ToInt_StringArray_::Int' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, Temp) == 0x000028, "Member 'FL_CustomMode_C_ToInt_StringArray_::Temp' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'FL_CustomMode_C_ToInt_StringArray_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'FL_CustomMode_C_ToInt_StringArray_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Array_Get_Item) == 0x000048, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Conv_StringToInt_ReturnValue) == 0x000058, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ToInt_StringArray_, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'FL_CustomMode_C_ToInt_StringArray_::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取地面高度
// 0x01A0 (0x01A0 - 0x0000)
struct FL_CustomMode_C_获取地面高度 final
{
public:
	struct FVector                                位置;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          从上到下;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                地面位置;                                          // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否在水中;                                        // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0054(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0060(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0070(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x007C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarWaterActorNew*                    K2Node_DynamicCast_AsSolar_Water_Actor_New;        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_获取地面高度) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取地面高度");
static_assert(sizeof(FL_CustomMode_C_获取地面高度) == 0x0001A0, "Wrong size on FL_CustomMode_C_获取地面高度");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, 位置) == 0x000000, "Member 'FL_CustomMode_C_获取地面高度::位置' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, 从上到下) == 0x00000C, "Member 'FL_CustomMode_C_获取地面高度::从上到下' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_获取地面高度::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, 地面位置) == 0x000018, "Member 'FL_CustomMode_C_获取地面高度::地面位置' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, Z) == 0x000024, "Member 'FL_CustomMode_C_获取地面高度::Z' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, 是否在水中) == 0x000028, "Member 'FL_CustomMode_C_获取地面高度::是否在水中' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, Temp_bool_Variable) == 0x000029, "Member 'FL_CustomMode_C_获取地面高度::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_X) == 0x00002C, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_Y) == 0x000030, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_Z) == 0x000034, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_MakeVector_ReturnValue_1) == 0x000044, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, Temp_bool_Variable_1) == 0x000050, "Member 'FL_CustomMode_C_获取地面高度::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, K2Node_Select_Default) == 0x000054, "Member 'FL_CustomMode_C_获取地面高度::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, Temp_object_Variable) == 0x000060, "Member 'FL_CustomMode_C_获取地面高度::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, K2Node_Select_Default_1) == 0x000070, "Member 'FL_CustomMode_C_获取地面高度::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_LineTraceSingle_OutHit) == 0x00007C, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_LineTraceSingle_ReturnValue) == 0x000104, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_bBlockingHit) == 0x000105, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_bInitialOverlap) == 0x000106, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_Time) == 0x000108, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_Distance) == 0x00010C, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_Location) == 0x000110, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_ImpactPoint) == 0x00011C, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_Normal) == 0x000128, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_ImpactNormal) == 0x000134, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_HitBoneName) == 0x000158, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_HitItem) == 0x000160, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_FaceIndex) == 0x000164, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_TraceStart) == 0x000168, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakHitResult_TraceEnd) == 0x000174, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_X_1) == 0x000180, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_Y_1) == 0x000184, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, CallFunc_BreakVector_Z_1) == 0x000188, "Member 'FL_CustomMode_C_获取地面高度::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, K2Node_DynamicCast_AsSolar_Water_Actor_New) == 0x000190, "Member 'FL_CustomMode_C_获取地面高度::K2Node_DynamicCast_AsSolar_Water_Actor_New' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取地面高度, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'FL_CustomMode_C_获取地面高度::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.角色健康状态
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_角色健康状态 final
{
public:
	class ASolarCharacter*                        角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterHealthState                         健康状态;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDying_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsAlive_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHealthState                         Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterHealthState                         Temp_byte_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterHealthState                         K2Node_Select_Default;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterHealthState                         Temp_byte_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterHealthState                         K2Node_Select_Default_1;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_角色健康状态) == 0x000008, "Wrong alignment on FL_CustomMode_C_角色健康状态");
static_assert(sizeof(FL_CustomMode_C_角色健康状态) == 0x000020, "Wrong size on FL_CustomMode_C_角色健康状态");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, 角色) == 0x000000, "Member 'FL_CustomMode_C_角色健康状态::角色' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_角色健康状态::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, 健康状态) == 0x000010, "Member 'FL_CustomMode_C_角色健康状态::健康状态' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, Temp_bool_Variable) == 0x000011, "Member 'FL_CustomMode_C_角色健康状态::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, CallFunc_IsDying_ReturnValue) == 0x000012, "Member 'FL_CustomMode_C_角色健康状态::CallFunc_IsDying_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, CallFunc_K2_IsAlive_ReturnValue) == 0x000013, "Member 'FL_CustomMode_C_角色健康状态::CallFunc_K2_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, Temp_byte_Variable) == 0x000014, "Member 'FL_CustomMode_C_角色健康状态::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, Temp_byte_Variable_1) == 0x000015, "Member 'FL_CustomMode_C_角色健康状态::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, Temp_bool_Variable_1) == 0x000016, "Member 'FL_CustomMode_C_角色健康状态::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, K2Node_Select_Default) == 0x000017, "Member 'FL_CustomMode_C_角色健康状态::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, Temp_byte_Variable_2) == 0x000018, "Member 'FL_CustomMode_C_角色健康状态::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色健康状态, K2Node_Select_Default_1) == 0x000019, "Member 'FL_CustomMode_C_角色健康状态::K2Node_Select_Default_1' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.仅注册小地图标记物
// 0x0050 (0x0050 - 0x0000)
struct FL_CustomMode_C_仅注册小地图标记物 final
{
public:
	class UClass*                                 InMapMarkClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InMarkPos;                                         // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeSupport;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           Output;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMapMarkBase*>                   CallFunc_RegisterMarkToMap_ReturnValue;            // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UMapMarkBase*                           CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_仅注册小地图标记物) == 0x000008, "Wrong alignment on FL_CustomMode_C_仅注册小地图标记物");
static_assert(sizeof(FL_CustomMode_C_仅注册小地图标记物) == 0x000050, "Wrong size on FL_CustomMode_C_仅注册小地图标记物");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, InMapMarkClass) == 0x000000, "Member 'FL_CustomMode_C_仅注册小地图标记物::InMapMarkClass' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, InMarkPos) == 0x000008, "Member 'FL_CustomMode_C_仅注册小地图标记物::InMarkPos' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, EdgeSupport) == 0x000014, "Member 'FL_CustomMode_C_仅注册小地图标记物::EdgeSupport' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, ZOrder) == 0x000018, "Member 'FL_CustomMode_C_仅注册小地图标记物::ZOrder' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, __WorldContext) == 0x000020, "Member 'FL_CustomMode_C_仅注册小地图标记物::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, Output) == 0x000028, "Member 'FL_CustomMode_C_仅注册小地图标记物::Output' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, CallFunc_RegisterMarkToMap_ReturnValue) == 0x000030, "Member 'FL_CustomMode_C_仅注册小地图标记物::CallFunc_RegisterMarkToMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, CallFunc_Array_Get_Item) == 0x000040, "Member 'FL_CustomMode_C_仅注册小地图标记物::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_仅注册小地图标记物, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'FL_CustomMode_C_仅注册小地图标记物::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.坐标打点
// 0x00C8 (0x00C8 - 0x0000)
struct FL_CustomMode_C_坐标打点 final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 str;                                               // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_坐标打点) == 0x000008, "Wrong alignment on FL_CustomMode_C_坐标打点");
static_assert(sizeof(FL_CustomMode_C_坐标打点) == 0x0000C8, "Wrong size on FL_CustomMode_C_坐标打点");
static_assert(offsetof(FL_CustomMode_C_坐标打点, Vector) == 0x000000, "Member 'FL_CustomMode_C_坐标打点::Vector' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_坐标打点::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, str) == 0x000018, "Member 'FL_CustomMode_C_坐标打点::str' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_BreakVector_X) == 0x000028, "Member 'FL_CustomMode_C_坐标打点::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_BreakVector_Y) == 0x00002C, "Member 'FL_CustomMode_C_坐标打点::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_BreakVector_Z) == 0x000030, "Member 'FL_CustomMode_C_坐标打点::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Conv_FloatToString_ReturnValue) == 0x000038, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000048, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000068, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000A8, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_坐标打点, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000B8, "Member 'FL_CustomMode_C_坐标打点::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.角色势力列表
// 0x00D8 (0x00D8 - 0x0000)
struct FL_CustomMode_C_角色势力列表 final
{
public:
	TArray<class AActor*>                         角色;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Result;                                            // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TSet<class FString>                           Temp;                                              // 0x0028(0x0050)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ECharacterHealthState                         CallFunc____________;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Set_ToArray_Result;                       // 0x00C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_角色势力列表) == 0x000008, "Wrong alignment on FL_CustomMode_C_角色势力列表");
static_assert(sizeof(FL_CustomMode_C_角色势力列表) == 0x0000D8, "Wrong size on FL_CustomMode_C_角色势力列表");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, 角色) == 0x000000, "Member 'FL_CustomMode_C_角色势力列表::角色' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_角色势力列表::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, Result) == 0x000018, "Member 'FL_CustomMode_C_角色势力列表::Result' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, Temp) == 0x000028, "Member 'FL_CustomMode_C_角色势力列表::Temp' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'FL_CustomMode_C_角色势力列表::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'FL_CustomMode_C_角色势力列表::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_Array_Get_Item) == 0x000088, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, K2Node_DynamicCast_AsSolar_Character) == 0x000090, "Member 'FL_CustomMode_C_角色势力列表::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'FL_CustomMode_C_角色势力列表::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_Less_IntInt_ReturnValue) == 0x000099, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_GetSolarPlayerState_ReturnValue) == 0x0000A0, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_GetSolarPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_GetTeamName_ReturnValue) == 0x0000A8, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc____________) == 0x0000B8, "Member 'FL_CustomMode_C_角色势力列表::CallFunc____________' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, K2Node_SwitchEnum_CmpSuccess) == 0x0000C0, "Member 'FL_CustomMode_C_角色势力列表::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色势力列表, CallFunc_Set_ToArray_Result) == 0x0000C8, "Member 'FL_CustomMode_C_角色势力列表::CallFunc_Set_ToArray_Result' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.角色驾驶状态
// 0x0028 (0x0028 - 0x0000)
struct FL_CustomMode_C_角色驾驶状态 final
{
public:
	class AActor*                                 NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDriveState                                   ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDriveState                                   CallFunc_GetDriveState_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_角色驾驶状态) == 0x000008, "Wrong alignment on FL_CustomMode_C_角色驾驶状态");
static_assert(sizeof(FL_CustomMode_C_角色驾驶状态) == 0x000028, "Wrong size on FL_CustomMode_C_角色驾驶状态");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, NewParam) == 0x000000, "Member 'FL_CustomMode_C_角色驾驶状态::NewParam' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_角色驾驶状态::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, ReturnValue) == 0x000010, "Member 'FL_CustomMode_C_角色驾驶状态::ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, K2Node_DynamicCast_AsSolar_Character) == 0x000018, "Member 'FL_CustomMode_C_角色驾驶状态::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_CustomMode_C_角色驾驶状态::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_角色驾驶状态, CallFunc_GetDriveState_ReturnValue) == 0x000021, "Member 'FL_CustomMode_C_角色驾驶状态::CallFunc_GetDriveState_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.注册Noya被动提示
// 0x00F0 (0x00F0 - 0x0000)
struct FL_CustomMode_C_注册Noya被动提示 final
{
public:
	E_NoticeType_Noya                             类型;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         持续时间;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 文本;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TMap<uint8, bool>                             触发条件;                                          // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         可触发次数;                                        // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_NoyaNoticeInfo                      K2Node_MakeStruct_S_NoyaNoticeInfo;                // 0x0078(0x0070)(HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      CallFunc___Noya___NoyaWidget;                      // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_注册Noya被动提示) == 0x000008, "Wrong alignment on FL_CustomMode_C_注册Noya被动提示");
static_assert(sizeof(FL_CustomMode_C_注册Noya被动提示) == 0x0000F0, "Wrong size on FL_CustomMode_C_注册Noya被动提示");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, 类型) == 0x000000, "Member 'FL_CustomMode_C_注册Noya被动提示::类型' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, 持续时间) == 0x000004, "Member 'FL_CustomMode_C_注册Noya被动提示::持续时间' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, 文本) == 0x000008, "Member 'FL_CustomMode_C_注册Noya被动提示::文本' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, 触发条件) == 0x000018, "Member 'FL_CustomMode_C_注册Noya被动提示::触发条件' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, 可触发次数) == 0x000068, "Member 'FL_CustomMode_C_注册Noya被动提示::可触发次数' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, __WorldContext) == 0x000070, "Member 'FL_CustomMode_C_注册Noya被动提示::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, K2Node_MakeStruct_S_NoyaNoticeInfo) == 0x000078, "Member 'FL_CustomMode_C_注册Noya被动提示::K2Node_MakeStruct_S_NoyaNoticeInfo' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_注册Noya被动提示, CallFunc___Noya___NoyaWidget) == 0x0000E8, "Member 'FL_CustomMode_C_注册Noya被动提示::CallFunc___Noya___NoyaWidget' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.触发Noya主动提示
// 0x0098 (0x0098 - 0x0000)
struct FL_CustomMode_C_触发Noya主动提示 final
{
public:
	E_NoticeType_Noya                             类型;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         持续时间;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 文本;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_NoyaNoticeInfo                      K2Node_MakeStruct_S_NoyaNoticeInfo;                // 0x0020(0x0070)(HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      CallFunc___Noya___NoyaWidget;                      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_触发Noya主动提示) == 0x000008, "Wrong alignment on FL_CustomMode_C_触发Noya主动提示");
static_assert(sizeof(FL_CustomMode_C_触发Noya主动提示) == 0x000098, "Wrong size on FL_CustomMode_C_触发Noya主动提示");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, 类型) == 0x000000, "Member 'FL_CustomMode_C_触发Noya主动提示::类型' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, 持续时间) == 0x000004, "Member 'FL_CustomMode_C_触发Noya主动提示::持续时间' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, 文本) == 0x000008, "Member 'FL_CustomMode_C_触发Noya主动提示::文本' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, __WorldContext) == 0x000018, "Member 'FL_CustomMode_C_触发Noya主动提示::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, K2Node_MakeStruct_S_NoyaNoticeInfo) == 0x000020, "Member 'FL_CustomMode_C_触发Noya主动提示::K2Node_MakeStruct_S_NoyaNoticeInfo' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_触发Noya主动提示, CallFunc___Noya___NoyaWidget) == 0x000090, "Member 'FL_CustomMode_C_触发Noya主动提示::CallFunc___Noya___NoyaWidget' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.更新Noya触发条件
// 0x0060 (0x0060 - 0x0000)
struct FL_CustomMode_C_更新Noya触发条件 final
{
public:
	TMap<uint8, bool>                             触发条件;                                          // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      CallFunc___Noya___NoyaWidget;                      // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_更新Noya触发条件) == 0x000008, "Wrong alignment on FL_CustomMode_C_更新Noya触发条件");
static_assert(sizeof(FL_CustomMode_C_更新Noya触发条件) == 0x000060, "Wrong size on FL_CustomMode_C_更新Noya触发条件");
static_assert(offsetof(FL_CustomMode_C_更新Noya触发条件, 触发条件) == 0x000000, "Member 'FL_CustomMode_C_更新Noya触发条件::触发条件' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_更新Noya触发条件, __WorldContext) == 0x000050, "Member 'FL_CustomMode_C_更新Noya触发条件::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_更新Noya触发条件, CallFunc___Noya___NoyaWidget) == 0x000058, "Member 'FL_CustomMode_C_更新Noya触发条件::CallFunc___Noya___NoyaWidget' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取Noya界面
// 0x0050 (0x0050 - 0x0000)
struct FL_CustomMode_C_获取Noya界面 final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      NoyaWidget;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      Temp;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarUserWidget*                       CallFunc__c__Create_Widget_And_Display_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      K2Node_DynamicCast_AsUI_Notice_Noya;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_Notice_Noya_C*>              CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_获取Noya界面) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取Noya界面");
static_assert(sizeof(FL_CustomMode_C_获取Noya界面) == 0x000050, "Wrong size on FL_CustomMode_C_获取Noya界面");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, __WorldContext) == 0x000000, "Member 'FL_CustomMode_C_获取Noya界面::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, NoyaWidget) == 0x000008, "Member 'FL_CustomMode_C_获取Noya界面::NoyaWidget' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, Temp) == 0x000010, "Member 'FL_CustomMode_C_获取Noya界面::Temp' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, CallFunc__c__Create_Widget_And_Display_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_获取Noya界面::CallFunc__c__Create_Widget_And_Display_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, K2Node_DynamicCast_AsUI_Notice_Noya) == 0x000020, "Member 'FL_CustomMode_C_获取Noya界面::K2Node_DynamicCast_AsUI_Notice_Noya' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'FL_CustomMode_C_获取Noya界面::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000030, "Member 'FL_CustomMode_C_获取Noya界面::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, CallFunc_Array_Get_Item) == 0x000040, "Member 'FL_CustomMode_C_获取Noya界面::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'FL_CustomMode_C_获取Noya界面::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取Noya界面, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00004C, "Member 'FL_CustomMode_C_获取Noya界面::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.设置Noya提示触发间隔
// 0x0018 (0x0018 - 0x0000)
struct FL_CustomMode_C_设置Noya提示触发间隔 final
{
public:
	float                                         被动提示触发间隔;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Notice_Noya_C*                      CallFunc___Noya___NoyaWidget;                      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_设置Noya提示触发间隔) == 0x000008, "Wrong alignment on FL_CustomMode_C_设置Noya提示触发间隔");
static_assert(sizeof(FL_CustomMode_C_设置Noya提示触发间隔) == 0x000018, "Wrong size on FL_CustomMode_C_设置Noya提示触发间隔");
static_assert(offsetof(FL_CustomMode_C_设置Noya提示触发间隔, 被动提示触发间隔) == 0x000000, "Member 'FL_CustomMode_C_设置Noya提示触发间隔::被动提示触发间隔' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置Noya提示触发间隔, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_设置Noya提示触发间隔::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_设置Noya提示触发间隔, CallFunc___Noya___NoyaWidget) == 0x000010, "Member 'FL_CustomMode_C_设置Noya提示触发间隔::CallFunc___Noya___NoyaWidget' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.Number 2Letter
// 0x0220 (0x0220 - 0x0000)
struct FL_CustomMode_C_Number_2Letter final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Letter;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_5;                            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_6;                            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_7;                            // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_8;                            // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_9;                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_10;                           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_11;                           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_12;                           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_13;                           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_14;                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_15;                           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_16;                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_17;                           // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_18;                           // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_19;                           // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_20;                           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_21;                           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_22;                           // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_23;                           // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_24;                           // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_25;                           // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_26;                           // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_27;                           // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_28;                           // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_Number_2Letter) == 0x000008, "Wrong alignment on FL_CustomMode_C_Number_2Letter");
static_assert(sizeof(FL_CustomMode_C_Number_2Letter) == 0x000220, "Wrong size on FL_CustomMode_C_Number_2Letter");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Number) == 0x000000, "Member 'FL_CustomMode_C_Number_2Letter::Number' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_Number_2Letter::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Letter) == 0x000010, "Member 'FL_CustomMode_C_Number_2Letter::Letter' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_bool_Variable) == 0x000020, "Member 'FL_CustomMode_C_Number_2Letter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000021, "Member 'FL_CustomMode_C_Number_2Letter::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable) == 0x000028, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_1) == 0x000038, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_int_Variable) == 0x000048, "Member 'FL_CustomMode_C_Number_2Letter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, K2Node_Select_Default) == 0x000050, "Member 'FL_CustomMode_C_Number_2Letter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_2) == 0x000060, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_3) == 0x000070, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_4) == 0x000080, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_5) == 0x000090, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_6) == 0x0000A0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_6' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_7) == 0x0000B0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_7' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_8) == 0x0000C0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_8' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_9) == 0x0000D0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_9' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_10) == 0x0000E0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_10' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_11) == 0x0000F0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_11' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_12) == 0x000100, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_12' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_13) == 0x000110, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_13' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_14) == 0x000120, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_14' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_15) == 0x000130, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_15' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_16) == 0x000140, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_16' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_17) == 0x000150, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_17' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_18) == 0x000160, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_18' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_19) == 0x000170, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_19' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_20) == 0x000180, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_20' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_21) == 0x000190, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_21' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_22) == 0x0001A0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_22' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_23) == 0x0001B0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_23' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_24) == 0x0001C0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_24' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_25) == 0x0001D0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_25' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_26) == 0x0001E0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_26' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_27) == 0x0001F0, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_27' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, Temp_string_Variable_28) == 0x000200, "Member 'FL_CustomMode_C_Number_2Letter::Temp_string_Variable_28' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Number_2Letter, K2Node_Select_Default_1) == 0x000210, "Member 'FL_CustomMode_C_Number_2Letter::K2Node_Select_Default_1' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取打包类型
// 0x0010 (0x0010 - 0x0000)
struct FL_CustomMode_C_获取打包类型 final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESolarBuildConfiguration                      打包类型;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESolarBuildConfiguration                      CallFunc_GetBuildConfiguration_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_获取打包类型) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取打包类型");
static_assert(sizeof(FL_CustomMode_C_获取打包类型) == 0x000010, "Wrong size on FL_CustomMode_C_获取打包类型");
static_assert(offsetof(FL_CustomMode_C_获取打包类型, __WorldContext) == 0x000000, "Member 'FL_CustomMode_C_获取打包类型::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取打包类型, 打包类型) == 0x000008, "Member 'FL_CustomMode_C_获取打包类型::打包类型' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取打包类型, CallFunc_GetBuildConfiguration_ReturnValue) == 0x000009, "Member 'FL_CustomMode_C_获取打包类型::CallFunc_GetBuildConfiguration_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.抽选随机数字
// 0x0058 (0x0058 - 0x0000)
struct FL_CustomMode_C_抽选随机数字 final
{
public:
	int32                                         下限;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         上限;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 排除;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LOCAL_备选数字组;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_抽选随机数字) == 0x000008, "Wrong alignment on FL_CustomMode_C_抽选随机数字");
static_assert(sizeof(FL_CustomMode_C_抽选随机数字) == 0x000058, "Wrong size on FL_CustomMode_C_抽选随机数字");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, 下限) == 0x000000, "Member 'FL_CustomMode_C_抽选随机数字::下限' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, 上限) == 0x000004, "Member 'FL_CustomMode_C_抽选随机数字::上限' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, 排除) == 0x000008, "Member 'FL_CustomMode_C_抽选随机数字::排除' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, __WorldContext) == 0x000018, "Member 'FL_CustomMode_C_抽选随机数字::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, Result) == 0x000020, "Member 'FL_CustomMode_C_抽选随机数字::Result' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, LOCAL_备选数字组) == 0x000028, "Member 'FL_CustomMode_C_抽选随机数字::LOCAL_备选数字组' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, Temp_int_Variable) == 0x000038, "Member 'FL_CustomMode_C_抽选随机数字::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Array_Contains_ReturnValue) == 0x00003C, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00003D, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Array_Get_Item) == 0x000044, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Array_AddUnique_ReturnValue) == 0x00004C, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_抽选随机数字, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'FL_CustomMode_C_抽选随机数字::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.转换时间字符串
// 0x0220 (0x0220 - 0x0000)
struct FL_CustomMode_C_转换时间字符串 final
{
public:
	int32                                         秒数;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   时间;                                              // 0x0010(0x0018)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0040(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x00B0(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00E0(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0120(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0138(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0148(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0188(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x01A0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01B8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x01F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0208(0x0018)()
};
static_assert(alignof(FL_CustomMode_C_转换时间字符串) == 0x000008, "Wrong alignment on FL_CustomMode_C_转换时间字符串");
static_assert(sizeof(FL_CustomMode_C_转换时间字符串) == 0x000220, "Wrong size on FL_CustomMode_C_转换时间字符串");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, 秒数) == 0x000000, "Member 'FL_CustomMode_C_转换时间字符串::秒数' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_转换时间字符串::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, 时间) == 0x000010, "Member 'FL_CustomMode_C_转换时间字符串::时间' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, Temp_bool_Variable) == 0x000028, "Member 'FL_CustomMode_C_转换时间字符串::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Percent_IntInt_ReturnValue) == 0x00002C, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, Temp_bool_Variable_1) == 0x000030, "Member 'FL_CustomMode_C_转换时间字符串::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Greater_IntInt_ReturnValue) == 0x000031, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Divide_IntInt_ReturnValue) == 0x000038, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Conv_IntToText_ReturnValue) == 0x000040, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000058, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeArray_Array) == 0x0000A0, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Conv_IntToText_ReturnValue_1) == 0x0000B0, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Format_ReturnValue) == 0x0000C8, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000E0, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_Select_Default) == 0x000120, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeArray_Array_1) == 0x000138, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeStruct_FormatArgumentData_2) == 0x000148, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Format_ReturnValue_1) == 0x000188, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_Select_Default_1) == 0x0001A0, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001B8, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, K2Node_MakeArray_Array_2) == 0x0001F8, "Member 'FL_CustomMode_C_转换时间字符串::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_转换时间字符串, CallFunc_Format_ReturnValue_2) == 0x000208, "Member 'FL_CustomMode_C_转换时间字符串::CallFunc_Format_ReturnValue_2' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.ArrayContain
// 0x0060 (0x0060 - 0x0000)
struct FL_CustomMode_C_ArrayContain final
{
public:
	TArray<class FString>                         Main;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         Sub;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Contain;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Contain2;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_ArrayContain) == 0x000008, "Wrong alignment on FL_CustomMode_C_ArrayContain");
static_assert(sizeof(FL_CustomMode_C_ArrayContain) == 0x000060, "Wrong size on FL_CustomMode_C_ArrayContain");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Main) == 0x000000, "Member 'FL_CustomMode_C_ArrayContain::Main' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Sub) == 0x000010, "Member 'FL_CustomMode_C_ArrayContain::Sub' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, __WorldContext) == 0x000020, "Member 'FL_CustomMode_C_ArrayContain::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Contain) == 0x000028, "Member 'FL_CustomMode_C_ArrayContain::Contain' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Contain2) == 0x000029, "Member 'FL_CustomMode_C_ArrayContain::Contain2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'FL_CustomMode_C_ArrayContain::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Temp_int_Array_Index_Variable) == 0x000034, "Member 'FL_CustomMode_C_ArrayContain::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Array_Get_Item) == 0x000038, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Array_Contains_ReturnValue) == 0x000048, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'FL_CustomMode_C_ArrayContain::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_ArrayContain, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'FL_CustomMode_C_ArrayContain::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.Name2String
// 0x0070 (0x0070 - 0x0000)
struct FL_CustomMode_C_Name2String final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Strings;                                           // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FString>                         NewLocalVar_0;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_Name2String) == 0x000008, "Wrong alignment on FL_CustomMode_C_Name2String");
static_assert(sizeof(FL_CustomMode_C_Name2String) == 0x000070, "Wrong size on FL_CustomMode_C_Name2String");
static_assert(offsetof(FL_CustomMode_C_Name2String, Names) == 0x000000, "Member 'FL_CustomMode_C_Name2String::Names' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C_Name2String::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, Strings) == 0x000018, "Member 'FL_CustomMode_C_Name2String::Strings' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, NewLocalVar_0) == 0x000028, "Member 'FL_CustomMode_C_Name2String::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'FL_CustomMode_C_Name2String::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'FL_CustomMode_C_Name2String::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'FL_CustomMode_C_Name2String::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Array_Get_Item) == 0x000044, "Member 'FL_CustomMode_C_Name2String::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Conv_NameToString_ReturnValue) == 0x000050, "Member 'FL_CustomMode_C_Name2String::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'FL_CustomMode_C_Name2String::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'FL_CustomMode_C_Name2String::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Name2String, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'FL_CustomMode_C_Name2String::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.GetRequestComponet
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_GetRequestComponet final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_RequestMessage_C*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_RequestMessage_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_GetRequestComponet) == 0x000008, "Wrong alignment on FL_CustomMode_C_GetRequestComponet");
static_assert(sizeof(FL_CustomMode_C_GetRequestComponet) == 0x000020, "Wrong size on FL_CustomMode_C_GetRequestComponet");
static_assert(offsetof(FL_CustomMode_C_GetRequestComponet, __WorldContext) == 0x000000, "Member 'FL_CustomMode_C_GetRequestComponet::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetRequestComponet, ReturnValue) == 0x000008, "Member 'FL_CustomMode_C_GetRequestComponet::ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetRequestComponet, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'FL_CustomMode_C_GetRequestComponet::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetRequestComponet, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_GetRequestComponet::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.[s]BindOnRequestDealt
// 0x00A0 (0x00A0 - 0x0000)
struct FL_CustomMode_C__s_BindOnRequestDealt final
{
public:
	TDelegate<void(const struct FS_MessageRequest& Info, bool Result)> Event;                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RequestMessage_C*                   RequestManager;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RequestMessage_C*                   NewLocalVar_0;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RequestMessage_C*                   CallFunc_GetActorOfClass_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Temp_name_Variable;                                // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class ASolarMapElementBase*                   CallFunc_GenerateMapElement_ReturnValue;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RequestMessage_C*                   K2Node_DynamicCast_AsBP_Request_Message;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C__s_BindOnRequestDealt) == 0x000010, "Wrong alignment on FL_CustomMode_C__s_BindOnRequestDealt");
static_assert(sizeof(FL_CustomMode_C__s_BindOnRequestDealt) == 0x0000A0, "Wrong size on FL_CustomMode_C__s_BindOnRequestDealt");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, Event) == 0x000000, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::Event' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, RequestManager) == 0x000018, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::RequestManager' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, NewLocalVar_0) == 0x000020, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, CallFunc_GetActorOfClass_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, Temp_name_Variable) == 0x000038, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, CallFunc_GenerateMapElement_ReturnValue) == 0x000080, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::CallFunc_GenerateMapElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, K2Node_DynamicCast_AsBP_Request_Message) == 0x000088, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::K2Node_DynamicCast_AsBP_Request_Message' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnRequestDealt, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'FL_CustomMode_C__s_BindOnRequestDealt::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.[c]BindOnRequestReplied
// 0x0028 (0x0028 - 0x0000)
struct FL_CustomMode_C__c_BindOnRequestReplied final
{
public:
	TDelegate<void(const class FString& Handle, bool Reply, uint8 Type, int32 ReplierPlayerID)> Event; // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_RequestMessage_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C__c_BindOnRequestReplied) == 0x000008, "Wrong alignment on FL_CustomMode_C__c_BindOnRequestReplied");
static_assert(sizeof(FL_CustomMode_C__c_BindOnRequestReplied) == 0x000028, "Wrong size on FL_CustomMode_C__c_BindOnRequestReplied");
static_assert(offsetof(FL_CustomMode_C__c_BindOnRequestReplied, Event) == 0x000000, "Member 'FL_CustomMode_C__c_BindOnRequestReplied::Event' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__c_BindOnRequestReplied, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C__c_BindOnRequestReplied::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__c_BindOnRequestReplied, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C__c_BindOnRequestReplied::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__c_BindOnRequestReplied, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C__c_BindOnRequestReplied::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.[c]BindOnReceiveRequest
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C__c_BindOnReceiveRequest final
{
public:
	TDelegate<void(const class FString& Handle, uint8 Type, int32 SenderPlayerID)> Event;            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_RequestMessage_C*                  CallFunc_GetRequestComponet_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C__c_BindOnReceiveRequest) == 0x000008, "Wrong alignment on FL_CustomMode_C__c_BindOnReceiveRequest");
static_assert(sizeof(FL_CustomMode_C__c_BindOnReceiveRequest) == 0x000020, "Wrong size on FL_CustomMode_C__c_BindOnReceiveRequest");
static_assert(offsetof(FL_CustomMode_C__c_BindOnReceiveRequest, Event) == 0x000000, "Member 'FL_CustomMode_C__c_BindOnReceiveRequest::Event' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__c_BindOnReceiveRequest, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C__c_BindOnReceiveRequest::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__c_BindOnReceiveRequest, CallFunc_GetRequestComponet_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C__c_BindOnReceiveRequest::CallFunc_GetRequestComponet_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.GetNetMode
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_GetNetMode final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESolarNetMode                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarGameInstanceBase*                 CallFunc_GetSolarGameInstanceBase_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESolarNetMode                                 CallFunc_GetNetMode_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_GetNetMode) == 0x000008, "Wrong alignment on FL_CustomMode_C_GetNetMode");
static_assert(sizeof(FL_CustomMode_C_GetNetMode) == 0x000020, "Wrong size on FL_CustomMode_C_GetNetMode");
static_assert(offsetof(FL_CustomMode_C_GetNetMode, __WorldContext) == 0x000000, "Member 'FL_CustomMode_C_GetNetMode::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetNetMode, ReturnValue) == 0x000008, "Member 'FL_CustomMode_C_GetNetMode::ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetNetMode, CallFunc_GetSolarGameInstanceBase_ReturnValue) == 0x000010, "Member 'FL_CustomMode_C_GetNetMode::CallFunc_GetSolarGameInstanceBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_GetNetMode, CallFunc_GetNetMode_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_GetNetMode::CallFunc_GetNetMode_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.Pawn is a vehicle
// 0x0028 (0x0028 - 0x0000)
struct FL_CustomMode_C_Pawn_is_a_vehicle final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarVehiclePawn*                      K2Node_DynamicCast_AsSolar_Vehicle_Pawn;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_Pawn_is_a_vehicle) == 0x000008, "Wrong alignment on FL_CustomMode_C_Pawn_is_a_vehicle");
static_assert(sizeof(FL_CustomMode_C_Pawn_is_a_vehicle) == 0x000028, "Wrong size on FL_CustomMode_C_Pawn_is_a_vehicle");
static_assert(offsetof(FL_CustomMode_C_Pawn_is_a_vehicle, Pawn) == 0x000000, "Member 'FL_CustomMode_C_Pawn_is_a_vehicle::Pawn' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Pawn_is_a_vehicle, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_Pawn_is_a_vehicle::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Pawn_is_a_vehicle, Result) == 0x000010, "Member 'FL_CustomMode_C_Pawn_is_a_vehicle::Result' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Pawn_is_a_vehicle, K2Node_DynamicCast_AsSolar_Vehicle_Pawn) == 0x000018, "Member 'FL_CustomMode_C_Pawn_is_a_vehicle::K2Node_DynamicCast_AsSolar_Vehicle_Pawn' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Pawn_is_a_vehicle, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_CustomMode_C_Pawn_is_a_vehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取武器Icon
// 0x01B8 (0x01B8 - 0x0000)
struct FL_CustomMode_C_获取武器Icon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             武器Icon;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         品质;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartsType;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarTables*                           CallFunc_GetInstance_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasRowKey_ReturnValue;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarTablesData_GunProperty           CallFunc_GetRowData_ReturnValue;                   // 0x0030(0x00D8)(ConstParm)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0108(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0120(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0160(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0170(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSoftClassPath                         CallFunc_MakeSoftClassPath_ReturnValue;            // 0x0198(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_LoadTexture2DBySoftPath_ReturnValue;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_获取武器Icon) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取武器Icon");
static_assert(sizeof(FL_CustomMode_C_获取武器Icon) == 0x0001B8, "Wrong size on FL_CustomMode_C_获取武器Icon");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, ID) == 0x000000, "Member 'FL_CustomMode_C_获取武器Icon::ID' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_获取武器Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, 武器Icon) == 0x000010, "Member 'FL_CustomMode_C_获取武器Icon::武器Icon' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, 品质) == 0x000018, "Member 'FL_CustomMode_C_获取武器Icon::品质' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, PartsType) == 0x00001C, "Member 'FL_CustomMode_C_获取武器Icon::PartsType' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_GetInstance_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_HasRowKey_ReturnValue) == 0x00002A, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_HasRowKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_IsValid_ReturnValue_2) == 0x00002B, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_GetRowData_ReturnValue) == 0x000030, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_GetRowData_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_Conv_StringToText_ReturnValue) == 0x000108, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, K2Node_MakeStruct_FormatArgumentData) == 0x000120, "Member 'FL_CustomMode_C_获取武器Icon::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, K2Node_MakeArray_Array) == 0x000160, "Member 'FL_CustomMode_C_获取武器Icon::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_Format_ReturnValue) == 0x000170, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_Conv_TextToString_ReturnValue) == 0x000188, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_MakeSoftClassPath_ReturnValue) == 0x000198, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_MakeSoftClassPath_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器Icon, CallFunc_LoadTexture2DBySoftPath_ReturnValue) == 0x0001B0, "Member 'FL_CustomMode_C_获取武器Icon::CallFunc_LoadTexture2DBySoftPath_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.获取武器技能Icon
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_获取武器技能Icon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             武器技能Icon;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         武器技能本地化ID;                                  // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_获取武器技能Icon) == 0x000008, "Wrong alignment on FL_CustomMode_C_获取武器技能Icon");
static_assert(sizeof(FL_CustomMode_C_获取武器技能Icon) == 0x000020, "Wrong size on FL_CustomMode_C_获取武器技能Icon");
static_assert(offsetof(FL_CustomMode_C_获取武器技能Icon, ID) == 0x000000, "Member 'FL_CustomMode_C_获取武器技能Icon::ID' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器技能Icon, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_获取武器技能Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器技能Icon, 武器技能Icon) == 0x000010, "Member 'FL_CustomMode_C_获取武器技能Icon::武器技能Icon' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_获取武器技能Icon, 武器技能本地化ID) == 0x000018, "Member 'FL_CustomMode_C_获取武器技能Icon::武器技能本地化ID' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.从物品ID获取本地化文本ID
// 0x00C0 (0x00C0 - 0x0000)
struct FL_CustomMode_C_从物品ID获取本地化文本ID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         文本ID;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarTables*                           CallFunc_GetInstance_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryGetRowData_HasKey;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarTablesData_ItemInBattle          CallFunc_TryGetRowData_ReturnValue;                // 0x0028(0x0090)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C_从物品ID获取本地化文本ID) == 0x000008, "Wrong alignment on FL_CustomMode_C_从物品ID获取本地化文本ID");
static_assert(sizeof(FL_CustomMode_C_从物品ID获取本地化文本ID) == 0x0000C0, "Wrong size on FL_CustomMode_C_从物品ID获取本地化文本ID");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, ID) == 0x000000, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::ID' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, 文本ID) == 0x000010, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::文本ID' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_GetInstance_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_TryGetRowData_HasKey) == 0x000022, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_TryGetRowData_HasKey' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_TryGetRowData_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_TryGetRowData_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_从物品ID获取本地化文本ID, CallFunc_IsValid_ReturnValue_2) == 0x0000B8, "Member 'FL_CustomMode_C_从物品ID获取本地化文本ID::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.[s]BindOnPlayerDisconnected
// 0x0038 (0x0038 - 0x0000)
struct FL_CustomMode_C__s_BindOnPlayerDisconnected final
{
public:
	TDelegate<void(const class ASolarPlayerController* PC)> Event;                                   // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBattleGameMode*                       K2Node_DynamicCast_AsSBattle_Game_Mode;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C__s_BindOnPlayerDisconnected) == 0x000008, "Wrong alignment on FL_CustomMode_C__s_BindOnPlayerDisconnected");
static_assert(sizeof(FL_CustomMode_C__s_BindOnPlayerDisconnected) == 0x000038, "Wrong size on FL_CustomMode_C__s_BindOnPlayerDisconnected");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, Event) == 0x000000, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::Event' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, bSuccess) == 0x000018, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, K2Node_DynamicCast_AsSBattle_Game_Mode) == 0x000028, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::K2Node_DynamicCast_AsSBattle_Game_Mode' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerDisconnected, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'FL_CustomMode_C__s_BindOnPlayerDisconnected::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.[s]BindOnPlayerReconnected
// 0x0038 (0x0038 - 0x0000)
struct FL_CustomMode_C__s_BindOnPlayerReconnected final
{
public:
	TDelegate<void(const class ASolarPlayerController* PC)> Event;                                   // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBattleGameMode*                       K2Node_DynamicCast_AsSBattle_Game_Mode;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_CustomMode_C__s_BindOnPlayerReconnected) == 0x000008, "Wrong alignment on FL_CustomMode_C__s_BindOnPlayerReconnected");
static_assert(sizeof(FL_CustomMode_C__s_BindOnPlayerReconnected) == 0x000038, "Wrong size on FL_CustomMode_C__s_BindOnPlayerReconnected");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, Event) == 0x000000, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::Event' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, __WorldContext) == 0x000010, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, bSuccess) == 0x000018, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::bSuccess' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, K2Node_DynamicCast_AsSBattle_Game_Mode) == 0x000028, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::K2Node_DynamicCast_AsSBattle_Game_Mode' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C__s_BindOnPlayerReconnected, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'FL_CustomMode_C__s_BindOnPlayerReconnected::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.Get Loc Request Componet
// 0x0030 (0x0030 - 0x0000)
struct FL_CustomMode_C_Get_Loc_Request_Componet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULocal_RequestMessage_C*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocal_RequestMessage_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_Get_Loc_Request_Componet) == 0x000008, "Wrong alignment on FL_CustomMode_C_Get_Loc_Request_Componet");
static_assert(sizeof(FL_CustomMode_C_Get_Loc_Request_Componet) == 0x000030, "Wrong size on FL_CustomMode_C_Get_Loc_Request_Componet");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, WorldContextObject) == 0x000000, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, ReturnValue) == 0x000010, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Loc_Request_Componet, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'FL_CustomMode_C_Get_Loc_Request_Componet::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function FL_CustomMode.FL_CustomMode_C.Get Portrait from Avatar ID
// 0x0020 (0x0020 - 0x0000)
struct FL_CustomMode_C_Get_Portrait_from_Avatar_ID final
{
public:
	int32                                         Avatar_ID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Portrait_Texture;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetAvatarIconWithID_OutAvatar;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID) == 0x000008, "Wrong alignment on FL_CustomMode_C_Get_Portrait_from_Avatar_ID");
static_assert(sizeof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID) == 0x000020, "Wrong size on FL_CustomMode_C_Get_Portrait_from_Avatar_ID");
static_assert(offsetof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID, Avatar_ID) == 0x000000, "Member 'FL_CustomMode_C_Get_Portrait_from_Avatar_ID::Avatar_ID' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID, __WorldContext) == 0x000008, "Member 'FL_CustomMode_C_Get_Portrait_from_Avatar_ID::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID, Portrait_Texture) == 0x000010, "Member 'FL_CustomMode_C_Get_Portrait_from_Avatar_ID::Portrait_Texture' has a wrong offset!");
static_assert(offsetof(FL_CustomMode_C_Get_Portrait_from_Avatar_ID, CallFunc_GetAvatarIconWithID_OutAvatar) == 0x000018, "Member 'FL_CustomMode_C_Get_Portrait_from_Avatar_ID::CallFunc_GetAvatarIconWithID_OutAvatar' has a wrong offset!");

}

