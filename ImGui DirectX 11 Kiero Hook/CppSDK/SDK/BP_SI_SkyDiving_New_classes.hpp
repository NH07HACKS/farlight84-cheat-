#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SI_SkyDiving_New

#include "Basic.hpp"

#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SI_SkyDiving_New.BP_SI_SkyDiving_New_C
// 0x0020 (0x0E60 - 0x0E40)
class ABP_SI_SkyDiving_New_C final : public ASceneSkywardDiveLauncher
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0E40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FBX_Cylinder_001;                                  // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FBX_Dark;                                          // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FBX_Bright;                                        // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SI_SkyDiving_New_C">();
	}
	static class ABP_SI_SkyDiving_New_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SI_SkyDiving_New_C>();
	}
};
static_assert(alignof(ABP_SI_SkyDiving_New_C) == 0x000010, "Wrong alignment on ABP_SI_SkyDiving_New_C");
static_assert(sizeof(ABP_SI_SkyDiving_New_C) == 0x000E60, "Wrong size on ABP_SI_SkyDiving_New_C");
static_assert(offsetof(ABP_SI_SkyDiving_New_C, Capsule) == 0x000E40, "Member 'ABP_SI_SkyDiving_New_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_SI_SkyDiving_New_C, FBX_Cylinder_001) == 0x000E48, "Member 'ABP_SI_SkyDiving_New_C::FBX_Cylinder_001' has a wrong offset!");
static_assert(offsetof(ABP_SI_SkyDiving_New_C, FBX_Dark) == 0x000E50, "Member 'ABP_SI_SkyDiving_New_C::FBX_Dark' has a wrong offset!");
static_assert(offsetof(ABP_SI_SkyDiving_New_C, FBX_Bright) == 0x000E58, "Member 'ABP_SI_SkyDiving_New_C::FBX_Bright' has a wrong offset!");

}

