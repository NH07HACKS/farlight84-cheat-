#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_MapMarkFeature_Slot

#include "Basic.hpp"

#include "SolarUI_structs.hpp"


namespace SDK::Params
{

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.ExecuteUbergraph_UI_MapMarkFeature_Slot
// 0x000C (0x000C - 0x0000)
struct UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot) == 0x000004, "Wrong alignment on UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot) == 0x00000C, "Wrong size on UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, EntryPoint) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, K2Node_Event_bIsSelected) == 0x000004, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, Temp_byte_Variable) == 0x000005, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, Temp_bool_Variable) == 0x000006, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, Temp_bool_Variable_1) == 0x000007, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, K2Node_Event_bIsExpanded) == 0x000008, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, K2Node_Event_IsDesignTime) == 0x000009, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, K2Node_Event_InLayoutType) == 0x00000A, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot, K2Node_Select_Default) == 0x00000B, "Member 'UI_MapMarkFeature_Slot_C_ExecuteUbergraph_UI_MapMarkFeature_Slot::K2Node_Select_Default' has a wrong offset!");

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMarkFeature_Slot_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_MapMarkFeature_Slot_C_ReceivePlatformLayout");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_MapMarkFeature_Slot_C_ReceivePlatformLayout");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMarkFeature_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on UI_MapMarkFeature_Slot_C_PreConstruct");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_PreConstruct) == 0x000001, "Wrong size on UI_MapMarkFeature_Slot_C_PreConstruct");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_MapMarkFeature_Slot.UI_MapMarkFeature_Slot_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_MapMarkFeature_Slot_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

}

