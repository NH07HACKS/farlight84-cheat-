#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BTS_AngleCal

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_BTS_AngleCal.BP_BTS_AngleCal_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BP_BTS_AngleCal_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleCal_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BP_BTS_AngleCal_C_ReceiveTickAI");
static_assert(sizeof(BP_BTS_AngleCal_C_ReceiveTickAI) == 0x000018, "Wrong size on BP_BTS_AngleCal_C_ReceiveTickAI");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleCal_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveTickAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleCal_C_ReceiveTickAI::ControlledPawn_0' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BP_BTS_AngleCal_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BP_BTS_AngleCal.BP_BTS_AngleCal_C.ReceiveSearchStartAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_AngleCal_C_ReceiveSearchStartAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleCal_C_ReceiveSearchStartAI) == 0x000008, "Wrong alignment on BP_BTS_AngleCal_C_ReceiveSearchStartAI");
static_assert(sizeof(BP_BTS_AngleCal_C_ReceiveSearchStartAI) == 0x000010, "Wrong size on BP_BTS_AngleCal_C_ReceiveSearchStartAI");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveSearchStartAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleCal_C_ReceiveSearchStartAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveSearchStartAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleCal_C_ReceiveSearchStartAI::ControlledPawn_0' has a wrong offset!");

// Function BP_BTS_AngleCal.BP_BTS_AngleCal_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_AngleCal_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleCal_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BP_BTS_AngleCal_C_ReceiveActivationAI");
static_assert(sizeof(BP_BTS_AngleCal_C_ReceiveActivationAI) == 0x000010, "Wrong size on BP_BTS_AngleCal_C_ReceiveActivationAI");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleCal_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ReceiveActivationAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleCal_C_ReceiveActivationAI::ControlledPawn_0' has a wrong offset!");

// Function BP_BTS_AngleCal.BP_BTS_AngleCal_C.ExecuteUbergraph_BP_BTS_AngleCal
// 0x00C0 (0x00C0 - 0x0000)
struct BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarBotAIController*                  K2Node_DynamicCast_AsSolar_Bot_AIController;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal) == 0x000008, "Wrong alignment on BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal");
static_assert(sizeof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal) == 0x0000C0, "Wrong size on BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, EntryPoint) == 0x000000, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_OwnerController_2) == 0x000010, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_ControlledPawn_2) == 0x000018, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_OwnerController_1) == 0x000028, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_ControlledPawn_1) == 0x000030, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_OwnerController) == 0x000038, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_Event_ControlledPawn) == 0x000040, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_DynamicCast_AsSolar_Bot_AIController) == 0x000048, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_DynamicCast_AsSolar_Bot_AIController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_GetActorForwardVector_ReturnValue) == 0x000054, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_Vector_Normal2D_ReturnValue) == 0x00006C, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000078, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00008C, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x000098, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000A4, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_BreakVector_X) == 0x0000B4, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_BreakVector_Y) == 0x0000B8, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal, CallFunc_BreakVector_Z) == 0x0000BC, "Member 'BP_BTS_AngleCal_C_ExecuteUbergraph_BP_BTS_AngleCal::CallFunc_BreakVector_Z' has a wrong offset!");

}

