#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_PlayerInfo_Herofighting_TitleSlot

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "UMG_structs.hpp"
#include "E_RankingType_structs.hpp"
#include "SolarUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot
// 0x0018 (0x0018 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot) == 0x000004, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot) == 0x000018, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, EntryPoint) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, K2Node_Event_InLayoutType) == 0x000005, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, CallFunc_BreakVector2D_X) == 0x000008, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, CallFunc_BreakVector2D_X_1) == 0x000010, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot, CallFunc_BreakVector2D_Y_1) == 0x000014, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ExecuteUbergraph_UI_PlayerInfo_Herofighting_TitleSlot::CallFunc_BreakVector2D_Y_1' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct) == 0x000001, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct) == 0x000001, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.SetShadow
// 0x000A (0x000A - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow final
{
public:
	bool                                          SetShadow_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCut_0;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWidgetClipping                               Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWidgetClipping                               Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWidgetClipping                               K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow) == 0x000001, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow) == 0x00000A, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, SetShadow_0) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::SetShadow_0' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, IsCut_0) == 0x000001, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::IsCut_0' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_bool_Variable) == 0x000002, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_byte_Variable) == 0x000003, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_byte_Variable_1) == 0x000004, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_bool_Variable_1) == 0x000005, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_byte_Variable_2) == 0x000006, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, Temp_byte_Variable_3) == 0x000007, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, K2Node_Select_Default) == 0x000008, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow, K2Node_Select_Default_1) == 0x000009, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetShadow::K2Node_Select_Default_1' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.SetRankingTitle
// 0x00E8 (0x00E8 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle final
{
public:
	E_RankingType                                 LocationType_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_1;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_2;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_3;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_4;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_5;                              // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_6;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform;                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 K2Node_Select_Default_2;                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RankingType                                 Temp_byte_Variable_7;                              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Select_Default_3;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle) == 0x000008, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle) == 0x0000E8, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, LocationType_0) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::LocationType_0' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_object_Variable) == 0x000008, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_object_Variable_1) == 0x000010, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_object_Variable_2) == 0x000018, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_object_Variable_3) == 0x000020, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable) == 0x000028, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable) == 0x00002C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_1) == 0x00003C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_2) == 0x00004C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_3) == 0x00005C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_1) == 0x00006C, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_4) == 0x000070, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_5) == 0x000080, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_6) == 0x000090, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_struct_Variable_7) == 0x0000A0, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_2) == 0x0000B0, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_3) == 0x0000B1, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_4) == 0x0000B2, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_5) == 0x0000B3, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_6) == 0x0000B4, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, CallFunc_IsPCPlatform_IsPCPlatform) == 0x0000B5, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::CallFunc_IsPCPlatform_IsPCPlatform' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, K2Node_Select_Default) == 0x0000B8, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, K2Node_Select_Default_1) == 0x0000C8, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, K2Node_Select_Default_2) == 0x0000D8, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, Temp_byte_Variable_7) == 0x0000D9, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle, K2Node_Select_Default_3) == 0x0000E0, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetRankingTitle::K2Node_Select_Default_3' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.SetInitVisible
// 0x0001 (0x0001 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible final
{
public:
	bool                                          InitVisible_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible) == 0x000001, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible) == 0x000001, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible, InitVisible_0) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetInitVisible::InitVisible_0' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.BP_SetTitle
// 0x0014 (0x0014 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle final
{
public:
	struct FHeroRankInfoForLua                    Title;                                             // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle) == 0x000004, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle) == 0x000014, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle, Title) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitle::Title' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.SetHeroPick
// 0x0005 (0x0005 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick final
{
public:
	bool                                          IsHeroPick_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick) == 0x000001, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick) == 0x000005, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick, IsHeroPick_0) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick::IsHeroPick_0' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick, Temp_bool_Variable) == 0x000001, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick, Temp_byte_Variable) == 0x000002, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick, Temp_byte_Variable_1) == 0x000003, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick, K2Node_Select_Default) == 0x000004, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_SetHeroPick::K2Node_Select_Default' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.BP_SetTitleCopy
// 0x0014 (0x0014 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy final
{
public:
	struct FHeroRankInfoForLua                    Title;                                             // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy) == 0x000004, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy) == 0x000014, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy, Title) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_BP_SetTitleCopy::Title' has a wrong offset!");

// Function UI_PlayerInfo_Herofighting_TitleSlot.UI_PlayerInfo_Herofighting_TitleSlot_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName) == 0x000008, "Wrong alignment on UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName");
static_assert(sizeof(UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName) == 0x000010, "Wrong size on UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName");
static_assert(offsetof(UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_PlayerInfo_Herofighting_TitleSlot_C_GetModuleName::ReturnValue' has a wrong offset!");

}

