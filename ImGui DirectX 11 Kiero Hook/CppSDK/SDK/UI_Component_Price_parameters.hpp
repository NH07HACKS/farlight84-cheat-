#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_Price

#include "Basic.hpp"

#include "E_Shopping_State_structs.hpp"
#include "E_Type_Btn_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_Price.UI_Component_Price_C.ExecuteUbergraph_UI_Component_Price
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price) == 0x000004, "Wrong alignment on UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price");
static_assert(sizeof(UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price) == 0x000008, "Wrong size on UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price");
static_assert(offsetof(UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price, EntryPoint) == 0x000000, "Member 'UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_Component_Price_C_ExecuteUbergraph_UI_Component_Price::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_Component_Price.UI_Component_Price_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Price_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Price_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_Price_C_PreConstruct");
static_assert(sizeof(UI_Component_Price_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_Price_C_PreConstruct");
static_assert(offsetof(UI_Component_Price_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_Price_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_Price.UI_Component_Price_C.SetPrice
// 0x0198 (0x0198 - 0x0000)
struct UI_Component_Price_C_SetPrice final
{
public:
	int32                                         Diamond_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Coin_0;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisDiamond_0;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisCoin_0;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Shopping_State                              Shopping_State_0;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCoinenough;                                      // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDiamondEngough;                                  // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Shopping_State                              Temp_byte_Variable_5;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0040(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0088(0x0028)()
	bool                                          Temp_bool_Variable_6;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x00B8(0x0028)()
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00E8(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0110(0x0028)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x0138(0x0018)()
	struct FSlateColor                            K2Node_Select_Default_4;                           // 0x0150(0x0028)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_3;             // 0x0178(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_6;                           // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Price_C_SetPrice) == 0x000008, "Wrong alignment on UI_Component_Price_C_SetPrice");
static_assert(sizeof(UI_Component_Price_C_SetPrice) == 0x000198, "Wrong size on UI_Component_Price_C_SetPrice");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Diamond_0) == 0x000000, "Member 'UI_Component_Price_C_SetPrice::Diamond_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Coin_0) == 0x000004, "Member 'UI_Component_Price_C_SetPrice::Coin_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, DisDiamond_0) == 0x000008, "Member 'UI_Component_Price_C_SetPrice::DisDiamond_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, DisCoin_0) == 0x00000C, "Member 'UI_Component_Price_C_SetPrice::DisCoin_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Shopping_State_0) == 0x000010, "Member 'UI_Component_Price_C_SetPrice::Shopping_State_0' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, IsCoinenough) == 0x000011, "Member 'UI_Component_Price_C_SetPrice::IsCoinenough' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, IsDiamondEngough) == 0x000012, "Member 'UI_Component_Price_C_SetPrice::IsDiamondEngough' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable) == 0x000013, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable) == 0x000014, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_1) == 0x000015, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_1) == 0x000016, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_2) == 0x000017, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_2) == 0x000018, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_3) == 0x000019, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_4) == 0x00001A, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_5) == 0x00001B, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_3) == 0x00001C, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_4) == 0x00001D, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_6) == 0x00001E, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_7) == 0x00001F, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_5) == 0x000020, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_8) == 0x000021, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_9) == 0x000022, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Greater_IntInt_ReturnValue) == 0x000023, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000024, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'UI_Component_Price_C_SetPrice::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000040, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000058, "Member 'UI_Component_Price_C_SetPrice::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000059, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default) == 0x00005A, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_1) == 0x00005B, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_byte_Variable_10) == 0x00005C, "Member 'UI_Component_Price_C_SetPrice::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'UI_Component_Price_C_SetPrice::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_MakeStruct_SlateColor_1) == 0x000088, "Member 'UI_Component_Price_C_SetPrice::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, Temp_bool_Variable_6) == 0x0000B0, "Member 'UI_Component_Price_C_SetPrice::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_2) == 0x0000B8, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_3) == 0x0000E0, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_MakeStruct_SlateColor_2) == 0x0000E8, "Member 'UI_Component_Price_C_SetPrice::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_MakeStruct_SlateColor_3) == 0x000110, "Member 'UI_Component_Price_C_SetPrice::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Conv_IntToText_ReturnValue_2) == 0x000138, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_4) == 0x000150, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Conv_IntToText_ReturnValue_3) == 0x000178, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Conv_IntToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000190, "Member 'UI_Component_Price_C_SetPrice::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000191, "Member 'UI_Component_Price_C_SetPrice::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_5) == 0x000192, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000193, "Member 'UI_Component_Price_C_SetPrice::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_BooleanAND_ReturnValue_1) == 0x000194, "Member 'UI_Component_Price_C_SetPrice::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000195, "Member 'UI_Component_Price_C_SetPrice::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_6) == 0x000196, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Price_C_SetPrice, K2Node_Select_Default_7) == 0x000197, "Member 'UI_Component_Price_C_SetPrice::K2Node_Select_Default_7' has a wrong offset!");

// Function UI_Component_Price.UI_Component_Price_C.SetColor
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Price_C_SetColor final
{
public:
	E_Type_Btn                                    BtnType_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Price_C_SetColor) == 0x000001, "Wrong alignment on UI_Component_Price_C_SetColor");
static_assert(sizeof(UI_Component_Price_C_SetColor) == 0x000001, "Wrong size on UI_Component_Price_C_SetColor");
static_assert(offsetof(UI_Component_Price_C_SetColor, BtnType_0) == 0x000000, "Member 'UI_Component_Price_C_SetColor::BtnType_0' has a wrong offset!");

}

