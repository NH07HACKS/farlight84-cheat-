#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementFormula

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTMinuteKill
// 0x0070 (0x0070 - 0x0000)
struct BP_AchievementFormula_C_AchTMinuteKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewLocalVar_0;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarGameState*                        K2Node_DynamicCast_AsSolar_Game_State;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGameModeGroupID_ReturnValue;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBattleElapsedTime_ReturnValue;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetAchievedConditionValue_ReturnValue;    // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out_1;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Float_ReturnValue;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTMinuteKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTMinuteKill");
static_assert(sizeof(BP_AchievementFormula_C_AchTMinuteKill) == 0x000070, "Wrong size on BP_AchievementFormula_C_AchTMinuteKill");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTMinuteKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, NewLocalVar_0) == 0x000004, "Member 'BP_AchievementFormula_C_AchTMinuteKill::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, K2Node_DynamicCast_AsSolar_Game_State) == 0x000010, "Member 'BP_AchievementFormula_C_AchTMinuteKill::K2Node_DynamicCast_AsSolar_Game_State' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AchievementFormula_C_AchTMinuteKill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetGameModeGroupID_ReturnValue) == 0x00001C, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetGameModeGroupID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetBattleElapsedTime_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetBattleElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetAchievedConditionValue_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetAchievedConditionValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_Array_Get_Item) == 0x00003C, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetAchievement_AchievementComponent) == 0x000040, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000048, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetPlayerData_Out) == 0x000050, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetPlayerData_Out_1) == 0x000058, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetPlayerData_Out_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetValue_Int_ReturnValue) == 0x000060, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GetValue_Float_ReturnValue) == 0x000064, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GetValue_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006C, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006D, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_BooleanAND_ReturnValue) == 0x00006E, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMinuteKill, CallFunc_BooleanAND_ReturnValue_1) == 0x00006F, "Member 'BP_AchievementFormula_C_AchTMinuteKill::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTUseVehicle
// 0x0038 (0x0038 - 0x0000)
struct BP_AchievementFormula_C_AchTUseVehicle final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetValue_IntArray_OutResult;              // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTUseVehicle) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTUseVehicle");
static_assert(sizeof(BP_AchievementFormula_C_AchTUseVehicle) == 0x000038, "Wrong size on BP_AchievementFormula_C_AchTUseVehicle");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTUseVehicle::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_GetPlayerData_Out) == 0x000018, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_GetValue_IntArray_OutResult) == 0x000020, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_GetValue_IntArray_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTUseVehicle, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_AchievementFormula_C_AchTUseVehicle::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C. AchTHPKill
// 0x0038 (0x0038 - 0x0000)
struct BP_AchievementFormula_C__AchTHPKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetAchievedConditionValue_ReturnValue;    // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentHealth_ReturnValue;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C__AchTHPKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C__AchTHPKill");
static_assert(sizeof(BP_AchievementFormula_C__AchTHPKill) == 0x000038, "Wrong size on BP_AchievementFormula_C__AchTHPKill");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C__AchTHPKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_GetAchievedConditionValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_GetAchievedConditionValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_GetSolarPlayerState_OutResult) == 0x000028, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_GetCurrentHealth_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_GetCurrentHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTHPKill, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_AchievementFormula_C__AchTHPKill::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.GetSolarPlayerState
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementFormula_C_GetSolarPlayerState final
{
public:
	class ASolarPlayerState*                      OutResult;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      K2Node_DynamicCast_AsSolar_Player_State;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_GetSolarPlayerState) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_GetSolarPlayerState");
static_assert(sizeof(BP_AchievementFormula_C_GetSolarPlayerState) == 0x000020, "Wrong size on BP_AchievementFormula_C_GetSolarPlayerState");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarPlayerState, OutResult) == 0x000000, "Member 'BP_AchievementFormula_C_GetSolarPlayerState::OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarPlayerState, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C_GetSolarPlayerState::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarPlayerState, K2Node_DynamicCast_AsSolar_Player_State) == 0x000010, "Member 'BP_AchievementFormula_C_GetSolarPlayerState::K2Node_DynamicCast_AsSolar_Player_State' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarPlayerState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AchievementFormula_C_GetSolarPlayerState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.GetAchievement
// 0x0018 (0x0018 - 0x0000)
struct BP_AchievementFormula_C_GetAchievement final
{
public:
	class USolarAchievementComponent*             AchievementComponent;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_GetAchievement) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_GetAchievement");
static_assert(sizeof(BP_AchievementFormula_C_GetAchievement) == 0x000018, "Wrong size on BP_AchievementFormula_C_GetAchievement");
static_assert(offsetof(BP_AchievementFormula_C_GetAchievement, AchievementComponent) == 0x000000, "Member 'BP_AchievementFormula_C_GetAchievement::AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetAchievement, CallFunc_GetSolarPlayerState_OutResult) == 0x000008, "Member 'BP_AchievementFormula_C_GetAchievement::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetAchievement, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_GetAchievement::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.GetPlayerData
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementFormula_C_GetPlayerData final
{
public:
	class UPlayerStatisticsData*                  Out;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerStatData_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_GetPlayerData) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_GetPlayerData");
static_assert(sizeof(BP_AchievementFormula_C_GetPlayerData) == 0x000028, "Wrong size on BP_AchievementFormula_C_GetPlayerData");
static_assert(offsetof(BP_AchievementFormula_C_GetPlayerData, Out) == 0x000000, "Member 'BP_AchievementFormula_C_GetPlayerData::Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetPlayerData, CallFunc_GetSolarPlayerState_OutResult) == 0x000008, "Member 'BP_AchievementFormula_C_GetPlayerData::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetPlayerData, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_GetPlayerData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetPlayerData, CallFunc_GetPlayerStatData_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_GetPlayerData::CallFunc_GetPlayerStatData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetPlayerData, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_AchievementFormula_C_GetPlayerData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.GetSolarGameState
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementFormula_C_GetSolarGameState final
{
public:
	class ASolarGameState*                        Out;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarGameState*                        K2Node_DynamicCast_AsSolar_Game_State;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_GetSolarGameState) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_GetSolarGameState");
static_assert(sizeof(BP_AchievementFormula_C_GetSolarGameState) == 0x000020, "Wrong size on BP_AchievementFormula_C_GetSolarGameState");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarGameState, Out) == 0x000000, "Member 'BP_AchievementFormula_C_GetSolarGameState::Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarGameState, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C_GetSolarGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarGameState, K2Node_DynamicCast_AsSolar_Game_State) == 0x000010, "Member 'BP_AchievementFormula_C_GetSolarGameState::K2Node_DynamicCast_AsSolar_Game_State' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_GetSolarGameState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AchievementFormula_C_GetSolarGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C. AchTLimitWin
// 0x0030 (0x0030 - 0x0000)
struct BP_AchievementFormula_C__AchTLimitWin final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Float_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out_1;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C__AchTLimitWin) == 0x000008, "Wrong alignment on BP_AchievementFormula_C__AchTLimitWin");
static_assert(sizeof(BP_AchievementFormula_C__AchTLimitWin) == 0x000030, "Wrong size on BP_AchievementFormula_C__AchTLimitWin");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C__AchTLimitWin::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_GetPlayerData_Out) == 0x000010, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_GetValue_Float_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_GetValue_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_GetPlayerData_Out_1) == 0x000020, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_GetPlayerData_Out_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_GetValue_Int_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTLimitWin, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AchievementFormula_C__AchTLimitWin::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTDyingWin
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementFormula_C_AchTDyingWin final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTDyingWin) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTDyingWin");
static_assert(sizeof(BP_AchievementFormula_C_AchTDyingWin) == 0x000028, "Wrong size on BP_AchievementFormula_C_AchTDyingWin");
static_assert(offsetof(BP_AchievementFormula_C_AchTDyingWin, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTDyingWin::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDyingWin, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTDyingWin::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDyingWin, CallFunc_GetSolarPlayerState_OutResult) == 0x000010, "Member 'BP_AchievementFormula_C_AchTDyingWin::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDyingWin, CallFunc_GetSolarCharacter_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTDyingWin::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDyingWin, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_AchievementFormula_C_AchTDyingWin::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTAssistWin
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementFormula_C_AchTAssistWin final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTAssistWin) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTAssistWin");
static_assert(sizeof(BP_AchievementFormula_C_AchTAssistWin) == 0x000028, "Wrong size on BP_AchievementFormula_C_AchTAssistWin");
static_assert(offsetof(BP_AchievementFormula_C_AchTAssistWin, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTAssistWin::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAssistWin, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTAssistWin::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAssistWin, CallFunc_GetSolarPlayerState_OutResult) == 0x000010, "Member 'BP_AchievementFormula_C_AchTAssistWin::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAssistWin, CallFunc_GetSolarCharacter_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTAssistWin::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAssistWin, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_AchievementFormula_C_AchTAssistWin::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTRescue
// 0x0030 (0x0030 - 0x0000)
struct BP_AchievementFormula_C_AchTRescue final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTRescue) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTRescue");
static_assert(sizeof(BP_AchievementFormula_C_AchTRescue) == 0x000030, "Wrong size on BP_AchievementFormula_C_AchTRescue");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTRescue::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GetAchievement_AchievementComponent_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GetPlayerData_Out) == 0x000020, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GetValue_Int_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRescue, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AchievementFormula_C_AchTRescue::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTSkyKill
// 0x0040 (0x0040 - 0x0000)
struct BP_AchievementFormula_C_AchTSkyKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsInAir_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTSkyKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTSkyKill");
static_assert(sizeof(BP_AchievementFormula_C_AchTSkyKill) == 0x000040, "Wrong size on BP_AchievementFormula_C_AchTSkyKill");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTSkyKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetPlayerData_Out) == 0x000008, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetValue_Int_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetAchievement_AchievementComponent) == 0x000020, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetSolarPlayerState_OutResult) == 0x000028, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_GetSolarCharacter_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTSkyKill, CallFunc_K2_IsInAir_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTSkyKill::CallFunc_K2_IsInAir_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTOnlyLiveWin
// 0x0070 (0x0070 - 0x0000)
struct BP_AchievementFormula_C_AchTOnlyLiveWin final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSaveOnlySelf;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASolarPlayerState*>              CallFunc_GetTeammatePlayers_OutTeammates;          // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue_1;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsAlive_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsAlive_ReturnValue_1;                 // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTOnlyLiveWin) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTOnlyLiveWin");
static_assert(sizeof(BP_AchievementFormula_C_AchTOnlyLiveWin) == 0x000070, "Wrong size on BP_AchievementFormula_C_AchTOnlyLiveWin");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, IsSaveOnlySelf) == 0x000004, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::IsSaveOnlySelf' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, Temp_bool_True_if_break_was_hit_Variable) == 0x000005, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetAchievement_AchievementComponent) == 0x000010, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetAchievement_AchievementComponent_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetSolarPlayerState_OutResult) == 0x000028, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetTeammatePlayers_OutTeammates) == 0x000030, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetTeammatePlayers_OutTeammates' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetSolarCharacter_ReturnValue) == 0x000040, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_GetSolarCharacter_ReturnValue_1) == 0x000058, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_GetSolarCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_K2_IsAlive_ReturnValue) == 0x000061, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_K2_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_K2_IsAlive_ReturnValue_1) == 0x000062, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_K2_IsAlive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOnlyLiveWin, CallFunc_BooleanAND_ReturnValue) == 0x000069, "Member 'BP_AchievementFormula_C_AchTOnlyLiveWin::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTFirstKill
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementFormula_C_AchTFirstKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDataInt_OutValue;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataInt_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTFirstKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTFirstKill");
static_assert(sizeof(BP_AchievementFormula_C_AchTFirstKill) == 0x000020, "Wrong size on BP_AchievementFormula_C_AchTFirstKill");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTFirstKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTFirstKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, CallFunc_GetAchievement_AchievementComponent_1) == 0x000010, "Member 'BP_AchievementFormula_C_AchTFirstKill::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, CallFunc_GetDataInt_OutValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTFirstKill::CallFunc_GetDataInt_OutValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, CallFunc_GetDataInt_ReturnValue) == 0x00001C, "Member 'BP_AchievementFormula_C_AchTFirstKill::CallFunc_GetDataInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFirstKill, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001D, "Member 'BP_AchievementFormula_C_AchTFirstKill::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTBlindSniper
// 0x0050 (0x0050 - 0x0000)
struct BP_AchievementFormula_C_AchTBlindSniper final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInScopeView_ReturnValue;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerWeapon*                     CallFunc_GetCurrentWeapon_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   CallFunc_GetWeaponType_ReturnValue;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTBlindSniper) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTBlindSniper");
static_assert(sizeof(BP_AchievementFormula_C_AchTBlindSniper) == 0x000050, "Wrong size on BP_AchievementFormula_C_AchTBlindSniper");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTBlindSniper::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetAchievement_AchievementComponent_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetSolarPlayerState_OutResult) == 0x000020, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetSolarCharacter_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_IsInScopeView_ReturnValue) == 0x000039, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_IsInScopeView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetCurrentWeapon_ReturnValue) == 0x000040, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetCurrentWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_GetWeaponType_ReturnValue) == 0x000048, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_GetWeaponType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBlindSniper, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'BP_AchievementFormula_C_AchTBlindSniper::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTOpenBoxNum
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementFormula_C_AchTOpenBoxNum final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTOpenBoxNum) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTOpenBoxNum");
static_assert(sizeof(BP_AchievementFormula_C_AchTOpenBoxNum) == 0x000020, "Wrong size on BP_AchievementFormula_C_AchTOpenBoxNum");
static_assert(offsetof(BP_AchievementFormula_C_AchTOpenBoxNum, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTOpenBoxNum::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOpenBoxNum, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTOpenBoxNum::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOpenBoxNum, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTOpenBoxNum::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOpenBoxNum, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTOpenBoxNum::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTOpenBoxNum, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTOpenBoxNum::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTenemyVehicle
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementFormula_C_AchTenemyVehicle final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTenemyVehicle) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTenemyVehicle");
static_assert(sizeof(BP_AchievementFormula_C_AchTenemyVehicle) == 0x000020, "Wrong size on BP_AchievementFormula_C_AchTenemyVehicle");
static_assert(offsetof(BP_AchievementFormula_C_AchTenemyVehicle, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTenemyVehicle::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTenemyVehicle, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTenemyVehicle::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTenemyVehicle, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTenemyVehicle::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTenemyVehicle, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTenemyVehicle::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTenemyVehicle, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTenemyVehicle::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTDie
// 0x0110 (0x0110 - 0x0000)
struct BP_AchievementFormula_C_AchTDie final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGameModeGroupID_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarGameState*                        K2Node_DynamicCast_AsSolar_Game_State;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBattleElapsedTime_ReturnValue;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Float_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementFormula_C_AchTDie) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTDie");
static_assert(sizeof(BP_AchievementFormula_C_AchTDie) == 0x000110, "Wrong size on BP_AchievementFormula_C_AchTDie");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTDie::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetGameModeGroupID_ReturnValue) == 0x000004, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetGameModeGroupID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetGameState_ReturnValue) == 0x000050, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, K2Node_DynamicCast_AsSolar_Game_State) == 0x000058, "Member 'BP_AchievementFormula_C_AchTDie::K2Node_DynamicCast_AsSolar_Game_State' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_AchievementFormula_C_AchTDie::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetAchievement_AchievementComponent) == 0x000068, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetBattleElapsedTime_ReturnValue) == 0x000070, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetBattleElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetPlayerData_Out) == 0x000078, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000080, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_GetValue_Float_ReturnValue) == 0x000084, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_GetValue_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000088, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00008C, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000090, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Conv_FloatToString_ReturnValue) == 0x000098, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_BooleanAND_ReturnValue) == 0x0000A8, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B0, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Conv_BoolToString_ReturnValue) == 0x0000C0, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000D0, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000E0, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000F0, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTDie, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000100, "Member 'BP_AchievementFormula_C_AchTDie::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTMarsWin
// 0x00D0 (0x00D0 - 0x0000)
struct BP_AchievementFormula_C_AchTMarsWin final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementFormula_C_AchTMarsWin) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTMarsWin");
static_assert(sizeof(BP_AchievementFormula_C_AchTMarsWin) == 0x0000D0, "Wrong size on BP_AchievementFormula_C_AchTMarsWin");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTMarsWin::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_GetAchievement_AchievementComponent) == 0x000018, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_GetSolarPlayerState_OutResult) == 0x000028, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000031, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Conv_BoolToString_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000048, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000068, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x000080, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_BooleanAND_ReturnValue_1) == 0x0000A8, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000B0, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTMarsWin, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000C0, "Member 'BP_AchievementFormula_C_AchTMarsWin::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTFistKill 
// 0x0048 (0x0048 - 0x0000)
struct BP_AchievementFormula_C_AchTFistKill_ final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_OutResult;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerWeapon*                     CallFunc_GetCurrentWeapon_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   CallFunc_GetWeaponType_ReturnValue;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTFistKill_) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTFistKill_");
static_assert(sizeof(BP_AchievementFormula_C_AchTFistKill_) == 0x000048, "Wrong size on BP_AchievementFormula_C_AchTFistKill_");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTFistKill_::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetAchievement_AchievementComponent_1) == 0x000010, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000018, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x00001C, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetSolarPlayerState_OutResult) == 0x000028, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetSolarPlayerState_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetSolarCharacter_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetCurrentWeapon_ReturnValue) == 0x000038, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetCurrentWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_GetWeaponType_ReturnValue) == 0x000040, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_GetWeaponType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTFistKill_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_AchievementFormula_C_AchTFistKill_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTBombingDie
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementFormula_C_AchTBombingDie final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTBombingDie) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTBombingDie");
static_assert(sizeof(BP_AchievementFormula_C_AchTBombingDie) == 0x000028, "Wrong size on BP_AchievementFormula_C_AchTBombingDie");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTBombingDie::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTBombingDie::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTBombingDie::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, CallFunc_GetAchievement_AchievementComponent_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTBombingDie::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTBombingDie::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTBombingDie, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C_AchTBombingDie::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTRevengeKill
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementFormula_C_AchTRevengeKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTRevengeKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTRevengeKill");
static_assert(sizeof(BP_AchievementFormula_C_AchTRevengeKill) == 0x000028, "Wrong size on BP_AchievementFormula_C_AchTRevengeKill");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTRevengeKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, CallFunc_GetAchievement_AchievementComponent) == 0x000008, "Member 'BP_AchievementFormula_C_AchTRevengeKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTRevengeKill::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, CallFunc_GetAchievement_AchievementComponent_1) == 0x000018, "Member 'BP_AchievementFormula_C_AchTRevengeKill::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTRevengeKill::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTRevengeKill, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C_AchTRevengeKill::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTAirUmbrella
// 0x0030 (0x0030 - 0x0000)
struct BP_AchievementFormula_C_AchTAirUmbrella final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTAirUmbrella) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTAirUmbrella");
static_assert(sizeof(BP_AchievementFormula_C_AchTAirUmbrella) == 0x000030, "Wrong size on BP_AchievementFormula_C_AchTAirUmbrella");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetPlayerData_Out) == 0x000008, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetValue_Int_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetAchievement_AchievementComponent) == 0x000018, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetAchievement_AchievementComponent_1) == 0x000020, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirUmbrella, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AchievementFormula_C_AchTAirUmbrella::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTAirTrapeze
// 0x0030 (0x0030 - 0x0000)
struct BP_AchievementFormula_C_AchTAirTrapeze final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTAirTrapeze) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTAirTrapeze");
static_assert(sizeof(BP_AchievementFormula_C_AchTAirTrapeze) == 0x000030, "Wrong size on BP_AchievementFormula_C_AchTAirTrapeze");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetPlayerData_Out) == 0x000008, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetValue_Int_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetAchievement_AchievementComponent) == 0x000018, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetAchievement_AchievementComponent_1) == 0x000020, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirTrapeze, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AchievementFormula_C_AchTAirTrapeze::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchTAirSpeed
// 0x0038 (0x0038 - 0x0000)
struct BP_AchievementFormula_C_AchTAirSpeed final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Float_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchTAirSpeed) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchTAirSpeed");
static_assert(sizeof(BP_AchievementFormula_C_AchTAirSpeed) == 0x000038, "Wrong size on BP_AchievementFormula_C_AchTAirSpeed");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchTAirSpeed::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetPlayerData_Out) == 0x000008, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetValue_Float_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetValue_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetAchievement_AchievementComponent) == 0x000018, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_FTrunc_ReturnValue) == 0x000020, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetAchievement_AchievementComponent_1) == 0x000028, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000030, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchTAirSpeed, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_AchievementFormula_C_AchTAirSpeed::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C. AchTBubbleKill
// 0x0058 (0x0058 - 0x0000)
struct BP_AchievementFormula_C__AchTBubbleKill final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetAchievedConditionValue_ReturnValue;    // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetValue_IntArray_OutResult;              // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C__AchTBubbleKill) == 0x000008, "Wrong alignment on BP_AchievementFormula_C__AchTBubbleKill");
static_assert(sizeof(BP_AchievementFormula_C__AchTBubbleKill) == 0x000058, "Wrong size on BP_AchievementFormula_C__AchTBubbleKill");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C__AchTBubbleKill::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_GetAchievedConditionValue_ReturnValue) == 0x000008, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_GetAchievedConditionValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_AchievementFormula_C__AchTBubbleKill::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_AchievementFormula_C__AchTBubbleKill::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_AchievementFormula_C__AchTBubbleKill::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_GetPlayerData_Out) == 0x000028, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_GetAchievement_AchievementComponent) == 0x000030, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_GetValue_IntArray_OutResult) == 0x000038, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_GetValue_IntArray_OutResult' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C__AchTBubbleKill, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'BP_AchievementFormula_C__AchTBubbleKill::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AchievementFormula.BP_AchievementFormula_C.AchAdvancedWeapon
// 0x0030 (0x0030 - 0x0000)
struct BP_AchievementFormula_C_AchAdvancedWeapon final
{
public:
	int32                                         AchievementID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatisticsData*                  CallFunc_GetPlayerData_Out;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievedTargetValue_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValue_Int_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarAchievementComponent*             CallFunc_GetAchievement_AchievementComponent_1;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAchievementPorgressValue_ReturnValue;  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AchievementFormula_C_AchAdvancedWeapon) == 0x000008, "Wrong alignment on BP_AchievementFormula_C_AchAdvancedWeapon");
static_assert(sizeof(BP_AchievementFormula_C_AchAdvancedWeapon) == 0x000030, "Wrong size on BP_AchievementFormula_C_AchAdvancedWeapon");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, AchievementID) == 0x000000, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetPlayerData_Out) == 0x000008, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetPlayerData_Out' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetAchievedTargetValue_ReturnValue) == 0x000010, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetAchievedTargetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetValue_Int_ReturnValue) == 0x000014, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetValue_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetAchievement_AchievementComponent) == 0x000018, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetAchievement_AchievementComponent' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetAchievement_AchievementComponent_1) == 0x000020, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetAchievement_AchievementComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GetAchievementPorgressValue_ReturnValue) == 0x000028, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GetAchievementPorgressValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementFormula_C_AchAdvancedWeapon, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AchievementFormula_C_AchAdvancedWeapon::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

}

