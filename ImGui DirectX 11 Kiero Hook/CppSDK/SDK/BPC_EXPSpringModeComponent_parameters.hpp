#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_EXPSpringModeComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPC_EXPSpringModeComponent.BPC_EXPSpringModeComponent_C.GetExpSpringExpNum
// 0x0048 (0x0048 - 0x0000)
struct BPC_EXPSpringModeComponent_C_GetExpSpringExpNum final
{
public:
	int32                                         FullExpOut;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         OnSpringTeamNum;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum) == 0x000004, "Wrong alignment on BPC_EXPSpringModeComponent_C_GetExpSpringExpNum");
static_assert(sizeof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum) == 0x000048, "Wrong size on BPC_EXPSpringModeComponent_C_GetExpSpringExpNum");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, FullExpOut) == 0x000000, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::FullExpOut' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, OnSpringTeamNum) == 0x000004, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::OnSpringTeamNum' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, ReturnValue) == 0x000008, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_bool_Variable) == 0x00000C, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_int_Variable) == 0x00001C, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_int_Variable_1) == 0x000020, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, K2Node_Select_Default) == 0x000024, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_float_Variable) == 0x000028, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_float_Variable_1) == 0x00002C, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_float_Variable_2) == 0x000030, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_float_Variable_3) == 0x000034, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, Temp_float_Variable_4) == 0x000038, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, K2Node_Select_Default_1) == 0x00003C, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringExpNum, CallFunc_FTrunc_ReturnValue) == 0x000044, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringExpNum::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function BPC_EXPSpringModeComponent.BPC_EXPSpringModeComponent_C.GetExpSpringOpenNum
// 0x0007 (0x0007 - 0x0000)
struct BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum final
{
public:
	uint8                                         DefaultOpenNum;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LiveTeamNum;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_ByteByte_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum) == 0x000001, "Wrong alignment on BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum");
static_assert(sizeof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum) == 0x000007, "Wrong size on BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, DefaultOpenNum) == 0x000000, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::DefaultOpenNum' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, LiveTeamNum) == 0x000001, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::LiveTeamNum' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, ReturnValue) == 0x000002, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, Temp_bool_Variable) == 0x000003, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, CallFunc_GreaterEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::CallFunc_GreaterEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, Temp_byte_Variable) == 0x000005, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum, K2Node_Select_Default) == 0x000006, "Member 'BPC_EXPSpringModeComponent_C_GetExpSpringOpenNum::K2Node_Select_Default' has a wrong offset!");

// Function BPC_EXPSpringModeComponent.BPC_EXPSpringModeComponent_C.CreateAirDrop
// 0x0004 (0x0004 - 0x0000)
struct BPC_EXPSpringModeComponent_C_CreateAirDrop final
{
public:
	int32                                         ChestID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_EXPSpringModeComponent_C_CreateAirDrop) == 0x000004, "Wrong alignment on BPC_EXPSpringModeComponent_C_CreateAirDrop");
static_assert(sizeof(BPC_EXPSpringModeComponent_C_CreateAirDrop) == 0x000004, "Wrong size on BPC_EXPSpringModeComponent_C_CreateAirDrop");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_CreateAirDrop, ChestID) == 0x000000, "Member 'BPC_EXPSpringModeComponent_C_CreateAirDrop::ChestID' has a wrong offset!");

// Function BPC_EXPSpringModeComponent.BPC_EXPSpringModeComponent_C.ExecuteUbergraph_BPC_EXPSpringModeComponent
// 0x0008 (0x0008 - 0x0000)
struct BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ChestID;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent) == 0x000004, "Wrong alignment on BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent");
static_assert(sizeof(BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent) == 0x000008, "Wrong size on BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent, EntryPoint) == 0x000000, "Member 'BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent, K2Node_Event_ChestID) == 0x000004, "Member 'BPC_EXPSpringModeComponent_C_ExecuteUbergraph_BPC_EXPSpringModeComponent::K2Node_Event_ChestID' has a wrong offset!");

}

