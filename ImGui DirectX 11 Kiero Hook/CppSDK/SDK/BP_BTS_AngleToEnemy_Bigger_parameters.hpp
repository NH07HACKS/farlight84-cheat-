#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BTS_AngleToEnemy_Bigger

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_BTS_AngleToEnemy_Bigger.BP_BTS_AngleToEnemy_Bigger_C.ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger
// 0x00D0 (0x00D0 - 0x0000)
struct BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue_1;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCharacterLookAt_ReturnValue;           // 0x0060(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger) == 0x000008, "Wrong alignment on BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger");
static_assert(sizeof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger) == 0x0000D0, "Wrong size on BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, EntryPoint) == 0x000000, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_OwnerController) == 0x000008, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000020, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_GetBlackboardValueAsActor_ReturnValue_1) == 0x000028, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_GetBlackboardValueAsActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_DynamicCast_AsSolar_Character) == 0x000030, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_DynamicCast_AsSolar_Character_1) == 0x000048, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_DynamicCast_AsSolar_Character_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000054, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_GetCharacterLookAt_ReturnValue) == 0x000060, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_GetCharacterLookAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00006C, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000078, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_Normal_ReturnValue) == 0x000084, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_Normal_ReturnValue_1) == 0x000090, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_IsValid_ReturnValue_1) == 0x00009C, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_BooleanAND_ReturnValue) == 0x0000A4, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, CallFunc_DegAcos_ReturnValue) == 0x0000A8, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_OwnerController_2) == 0x0000B0, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_ControlledPawn_2) == 0x0000B8, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_OwnerController_1) == 0x0000C0, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger, K2Node_Event_ControlledPawn_1) == 0x0000C8, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger::K2Node_Event_ControlledPawn_1' has a wrong offset!");

// Function BP_BTS_AngleToEnemy_Bigger.BP_BTS_AngleToEnemy_Bigger_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI");
static_assert(sizeof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI) == 0x000010, "Wrong size on BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveActivationAI::ControlledPawn_0' has a wrong offset!");

// Function BP_BTS_AngleToEnemy_Bigger.BP_BTS_AngleToEnemy_Bigger_C.ReceiveSearchStartAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI) == 0x000008, "Wrong alignment on BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI");
static_assert(sizeof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI) == 0x000010, "Wrong size on BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveSearchStartAI::ControlledPawn_0' has a wrong offset!");

// Function BP_BTS_AngleToEnemy_Bigger.BP_BTS_AngleToEnemy_Bigger_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI");
static_assert(sizeof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI) == 0x000018, "Wrong size on BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI, ControlledPawn_0) == 0x000008, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI::ControlledPawn_0' has a wrong offset!");
static_assert(offsetof(BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BP_BTS_AngleToEnemy_Bigger_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

