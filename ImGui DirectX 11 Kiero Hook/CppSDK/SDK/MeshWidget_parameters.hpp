#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MeshWidget.UIMeshWidget.DownloadImage
// 0x0020 (0x0020 - 0x0000)
struct UIMeshWidget_DownloadImage final
{
public:
	class FString                                 InNecessaryURL;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InBaseCDNUrlList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_DownloadImage) == 0x000008, "Wrong alignment on UIMeshWidget_DownloadImage");
static_assert(sizeof(UIMeshWidget_DownloadImage) == 0x000020, "Wrong size on UIMeshWidget_DownloadImage");
static_assert(offsetof(UIMeshWidget_DownloadImage, InNecessaryURL) == 0x000000, "Member 'UIMeshWidget_DownloadImage::InNecessaryURL' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_DownloadImage, InBaseCDNUrlList) == 0x000010, "Member 'UIMeshWidget_DownloadImage::InBaseCDNUrlList' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIMeshWidget_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_GetDynamicMaterial) == 0x000008, "Wrong alignment on UIMeshWidget_GetDynamicMaterial");
static_assert(sizeof(UIMeshWidget_GetDynamicMaterial) == 0x000008, "Wrong size on UIMeshWidget_GetDynamicMaterial");
static_assert(offsetof(UIMeshWidget_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'UIMeshWidget_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.OnGetTextureFinished
// 0x0018 (0x0018 - 0x0000)
struct UIMeshWidget_OnGetTextureFinished final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_OnGetTextureFinished) == 0x000008, "Wrong alignment on UIMeshWidget_OnGetTextureFinished");
static_assert(sizeof(UIMeshWidget_OnGetTextureFinished) == 0x000018, "Wrong size on UIMeshWidget_OnGetTextureFinished");
static_assert(offsetof(UIMeshWidget_OnGetTextureFinished, FilePath) == 0x000000, "Member 'UIMeshWidget_OnGetTextureFinished::FilePath' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_OnGetTextureFinished, Texture) == 0x000010, "Member 'UIMeshWidget_OnGetTextureFinished::Texture' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetBrushByTexture2D
// 0x0008 (0x0008 - 0x0000)
struct UIMeshWidget_SetBrushByTexture2D final
{
public:
	class UTexture2D*                             NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetBrushByTexture2D) == 0x000008, "Wrong alignment on UIMeshWidget_SetBrushByTexture2D");
static_assert(sizeof(UIMeshWidget_SetBrushByTexture2D) == 0x000008, "Wrong size on UIMeshWidget_SetBrushByTexture2D");
static_assert(offsetof(UIMeshWidget_SetBrushByTexture2D, NewTexture) == 0x000000, "Member 'UIMeshWidget_SetBrushByTexture2D::NewTexture' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct UIMeshWidget_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMeshWidget_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on UIMeshWidget_SetBrushFromTextureDynamic");
static_assert(sizeof(UIMeshWidget_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on UIMeshWidget_SetBrushFromTextureDynamic");
static_assert(offsetof(UIMeshWidget_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'UIMeshWidget_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'UIMeshWidget_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetBrushMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIMeshWidget_SetBrushMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetBrushMaterial) == 0x000008, "Wrong alignment on UIMeshWidget_SetBrushMaterial");
static_assert(sizeof(UIMeshWidget_SetBrushMaterial) == 0x000008, "Wrong size on UIMeshWidget_SetBrushMaterial");
static_assert(offsetof(UIMeshWidget_SetBrushMaterial, Material) == 0x000000, "Member 'UIMeshWidget_SetBrushMaterial::Material' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetBrushScalar
// 0x0050 (0x0050 - 0x0000)
struct UIMeshWidget_SetBrushScalar final
{
public:
	TMap<class FName, float>                      ScalarParameterValues;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetBrushScalar) == 0x000008, "Wrong alignment on UIMeshWidget_SetBrushScalar");
static_assert(sizeof(UIMeshWidget_SetBrushScalar) == 0x000050, "Wrong size on UIMeshWidget_SetBrushScalar");
static_assert(offsetof(UIMeshWidget_SetBrushScalar, ScalarParameterValues) == 0x000000, "Member 'UIMeshWidget_SetBrushScalar::ScalarParameterValues' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetCameraPosition
// 0x000C (0x000C - 0x0000)
struct UIMeshWidget_SetCameraPosition final
{
public:
	struct FVector                                InCameraPosition;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetCameraPosition) == 0x000004, "Wrong alignment on UIMeshWidget_SetCameraPosition");
static_assert(sizeof(UIMeshWidget_SetCameraPosition) == 0x00000C, "Wrong size on UIMeshWidget_SetCameraPosition");
static_assert(offsetof(UIMeshWidget_SetCameraPosition, InCameraPosition) == 0x000000, "Member 'UIMeshWidget_SetCameraPosition::InCameraPosition' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetCameraRotate
// 0x000C (0x000C - 0x0000)
struct UIMeshWidget_SetCameraRotate final
{
public:
	struct FVector                                InCameraRotate;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetCameraRotate) == 0x000004, "Wrong alignment on UIMeshWidget_SetCameraRotate");
static_assert(sizeof(UIMeshWidget_SetCameraRotate) == 0x00000C, "Wrong size on UIMeshWidget_SetCameraRotate");
static_assert(offsetof(UIMeshWidget_SetCameraRotate, InCameraRotate) == 0x000000, "Member 'UIMeshWidget_SetCameraRotate::InCameraRotate' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetHalfFov
// 0x0004 (0x0004 - 0x0000)
struct UIMeshWidget_SetHalfFov final
{
public:
	float                                         HalfFov;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetHalfFov) == 0x000004, "Wrong alignment on UIMeshWidget_SetHalfFov");
static_assert(sizeof(UIMeshWidget_SetHalfFov) == 0x000004, "Wrong size on UIMeshWidget_SetHalfFov");
static_assert(offsetof(UIMeshWidget_SetHalfFov, HalfFov) == 0x000000, "Member 'UIMeshWidget_SetHalfFov::HalfFov' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetInstanceData1
// 0x0020 (0x0020 - 0x0000)
struct UIMeshWidget_SetInstanceData1 final
{
public:
	struct FVector4                               InstanceData;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GEN_PARAM_ARRAY_INDEX;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMeshWidget_SetInstanceData1) == 0x000010, "Wrong alignment on UIMeshWidget_SetInstanceData1");
static_assert(sizeof(UIMeshWidget_SetInstanceData1) == 0x000020, "Wrong size on UIMeshWidget_SetInstanceData1");
static_assert(offsetof(UIMeshWidget_SetInstanceData1, InstanceData) == 0x000000, "Member 'UIMeshWidget_SetInstanceData1::InstanceData' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetInstanceData1, GEN_PARAM_ARRAY_INDEX) == 0x000010, "Member 'UIMeshWidget_SetInstanceData1::GEN_PARAM_ARRAY_INDEX' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetInstanceData2
// 0x0020 (0x0020 - 0x0000)
struct UIMeshWidget_SetInstanceData2 final
{
public:
	struct FVector4                               InstanceData;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GEN_PARAM_ARRAY_INDEX;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMeshWidget_SetInstanceData2) == 0x000010, "Wrong alignment on UIMeshWidget_SetInstanceData2");
static_assert(sizeof(UIMeshWidget_SetInstanceData2) == 0x000020, "Wrong size on UIMeshWidget_SetInstanceData2");
static_assert(offsetof(UIMeshWidget_SetInstanceData2, InstanceData) == 0x000000, "Member 'UIMeshWidget_SetInstanceData2::InstanceData' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetInstanceData2, GEN_PARAM_ARRAY_INDEX) == 0x000010, "Member 'UIMeshWidget_SetInstanceData2::GEN_PARAM_ARRAY_INDEX' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetMeshRotate
// 0x0010 (0x0010 - 0x0000)
struct UIMeshWidget_SetMeshRotate final
{
public:
	struct FVector                                InRotate;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GEN_PARAM_ARRAY_INDEX;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetMeshRotate) == 0x000004, "Wrong alignment on UIMeshWidget_SetMeshRotate");
static_assert(sizeof(UIMeshWidget_SetMeshRotate) == 0x000010, "Wrong size on UIMeshWidget_SetMeshRotate");
static_assert(offsetof(UIMeshWidget_SetMeshRotate, InRotate) == 0x000000, "Member 'UIMeshWidget_SetMeshRotate::InRotate' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetMeshRotate, GEN_PARAM_ARRAY_INDEX) == 0x00000C, "Member 'UIMeshWidget_SetMeshRotate::GEN_PARAM_ARRAY_INDEX' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetMeshScale
// 0x0010 (0x0010 - 0x0000)
struct UIMeshWidget_SetMeshScale final
{
public:
	struct FVector                                InScale;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GEN_PARAM_ARRAY_INDEX;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetMeshScale) == 0x000004, "Wrong alignment on UIMeshWidget_SetMeshScale");
static_assert(sizeof(UIMeshWidget_SetMeshScale) == 0x000010, "Wrong size on UIMeshWidget_SetMeshScale");
static_assert(offsetof(UIMeshWidget_SetMeshScale, InScale) == 0x000000, "Member 'UIMeshWidget_SetMeshScale::InScale' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetMeshScale, GEN_PARAM_ARRAY_INDEX) == 0x00000C, "Member 'UIMeshWidget_SetMeshScale::GEN_PARAM_ARRAY_INDEX' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetMeshTransform
// 0x0040 (0x0040 - 0x0000)
struct UIMeshWidget_SetMeshTransform final
{
public:
	struct FTransform                             InMeshTransform;                                   // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MeshId;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMeshWidget_SetMeshTransform) == 0x000010, "Wrong alignment on UIMeshWidget_SetMeshTransform");
static_assert(sizeof(UIMeshWidget_SetMeshTransform) == 0x000040, "Wrong size on UIMeshWidget_SetMeshTransform");
static_assert(offsetof(UIMeshWidget_SetMeshTransform, InMeshTransform) == 0x000000, "Member 'UIMeshWidget_SetMeshTransform::InMeshTransform' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetMeshTransform, MeshId) == 0x000030, "Member 'UIMeshWidget_SetMeshTransform::MeshId' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetMeshTranslate
// 0x0010 (0x0010 - 0x0000)
struct UIMeshWidget_SetMeshTranslate final
{
public:
	struct FVector                                InTranslate;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GEN_PARAM_ARRAY_INDEX;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetMeshTranslate) == 0x000004, "Wrong alignment on UIMeshWidget_SetMeshTranslate");
static_assert(sizeof(UIMeshWidget_SetMeshTranslate) == 0x000010, "Wrong size on UIMeshWidget_SetMeshTranslate");
static_assert(offsetof(UIMeshWidget_SetMeshTranslate, InTranslate) == 0x000000, "Member 'UIMeshWidget_SetMeshTranslate::InTranslate' has a wrong offset!");
static_assert(offsetof(UIMeshWidget_SetMeshTranslate, GEN_PARAM_ARRAY_INDEX) == 0x00000C, "Member 'UIMeshWidget_SetMeshTranslate::GEN_PARAM_ARRAY_INDEX' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetNearClip
// 0x0004 (0x0004 - 0x0000)
struct UIMeshWidget_SetNearClip final
{
public:
	float                                         NearClip;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetNearClip) == 0x000004, "Wrong alignment on UIMeshWidget_SetNearClip");
static_assert(sizeof(UIMeshWidget_SetNearClip) == 0x000004, "Wrong size on UIMeshWidget_SetNearClip");
static_assert(offsetof(UIMeshWidget_SetNearClip, NearClip) == 0x000000, "Member 'UIMeshWidget_SetNearClip::NearClip' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetPlaceHolderBrushScalar
// 0x0050 (0x0050 - 0x0000)
struct UIMeshWidget_SetPlaceHolderBrushScalar final
{
public:
	TMap<class FName, float>                      ScalarParameterValues;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetPlaceHolderBrushScalar) == 0x000008, "Wrong alignment on UIMeshWidget_SetPlaceHolderBrushScalar");
static_assert(sizeof(UIMeshWidget_SetPlaceHolderBrushScalar) == 0x000050, "Wrong size on UIMeshWidget_SetPlaceHolderBrushScalar");
static_assert(offsetof(UIMeshWidget_SetPlaceHolderBrushScalar, ScalarParameterValues) == 0x000000, "Member 'UIMeshWidget_SetPlaceHolderBrushScalar::ScalarParameterValues' has a wrong offset!");

// Function MeshWidget.UIMeshWidget.SetViewProjectionMatrix
// 0x0040 (0x0040 - 0x0000)
struct UIMeshWidget_SetViewProjectionMatrix final
{
public:
	struct FMatrix                                ViewProjectionMatrix;                              // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMeshWidget_SetViewProjectionMatrix) == 0x000010, "Wrong alignment on UIMeshWidget_SetViewProjectionMatrix");
static_assert(sizeof(UIMeshWidget_SetViewProjectionMatrix) == 0x000040, "Wrong size on UIMeshWidget_SetViewProjectionMatrix");
static_assert(offsetof(UIMeshWidget_SetViewProjectionMatrix, ViewProjectionMatrix) == 0x000000, "Member 'UIMeshWidget_SetViewProjectionMatrix::ViewProjectionMatrix' has a wrong offset!");

// Function MeshWidget.MeshRectangleWidget.ModifyInstanceNum
// 0x0004 (0x0004 - 0x0000)
struct MeshRectangleWidget_ModifyInstanceNum final
{
public:
	int32                                         dNum;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshRectangleWidget_ModifyInstanceNum) == 0x000004, "Wrong alignment on MeshRectangleWidget_ModifyInstanceNum");
static_assert(sizeof(MeshRectangleWidget_ModifyInstanceNum) == 0x000004, "Wrong size on MeshRectangleWidget_ModifyInstanceNum");
static_assert(offsetof(MeshRectangleWidget_ModifyInstanceNum, dNum) == 0x000000, "Member 'MeshRectangleWidget_ModifyInstanceNum::dNum' has a wrong offset!");

// Function MeshWidget.MeshRectangleWidget.SetInstanceNum
// 0x0004 (0x0004 - 0x0000)
struct MeshRectangleWidget_SetInstanceNum final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshRectangleWidget_SetInstanceNum) == 0x000004, "Wrong alignment on MeshRectangleWidget_SetInstanceNum");
static_assert(sizeof(MeshRectangleWidget_SetInstanceNum) == 0x000004, "Wrong size on MeshRectangleWidget_SetInstanceNum");
static_assert(offsetof(MeshRectangleWidget_SetInstanceNum, NewNum) == 0x000000, "Member 'MeshRectangleWidget_SetInstanceNum::NewNum' has a wrong offset!");

// Function MeshWidget.MeshRectangleWidget.SetInstancesHittestability
// 0x0001 (0x0001 - 0x0000)
struct MeshRectangleWidget_SetInstancesHittestability final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshRectangleWidget_SetInstancesHittestability) == 0x000001, "Wrong alignment on MeshRectangleWidget_SetInstancesHittestability");
static_assert(sizeof(MeshRectangleWidget_SetInstancesHittestability) == 0x000001, "Wrong size on MeshRectangleWidget_SetInstancesHittestability");
static_assert(offsetof(MeshRectangleWidget_SetInstancesHittestability, InValue) == 0x000000, "Member 'MeshRectangleWidget_SetInstancesHittestability::InValue' has a wrong offset!");

}

