#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractionDoor

#include "Basic.hpp"

#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractionDoor.BP_InteractionDoor_C
// 0x0030 (0x0D70 - 0x0D40)
class ABP_InteractionDoor_C final : public ASolarInteractionDoor
{
public:
	class USpotLightComponent*                    SpotLight1;                                        // 0x0D40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0D48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Dic;                                               // 0x0D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D51[0x7];                                      // 0x0D51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  NewVar_0;                                          // 0x0D58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void CalcCloseDoorVelocity(float Dist, float Angle, float* Velocity);
	void CalcOpenDoorForce(float Dist, float Angle, float* First, float* Second);
	float ReceiveDoorClosingAngularVelocity(float HitPointToShaftDist, float PlayerToShaftDist, float CombatAngle);
	void ReceiveComputeRotationalForce(float HitPointToShaftDist, float PlayerToShaftDist, float CombatAngle, float* OutFirstTorque, float* OutSecondTorque);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractionDoor_C">();
	}
	static class ABP_InteractionDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InteractionDoor_C>();
	}
};
static_assert(alignof(ABP_InteractionDoor_C) == 0x000010, "Wrong alignment on ABP_InteractionDoor_C");
static_assert(sizeof(ABP_InteractionDoor_C) == 0x000D70, "Wrong size on ABP_InteractionDoor_C");
static_assert(offsetof(ABP_InteractionDoor_C, SpotLight1) == 0x000D40, "Member 'ABP_InteractionDoor_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_InteractionDoor_C, SpotLight) == 0x000D48, "Member 'ABP_InteractionDoor_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_InteractionDoor_C, Dic) == 0x000D50, "Member 'ABP_InteractionDoor_C::Dic' has a wrong offset!");
static_assert(offsetof(ABP_InteractionDoor_C, NewVar_0) == 0x000D58, "Member 'ABP_InteractionDoor_C::NewVar_0' has a wrong offset!");

}

