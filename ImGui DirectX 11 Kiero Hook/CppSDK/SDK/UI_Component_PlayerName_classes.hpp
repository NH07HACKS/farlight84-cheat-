#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_PlayerName

#include "Basic.hpp"

#include "S_VIP_TxtINfo_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Type_PlayerName_Vip_Color_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Component_PlayerName.UI_Component_PlayerName_C
// 0x03F0 (0x09E0 - 0x05F0)
class UUI_Component_PlayerName_C final : public UUIComponentPlayerName
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USolarTextBlock*                        Txt_PlayerName;                                    // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FS_VIP_TxtInfo                         DefaultTxtInfo;                                    // 0x0600(0x00A8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_Type_PlayerName_Vip_Color                   Vip_State;                                         // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Type_PlayerName_Vip_Color, struct FS_VIP_TxtInfo> VIP_TxtInfos;                           // 0x06B0(0x0050)(Edit, BlueprintVisible)
	bool                                          Cheater;                                           // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_VIP_TxtInfo                         CheatTxtInfo;                                      // 0x0708(0x00A8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Killed;                                            // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_VIP_TxtInfo                         KilledTxtInfo;                                     // 0x07B8(0x00A8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          bSpecialSelf;                                      // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_VIP_TxtInfo                         SpecialSelfTxtInfo;                                // 0x0868(0x00A8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_VIP_TxtInfo                         CurTxtInfo;                                        // 0x0910(0x00A8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   DefaultText;                                       // 0x09B8(0x0018)(Edit, BlueprintVisible)
	TArray<struct FS_VIP_TxtInfo>                 VIP_TxtInfoArray;                                  // 0x09D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_Component_PlayerName(int32 EntryPoint);
	void SetIsSpecialSelf(bool bSelfStyle);
	void SetCheater(bool bCheat);
	void SetVip(const uint8 VipType);
	void SetDeath(bool bDeath);
	void SetStyle(const uint8 VipType, bool bCheat, bool bKilled);
	void SetTextColorAndOpacity(const struct FSlateColor& InColor);
	void SetText(const class FString& Content);
	void UpdatePlayerNameAndStyle(const class FString& NickName, const uint8 VipType, bool bCheat, bool bKilled);
	void ReSize();
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void SetNameStyle(bool bCheater, E_Type_PlayerName_Vip_Color Vip_State_0, bool bKilled);
	void SetDefaultStyle(bool bSpecialSelf_0);
	void SetPlayerName(const class FString& NickName);
	void SetPlayerNameAndStyle(const class FString& NickName, bool bCheat, E_Type_PlayerName_Vip_Color VIP_Type, bool bKilled);
	void SetVipStyle(E_Type_PlayerName_Vip_Color VIP_Type);
	void SetIsCheater(bool bCheater);
	void SetIsKilled(bool IsKilled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Component_PlayerName_C">();
	}
	static class UUI_Component_PlayerName_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Component_PlayerName_C>();
	}
};
static_assert(alignof(UUI_Component_PlayerName_C) == 0x000008, "Wrong alignment on UUI_Component_PlayerName_C");
static_assert(sizeof(UUI_Component_PlayerName_C) == 0x0009E0, "Wrong size on UUI_Component_PlayerName_C");
static_assert(offsetof(UUI_Component_PlayerName_C, UberGraphFrame) == 0x0005F0, "Member 'UUI_Component_PlayerName_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, Txt_PlayerName) == 0x0005F8, "Member 'UUI_Component_PlayerName_C::Txt_PlayerName' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, DefaultTxtInfo) == 0x000600, "Member 'UUI_Component_PlayerName_C::DefaultTxtInfo' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, Vip_State) == 0x0006A8, "Member 'UUI_Component_PlayerName_C::Vip_State' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, VIP_TxtInfos) == 0x0006B0, "Member 'UUI_Component_PlayerName_C::VIP_TxtInfos' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, Cheater) == 0x000700, "Member 'UUI_Component_PlayerName_C::Cheater' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, CheatTxtInfo) == 0x000708, "Member 'UUI_Component_PlayerName_C::CheatTxtInfo' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, Killed) == 0x0007B0, "Member 'UUI_Component_PlayerName_C::Killed' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, KilledTxtInfo) == 0x0007B8, "Member 'UUI_Component_PlayerName_C::KilledTxtInfo' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, bSpecialSelf) == 0x000860, "Member 'UUI_Component_PlayerName_C::bSpecialSelf' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, SpecialSelfTxtInfo) == 0x000868, "Member 'UUI_Component_PlayerName_C::SpecialSelfTxtInfo' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, CurTxtInfo) == 0x000910, "Member 'UUI_Component_PlayerName_C::CurTxtInfo' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, DefaultText) == 0x0009B8, "Member 'UUI_Component_PlayerName_C::DefaultText' has a wrong offset!");
static_assert(offsetof(UUI_Component_PlayerName_C, VIP_TxtInfoArray) == 0x0009D0, "Member 'UUI_Component_PlayerName_C::VIP_TxtInfoArray' has a wrong offset!");

}

