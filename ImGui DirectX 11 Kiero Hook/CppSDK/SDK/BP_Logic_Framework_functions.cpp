#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Logic_Framework

#include "Basic.hpp"

#include "BP_Logic_Framework_classes.hpp"
#include "BP_Logic_Framework_parameters.hpp"


namespace SDK
{

// Function BP_Logic_Framework.BP_Logic_Framework_C.ExecuteUbergraph_BP_Logic_Framework
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::ExecuteUbergraph_BP_Logic_Framework(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ExecuteUbergraph_BP_Logic_Framework");

	Params::BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.Custom Room Start
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Logic_Framework_C::Custom_Room_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "Custom Room Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerQuit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerQuit(class ASCMPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerQuit");

	Params::BP_Logic_Framework_C_OnPlayerQuit Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.PresettleAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Logic_Framework_C::PresettleAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "PresettleAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.FinishConfigInitiate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Logic_Framework_C::FinishConfigInitiate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "FinishConfigInitiate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.Update
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Logic_Framework_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.Get Current Player Count
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::Get_Current_Player_Count(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "Get Current Player Count");

	Params::BP_Logic_Framework_C_Get_Current_Player_Count Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_Logic_Framework_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerOfflineTimeOut
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  OfflineTimeoutPlayer                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerOfflineTimeOut(class ASCMPlayerState* OfflineTimeoutPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerOfflineTimeOut");

	Params::BP_Logic_Framework_C_OnPlayerOfflineTimeOut Parms{};

	Parms.OfflineTimeoutPlayer = OfflineTimeoutPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerGiveUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  OfflineTimeoutPlayer                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerGiveUp(class ASCMPlayerState* OfflineTimeoutPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerGiveUp");

	Params::BP_Logic_Framework_C_OnPlayerGiveUp Parms{};

	Parms.OfflineTimeoutPlayer = OfflineTimeoutPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.PreSettle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESCMPlayerOutType                       OutType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::PreSettle(class ASCMPlayerState* Player, ESCMPlayerOutType OutType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "PreSettle");

	Params::BP_Logic_Framework_C_PreSettle Parms{};

	Parms.Player = Player;
	Parms.OutType = OutType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceivePlayerBattleEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESCMPlayerOutType                       OutType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::ReceivePlayerBattleEnd(class ASCMPlayerState* Player, ESCMPlayerOutType OutType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceivePlayerBattleEnd");

	Params::BP_Logic_Framework_C_ReceivePlayerBattleEnd Parms{};

	Parms.Player = Player;
	Parms.OutType = OutType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.BattleInitFinished
// (BlueprintCallable, BlueprintEvent)

void UBP_Logic_Framework_C::BattleInitFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "BattleInitFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveServerLevelLoaded
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::ReceiveServerLevelLoaded(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceiveServerLevelLoaded");

	Params::BP_Logic_Framework_C_ReceiveServerLevelLoaded Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveBattleBegin
// (Event, Public, BlueprintEvent)

void UBP_Logic_Framework_C::ReceiveBattleBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceiveBattleBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerDisconnect
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  OfflinePlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerDisconnect(class ASCMPlayerState* OfflinePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerDisconnect");

	Params::BP_Logic_Framework_C_OnPlayerDisconnect Parms{};

	Parms.OfflinePlayer = OfflinePlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceivePlayerJoinBattle
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAI                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Logic_Framework_C::ReceivePlayerJoinBattle(class ASCMPlayerState* NewPlayer, bool IsAI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceivePlayerJoinBattle");

	Params::BP_Logic_Framework_C_ReceivePlayerJoinBattle Parms{};

	Parms.NewPlayer = NewPlayer;
	Parms.IsAI = IsAI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnDSClose
// (Event, Public, BlueprintEvent)

void UBP_Logic_Framework_C::OnDSClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnDSClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerCheat
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  CheatPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerCheat(class ASCMPlayerState* CheatPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerCheat");

	Params::BP_Logic_Framework_C_OnPlayerCheat Parms{};

	Parms.CheatPlayer = CheatPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerReconnect
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerReconnect(class ASCMPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerReconnect");

	Params::BP_Logic_Framework_C_OnPlayerReconnect Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerAbnormal
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  CheatPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnPlayerAbnormal(class ASCMPlayerState* CheatPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnPlayerAbnormal");

	Params::BP_Logic_Framework_C_OnPlayerAbnormal Parms{};

	Parms.CheatPlayer = CheatPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.OnMatchingClosed
// (Event, Public, BlueprintEvent)
// Parameters:
// const int32                             RPCId                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::OnMatchingClosed(const int32 RPCId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "OnMatchingClosed");

	Params::BP_Logic_Framework_C_OnMatchingClosed Parms{};

	Parms.RPCId = RPCId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveTargetPlayerBattleEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASCMPlayerState*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESCMPlayerOutType                       OutType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Logic_Framework_C::ReceiveTargetPlayerBattleEnd(class ASCMPlayerState* Player, ESCMPlayerOutType OutType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Logic_Framework_C", "ReceiveTargetPlayerBattleEnd");

	Params::BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd Parms{};

	Parms.Player = Player;
	Parms.OutType = OutType;

	UObject::ProcessEvent(Func, &Parms);
}

}

