#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplineBase

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ZiplineBase.BP_ZiplineBase_C
// 0x0010 (0x0930 - 0x0920)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_ZiplineBase_C : public ASolarZiplineObj
{
public:
	bool                                          bIsIndoor;                                         // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void GroundDistanceCheck(float MaxDistance, const struct FVector& Location, bool* IsValid, float* Distance);
	struct FVector GetValidCollisionDistanceOffset(const struct FVector& Direction, const struct FVector& Start, float Distance);
	void GetCompareHeight(class USceneComponent* A, class USceneComponent* B, class USceneComponent** Heigher, class USceneComponent** Lower);
	void GetAnchorComponents(class USceneComponent** PointA, class USceneComponent** StartA, class USceneComponent** EndA, class UBoxComponent** BoxA, class USceneComponent** LandA, class USceneComponent** PointB, class USceneComponent** StartB, class USceneComponent** EndB, class UBoxComponent** BoxB, class USceneComponent** LandB);
	void FixPlace();
	void Get_Point_Location(const struct FVector& PillarLoc, struct FVector* CorrectedLoc, EZiplineType* Zipline_Type, struct FVector* HorzDir);
	void CreatePillar();
	void FixZipLocation();
	void CalcSideRotation(struct FRotator* Rotation);

	TArray<class AActor*> GetPillars() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ZiplineBase_C">();
	}
	static class ABP_ZiplineBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ZiplineBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_ZiplineBase_C) == 0x000010, "Wrong alignment on ABP_ZiplineBase_C");
static_assert(sizeof(ABP_ZiplineBase_C) == 0x000930, "Wrong size on ABP_ZiplineBase_C");
static_assert(offsetof(ABP_ZiplineBase_C, bIsIndoor) == 0x000920, "Member 'ABP_ZiplineBase_C::bIsIndoor' has a wrong offset!");

}

