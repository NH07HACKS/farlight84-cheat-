#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solar2D

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "Solar2D_structs.hpp"


namespace SDK
{

// Class Solar2D.SolarRuntimeSettings
// 0x0008 (0x0030 - 0x0028)
class USolarRuntimeSettings final : public UObject
{
public:
	bool                                          bEnableSpriteAtlasGroups;                          // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTerrainSplineEditing;                       // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResizeSpriteDataToMatchTextures;                  // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarRuntimeSettings">();
	}
	static class USolarRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarRuntimeSettings>();
	}
};
static_assert(alignof(USolarRuntimeSettings) == 0x000008, "Wrong alignment on USolarRuntimeSettings");
static_assert(sizeof(USolarRuntimeSettings) == 0x000030, "Wrong size on USolarRuntimeSettings");
static_assert(offsetof(USolarRuntimeSettings, bEnableSpriteAtlasGroups) == 0x000028, "Member 'USolarRuntimeSettings::bEnableSpriteAtlasGroups' has a wrong offset!");
static_assert(offsetof(USolarRuntimeSettings, bEnableTerrainSplineEditing) == 0x000029, "Member 'USolarRuntimeSettings::bEnableTerrainSplineEditing' has a wrong offset!");
static_assert(offsetof(USolarRuntimeSettings, bResizeSpriteDataToMatchTextures) == 0x00002A, "Member 'USolarRuntimeSettings::bResizeSpriteDataToMatchTextures' has a wrong offset!");

// Class Solar2D.SolarSprite
// 0x0080 (0x00A8 - 0x0028)
class USolarSprite final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture*>                       AdditionalSourceTextures;                          // 0x0038(0x0010)(Edit, ZeroConstructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              BakedSourceUV;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              BakedSourceDimension;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             BakedSourceTexture;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     AlternateMaterial;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSolarSpriteSocket>             Sockets;                                           // 0x0070(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESolarSpriteCollisionMode                     SpriteCollisionDomain;                             // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelsPerUnrealUnit;                               // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBodySetup*                             BodySetup;                                         // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlternateMaterialSplitIndex;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector4>                       BakedRenderData;                                   // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSprite">();
	}
	static class USolarSprite* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSprite>();
	}
};
static_assert(alignof(USolarSprite) == 0x000008, "Wrong alignment on USolarSprite");
static_assert(sizeof(USolarSprite) == 0x0000A8, "Wrong size on USolarSprite");
static_assert(offsetof(USolarSprite, AdditionalSourceTextures) == 0x000038, "Member 'USolarSprite::AdditionalSourceTextures' has a wrong offset!");
static_assert(offsetof(USolarSprite, BakedSourceUV) == 0x000048, "Member 'USolarSprite::BakedSourceUV' has a wrong offset!");
static_assert(offsetof(USolarSprite, BakedSourceDimension) == 0x000050, "Member 'USolarSprite::BakedSourceDimension' has a wrong offset!");
static_assert(offsetof(USolarSprite, BakedSourceTexture) == 0x000058, "Member 'USolarSprite::BakedSourceTexture' has a wrong offset!");
static_assert(offsetof(USolarSprite, DefaultMaterial) == 0x000060, "Member 'USolarSprite::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(USolarSprite, AlternateMaterial) == 0x000068, "Member 'USolarSprite::AlternateMaterial' has a wrong offset!");
static_assert(offsetof(USolarSprite, Sockets) == 0x000070, "Member 'USolarSprite::Sockets' has a wrong offset!");
static_assert(offsetof(USolarSprite, SpriteCollisionDomain) == 0x000080, "Member 'USolarSprite::SpriteCollisionDomain' has a wrong offset!");
static_assert(offsetof(USolarSprite, PixelsPerUnrealUnit) == 0x000084, "Member 'USolarSprite::PixelsPerUnrealUnit' has a wrong offset!");
static_assert(offsetof(USolarSprite, BodySetup) == 0x000088, "Member 'USolarSprite::BodySetup' has a wrong offset!");
static_assert(offsetof(USolarSprite, AlternateMaterialSplitIndex) == 0x000090, "Member 'USolarSprite::AlternateMaterialSplitIndex' has a wrong offset!");
static_assert(offsetof(USolarSprite, BakedRenderData) == 0x000098, "Member 'USolarSprite::BakedRenderData' has a wrong offset!");

// Class Solar2D.SolarSpriteAtlas
// 0x0000 (0x0028 - 0x0028)
class USolarSpriteAtlas final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSpriteAtlas">();
	}
	static class USolarSpriteAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSpriteAtlas>();
	}
};
static_assert(alignof(USolarSpriteAtlas) == 0x000008, "Wrong alignment on USolarSpriteAtlas");
static_assert(sizeof(USolarSpriteAtlas) == 0x000028, "Wrong size on USolarSpriteAtlas");

// Class Solar2D.SolarSpriteAtlasManager
// 0x0000 (0x0028 - 0x0028)
class USolarSpriteAtlasManager final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSpriteAtlasManager">();
	}
	static class USolarSpriteAtlasManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSpriteAtlasManager>();
	}
};
static_assert(alignof(USolarSpriteAtlasManager) == 0x000008, "Wrong alignment on USolarSpriteAtlasManager");
static_assert(sizeof(USolarSpriteAtlasManager) == 0x000028, "Wrong size on USolarSpriteAtlasManager");

// Class Solar2D.SolarSpriteBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarSpriteBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FSlateBrush MakeBrushFromSprite(class USolarSprite* Sprite, int32 Width, int32 Height);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSpriteBlueprintLibrary">();
	}
	static class USolarSpriteBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSpriteBlueprintLibrary>();
	}
};
static_assert(alignof(USolarSpriteBlueprintLibrary) == 0x000008, "Wrong alignment on USolarSpriteBlueprintLibrary");
static_assert(sizeof(USolarSpriteBlueprintLibrary) == 0x000028, "Wrong size on USolarSpriteBlueprintLibrary");

// Class Solar2D.SolarSpriteComponent
// 0x0020 (0x06B0 - 0x0690)
class USolarSpriteComponent final : public UMeshComponent
{
public:
	class USolarSprite*                           SourceSprite;                                      // 0x0690(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0698(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           SpriteColor;                                       // 0x06A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class USolarSprite* GetSprite();
	bool SetSprite(class USolarSprite* NewSprite);
	void SetSpriteColor(const struct FLinearColor& NewColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSpriteComponent">();
	}
	static class USolarSpriteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSpriteComponent>();
	}
};
static_assert(alignof(USolarSpriteComponent) == 0x000010, "Wrong alignment on USolarSpriteComponent");
static_assert(sizeof(USolarSpriteComponent) == 0x0006B0, "Wrong size on USolarSpriteComponent");
static_assert(offsetof(USolarSpriteComponent, SourceSprite) == 0x000690, "Member 'USolarSpriteComponent::SourceSprite' has a wrong offset!");
static_assert(offsetof(USolarSpriteComponent, MaterialOverride) == 0x000698, "Member 'USolarSpriteComponent::MaterialOverride' has a wrong offset!");
static_assert(offsetof(USolarSpriteComponent, SpriteColor) == 0x0006A0, "Member 'USolarSpriteComponent::SpriteColor' has a wrong offset!");

}

