#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_CarWeapon_Float

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C
// 0x00C8 (0x0978 - 0x08B0)
class UCrosshair_CarWeapon_Float_C final : public UVehicleWeaponCrossHairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Normal_Anim;                                       // 0x08B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Aim_Anim;                                          // 0x08C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Overheat_Anim_Quit;                                // 0x08C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Fullcharge_Anim;                                   // 0x08D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Overheat_Anim_Enter;                               // 0x08D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Container_SecondReticle;                           // 0x08E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Coredot;                                           // 0x08E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Charge;                                        // 0x08F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle;                                        // 0x08F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle_1;                                      // 0x0900(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Glow;                                          // 0x0908(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_overload_cordot;                               // 0x0910(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Panel_Aim;                                         // 0x0918(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           panel_enlarge;                                     // 0x0920(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ReticleDirection;                                  // 0x0928(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SpreadImg_coredot;                                 // 0x0930(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SpreadImg_coredot_2;                               // 0x0938(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SpreadImg_coredot_4;                               // 0x0940(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        wgs_enlarge;                                       // 0x0948(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        wgs_overload;                                      // 0x0950(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         ChargeProgress;                                    // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChargingLast;                                    // 0x095C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OriChargeSize;                                     // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharging;                                        // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_969[0x3];                                      // 0x0969(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TempSize;                                          // 0x096C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverloading;                                     // 0x0974(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLockedEnemy;                                      // 0x0975(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Crosshair_CarWeapon_Float(int32 EntryPoint);
	void OnUpdateAimState(bool InbLockEnemy);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void OnCrosshairInNormalState();
	void OnOverloadStateChanged(bool bEnter);
	void OnUpdateChargeProgress(bool InbCharging, int32 InChargeMode, float InChargeProgress, int32 InChargeBurstCount);
	void Construct();
	void SetWidgetResources(class UCanvasPanel** InSecondReticlePanel, class UImage** InReticleDirectionImage, class UImage** InRangedImage, class USizeBox** InAssistLockSizeBox, class UCanvasPanel** InChangeNewAssistLockPawnPanel, class UCanvasPanel** InEnterLockPawnPanel, class UCanvasPanel** InCanvas_Dynamic);
	void SetChargeProgress();
	void Set_Charge_Panel_Size();
	void OnOverloadChanged(bool InOverload);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_CarWeapon_Float_C">();
	}
	static class UCrosshair_CarWeapon_Float_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_CarWeapon_Float_C>();
	}
};
static_assert(alignof(UCrosshair_CarWeapon_Float_C) == 0x000008, "Wrong alignment on UCrosshair_CarWeapon_Float_C");
static_assert(sizeof(UCrosshair_CarWeapon_Float_C) == 0x000978, "Wrong size on UCrosshair_CarWeapon_Float_C");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, UberGraphFrame) == 0x0008B0, "Member 'UCrosshair_CarWeapon_Float_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Normal_Anim) == 0x0008B8, "Member 'UCrosshair_CarWeapon_Float_C::Normal_Anim' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Aim_Anim) == 0x0008C0, "Member 'UCrosshair_CarWeapon_Float_C::Aim_Anim' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Overheat_Anim_Quit) == 0x0008C8, "Member 'UCrosshair_CarWeapon_Float_C::Overheat_Anim_Quit' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Fullcharge_Anim) == 0x0008D0, "Member 'UCrosshair_CarWeapon_Float_C::Fullcharge_Anim' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Overheat_Anim_Enter) == 0x0008D8, "Member 'UCrosshair_CarWeapon_Float_C::Overheat_Anim_Enter' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Container_SecondReticle) == 0x0008E0, "Member 'UCrosshair_CarWeapon_Float_C::Container_SecondReticle' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Coredot) == 0x0008E8, "Member 'UCrosshair_CarWeapon_Float_C::Coredot' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Img_Charge) == 0x0008F0, "Member 'UCrosshair_CarWeapon_Float_C::Img_Charge' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Img_Circle) == 0x0008F8, "Member 'UCrosshair_CarWeapon_Float_C::Img_Circle' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Img_Circle_1) == 0x000900, "Member 'UCrosshair_CarWeapon_Float_C::Img_Circle_1' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Img_Glow) == 0x000908, "Member 'UCrosshair_CarWeapon_Float_C::Img_Glow' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, img_overload_cordot) == 0x000910, "Member 'UCrosshair_CarWeapon_Float_C::img_overload_cordot' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, Panel_Aim) == 0x000918, "Member 'UCrosshair_CarWeapon_Float_C::Panel_Aim' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, panel_enlarge) == 0x000920, "Member 'UCrosshair_CarWeapon_Float_C::panel_enlarge' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, ReticleDirection) == 0x000928, "Member 'UCrosshair_CarWeapon_Float_C::ReticleDirection' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, SpreadImg_coredot) == 0x000930, "Member 'UCrosshair_CarWeapon_Float_C::SpreadImg_coredot' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, SpreadImg_coredot_2) == 0x000938, "Member 'UCrosshair_CarWeapon_Float_C::SpreadImg_coredot_2' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, SpreadImg_coredot_4) == 0x000940, "Member 'UCrosshair_CarWeapon_Float_C::SpreadImg_coredot_4' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, wgs_enlarge) == 0x000948, "Member 'UCrosshair_CarWeapon_Float_C::wgs_enlarge' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, wgs_overload) == 0x000950, "Member 'UCrosshair_CarWeapon_Float_C::wgs_overload' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, ChargeProgress) == 0x000958, "Member 'UCrosshair_CarWeapon_Float_C::ChargeProgress' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, IsChargingLast) == 0x00095C, "Member 'UCrosshair_CarWeapon_Float_C::IsChargingLast' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, OriChargeSize) == 0x000960, "Member 'UCrosshair_CarWeapon_Float_C::OriChargeSize' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, IsCharging) == 0x000968, "Member 'UCrosshair_CarWeapon_Float_C::IsCharging' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, TempSize) == 0x00096C, "Member 'UCrosshair_CarWeapon_Float_C::TempSize' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, IsOverloading) == 0x000974, "Member 'UCrosshair_CarWeapon_Float_C::IsOverloading' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Float_C, bLockedEnemy) == 0x000975, "Member 'UCrosshair_CarWeapon_Float_C::bLockedEnemy' has a wrong offset!");

}

