#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldMarkButton

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WorldMarkButton.WorldMarkButton_C.ExecuteUbergraph_WorldMarkButton
// 0x0010 (0x0010 - 0x0000)
struct WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarkButtonState                              K2Node_Event_NewState;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPressed;                            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton) == 0x000004, "Wrong alignment on WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton");
static_assert(sizeof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton) == 0x000010, "Wrong size on WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, EntryPoint) == 0x000000, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, K2Node_Event_NewState) == 0x000004, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_bool_Variable) == 0x000005, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_byte_Variable) == 0x000007, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_byte_Variable_1) == 0x000008, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_bool_Variable_1) == 0x000009, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_byte_Variable_2) == 0x00000A, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, Temp_byte_Variable_3) == 0x00000B, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, K2Node_Select_Default) == 0x00000C, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, K2Node_Select_Default_1) == 0x00000D, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton, K2Node_Event_IsPressed) == 0x00000E, "Member 'WorldMarkButton_C_ExecuteUbergraph_WorldMarkButton::K2Node_Event_IsPressed' has a wrong offset!");

// Function WorldMarkButton.WorldMarkButton_C.OnMarkButtonStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMarkButton_C_OnMarkButtonStateChanged final
{
public:
	EMarkButtonState                              NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMarkButton_C_OnMarkButtonStateChanged) == 0x000001, "Wrong alignment on WorldMarkButton_C_OnMarkButtonStateChanged");
static_assert(sizeof(WorldMarkButton_C_OnMarkButtonStateChanged) == 0x000001, "Wrong size on WorldMarkButton_C_OnMarkButtonStateChanged");
static_assert(offsetof(WorldMarkButton_C_OnMarkButtonStateChanged, NewState) == 0x000000, "Member 'WorldMarkButton_C_OnMarkButtonStateChanged::NewState' has a wrong offset!");

// Function WorldMarkButton.WorldMarkButton_C.OnIsPressedChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMarkButton_C_OnIsPressedChanged final
{
public:
	bool                                          IsPressed;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMarkButton_C_OnIsPressedChanged) == 0x000001, "Wrong alignment on WorldMarkButton_C_OnIsPressedChanged");
static_assert(sizeof(WorldMarkButton_C_OnIsPressedChanged) == 0x000001, "Wrong size on WorldMarkButton_C_OnIsPressedChanged");
static_assert(offsetof(WorldMarkButton_C_OnIsPressedChanged, IsPressed) == 0x000000, "Member 'WorldMarkButton_C_OnIsPressedChanged::IsPressed' has a wrong offset!");

// Function WorldMarkButton.WorldMarkButton_C.SetIsPressed
// 0x0001 (0x0001 - 0x0000)
struct WorldMarkButton_C_SetIsPressed final
{
public:
	bool                                          bIsPressed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMarkButton_C_SetIsPressed) == 0x000001, "Wrong alignment on WorldMarkButton_C_SetIsPressed");
static_assert(sizeof(WorldMarkButton_C_SetIsPressed) == 0x000001, "Wrong size on WorldMarkButton_C_SetIsPressed");
static_assert(offsetof(WorldMarkButton_C_SetIsPressed, bIsPressed) == 0x000000, "Member 'WorldMarkButton_C_SetIsPressed::bIsPressed' has a wrong offset!");

// Function WorldMarkButton.WorldMarkButton_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct WorldMarkButton_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WorldMarkButton_C_GetModuleName) == 0x000008, "Wrong alignment on WorldMarkButton_C_GetModuleName");
static_assert(sizeof(WorldMarkButton_C_GetModuleName) == 0x000010, "Wrong size on WorldMarkButton_C_GetModuleName");
static_assert(offsetof(WorldMarkButton_C_GetModuleName, ReturnValue) == 0x000000, "Member 'WorldMarkButton_C_GetModuleName::ReturnValue' has a wrong offset!");

}

