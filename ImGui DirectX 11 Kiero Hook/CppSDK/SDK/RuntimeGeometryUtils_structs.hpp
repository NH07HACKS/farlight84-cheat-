#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeGeometryUtils

#include "Basic.hpp"


namespace SDK
{

// Enum RuntimeGeometryUtils.EPrePooledDynamicMeshGeneratorType
// NumValues: 0x0005
enum class EPrePooledDynamicMeshGeneratorType : uint8
{
	NONE                                     = 0,
	BOX                                      = 1,
	QUAD                                     = 2,
	QUADXZ                                   = 3,
	EPrePooledDynamicMeshGeneratorType_MAX   = 4,
};

// Enum RuntimeGeometryUtils.EDynamicMeshActorCollisionMode
// NumValues: 0x0005
enum class EDynamicMeshActorCollisionMode : uint8
{
	NoCollision                              = 0,
	ComplexAsSimple                          = 1,
	ComplexAsSimpleAsync                     = 2,
	SimpleConvexHull                         = 3,
	EDynamicMeshActorCollisionMode_MAX       = 4,
};

// Enum RuntimeGeometryUtils.EDynamicMeshActorBooleanOperation
// NumValues: 0x0004
enum class EDynamicMeshActorBooleanOperation : uint8
{
	Union                                    = 0,
	Subtraction                              = 1,
	Intersection                             = 2,
	EDynamicMeshActorBooleanOperation_MAX    = 3,
};

// Enum RuntimeGeometryUtils.EDynamicMeshActorPrimitiveType
// NumValues: 0x0003
enum class EDynamicMeshActorPrimitiveType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	EDynamicMeshActorPrimitiveType_MAX       = 2,
};

// Enum RuntimeGeometryUtils.EDynamicMeshActorSourceType
// NumValues: 0x0003
enum class EDynamicMeshActorSourceType : uint8
{
	Primitive                                = 0,
	ImportedMesh                             = 1,
	EDynamicMeshActorSourceType_MAX          = 2,
};

// Enum RuntimeGeometryUtils.EDynamicMeshActorNormalsMode
// NumValues: 0x0004
enum class EDynamicMeshActorNormalsMode : uint8
{
	SplitNormals                             = 0,
	PerVertexNormals                         = 1,
	FaceNormals                              = 2,
	EDynamicMeshActorNormalsMode_MAX         = 3,
};

// Enum RuntimeGeometryUtils.EDynamicMeshNormalsMode
// NumValues: 0x0004
enum class EDynamicMeshNormalsMode : uint8
{
	SplitNormals                             = 0,
	PerVertexNormals                         = 1,
	FaceNormals                              = 2,
	EDynamicMeshNormalsMode_MAX              = 3,
};

// Enum RuntimeGeometryUtils.EDynamicMeshGeneratorType
// NumValues: 0x0003
enum class EDynamicMeshGeneratorType : uint8
{
	BOX                                      = 0,
	QUAD                                     = 1,
	EDynamicMeshGeneratorType_MAX            = 2,
};

// Enum RuntimeGeometryUtils.EDynamicMeshWallMoveDirection
// NumValues: 0x0003
enum class EDynamicMeshWallMoveDirection : uint8
{
	Move_Both_Side                           = 0,
	Move_Positive_Side                       = 1,
	Move_MAX                                 = 2,
};

// ScriptStruct RuntimeGeometryUtils.PrePooledDynamicMesh
// 0x0010 (0x0010 - 0x0000)
struct FPrePooledDynamicMesh final
{
public:
	class FName                                   MeshTag;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrePooledDynamicMeshGeneratorType            GeneratorType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Number;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrePooledDynamicMesh) == 0x000004, "Wrong alignment on FPrePooledDynamicMesh");
static_assert(sizeof(FPrePooledDynamicMesh) == 0x000010, "Wrong size on FPrePooledDynamicMesh");
static_assert(offsetof(FPrePooledDynamicMesh, MeshTag) == 0x000000, "Member 'FPrePooledDynamicMesh::MeshTag' has a wrong offset!");
static_assert(offsetof(FPrePooledDynamicMesh, GeneratorType) == 0x000008, "Member 'FPrePooledDynamicMesh::GeneratorType' has a wrong offset!");
static_assert(offsetof(FPrePooledDynamicMesh, Number) == 0x00000C, "Member 'FPrePooledDynamicMesh::Number' has a wrong offset!");

}

