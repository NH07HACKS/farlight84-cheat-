#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_Mode_TeamDeathMatch

#include "Basic.hpp"

#include "S_Shop_TDM_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Update KDA
// 0x0060 (0x0060 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_Update_KDA final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_Framework_C*              K2Node_DynamicCast_AsBP_Game_State_Framework;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TeamDeathMatch_C*       K2Node_DynamicCast_AsBP_Player_State_Team_Death_Match; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACGFormula*                             CallFunc_GetFormula_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateMVPScore_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataFloat_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_Update_KDA) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_Update_KDA");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_Update_KDA) == 0x000060, "Wrong size on FL_Mode_TeamDeathMatch_C_Update_KDA");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, Player) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::Player' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, __WorldContext) == 0x000008, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, K2Node_DynamicCast_AsBP_Game_State_Framework) == 0x000018, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::K2Node_DynamicCast_AsBP_Game_State_Framework' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, K2Node_DynamicCast_AsBP_Player_State_Team_Death_Match) == 0x000028, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::K2Node_DynamicCast_AsBP_Player_State_Team_Death_Match' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_GetFormula_ReturnValue) == 0x000038, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_GetFormula_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_CalculateMVPScore_ReturnValue) == 0x000040, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_CalculateMVPScore_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000044, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000048, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_FMax_ReturnValue) == 0x00004C, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000050, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, K2Node_MathExpression_ReturnValue) == 0x000054, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Update_KDA, CallFunc_SetDataFloat_ReturnValue) == 0x000058, "Member 'FL_Mode_TeamDeathMatch_C_Update_KDA::CallFunc_SetDataFloat_ReturnValue' has a wrong offset!");

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetKDARank
// 0x01B0 (0x01B0 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_GetKDARank final
{
public:
	TArray<class ASCMPlayerState*>                PlayerState;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class ASCMPlayerState*, float>           Player_KDA_Rank;                                   // 0x0018(0x0050)(Parm, OutParm)
	int32                                         Local_MapLastIndex;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ASCMPlayerState*, float>           Local_Player_KDA_Rank;                             // 0x0070(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class ASCMPlayerState*, float>           Local_Player_KDA;                                  // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDataFloat_OutValue;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataFloat_ReturnValue;                 // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASCMPlayerState*>                CallFunc_Map_Keys_Keys;                            // 0x0140(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_Map_Values_Values;                        // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_Map_Values_Values_1;                      // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item_1;                         // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_GetKDARank) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_GetKDARank");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_GetKDARank) == 0x0001B0, "Wrong size on FL_Mode_TeamDeathMatch_C_GetKDARank");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, PlayerState) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::PlayerState' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, __WorldContext) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Player_KDA_Rank) == 0x000018, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Player_KDA_Rank' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Local_MapLastIndex) == 0x000068, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Local_MapLastIndex' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Local_Player_KDA_Rank) == 0x000070, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Local_Player_KDA_Rank' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Local_Player_KDA) == 0x0000C0, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Local_Player_KDA' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Temp_int_Loop_Counter_Variable) == 0x000110, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Array_Length_ReturnValue) == 0x000114, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Add_IntInt_ReturnValue) == 0x000118, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Less_IntInt_ReturnValue) == 0x00011C, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Temp_int_Array_Index_Variable) == 0x000120, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Array_Get_Item) == 0x000128, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_GetDataFloat_OutValue) == 0x000130, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_GetDataFloat_OutValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_GetDataFloat_ReturnValue) == 0x000134, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_GetDataFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, Temp_int_Variable) == 0x000138, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Map_Keys_Keys) == 0x000140, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000150, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Add_IntInt_ReturnValue_1) == 0x000154, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Map_Values_Values) == 0x000158, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000168, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_MaxOfFloatArray_MaxValue) == 0x00016C, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Map_Values_Values_1) == 0x000170, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Map_Values_Values_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Array_Get_Item_1) == 0x000180, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Array_LastIndex_ReturnValue) == 0x000188, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Map_Remove_ReturnValue) == 0x00018C, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Conv_BoolToString_ReturnValue) == 0x000190, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetKDARank, CallFunc_Concat_StrStr_ReturnValue) == 0x0001A0, "Member 'FL_Mode_TeamDeathMatch_C_GetKDARank::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Get Side TDM
// 0x0058 (0x0058 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_Get_Side_TDM final
{
public:
	class ASCMPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Output_Get;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Local_Team;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_Get_Side_TDM");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM) == 0x000058, "Wrong size on FL_Mode_TeamDeathMatch_C_Get_Side_TDM");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, PlayerState) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::PlayerState' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, __WorldContext) == 0x000008, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, Output_Get) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::Output_Get' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, Local_Team) == 0x000020, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::Local_Team' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, CallFunc_GetTeamName_ReturnValue) == 0x000030, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, K2Node_MakeArray_Array) == 0x000040, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_Side_TDM, CallFunc_Array_Contains_ReturnValue) == 0x000050, "Member 'FL_Mode_TeamDeathMatch_C_Get_Side_TDM::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetChangeWeaponDate
// 0x0110 (0x0110 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate final
{
public:
	TArray<struct FS_Shop_TDM>                    Array;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeaponPartsData                       WeaponPartsData;                                   // 0x0024(0x0018)(Parm, OutParm, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Shop_TDM                            CallFunc_Array_Get_Item;                           // 0x0040(0x00A0)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeaponPartsData                       K2Node_MakeStruct_WeaponPartsData;                 // 0x00F4(0x0018)(NoDestructor)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate) == 0x000110, "Wrong size on FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, Array) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::Array' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, Index_0) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::Index_0' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, __WorldContext) == 0x000018, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, ID) == 0x000020, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::ID' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, WeaponPartsData) == 0x000024, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::WeaponPartsData' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item) == 0x000040, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item_1) == 0x0000E0, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item_2) == 0x0000E4, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item_3) == 0x0000E8, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item_4) == 0x0000EC, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, CallFunc_Array_Get_Item_5) == 0x0000F0, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate, K2Node_MakeStruct_WeaponPartsData) == 0x0000F4, "Member 'FL_Mode_TeamDeathMatch_C_GetChangeWeaponDate::K2Node_MakeStruct_WeaponPartsData' has a wrong offset!");

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.Get TDMGMData
// 0x0158 (0x0158 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_Get_TDMGMData final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         战斗限时;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         加时赛限时;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Loading时长;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局等待时间;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         复活等待时间;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无敌时间;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         获胜所需人头数;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局倒计时;                                        // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         结算退出时间;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         武器选择限时;                                      // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_Shop_TDM>                    初始武器配置;                                      // 0x0030(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         AiLevel;                                           // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            子弹ItemID;                                        // 0x0048(0x0050)(Parm, OutParm)
	TMap<int32, int32>                            道具ItemID;                                        // 0x0098(0x0050)(Parm, OutParm)
	TMap<int32, int32>                            AITempleteMap;                                     // 0x00E8(0x0050)(Parm, OutParm)
	int32                                         模式默认全局人数;                                  // 0x0138(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReportingInterval;                                 // 0x013C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCGMGameplayConfig*                     CallFunc__A_GetModeConfig_ModeConfig;              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCFG_TeamDeathMatch_C*                  K2Node_DynamicCast_AsCFG_Team_Death_Match;         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_Get_TDMGMData");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData) == 0x000158, "Wrong size on FL_Mode_TeamDeathMatch_C_Get_TDMGMData");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, __WorldContext) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 战斗限时) == 0x000008, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::战斗限时' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 加时赛限时) == 0x00000C, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::加时赛限时' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, Loading时长) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::Loading时长' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 开局等待时间) == 0x000014, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::开局等待时间' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 复活等待时间) == 0x000018, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::复活等待时间' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 无敌时间) == 0x00001C, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::无敌时间' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 获胜所需人头数) == 0x000020, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::获胜所需人头数' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 开局倒计时) == 0x000024, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::开局倒计时' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 结算退出时间) == 0x000028, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::结算退出时间' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 武器选择限时) == 0x00002C, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::武器选择限时' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 初始武器配置) == 0x000030, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::初始武器配置' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, AiLevel) == 0x000040, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::AiLevel' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 子弹ItemID) == 0x000048, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::子弹ItemID' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 道具ItemID) == 0x000098, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::道具ItemID' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, AITempleteMap) == 0x0000E8, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::AITempleteMap' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, 模式默认全局人数) == 0x000138, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::模式默认全局人数' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, ReportingInterval) == 0x00013C, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::ReportingInterval' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, CallFunc__A_GetModeConfig_ModeConfig) == 0x000140, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::CallFunc__A_GetModeConfig_ModeConfig' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, K2Node_DynamicCast_AsCFG_Team_Death_Match) == 0x000148, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::K2Node_DynamicCast_AsCFG_Team_Death_Match' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_Get_TDMGMData, K2Node_DynamicCast_bSuccess) == 0x000150, "Member 'FL_Mode_TeamDeathMatch_C_Get_TDMGMData::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FL_Mode_TeamDeathMatch.FL_Mode_TeamDeathMatch_C.GetTDMLogic
// 0x0028 (0x0028 - 0x0000)
struct FL_Mode_TeamDeathMatch_C_GetTDMLogic final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Logic_TeamDeathMatch_C*             AsBP_Logic_Team_Death_Match;                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCGMLogicComponent*                     CallFunc__S_GetModeMainLogic_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Logic_TeamDeathMatch_C*             K2Node_DynamicCast_AsBP_Logic_Team_Death_Match;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FL_Mode_TeamDeathMatch_C_GetTDMLogic) == 0x000008, "Wrong alignment on FL_Mode_TeamDeathMatch_C_GetTDMLogic");
static_assert(sizeof(FL_Mode_TeamDeathMatch_C_GetTDMLogic) == 0x000028, "Wrong size on FL_Mode_TeamDeathMatch_C_GetTDMLogic");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetTDMLogic, __WorldContext) == 0x000000, "Member 'FL_Mode_TeamDeathMatch_C_GetTDMLogic::__WorldContext' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetTDMLogic, AsBP_Logic_Team_Death_Match) == 0x000008, "Member 'FL_Mode_TeamDeathMatch_C_GetTDMLogic::AsBP_Logic_Team_Death_Match' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetTDMLogic, CallFunc__S_GetModeMainLogic_ReturnValue) == 0x000010, "Member 'FL_Mode_TeamDeathMatch_C_GetTDMLogic::CallFunc__S_GetModeMainLogic_ReturnValue' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetTDMLogic, K2Node_DynamicCast_AsBP_Logic_Team_Death_Match) == 0x000018, "Member 'FL_Mode_TeamDeathMatch_C_GetTDMLogic::K2Node_DynamicCast_AsBP_Logic_Team_Death_Match' has a wrong offset!");
static_assert(offsetof(FL_Mode_TeamDeathMatch_C_GetTDMLogic, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FL_Mode_TeamDeathMatch_C_GetTDMLogic::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

