#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TutorialSequence_3_C02_Test

#include "Basic.hpp"


namespace SDK::Params
{

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0030 (0x0030 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_CustomEvent_SkeletalMeshComponent0;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_CustomEvent_SkeletalMeshComponent0_4;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_CustomEvent_SkeletalMeshComponent0_3;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_CustomEvent_SkeletalMeshComponent0_2;       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_CustomEvent_SkeletalMeshComponent0_1;       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000030, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_SkeletalMeshComponent0) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_SkeletalMeshComponent0' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_SkeletalMeshComponent0_4) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_SkeletalMeshComponent0_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_SkeletalMeshComponent0_3) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_SkeletalMeshComponent0_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_SkeletalMeshComponent0_2) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_SkeletalMeshComponent0_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_SkeletalMeshComponent0_1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_SkeletalMeshComponent0_1' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SkeletalMeshComponent0_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SkeletalMeshComponent0_Event_4 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SkeletalMeshComponent0_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SkeletalMeshComponent0_Event_4");
static_assert(sizeof(SequenceDirector_C_SkeletalMeshComponent0_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_SkeletalMeshComponent0_Event_4");
static_assert(offsetof(SequenceDirector_C_SkeletalMeshComponent0_Event_4, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SkeletalMeshComponent0_Event_4::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SkeletalMeshComponent0_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SkeletalMeshComponent0_Event_3 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SkeletalMeshComponent0_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SkeletalMeshComponent0_Event_3");
static_assert(sizeof(SequenceDirector_C_SkeletalMeshComponent0_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_SkeletalMeshComponent0_Event_3");
static_assert(offsetof(SequenceDirector_C_SkeletalMeshComponent0_Event_3, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SkeletalMeshComponent0_Event_3::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SkeletalMeshComponent0_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SkeletalMeshComponent0_Event_2 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SkeletalMeshComponent0_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SkeletalMeshComponent0_Event_2");
static_assert(sizeof(SequenceDirector_C_SkeletalMeshComponent0_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_SkeletalMeshComponent0_Event_2");
static_assert(offsetof(SequenceDirector_C_SkeletalMeshComponent0_Event_2, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SkeletalMeshComponent0_Event_2::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SkeletalMeshComponent0_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SkeletalMeshComponent0_Event_1 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SkeletalMeshComponent0_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SkeletalMeshComponent0_Event_1");
static_assert(sizeof(SequenceDirector_C_SkeletalMeshComponent0_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_SkeletalMeshComponent0_Event_1");
static_assert(offsetof(SequenceDirector_C_SkeletalMeshComponent0_Event_1, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SkeletalMeshComponent0_Event_1::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SkeletalMeshComponent0_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SkeletalMeshComponent0_Event_0 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SkeletalMeshComponent0_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SkeletalMeshComponent0_Event_0");
static_assert(sizeof(SequenceDirector_C_SkeletalMeshComponent0_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_SkeletalMeshComponent0_Event_0");
static_assert(offsetof(SequenceDirector_C_SkeletalMeshComponent0_Event_0, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SkeletalMeshComponent0_Event_0::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::SkeletalMeshComponent0' has a wrong offset!");

// Function TutorialSequence_3_C02_Test.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, SkeletalMeshComponent0) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::SkeletalMeshComponent0' has a wrong offset!");

}

