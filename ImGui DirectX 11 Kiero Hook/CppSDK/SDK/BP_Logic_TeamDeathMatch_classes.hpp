#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Logic_TeamDeathMatch

#include "Basic.hpp"

#include "BP_Logic_Framework_classes.hpp"
#include "E_BattleState_TDM_structs.hpp"
#include "Engine_structs.hpp"
#include "S_Shop_TDM_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Logic_TeamDeathMatch.BP_Logic_TeamDeathMatch_C
// 0x0188 (0x0370 - 0x01E8)
class UBP_Logic_TeamDeathMatch_C final : public UBP_Logic_Framework_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Logic_TeamDeathMatch_C;          // 0x01E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         战斗限时;                                          // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         加时赛限时;                                        // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Loading时长;                                       // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局等待时间;                                      // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         复活等待时间;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         无敌时间;                                          // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         获胜所需人头数;                                    // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         开局倒计时;                                        // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         结算退出时间;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            AITempleteMap;                                     // 0x0218(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         武器选择限时;                                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Shop_TDM>                    初始武器配置;                                      // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AiLevel;                                           // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         战斗时间;                                          // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         加时赛时间;                                        // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BattleState_TDM                             战局状态;                                          // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Team;                                              // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int32, int32>                            子弹ItemID;                                        // 0x02A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, int32>                            道具ItemID;                                        // 0x02F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ReportingInterval;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         模式默认全局人数;                                  // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeginTime;                                         // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WaitTimeHandle;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AIReadyNum;                                        // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LevelInitEnd;                                      // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AICreated;                                         // 0x035D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35E[0x2];                                      // 0x035E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastQuitPlayerCharacterID;                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastQuitPlayerSkinID;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirstRealPlayerJoin;                              // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Logic_TeamDeathMatch(int32 EntryPoint);
	void TrySupplementAiBySide(const class FString& Side);
	void ReceiveBattleBegin();
	void Event_AddBullet();
	void HandleWaitingPostMatch();
	void Event_OverTiime();
	void Event_BattleEnd();
	void Event_SupplemenMissingAI();
	void Event_ChangeInKillCount(ESCMDataChangeType ChangeType, int32 OldValue, int32 NewValue);
	void OnMatchingClosed(const int32 RPCId);
	void Event_CustomRoomStart();
	void Event_CustomRoomBattleBegin();
	void EventMatchEndSpawnAI();
	void Check_to_See_if_ATeam_Has_Reached_the_Winning_Kill_Count(bool* Has_Winner);
	void Player_Join_Process(class ASCMPlayerState* Player, bool IsRevive);
	void AddProps(class ASolarCharacter* SolarCharacter, const TMap<int32, int32>& ItemID);
	void Player_Revive_Process(class ASCMPlayerState* Player);
	void Update_Battle_Time(float Time);
	void Update_Battle_State();
	void OnBattleEndBuriedPoint();
	void On_Role_Position_Reporting();
	void On_Take_the_Initiative_to_Exit_Reporting(class ASCMPlayerState* Player);
	void GetRealPlayerNumInDM(int32* TeamRedPlayerNum, int32* TeamBluePlayerNum);
	void Player_Quit_Process(class ASCMPlayerState* Player, ESCMPlayerOutType OutType);
	void Init_AILevel();
	void InitModeData();
	void Get_AILevel(int32* NewParam);
	void Custom_Room_Start();
	void GetRandomPlayerStartLocation(const class FString& Side, struct FVector* NextLocation);
	void GetPlayerNumInDM(int32* RedAllPlayerNum, int32* RedRealPlayerNum, int32* BlueAllPlayerNum, int32* BlueRealPlayerNum);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Logic_TeamDeathMatch_C">();
	}
	static class UBP_Logic_TeamDeathMatch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Logic_TeamDeathMatch_C>();
	}
};
static_assert(alignof(UBP_Logic_TeamDeathMatch_C) == 0x000008, "Wrong alignment on UBP_Logic_TeamDeathMatch_C");
static_assert(sizeof(UBP_Logic_TeamDeathMatch_C) == 0x000370, "Wrong size on UBP_Logic_TeamDeathMatch_C");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, UberGraphFrame_BP_Logic_TeamDeathMatch_C) == 0x0001E8, "Member 'UBP_Logic_TeamDeathMatch_C::UberGraphFrame_BP_Logic_TeamDeathMatch_C' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 战斗限时) == 0x0001F0, "Member 'UBP_Logic_TeamDeathMatch_C::战斗限时' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 加时赛限时) == 0x0001F4, "Member 'UBP_Logic_TeamDeathMatch_C::加时赛限时' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, Loading时长) == 0x0001F8, "Member 'UBP_Logic_TeamDeathMatch_C::Loading时长' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 开局等待时间) == 0x0001FC, "Member 'UBP_Logic_TeamDeathMatch_C::开局等待时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 复活等待时间) == 0x000200, "Member 'UBP_Logic_TeamDeathMatch_C::复活等待时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 无敌时间) == 0x000204, "Member 'UBP_Logic_TeamDeathMatch_C::无敌时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 获胜所需人头数) == 0x000208, "Member 'UBP_Logic_TeamDeathMatch_C::获胜所需人头数' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 开局倒计时) == 0x00020C, "Member 'UBP_Logic_TeamDeathMatch_C::开局倒计时' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 结算退出时间) == 0x000210, "Member 'UBP_Logic_TeamDeathMatch_C::结算退出时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, AITempleteMap) == 0x000218, "Member 'UBP_Logic_TeamDeathMatch_C::AITempleteMap' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 武器选择限时) == 0x000268, "Member 'UBP_Logic_TeamDeathMatch_C::武器选择限时' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 初始武器配置) == 0x000270, "Member 'UBP_Logic_TeamDeathMatch_C::初始武器配置' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, AiLevel) == 0x000280, "Member 'UBP_Logic_TeamDeathMatch_C::AiLevel' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 战斗时间) == 0x000284, "Member 'UBP_Logic_TeamDeathMatch_C::战斗时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 加时赛时间) == 0x000288, "Member 'UBP_Logic_TeamDeathMatch_C::加时赛时间' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 战局状态) == 0x00028C, "Member 'UBP_Logic_TeamDeathMatch_C::战局状态' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, Team) == 0x000290, "Member 'UBP_Logic_TeamDeathMatch_C::Team' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 子弹ItemID) == 0x0002A0, "Member 'UBP_Logic_TeamDeathMatch_C::子弹ItemID' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 道具ItemID) == 0x0002F0, "Member 'UBP_Logic_TeamDeathMatch_C::道具ItemID' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, ReportingInterval) == 0x000340, "Member 'UBP_Logic_TeamDeathMatch_C::ReportingInterval' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, 模式默认全局人数) == 0x000344, "Member 'UBP_Logic_TeamDeathMatch_C::模式默认全局人数' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, BeginTime) == 0x000348, "Member 'UBP_Logic_TeamDeathMatch_C::BeginTime' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, WaitTimeHandle) == 0x000350, "Member 'UBP_Logic_TeamDeathMatch_C::WaitTimeHandle' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, AIReadyNum) == 0x000358, "Member 'UBP_Logic_TeamDeathMatch_C::AIReadyNum' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, LevelInitEnd) == 0x00035C, "Member 'UBP_Logic_TeamDeathMatch_C::LevelInitEnd' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, AICreated) == 0x00035D, "Member 'UBP_Logic_TeamDeathMatch_C::AICreated' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, LastQuitPlayerCharacterID) == 0x000360, "Member 'UBP_Logic_TeamDeathMatch_C::LastQuitPlayerCharacterID' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, LastQuitPlayerSkinID) == 0x000364, "Member 'UBP_Logic_TeamDeathMatch_C::LastQuitPlayerSkinID' has a wrong offset!");
static_assert(offsetof(UBP_Logic_TeamDeathMatch_C, bFirstRealPlayerJoin) == 0x000368, "Member 'UBP_Logic_TeamDeathMatch_C::bFirstRealPlayerJoin' has a wrong offset!");

}

