#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD_Notice_CountDown

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_HUD_Notice_CountDown.UI_HUD_Notice_CountDown_C
// 0x0048 (0x0718 - 0x06D0)
class UUI_HUD_Notice_CountDown_C final : public UUINotice_CountDown
{
public:
	class UWidgetAnimation*                       Pre;                                               // 0x06D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Txt_Anim;                                          // 0x06D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class USolarRichTextBlock*                    Txt_Battle_Notice;                                 // 0x06E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateHandle;                                      // 0x06E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RebirthTimeMAT;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayCountDownAnim;                                 // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F9[0x3];                                      // 0x06F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWaitTime;                                       // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         OldCurWaitTime;                                    // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_704[0x4];                                      // 0x0704(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_开局倒计时;                            // 0x0708(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurCountDownTime;                                  // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EnableBattleController(bool Show);
	class UWidgetAnimation* GetCDAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_HUD_Notice_CountDown_C">();
	}
	static class UUI_HUD_Notice_CountDown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_HUD_Notice_CountDown_C>();
	}
};
static_assert(alignof(UUI_HUD_Notice_CountDown_C) == 0x000008, "Wrong alignment on UUI_HUD_Notice_CountDown_C");
static_assert(sizeof(UUI_HUD_Notice_CountDown_C) == 0x000718, "Wrong size on UUI_HUD_Notice_CountDown_C");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, Pre) == 0x0006D0, "Member 'UUI_HUD_Notice_CountDown_C::Pre' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, Txt_Anim) == 0x0006D8, "Member 'UUI_HUD_Notice_CountDown_C::Txt_Anim' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, Txt_Battle_Notice) == 0x0006E0, "Member 'UUI_HUD_Notice_CountDown_C::Txt_Battle_Notice' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, UpdateHandle) == 0x0006E8, "Member 'UUI_HUD_Notice_CountDown_C::UpdateHandle' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, RebirthTimeMAT) == 0x0006F0, "Member 'UUI_HUD_Notice_CountDown_C::RebirthTimeMAT' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, PlayCountDownAnim) == 0x0006F8, "Member 'UUI_HUD_Notice_CountDown_C::PlayCountDownAnim' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, MaxWaitTime) == 0x0006FC, "Member 'UUI_HUD_Notice_CountDown_C::MaxWaitTime' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, OldCurWaitTime) == 0x000700, "Member 'UUI_HUD_Notice_CountDown_C::OldCurWaitTime' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, TimerHandle_开局倒计时) == 0x000708, "Member 'UUI_HUD_Notice_CountDown_C::TimerHandle_开局倒计时' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_CountDown_C, CurCountDownTime) == 0x000710, "Member 'UUI_HUD_Notice_CountDown_C::CurCountDownTime' has a wrong offset!");

}

