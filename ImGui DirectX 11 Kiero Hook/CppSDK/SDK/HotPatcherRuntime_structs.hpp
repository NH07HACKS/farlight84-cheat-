#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HotPatcherRuntime

#include "Basic.hpp"

#include "BinariesPatchFeature_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HotPatcherRuntime.ETargetPlatform
// NumValues: 0x0003
enum class ETargetPlatform : uint8
{
	None                                     = 0,
	AllPlatforms                             = 1,
	ETargetPlatform_MAX                      = 2,
};

// Enum HotPatcherRuntime.EMatchOperator
// NumValues: 0x0005
enum class EMatchOperator : uint8
{
	None                                     = 0,
	GREAT_THAN                               = 1,
	LESS_THAN                                = 2,
	EQUAL                                    = 3,
	EMatchOperator_MAX                       = 4,
};

// Enum HotPatcherRuntime.EMatchRule
// NumValues: 0x0004
enum class EMatchRule : uint8
{
	None                                     = 0,
	MATCH                                    = 1,
	IGNORE                                   = 2,
	EMatchRule_MAX                           = 3,
};

// Enum HotPatcherRuntime.EMonolithicPathMode
// NumValues: 0x0003
enum class EMonolithicPathMode : uint8
{
	MountPath                                = 0,
	PackagePath                              = 1,
	EMonolithicPathMode_MAX                  = 2,
};

// Enum HotPatcherRuntime.EAssetRegistryRule
// NumValues: 0x0004
enum class EAssetRegistryRule : uint8
{
	PATCH                                    = 0,
	PER_CHUNK                                = 1,
	CUSTOM                                   = 2,
	EAssetRegistryRule_MAX                   = 3,
};

// Enum HotPatcherRuntime.EShaderLibNameRule
// NumValues: 0x0004
enum class EShaderLibNameRule : uint8
{
	VERSION_ID                               = 0,
	PROJECT_NAME                             = 1,
	CUSTOM                                   = 2,
	EShaderLibNameRule_MAX                   = 3,
};

// Enum HotPatcherRuntime.EAssetRegistryDependencyTypeEx
// NumValues: 0x000A
enum class EAssetRegistryDependencyTypeEx : uint8
{
	None                                     = 0,
	Soft                                     = 1,
	Hard                                     = 2,
	SearchableName                           = 4,
	SoftManage                               = 8,
	HardManage                               = 16,
	Packages                                 = 3,
	Manage                                   = 24,
	All                                      = 31,
	EAssetRegistryDependencyTypeEx_MAX       = 32,
};

// Enum HotPatcherRuntime.EPSOSaveMode
// NumValues: 0x0004
enum class EPSOSaveMode : uint8
{
	Incremental                              = 0,
	BoundPSOsOnly                            = 1,
	SortedBoundPSOs                          = 2,
	EPSOSaveMode_MAX                         = 3,
};

// Enum HotPatcherRuntime.ESearchCaseMode
// NumValues: 0x0003
enum class ESearchCaseMode : uint8
{
	CaseSensitive                            = 0,
	IgnoreCase                               = 1,
	ESearchCaseMode_MAX                      = 2,
};

// ScriptStruct HotPatcherRuntime.PakEncryptSettings
// 0x0018 (0x0018 - 0x0000)
struct FPakEncryptSettings final
{
public:
	bool                                          bUseDefaultCryptoIni;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              CryptoKeys;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakEncryptSettings) == 0x000008, "Wrong alignment on FPakEncryptSettings");
static_assert(sizeof(FPakEncryptSettings) == 0x000018, "Wrong size on FPakEncryptSettings");
static_assert(offsetof(FPakEncryptSettings, bUseDefaultCryptoIni) == 0x000000, "Member 'FPakEncryptSettings::bUseDefaultCryptoIni' has a wrong offset!");
static_assert(offsetof(FPakEncryptSettings, CryptoKeys) == 0x000008, "Member 'FPakEncryptSettings::CryptoKeys' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PlatformBasePak
// 0x0018 (0x0018 - 0x0000)
struct FPlatformBasePak final
{
public:
	ETargetPlatform                               Platform;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFilePath>                      Paks;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformBasePak) == 0x000008, "Wrong alignment on FPlatformBasePak");
static_assert(sizeof(FPlatformBasePak) == 0x000018, "Wrong size on FPlatformBasePak");
static_assert(offsetof(FPlatformBasePak, Platform) == 0x000000, "Member 'FPlatformBasePak::Platform' has a wrong offset!");
static_assert(offsetof(FPlatformBasePak, Paks) == 0x000008, "Member 'FPlatformBasePak::Paks' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.MatchRule
// 0x0028 (0x0028 - 0x0000)
struct FMatchRule final
{
public:
	EMatchRule                                    Rule;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchOperator                                Operator;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Size;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Formaters;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetTypes;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchRule) == 0x000008, "Wrong alignment on FMatchRule");
static_assert(sizeof(FMatchRule) == 0x000028, "Wrong size on FMatchRule");
static_assert(offsetof(FMatchRule, Rule) == 0x000000, "Member 'FMatchRule::Rule' has a wrong offset!");
static_assert(offsetof(FMatchRule, Operator) == 0x000001, "Member 'FMatchRule::Operator' has a wrong offset!");
static_assert(offsetof(FMatchRule, Size) == 0x000004, "Member 'FMatchRule::Size' has a wrong offset!");
static_assert(offsetof(FMatchRule, Formaters) == 0x000008, "Member 'FMatchRule::Formaters' has a wrong offset!");
static_assert(offsetof(FMatchRule, AssetTypes) == 0x000018, "Member 'FMatchRule::AssetTypes' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.BinariesPatchConfig
// 0x0050 (0x0050 - 0x0000)
struct FBinariesPatchConfig final
{
public:
	EBinariesPatchFeature                         BinariesPatchType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPakEncryptSettings                    EncryptSettings;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPlatformBasePak>               BaseVersionPaks;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchRule>                     MatchRules;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinariesPatchConfig) == 0x000008, "Wrong alignment on FBinariesPatchConfig");
static_assert(sizeof(FBinariesPatchConfig) == 0x000050, "Wrong size on FBinariesPatchConfig");
static_assert(offsetof(FBinariesPatchConfig, BinariesPatchType) == 0x000000, "Member 'FBinariesPatchConfig::BinariesPatchType' has a wrong offset!");
static_assert(offsetof(FBinariesPatchConfig, EncryptSettings) == 0x000018, "Member 'FBinariesPatchConfig::EncryptSettings' has a wrong offset!");
static_assert(offsetof(FBinariesPatchConfig, BaseVersionPaks) == 0x000030, "Member 'FBinariesPatchConfig::BaseVersionPaks' has a wrong offset!");
static_assert(offsetof(FBinariesPatchConfig, MatchRules) == 0x000040, "Member 'FBinariesPatchConfig::MatchRules' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.AssetDetail
// 0x0018 (0x0018 - 0x0000)
struct FAssetDetail final
{
public:
	class FName                                   PackagePath;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetType;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Guid;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetDetail) == 0x000004, "Wrong alignment on FAssetDetail");
static_assert(sizeof(FAssetDetail) == 0x000018, "Wrong size on FAssetDetail");
static_assert(offsetof(FAssetDetail, PackagePath) == 0x000000, "Member 'FAssetDetail::PackagePath' has a wrong offset!");
static_assert(offsetof(FAssetDetail, AssetType) == 0x000008, "Member 'FAssetDetail::AssetType' has a wrong offset!");
static_assert(offsetof(FAssetDetail, Guid) == 0x000010, "Member 'FAssetDetail::Guid' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.AssetDependenciesDetail
// 0x0060 (0x0060 - 0x0000)
struct FAssetDependenciesDetail final
{
public:
	class FString                                 ModuleCategory;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAssetDetail>      AssetDependencyDetails;                            // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetDependenciesDetail) == 0x000008, "Wrong alignment on FAssetDependenciesDetail");
static_assert(sizeof(FAssetDependenciesDetail) == 0x000060, "Wrong size on FAssetDependenciesDetail");
static_assert(offsetof(FAssetDependenciesDetail, ModuleCategory) == 0x000000, "Member 'FAssetDependenciesDetail::ModuleCategory' has a wrong offset!");
static_assert(offsetof(FAssetDependenciesDetail, AssetDependencyDetails) == 0x000010, "Member 'FAssetDependenciesDetail::AssetDependencyDetails' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.AssetDependenciesInfo
// 0x0050 (0x0050 - 0x0000)
struct FAssetDependenciesInfo final
{
public:
	TMap<class FString, struct FAssetDependenciesDetail> AssetsDependenciesMap;                      // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetDependenciesInfo) == 0x000008, "Wrong alignment on FAssetDependenciesInfo");
static_assert(sizeof(FAssetDependenciesInfo) == 0x000050, "Wrong size on FAssetDependenciesInfo");
static_assert(offsetof(FAssetDependenciesInfo, AssetsDependenciesMap) == 0x000000, "Member 'FAssetDependenciesInfo::AssetsDependenciesMap' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PatchVersionAssetDiff
// 0x00F0 (0x00F0 - 0x0000)
struct FPatchVersionAssetDiff final
{
public:
	struct FAssetDependenciesInfo                 AddAssetDependInfo;                                // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 ModifyAssetDependInfo;                             // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 DeleteAssetDependInfo;                             // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchVersionAssetDiff) == 0x000008, "Wrong alignment on FPatchVersionAssetDiff");
static_assert(sizeof(FPatchVersionAssetDiff) == 0x0000F0, "Wrong size on FPatchVersionAssetDiff");
static_assert(offsetof(FPatchVersionAssetDiff, AddAssetDependInfo) == 0x000000, "Member 'FPatchVersionAssetDiff::AddAssetDependInfo' has a wrong offset!");
static_assert(offsetof(FPatchVersionAssetDiff, ModifyAssetDependInfo) == 0x000050, "Member 'FPatchVersionAssetDiff::ModifyAssetDependInfo' has a wrong offset!");
static_assert(offsetof(FPatchVersionAssetDiff, DeleteAssetDependInfo) == 0x0000A0, "Member 'FPatchVersionAssetDiff::DeleteAssetDependInfo' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ExternFileInfo
// 0x0038 (0x0038 - 0x0000)
struct FExternFileInfo final
{
public:
	struct FFilePath                              FilePath;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 MountPath;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileHash;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExternFileInfo) == 0x000008, "Wrong alignment on FExternFileInfo");
static_assert(sizeof(FExternFileInfo) == 0x000038, "Wrong size on FExternFileInfo");
static_assert(offsetof(FExternFileInfo, FilePath) == 0x000000, "Member 'FExternFileInfo::FilePath' has a wrong offset!");
static_assert(offsetof(FExternFileInfo, MountPath) == 0x000010, "Member 'FExternFileInfo::MountPath' has a wrong offset!");
static_assert(offsetof(FExternFileInfo, FileHash) == 0x000020, "Member 'FExternFileInfo::FileHash' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PatchVersionExternDiff
// 0x0038 (0x0038 - 0x0000)
struct FPatchVersionExternDiff final
{
public:
	ETargetPlatform                               Platform;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExternFileInfo>                AddExternalFiles;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExternFileInfo>                ModifyExternalFiles;                               // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExternFileInfo>                DeleteExternalFiles;                               // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchVersionExternDiff) == 0x000008, "Wrong alignment on FPatchVersionExternDiff");
static_assert(sizeof(FPatchVersionExternDiff) == 0x000038, "Wrong size on FPatchVersionExternDiff");
static_assert(offsetof(FPatchVersionExternDiff, Platform) == 0x000000, "Member 'FPatchVersionExternDiff::Platform' has a wrong offset!");
static_assert(offsetof(FPatchVersionExternDiff, AddExternalFiles) == 0x000008, "Member 'FPatchVersionExternDiff::AddExternalFiles' has a wrong offset!");
static_assert(offsetof(FPatchVersionExternDiff, ModifyExternalFiles) == 0x000018, "Member 'FPatchVersionExternDiff::ModifyExternalFiles' has a wrong offset!");
static_assert(offsetof(FPatchVersionExternDiff, DeleteExternalFiles) == 0x000028, "Member 'FPatchVersionExternDiff::DeleteExternalFiles' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PatchVersionDiff
// 0x0140 (0x0140 - 0x0000)
struct FPatchVersionDiff final
{
public:
	struct FPatchVersionAssetDiff                 AssetDiffInfo;                                     // 0x0000(0x00F0)(Edit, NativeAccessSpecifierPublic)
	TMap<ETargetPlatform, struct FPatchVersionExternDiff> PlatformExternDiffInfo;                    // 0x00F0(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchVersionDiff) == 0x000008, "Wrong alignment on FPatchVersionDiff");
static_assert(sizeof(FPatchVersionDiff) == 0x000140, "Wrong size on FPatchVersionDiff");
static_assert(offsetof(FPatchVersionDiff, AssetDiffInfo) == 0x000000, "Member 'FPatchVersionDiff::AssetDiffInfo' has a wrong offset!");
static_assert(offsetof(FPatchVersionDiff, PlatformExternDiffInfo) == 0x0000F0, "Member 'FPatchVersionDiff::PlatformExternDiffInfo' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakMountInfo
// 0x0018 (0x0018 - 0x0000)
struct FPakMountInfo final
{
public:
	class FString                                 Pak;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PakOrder;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPakMountInfo) == 0x000008, "Wrong alignment on FPakMountInfo");
static_assert(sizeof(FPakMountInfo) == 0x000018, "Wrong size on FPakMountInfo");
static_assert(offsetof(FPakMountInfo, Pak) == 0x000000, "Member 'FPakMountInfo::Pak' has a wrong offset!");
static_assert(offsetof(FPakMountInfo, PakOrder) == 0x000010, "Member 'FPakMountInfo::PakOrder' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ChunkAssetDescribe
// 0x0148 (0x0148 - 0x0000)
struct alignas(0x08) FChunkAssetDescribe final
{
public:
	uint8                                         Pad_0[0x148];                                      // 0x0000(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChunkAssetDescribe) == 0x000008, "Wrong alignment on FChunkAssetDescribe");
static_assert(sizeof(FChunkAssetDescribe) == 0x000148, "Wrong size on FChunkAssetDescribe");

// ScriptStruct HotPatcherRuntime.ChunkPakCommand
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FChunkPakCommand final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChunkPakCommand) == 0x000008, "Wrong alignment on FChunkPakCommand");
static_assert(sizeof(FChunkPakCommand) == 0x000040, "Wrong size on FChunkPakCommand");

// ScriptStruct HotPatcherRuntime.PatcherSpecifyAsset
// 0x0030 (0x0030 - 0x0000)
struct FPatcherSpecifyAsset final
{
public:
	struct FSoftObjectPath                        Asset;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalysisAssetDependencies;                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAssetRegistryDependencyTypeEx>        AssetRegistryDependencyTypes;                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatcherSpecifyAsset) == 0x000008, "Wrong alignment on FPatcherSpecifyAsset");
static_assert(sizeof(FPatcherSpecifyAsset) == 0x000030, "Wrong size on FPatcherSpecifyAsset");
static_assert(offsetof(FPatcherSpecifyAsset, Asset) == 0x000000, "Member 'FPatcherSpecifyAsset::Asset' has a wrong offset!");
static_assert(offsetof(FPatcherSpecifyAsset, bAnalysisAssetDependencies) == 0x000018, "Member 'FPatcherSpecifyAsset::bAnalysisAssetDependencies' has a wrong offset!");
static_assert(offsetof(FPatcherSpecifyAsset, AssetRegistryDependencyTypes) == 0x000020, "Member 'FPatcherSpecifyAsset::AssetRegistryDependencyTypes' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakInternalInfo
// 0x0006 (0x0006 - 0x0000)
struct FPakInternalInfo final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIncludeEngineIni;                                 // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePluginIni;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeProjectIni;                                // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakInternalInfo) == 0x000001, "Wrong alignment on FPakInternalInfo");
static_assert(sizeof(FPakInternalInfo) == 0x000006, "Wrong size on FPakInternalInfo");
static_assert(offsetof(FPakInternalInfo, bIncludeEngineIni) == 0x000003, "Member 'FPakInternalInfo::bIncludeEngineIni' has a wrong offset!");
static_assert(offsetof(FPakInternalInfo, bIncludePluginIni) == 0x000004, "Member 'FPakInternalInfo::bIncludePluginIni' has a wrong offset!");
static_assert(offsetof(FPakInternalInfo, bIncludeProjectIni) == 0x000005, "Member 'FPakInternalInfo::bIncludeProjectIni' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ExternDirectoryInfo
// 0x0020 (0x0020 - 0x0000)
struct FExternDirectoryInfo final
{
public:
	struct FDirectoryPath                         DirectoryPath;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 MountPoint;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExternDirectoryInfo) == 0x000008, "Wrong alignment on FExternDirectoryInfo");
static_assert(sizeof(FExternDirectoryInfo) == 0x000020, "Wrong size on FExternDirectoryInfo");
static_assert(offsetof(FExternDirectoryInfo, DirectoryPath) == 0x000000, "Member 'FExternDirectoryInfo::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FExternDirectoryInfo, MountPoint) == 0x000010, "Member 'FExternDirectoryInfo::MountPoint' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PlatformExternAssets
// 0x0028 (0x0028 - 0x0000)
struct FPlatformExternAssets final
{
public:
	ETargetPlatform                               TargetPlatform;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExternFileInfo>                AddExternFileToPak;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExternDirectoryInfo>           AddExternDirectoryToPak;                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformExternAssets) == 0x000008, "Wrong alignment on FPlatformExternAssets");
static_assert(sizeof(FPlatformExternAssets) == 0x000028, "Wrong size on FPlatformExternAssets");
static_assert(offsetof(FPlatformExternAssets, TargetPlatform) == 0x000000, "Member 'FPlatformExternAssets::TargetPlatform' has a wrong offset!");
static_assert(offsetof(FPlatformExternAssets, AddExternFileToPak) == 0x000008, "Member 'FPlatformExternAssets::AddExternFileToPak' has a wrong offset!");
static_assert(offsetof(FPlatformExternAssets, AddExternDirectoryToPak) == 0x000018, "Member 'FPlatformExternAssets::AddExternDirectoryToPak' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ChunkInfo
// 0x0088 (0x0088 - 0x0000)
struct FChunkInfo final
{
public:
	class FString                                 ChunkName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonolithic;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonolithicPathMode                           MonolithicPathMode;                                // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageUnrealPakList;                             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageIoStorePakList;                            // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDirectoryPath>                 AssetIncludeFilters;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 AssetIgnoreFilters;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalysisFilterDependencies;                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAssetRegistryDependencyTypeEx>        AssetRegistryDependencyTypes;                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPatcherSpecifyAsset>           IncludeSpecifyAssets;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlatformExternAssets>          AddExternAssetsToPlatform;                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPakInternalInfo                       InternalFiles;                                     // 0x0070(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x12];                                      // 0x0076(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChunkInfo) == 0x000008, "Wrong alignment on FChunkInfo");
static_assert(sizeof(FChunkInfo) == 0x000088, "Wrong size on FChunkInfo");
static_assert(offsetof(FChunkInfo, ChunkName) == 0x000000, "Member 'FChunkInfo::ChunkName' has a wrong offset!");
static_assert(offsetof(FChunkInfo, bMonolithic) == 0x000010, "Member 'FChunkInfo::bMonolithic' has a wrong offset!");
static_assert(offsetof(FChunkInfo, MonolithicPathMode) == 0x000011, "Member 'FChunkInfo::MonolithicPathMode' has a wrong offset!");
static_assert(offsetof(FChunkInfo, bStorageUnrealPakList) == 0x000012, "Member 'FChunkInfo::bStorageUnrealPakList' has a wrong offset!");
static_assert(offsetof(FChunkInfo, bStorageIoStorePakList) == 0x000013, "Member 'FChunkInfo::bStorageIoStorePakList' has a wrong offset!");
static_assert(offsetof(FChunkInfo, AssetIncludeFilters) == 0x000018, "Member 'FChunkInfo::AssetIncludeFilters' has a wrong offset!");
static_assert(offsetof(FChunkInfo, AssetIgnoreFilters) == 0x000028, "Member 'FChunkInfo::AssetIgnoreFilters' has a wrong offset!");
static_assert(offsetof(FChunkInfo, bAnalysisFilterDependencies) == 0x000038, "Member 'FChunkInfo::bAnalysisFilterDependencies' has a wrong offset!");
static_assert(offsetof(FChunkInfo, AssetRegistryDependencyTypes) == 0x000040, "Member 'FChunkInfo::AssetRegistryDependencyTypes' has a wrong offset!");
static_assert(offsetof(FChunkInfo, IncludeSpecifyAssets) == 0x000050, "Member 'FChunkInfo::IncludeSpecifyAssets' has a wrong offset!");
static_assert(offsetof(FChunkInfo, AddExternAssetsToPlatform) == 0x000060, "Member 'FChunkInfo::AddExternAssetsToPlatform' has a wrong offset!");
static_assert(offsetof(FChunkInfo, InternalFiles) == 0x000070, "Member 'FChunkInfo::InternalFiles' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakCommand
// 0x0058 (0x0058 - 0x0000)
struct FPakCommand final
{
public:
	class FString                                 ChunkName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MountPath;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetPackage;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PakCommands;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         IoStoreCommands;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPakCommand) == 0x000008, "Wrong alignment on FPakCommand");
static_assert(sizeof(FPakCommand) == 0x000058, "Wrong size on FPakCommand");
static_assert(offsetof(FPakCommand, ChunkName) == 0x000000, "Member 'FPakCommand::ChunkName' has a wrong offset!");
static_assert(offsetof(FPakCommand, MountPath) == 0x000010, "Member 'FPakCommand::MountPath' has a wrong offset!");
static_assert(offsetof(FPakCommand, AssetPackage) == 0x000020, "Member 'FPakCommand::AssetPackage' has a wrong offset!");
static_assert(offsetof(FPakCommand, PakCommands) == 0x000030, "Member 'FPakCommand::PakCommands' has a wrong offset!");
static_assert(offsetof(FPakCommand, IoStoreCommands) == 0x000040, "Member 'FPakCommand::IoStoreCommands' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakFileProxy
// 0x0068 (0x0068 - 0x0000)
struct FPakFileProxy final
{
public:
	class FString                                 ChunkStoreName;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetPlatform                               Platform;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StorageDirectory;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PakCommandSavePath;                                // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PakSavePath;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPakCommand>                    PakCommands;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         IoStoreCommands;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakFileProxy) == 0x000008, "Wrong alignment on FPakFileProxy");
static_assert(sizeof(FPakFileProxy) == 0x000068, "Wrong size on FPakFileProxy");
static_assert(offsetof(FPakFileProxy, ChunkStoreName) == 0x000000, "Member 'FPakFileProxy::ChunkStoreName' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, Platform) == 0x000010, "Member 'FPakFileProxy::Platform' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, StorageDirectory) == 0x000018, "Member 'FPakFileProxy::StorageDirectory' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, PakCommandSavePath) == 0x000028, "Member 'FPakFileProxy::PakCommandSavePath' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, PakSavePath) == 0x000038, "Member 'FPakFileProxy::PakSavePath' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, PakCommands) == 0x000048, "Member 'FPakFileProxy::PakCommands' has a wrong offset!");
static_assert(offsetof(FPakFileProxy, IoStoreCommands) == 0x000058, "Member 'FPakFileProxy::IoStoreCommands' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.CookerConfig
// 0x0088 (0x0088 - 0x0000)
struct FCookerConfig final
{
public:
	class FString                                 EngineBin;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjectPath;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EngineParams;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CookPlatforms;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCookAllMap;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CookMaps;                                          // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CookFilter;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CookSettings;                                      // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 options;                                           // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCookerConfig) == 0x000008, "Wrong alignment on FCookerConfig");
static_assert(sizeof(FCookerConfig) == 0x000088, "Wrong size on FCookerConfig");
static_assert(offsetof(FCookerConfig, EngineBin) == 0x000000, "Member 'FCookerConfig::EngineBin' has a wrong offset!");
static_assert(offsetof(FCookerConfig, ProjectPath) == 0x000010, "Member 'FCookerConfig::ProjectPath' has a wrong offset!");
static_assert(offsetof(FCookerConfig, EngineParams) == 0x000020, "Member 'FCookerConfig::EngineParams' has a wrong offset!");
static_assert(offsetof(FCookerConfig, CookPlatforms) == 0x000030, "Member 'FCookerConfig::CookPlatforms' has a wrong offset!");
static_assert(offsetof(FCookerConfig, bCookAllMap) == 0x000040, "Member 'FCookerConfig::bCookAllMap' has a wrong offset!");
static_assert(offsetof(FCookerConfig, CookMaps) == 0x000048, "Member 'FCookerConfig::CookMaps' has a wrong offset!");
static_assert(offsetof(FCookerConfig, CookFilter) == 0x000058, "Member 'FCookerConfig::CookFilter' has a wrong offset!");
static_assert(offsetof(FCookerConfig, CookSettings) == 0x000068, "Member 'FCookerConfig::CookSettings' has a wrong offset!");
static_assert(offsetof(FCookerConfig, options) == 0x000078, "Member 'FCookerConfig::options' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PatcherEntitySettingBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPatcherEntitySettingBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatcherEntitySettingBase) == 0x000008, "Wrong alignment on FPatcherEntitySettingBase");
static_assert(sizeof(FPatcherEntitySettingBase) == 0x000008, "Wrong size on FPatcherEntitySettingBase");

// ScriptStruct HotPatcherRuntime.HotPatcherSettingBase
// 0x0030 (0x0038 - 0x0008)
struct FHotPatcherSettingBase : public FPatcherEntitySettingBase
{
public:
	bool                                          bStorageConfig;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         SavePath;                                          // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          bStandaloneMode;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AdditionalCommandletArgs;                          // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPatcherSettingBase) == 0x000008, "Wrong alignment on FHotPatcherSettingBase");
static_assert(sizeof(FHotPatcherSettingBase) == 0x000038, "Wrong size on FHotPatcherSettingBase");
static_assert(offsetof(FHotPatcherSettingBase, bStorageConfig) == 0x000008, "Member 'FHotPatcherSettingBase::bStorageConfig' has a wrong offset!");
static_assert(offsetof(FHotPatcherSettingBase, SavePath) == 0x000010, "Member 'FHotPatcherSettingBase::SavePath' has a wrong offset!");
static_assert(offsetof(FHotPatcherSettingBase, bStandaloneMode) == 0x000020, "Member 'FHotPatcherSettingBase::bStandaloneMode' has a wrong offset!");
static_assert(offsetof(FHotPatcherSettingBase, AdditionalCommandletArgs) == 0x000028, "Member 'FHotPatcherSettingBase::AdditionalCommandletArgs' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.AssetRegistryOptions
// 0x0030 (0x0030 - 0x0000)
struct FAssetRegistryOptions final
{
public:
	bool                                          bSerializeAssetRegistry;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetRegistryMountPointRegular;                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAssetRegistryRule                            AssetRegistryRule;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomAssetRegistryName;                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetRegistryNameRegular;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetRegistryOptions) == 0x000008, "Wrong alignment on FAssetRegistryOptions");
static_assert(sizeof(FAssetRegistryOptions) == 0x000030, "Wrong size on FAssetRegistryOptions");
static_assert(offsetof(FAssetRegistryOptions, bSerializeAssetRegistry) == 0x000000, "Member 'FAssetRegistryOptions::bSerializeAssetRegistry' has a wrong offset!");
static_assert(offsetof(FAssetRegistryOptions, AssetRegistryMountPointRegular) == 0x000008, "Member 'FAssetRegistryOptions::AssetRegistryMountPointRegular' has a wrong offset!");
static_assert(offsetof(FAssetRegistryOptions, AssetRegistryRule) == 0x000018, "Member 'FAssetRegistryOptions::AssetRegistryRule' has a wrong offset!");
static_assert(offsetof(FAssetRegistryOptions, bCustomAssetRegistryName) == 0x000019, "Member 'FAssetRegistryOptions::bCustomAssetRegistryName' has a wrong offset!");
static_assert(offsetof(FAssetRegistryOptions, AssetRegistryNameRegular) == 0x000020, "Member 'FAssetRegistryOptions::AssetRegistryNameRegular' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.UnrealPakSettings
// 0x0028 (0x0028 - 0x0000)
struct FUnrealPakSettings final
{
public:
	TArray<class FString>                         UnrealPakListOptions;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UnrealCommandletOptions;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoragePakList;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnrealPakSettings) == 0x000008, "Wrong alignment on FUnrealPakSettings");
static_assert(sizeof(FUnrealPakSettings) == 0x000028, "Wrong size on FUnrealPakSettings");
static_assert(offsetof(FUnrealPakSettings, UnrealPakListOptions) == 0x000000, "Member 'FUnrealPakSettings::UnrealPakListOptions' has a wrong offset!");
static_assert(offsetof(FUnrealPakSettings, UnrealCommandletOptions) == 0x000010, "Member 'FUnrealPakSettings::UnrealCommandletOptions' has a wrong offset!");
static_assert(offsetof(FUnrealPakSettings, bStoragePakList) == 0x000020, "Member 'FUnrealPakSettings::bStoragePakList' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.CookShaderOptions
// 0x0028 (0x0028 - 0x0000)
struct FCookShaderOptions final
{
public:
	bool                                          bSharedShaderLibrary;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNativeShader;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x1];                                        // 0x0002(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EShaderLibNameRule                            ShaderNameRule;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomShaderName;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShderLibMountPointRegular;                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCookShaderOptions) == 0x000008, "Wrong alignment on FCookShaderOptions");
static_assert(sizeof(FCookShaderOptions) == 0x000028, "Wrong size on FCookShaderOptions");
static_assert(offsetof(FCookShaderOptions, bSharedShaderLibrary) == 0x000000, "Member 'FCookShaderOptions::bSharedShaderLibrary' has a wrong offset!");
static_assert(offsetof(FCookShaderOptions, bNativeShader) == 0x000001, "Member 'FCookShaderOptions::bNativeShader' has a wrong offset!");
static_assert(offsetof(FCookShaderOptions, ShaderNameRule) == 0x000003, "Member 'FCookShaderOptions::ShaderNameRule' has a wrong offset!");
static_assert(offsetof(FCookShaderOptions, CustomShaderName) == 0x000008, "Member 'FCookShaderOptions::CustomShaderName' has a wrong offset!");
static_assert(offsetof(FCookShaderOptions, ShderLibMountPointRegular) == 0x000018, "Member 'FCookShaderOptions::ShderLibMountPointRegular' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.IoStorePlatformContainers
// 0x0038 (0x0038 - 0x0000)
struct FIoStorePlatformContainers final
{
public:
	struct FDirectoryPath                         BasePackageStagedRootDir;                          // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bGenerateDiffPatch;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              GlobalContainersOverride;                          // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFilePath                              PatchSourceOverride;                               // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIoStorePlatformContainers) == 0x000008, "Wrong alignment on FIoStorePlatformContainers");
static_assert(sizeof(FIoStorePlatformContainers) == 0x000038, "Wrong size on FIoStorePlatformContainers");
static_assert(offsetof(FIoStorePlatformContainers, BasePackageStagedRootDir) == 0x000000, "Member 'FIoStorePlatformContainers::BasePackageStagedRootDir' has a wrong offset!");
static_assert(offsetof(FIoStorePlatformContainers, bGenerateDiffPatch) == 0x000010, "Member 'FIoStorePlatformContainers::bGenerateDiffPatch' has a wrong offset!");
static_assert(offsetof(FIoStorePlatformContainers, GlobalContainersOverride) == 0x000018, "Member 'FIoStorePlatformContainers::GlobalContainersOverride' has a wrong offset!");
static_assert(offsetof(FIoStorePlatformContainers, PatchSourceOverride) == 0x000028, "Member 'FIoStorePlatformContainers::PatchSourceOverride' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.IoStoreSettings
// 0x0080 (0x0080 - 0x0000)
struct FIoStoreSettings final
{
public:
	bool                                          bIoStore;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBulkDataInIoStore;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IoStorePakListOptions;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         IoStoreCommandletOptions;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETargetPlatform, struct FIoStorePlatformContainers> PlatformContainers;                     // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bStoragePakList;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageBulkDataInfo;                              // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIoStoreSettings) == 0x000008, "Wrong alignment on FIoStoreSettings");
static_assert(sizeof(FIoStoreSettings) == 0x000080, "Wrong size on FIoStoreSettings");
static_assert(offsetof(FIoStoreSettings, bIoStore) == 0x000000, "Member 'FIoStoreSettings::bIoStore' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, bAllowBulkDataInIoStore) == 0x000001, "Member 'FIoStoreSettings::bAllowBulkDataInIoStore' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, IoStorePakListOptions) == 0x000008, "Member 'FIoStoreSettings::IoStorePakListOptions' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, IoStoreCommandletOptions) == 0x000018, "Member 'FIoStoreSettings::IoStoreCommandletOptions' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, PlatformContainers) == 0x000028, "Member 'FIoStoreSettings::PlatformContainers' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, bStoragePakList) == 0x000078, "Member 'FIoStoreSettings::bStoragePakList' has a wrong offset!");
static_assert(offsetof(FIoStoreSettings, bStorageBulkDataInfo) == 0x000079, "Member 'FIoStoreSettings::bStorageBulkDataInfo' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ReplaceText
// 0x0028 (0x0028 - 0x0000)
struct FReplaceText final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchCaseMode                               SearchCase;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplaceText) == 0x000008, "Wrong alignment on FReplaceText");
static_assert(sizeof(FReplaceText) == 0x000028, "Wrong size on FReplaceText");
static_assert(offsetof(FReplaceText, From) == 0x000000, "Member 'FReplaceText::From' has a wrong offset!");
static_assert(offsetof(FReplaceText, To) == 0x000010, "Member 'FReplaceText::To' has a wrong offset!");
static_assert(offsetof(FReplaceText, SearchCase) == 0x000020, "Member 'FReplaceText::SearchCase' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ExportPatchSettings
// 0x02F0 (0x0328 - 0x0038)
struct FExportPatchSettings final : public FHotPatcherSettingBase
{
public:
	bool                                          bByBaseVersion;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              BaseVersion;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 VersionId;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBinariesPatch;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBinariesPatchConfig                   BinariesPatchConfig;                               // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 AssetIncludeFilters;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 AssetIgnoreFilters;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSkipContent;                                 // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDirectoryPath>                 ForceSkipContentRules;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ForceSkipAssets;                                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeHasRefAssetsOnly;                          // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalysisFilterDependencies;                       // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalysisDiffAssetDependenciesOnly;                // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAssetRegistryDependencyTypeEx>        AssetRegistryDependencyTypes;                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPatcherSpecifyAsset>           IncludeSpecifyAssets;                              // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursiveWidgetTree;                              // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPackageTracker;                                   // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x4];                                      // 0x012A(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIncludeEngineIni;                                 // 0x012E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePluginIni;                                 // 0x012F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeProjectIni;                                // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableExternFilesDiff;                            // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IgnoreDeletionModulesAsset;                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x20];                                     // 0x0148(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlatformExternAssets>          AddExternAssetsToPlatform;                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x18];                                     // 0x0178(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableChunk;                                      // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateDefaultChunk;                               // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChunkInfo>                     ChunkInfos;                                        // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCookPatchAssets;                                  // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCookShaderOptions                     CookShaderOptions;                                 // 0x01B0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAssetRegistryOptions                  SerializeAssetRegistryOptions;                     // 0x01D8(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FIoStoreSettings                       IoStoreSettings;                                   // 0x0208(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnrealPakSettings                     UnrealPakSettings;                                 // 0x0288(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultPakListOptions;                             // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultCommandletOptions;                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPakEncryptSettings                    EncryptSettings;                                   // 0x02D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FReplaceText>                   ReplacePakListTexts;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETargetPlatform>                       PakTargetPlatforms;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomPakNameRegular;                             // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PakNameRegular;                                    // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageNewRelease;                                // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoragePakFileInfo;                               // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDeleatedAssetsInfo;                         // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageDeletedAssetsToNewReleaseJson;             // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStorageDiffAnalysisResults;                       // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackupMetadata;                                   // 0x0325(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_326[0x1];                                      // 0x0326(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableProfiling;                                  // 0x0327(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExportPatchSettings) == 0x000008, "Wrong alignment on FExportPatchSettings");
static_assert(sizeof(FExportPatchSettings) == 0x000328, "Wrong size on FExportPatchSettings");
static_assert(offsetof(FExportPatchSettings, bByBaseVersion) == 0x000038, "Member 'FExportPatchSettings::bByBaseVersion' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, BaseVersion) == 0x000040, "Member 'FExportPatchSettings::BaseVersion' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, VersionId) == 0x000050, "Member 'FExportPatchSettings::VersionId' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bBinariesPatch) == 0x000060, "Member 'FExportPatchSettings::bBinariesPatch' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, BinariesPatchConfig) == 0x000068, "Member 'FExportPatchSettings::BinariesPatchConfig' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, AssetIncludeFilters) == 0x0000B8, "Member 'FExportPatchSettings::AssetIncludeFilters' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, AssetIgnoreFilters) == 0x0000C8, "Member 'FExportPatchSettings::AssetIgnoreFilters' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bForceSkipContent) == 0x0000D8, "Member 'FExportPatchSettings::bForceSkipContent' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, ForceSkipContentRules) == 0x0000E0, "Member 'FExportPatchSettings::ForceSkipContentRules' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, ForceSkipAssets) == 0x0000F0, "Member 'FExportPatchSettings::ForceSkipAssets' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bIncludeHasRefAssetsOnly) == 0x000100, "Member 'FExportPatchSettings::bIncludeHasRefAssetsOnly' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bAnalysisFilterDependencies) == 0x000101, "Member 'FExportPatchSettings::bAnalysisFilterDependencies' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bAnalysisDiffAssetDependenciesOnly) == 0x000102, "Member 'FExportPatchSettings::bAnalysisDiffAssetDependenciesOnly' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, AssetRegistryDependencyTypes) == 0x000108, "Member 'FExportPatchSettings::AssetRegistryDependencyTypes' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, IncludeSpecifyAssets) == 0x000118, "Member 'FExportPatchSettings::IncludeSpecifyAssets' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bRecursiveWidgetTree) == 0x000128, "Member 'FExportPatchSettings::bRecursiveWidgetTree' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bPackageTracker) == 0x000129, "Member 'FExportPatchSettings::bPackageTracker' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bIncludeEngineIni) == 0x00012E, "Member 'FExportPatchSettings::bIncludeEngineIni' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bIncludePluginIni) == 0x00012F, "Member 'FExportPatchSettings::bIncludePluginIni' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bIncludeProjectIni) == 0x000130, "Member 'FExportPatchSettings::bIncludeProjectIni' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bEnableExternFilesDiff) == 0x000131, "Member 'FExportPatchSettings::bEnableExternFilesDiff' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, IgnoreDeletionModulesAsset) == 0x000138, "Member 'FExportPatchSettings::IgnoreDeletionModulesAsset' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, AddExternAssetsToPlatform) == 0x000168, "Member 'FExportPatchSettings::AddExternAssetsToPlatform' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bEnableChunk) == 0x000190, "Member 'FExportPatchSettings::bEnableChunk' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bCreateDefaultChunk) == 0x000191, "Member 'FExportPatchSettings::bCreateDefaultChunk' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, ChunkInfos) == 0x000198, "Member 'FExportPatchSettings::ChunkInfos' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bCookPatchAssets) == 0x0001A8, "Member 'FExportPatchSettings::bCookPatchAssets' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, CookShaderOptions) == 0x0001B0, "Member 'FExportPatchSettings::CookShaderOptions' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, SerializeAssetRegistryOptions) == 0x0001D8, "Member 'FExportPatchSettings::SerializeAssetRegistryOptions' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, IoStoreSettings) == 0x000208, "Member 'FExportPatchSettings::IoStoreSettings' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, UnrealPakSettings) == 0x000288, "Member 'FExportPatchSettings::UnrealPakSettings' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, DefaultPakListOptions) == 0x0002B0, "Member 'FExportPatchSettings::DefaultPakListOptions' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, DefaultCommandletOptions) == 0x0002C0, "Member 'FExportPatchSettings::DefaultCommandletOptions' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, EncryptSettings) == 0x0002D0, "Member 'FExportPatchSettings::EncryptSettings' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, ReplacePakListTexts) == 0x0002E8, "Member 'FExportPatchSettings::ReplacePakListTexts' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, PakTargetPlatforms) == 0x0002F8, "Member 'FExportPatchSettings::PakTargetPlatforms' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bCustomPakNameRegular) == 0x000308, "Member 'FExportPatchSettings::bCustomPakNameRegular' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, PakNameRegular) == 0x000310, "Member 'FExportPatchSettings::PakNameRegular' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bStorageNewRelease) == 0x000320, "Member 'FExportPatchSettings::bStorageNewRelease' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bStoragePakFileInfo) == 0x000321, "Member 'FExportPatchSettings::bStoragePakFileInfo' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bIgnoreDeleatedAssetsInfo) == 0x000322, "Member 'FExportPatchSettings::bIgnoreDeleatedAssetsInfo' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bStorageDeletedAssetsToNewReleaseJson) == 0x000323, "Member 'FExportPatchSettings::bStorageDeletedAssetsToNewReleaseJson' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bStorageDiffAnalysisResults) == 0x000324, "Member 'FExportPatchSettings::bStorageDiffAnalysisResults' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bBackupMetadata) == 0x000325, "Member 'FExportPatchSettings::bBackupMetadata' has a wrong offset!");
static_assert(offsetof(FExportPatchSettings, bEnableProfiling) == 0x000327, "Member 'FExportPatchSettings::bEnableProfiling' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PlatformPakListFiles
// 0x0038 (0x0038 - 0x0000)
struct FPlatformPakListFiles final
{
public:
	ETargetPlatform                               TargetPlatform;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFilePath>                      PakResponseFiles;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFilePath>                      PakFiles;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AESKey;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPakListFiles) == 0x000008, "Wrong alignment on FPlatformPakListFiles");
static_assert(sizeof(FPlatformPakListFiles) == 0x000038, "Wrong size on FPlatformPakListFiles");
static_assert(offsetof(FPlatformPakListFiles, TargetPlatform) == 0x000000, "Member 'FPlatformPakListFiles::TargetPlatform' has a wrong offset!");
static_assert(offsetof(FPlatformPakListFiles, PakResponseFiles) == 0x000008, "Member 'FPlatformPakListFiles::PakResponseFiles' has a wrong offset!");
static_assert(offsetof(FPlatformPakListFiles, PakFiles) == 0x000018, "Member 'FPlatformPakListFiles::PakFiles' has a wrong offset!");
static_assert(offsetof(FPlatformPakListFiles, AESKey) == 0x000028, "Member 'FPlatformPakListFiles::AESKey' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.ExportReleaseSettings
// 0x00C8 (0x0100 - 0x0038)
struct FExportReleaseSettings final : public FHotPatcherSettingBase
{
public:
	class FString                                 VersionId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ByPakList;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlatformPakListFiles>          PlatformsPakListFiles;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 AssetIncludeFilters;                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 AssetIgnoreFilters;                                // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalysisFilterDependencies;                       // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAssetRegistryDependencyTypeEx>        AssetRegistryDependencyTypes;                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeHasRefAssetsOnly;                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPatcherSpecifyAsset>           IncludeSpecifyAssets;                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlatformExternAssets>          AddExternAssetsToPlatform;                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackupMetadata;                                   // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackupProjectConfig;                              // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETargetPlatform>                       BackupMetadataPlatforms;                           // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoShaderCompile;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExportReleaseSettings) == 0x000008, "Wrong alignment on FExportReleaseSettings");
static_assert(sizeof(FExportReleaseSettings) == 0x000100, "Wrong size on FExportReleaseSettings");
static_assert(offsetof(FExportReleaseSettings, VersionId) == 0x000038, "Member 'FExportReleaseSettings::VersionId' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, ByPakList) == 0x000048, "Member 'FExportReleaseSettings::ByPakList' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, PlatformsPakListFiles) == 0x000050, "Member 'FExportReleaseSettings::PlatformsPakListFiles' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, AssetIncludeFilters) == 0x000060, "Member 'FExportReleaseSettings::AssetIncludeFilters' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, AssetIgnoreFilters) == 0x000070, "Member 'FExportReleaseSettings::AssetIgnoreFilters' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, bAnalysisFilterDependencies) == 0x000080, "Member 'FExportReleaseSettings::bAnalysisFilterDependencies' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, AssetRegistryDependencyTypes) == 0x000088, "Member 'FExportReleaseSettings::AssetRegistryDependencyTypes' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, bIncludeHasRefAssetsOnly) == 0x000098, "Member 'FExportReleaseSettings::bIncludeHasRefAssetsOnly' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, IncludeSpecifyAssets) == 0x0000A0, "Member 'FExportReleaseSettings::IncludeSpecifyAssets' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, AddExternAssetsToPlatform) == 0x0000D0, "Member 'FExportReleaseSettings::AddExternAssetsToPlatform' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, bBackupMetadata) == 0x0000E0, "Member 'FExportReleaseSettings::bBackupMetadata' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, bBackupProjectConfig) == 0x0000E1, "Member 'FExportReleaseSettings::bBackupProjectConfig' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, BackupMetadataPlatforms) == 0x0000E8, "Member 'FExportReleaseSettings::BackupMetadataPlatforms' has a wrong offset!");
static_assert(offsetof(FExportReleaseSettings, bNoShaderCompile) == 0x0000F8, "Member 'FExportReleaseSettings::bNoShaderCompile' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.HotPatcherAssetDependency
// 0x0038 (0x0038 - 0x0000)
struct FHotPatcherAssetDependency final
{
public:
	struct FAssetDetail                           Asset;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   AssetReference;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   AssetDependency;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPatcherAssetDependency) == 0x000008, "Wrong alignment on FHotPatcherAssetDependency");
static_assert(sizeof(FHotPatcherAssetDependency) == 0x000038, "Wrong size on FHotPatcherAssetDependency");
static_assert(offsetof(FHotPatcherAssetDependency, Asset) == 0x000000, "Member 'FHotPatcherAssetDependency::Asset' has a wrong offset!");
static_assert(offsetof(FHotPatcherAssetDependency, AssetReference) == 0x000018, "Member 'FHotPatcherAssetDependency::AssetReference' has a wrong offset!");
static_assert(offsetof(FHotPatcherAssetDependency, AssetDependency) == 0x000028, "Member 'FHotPatcherAssetDependency::AssetDependency' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.HotPatcherVersion
// 0x0118 (0x0118 - 0x0000)
struct FHotPatcherVersion final
{
public:
	class FString                                 VersionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseVersionId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAssetDependenciesInfo                 AssetInfo;                                         // 0x0078(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ETargetPlatform, struct FPlatformExternAssets> PlatformAssets;                              // 0x00C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPatcherVersion) == 0x000008, "Wrong alignment on FHotPatcherVersion");
static_assert(sizeof(FHotPatcherVersion) == 0x000118, "Wrong size on FHotPatcherVersion");
static_assert(offsetof(FHotPatcherVersion, VersionId) == 0x000000, "Member 'FHotPatcherVersion::VersionId' has a wrong offset!");
static_assert(offsetof(FHotPatcherVersion, BaseVersionId) == 0x000010, "Member 'FHotPatcherVersion::BaseVersionId' has a wrong offset!");
static_assert(offsetof(FHotPatcherVersion, Date) == 0x000020, "Member 'FHotPatcherVersion::Date' has a wrong offset!");
static_assert(offsetof(FHotPatcherVersion, AssetInfo) == 0x000078, "Member 'FHotPatcherVersion::AssetInfo' has a wrong offset!");
static_assert(offsetof(FHotPatcherVersion, PlatformAssets) == 0x0000C8, "Member 'FHotPatcherVersion::PlatformAssets' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PackageInfo
// 0x0020 (0x0020 - 0x0000)
struct FPackageInfo final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetGuid;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPackageInfo) == 0x000008, "Wrong alignment on FPackageInfo");
static_assert(sizeof(FPackageInfo) == 0x000020, "Wrong size on FPackageInfo");
static_assert(offsetof(FPackageInfo, AssetName) == 0x000000, "Member 'FPackageInfo::AssetName' has a wrong offset!");
static_assert(offsetof(FPackageInfo, AssetGuid) == 0x000010, "Member 'FPackageInfo::AssetGuid' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.EncryptionKeyEntry
// 0x0030 (0x0030 - 0x0000)
struct FEncryptionKeyEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Guid;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncryptionKeyEntry) == 0x000008, "Wrong alignment on FEncryptionKeyEntry");
static_assert(sizeof(FEncryptionKeyEntry) == 0x000030, "Wrong size on FEncryptionKeyEntry");
static_assert(offsetof(FEncryptionKeyEntry, Name) == 0x000000, "Member 'FEncryptionKeyEntry::Name' has a wrong offset!");
static_assert(offsetof(FEncryptionKeyEntry, Guid) == 0x000010, "Member 'FEncryptionKeyEntry::Guid' has a wrong offset!");
static_assert(offsetof(FEncryptionKeyEntry, Key) == 0x000020, "Member 'FEncryptionKeyEntry::Key' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.SignKeyItem
// 0x0020 (0x0020 - 0x0000)
struct FSignKeyItem final
{
public:
	class FString                                 Exponent;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Modulus;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignKeyItem) == 0x000008, "Wrong alignment on FSignKeyItem");
static_assert(sizeof(FSignKeyItem) == 0x000020, "Wrong size on FSignKeyItem");
static_assert(offsetof(FSignKeyItem, Exponent) == 0x000000, "Member 'FSignKeyItem::Exponent' has a wrong offset!");
static_assert(offsetof(FSignKeyItem, Modulus) == 0x000010, "Member 'FSignKeyItem::Modulus' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.SignKeyEntry
// 0x0040 (0x0040 - 0x0000)
struct FSignKeyEntry final
{
public:
	struct FSignKeyItem                           PublicKey;                                         // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	struct FSignKeyItem                           PrivateKey;                                        // 0x0020(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignKeyEntry) == 0x000008, "Wrong alignment on FSignKeyEntry");
static_assert(sizeof(FSignKeyEntry) == 0x000040, "Wrong size on FSignKeyEntry");
static_assert(offsetof(FSignKeyEntry, PublicKey) == 0x000000, "Member 'FSignKeyEntry::PublicKey' has a wrong offset!");
static_assert(offsetof(FSignKeyEntry, PrivateKey) == 0x000020, "Member 'FSignKeyEntry::PrivateKey' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakEncryptionKeys
// 0x0088 (0x0088 - 0x0000)
struct FPakEncryptionKeys final
{
public:
	struct FEncryptionKeyEntry                    EncryptionKey;                                     // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FEncryptionKeyEntry>            SecondaryEncryptionKeys;                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePakIndexEncryption;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePakIniEncryption;                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePakUAssetEncryption;                        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePakFullAssetEncryption;                     // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDataCryptoRequired;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PakEncryptionRequired;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PakSigningRequired;                                // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePakSigning;                                 // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSignKeyEntry                          SigningKey;                                        // 0x0048(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakEncryptionKeys) == 0x000008, "Wrong alignment on FPakEncryptionKeys");
static_assert(sizeof(FPakEncryptionKeys) == 0x000088, "Wrong size on FPakEncryptionKeys");
static_assert(offsetof(FPakEncryptionKeys, EncryptionKey) == 0x000000, "Member 'FPakEncryptionKeys::EncryptionKey' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, SecondaryEncryptionKeys) == 0x000030, "Member 'FPakEncryptionKeys::SecondaryEncryptionKeys' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bEnablePakIndexEncryption) == 0x000040, "Member 'FPakEncryptionKeys::bEnablePakIndexEncryption' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bEnablePakIniEncryption) == 0x000041, "Member 'FPakEncryptionKeys::bEnablePakIniEncryption' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bEnablePakUAssetEncryption) == 0x000042, "Member 'FPakEncryptionKeys::bEnablePakUAssetEncryption' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bEnablePakFullAssetEncryption) == 0x000043, "Member 'FPakEncryptionKeys::bEnablePakFullAssetEncryption' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bDataCryptoRequired) == 0x000044, "Member 'FPakEncryptionKeys::bDataCryptoRequired' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, PakEncryptionRequired) == 0x000045, "Member 'FPakEncryptionKeys::PakEncryptionRequired' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, PakSigningRequired) == 0x000046, "Member 'FPakEncryptionKeys::PakSigningRequired' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, bEnablePakSigning) == 0x000047, "Member 'FPakEncryptionKeys::bEnablePakSigning' has a wrong offset!");
static_assert(offsetof(FPakEncryptionKeys, SigningKey) == 0x000048, "Member 'FPakEncryptionKeys::SigningKey' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakFileInfo
// 0x0028 (0x0028 - 0x0000)
struct FPakFileInfo final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPakFileInfo) == 0x000008, "Wrong alignment on FPakFileInfo");
static_assert(sizeof(FPakFileInfo) == 0x000028, "Wrong size on FPakFileInfo");
static_assert(offsetof(FPakFileInfo, Filename) == 0x000000, "Member 'FPakFileInfo::Filename' has a wrong offset!");
static_assert(offsetof(FPakFileInfo, Hash) == 0x000010, "Member 'FPakFileInfo::Hash' has a wrong offset!");
static_assert(offsetof(FPakFileInfo, FileSize) == 0x000020, "Member 'FPakFileInfo::FileSize' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakFileArray
// 0x0010 (0x0010 - 0x0000)
struct FPakFileArray final
{
public:
	TArray<struct FPakFileInfo>                   PakFileInfos;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakFileArray) == 0x000008, "Wrong alignment on FPakFileArray");
static_assert(sizeof(FPakFileArray) == 0x000010, "Wrong size on FPakFileArray");
static_assert(offsetof(FPakFileArray, PakFileInfos) == 0x000000, "Member 'FPakFileArray::PakFileInfos' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakFilesMap
// 0x0050 (0x0050 - 0x0000)
struct FPakFilesMap final
{
public:
	TMap<class FString, struct FPakFileArray>     PakFilesMap;                                       // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakFilesMap) == 0x000008, "Wrong alignment on FPakFilesMap");
static_assert(sizeof(FPakFilesMap) == 0x000050, "Wrong size on FPakFilesMap");
static_assert(offsetof(FPakFilesMap, PakFilesMap) == 0x000000, "Member 'FPakFilesMap::PakFilesMap' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PakVersion
// 0x0040 (0x0040 - 0x0000)
struct FPakVersion final
{
public:
	class FString                                 VersionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseVersionId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheckCode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakVersion) == 0x000008, "Wrong alignment on FPakVersion");
static_assert(sizeof(FPakVersion) == 0x000040, "Wrong size on FPakVersion");
static_assert(offsetof(FPakVersion, VersionId) == 0x000000, "Member 'FPakVersion::VersionId' has a wrong offset!");
static_assert(offsetof(FPakVersion, BaseVersionId) == 0x000010, "Member 'FPakVersion::BaseVersionId' has a wrong offset!");
static_assert(offsetof(FPakVersion, Date) == 0x000020, "Member 'FPakVersion::Date' has a wrong offset!");
static_assert(offsetof(FPakVersion, CheckCode) == 0x000030, "Member 'FPakVersion::CheckCode' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.PlatformExternFiles
// 0x0018 (0x0018 - 0x0000)
struct FPlatformExternFiles final
{
public:
	ETargetPlatform                               Platform;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExternFileInfo>                ExternFiles;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformExternFiles) == 0x000008, "Wrong alignment on FPlatformExternFiles");
static_assert(sizeof(FPlatformExternFiles) == 0x000018, "Wrong size on FPlatformExternFiles");
static_assert(offsetof(FPlatformExternFiles, Platform) == 0x000000, "Member 'FPlatformExternFiles::Platform' has a wrong offset!");
static_assert(offsetof(FPlatformExternFiles, ExternFiles) == 0x000008, "Member 'FPlatformExternFiles::ExternFiles' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.HotPatcherContext
// 0x0058 (0x0058 - 0x0000)
struct FHotPatcherContext
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UScopedSlowTaskContext*                 UnrealPakSlowTask;                                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHotPatcherContext) == 0x000008, "Wrong alignment on FHotPatcherContext");
static_assert(sizeof(FHotPatcherContext) == 0x000058, "Wrong size on FHotPatcherContext");
static_assert(offsetof(FHotPatcherContext, UnrealPakSlowTask) == 0x000040, "Member 'FHotPatcherContext::UnrealPakSlowTask' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.HotPatcherReleaseContext
// 0x0118 (0x0170 - 0x0058)
struct FHotPatcherReleaseContext final : public FHotPatcherContext
{
public:
	struct FHotPatcherVersion                     NewReleaseVersion;                                 // 0x0058(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPatcherReleaseContext) == 0x000008, "Wrong alignment on FHotPatcherReleaseContext");
static_assert(sizeof(FHotPatcherReleaseContext) == 0x000170, "Wrong size on FHotPatcherReleaseContext");
static_assert(offsetof(FHotPatcherReleaseContext, NewReleaseVersion) == 0x000058, "Member 'FHotPatcherReleaseContext::NewReleaseVersion' has a wrong offset!");

// ScriptStruct HotPatcherRuntime.HotPatcherPatchContext
// 0x0588 (0x05E0 - 0x0058)
struct FHotPatcherPatchContext final : public FHotPatcherContext
{
public:
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHotPatcherVersion                     BaseVersion;                                       // 0x0060(0x0118)(Edit, NativeAccessSpecifierPublic)
	struct FHotPatcherVersion                     CurrentVersion;                                    // 0x0178(0x0118)(Edit, NativeAccessSpecifierPublic)
	struct FPatchVersionDiff                      VersionDiff;                                       // 0x0290(0x0140)(Edit, NativeAccessSpecifierPublic)
	struct FHotPatcherVersion                     NewReleaseVersion;                                 // 0x03D0(0x0118)(Edit, NativeAccessSpecifierPublic)
	struct FChunkInfo                             NewVersionChunk;                                   // 0x04E8(0x0088)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChunkInfo>                     PakChunks;                                         // 0x0570(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPakCommand>                    AdditionalFileToPak;                               // 0x0580(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_590[0x50];                                     // 0x0590(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHotPatcherPatchContext) == 0x000008, "Wrong alignment on FHotPatcherPatchContext");
static_assert(sizeof(FHotPatcherPatchContext) == 0x0005E0, "Wrong size on FHotPatcherPatchContext");
static_assert(offsetof(FHotPatcherPatchContext, BaseVersion) == 0x000060, "Member 'FHotPatcherPatchContext::BaseVersion' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, CurrentVersion) == 0x000178, "Member 'FHotPatcherPatchContext::CurrentVersion' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, VersionDiff) == 0x000290, "Member 'FHotPatcherPatchContext::VersionDiff' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, NewReleaseVersion) == 0x0003D0, "Member 'FHotPatcherPatchContext::NewReleaseVersion' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, NewVersionChunk) == 0x0004E8, "Member 'FHotPatcherPatchContext::NewVersionChunk' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, PakChunks) == 0x000570, "Member 'FHotPatcherPatchContext::PakChunks' has a wrong offset!");
static_assert(offsetof(FHotPatcherPatchContext, AdditionalFileToPak) == 0x000580, "Member 'FHotPatcherPatchContext::AdditionalFileToPak' has a wrong offset!");

}

