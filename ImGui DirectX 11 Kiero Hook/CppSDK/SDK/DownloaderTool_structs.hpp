#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DownloaderTool

#include "Basic.hpp"


namespace SDK
{

// Enum DownloaderTool.EDTFailedType
// NumValues: 0x001D
enum class EDTFailedType : uint8
{
	Default                                  = 0,
	RequestHeadFailed                        = 1,
	CreateFileFailed                         = 2,
	HttpError                                = 3,
	WriteFailed                              = 4,
	MoveFailed                               = 5,
	RequestConnectTimeOut                    = 6,
	RequestInvalid                           = 7,
	ResponseInvalid                          = 8,
	SubTaskSizeInvalid                       = 9,
	CreateUrlTaskDirFailed                   = 10,
	CreateUrlDownSizeTaskFailed              = 11,
	CreateUrlFullDownTaskFailed              = 12,
	CreateUrlChunkDownTaskFailed             = 13,
	UpdateUrlTaskInfoJsonFailed              = 14,
	MergeSubTasksFailed                      = 15,
	DecodeJsonRequestFailed                  = 16,
	HttpTaskContentInvalid                   = 17,
	LaunchSubTaskFailed                      = 18,
	HashCheckFailed                          = 19,
	SubTasksTotalSizeError                   = 20,
	SubTaskCacheSortFailed                   = 21,
	UrlTaskReadMergedFileFailed              = 22,
	InitRequestFullUrlFailed                 = 23,
	HttpTaskUrlIndexError                    = 24,
	GetWrongJsonFormat                       = 25,
	CreateDownloadTaskFail                   = 26,
	UrlTaskCallbackFailed                    = 27,
	EDTFailedType_MAX                        = 28,
};

// Enum DownloaderTool.EDownloaderStatus
// NumValues: 0x0007
enum class EDownloaderStatus : uint8
{
	Default                                  = 0,
	NotReady                                 = 1,
	ReadyLaunch                              = 2,
	Downloading                              = 3,
	Pausing                                  = 4,
	Completed                                = 5,
	EDownloaderStatus_MAX                    = 6,
};

// Enum DownloaderTool.EDownloaderHttpMethod
// NumValues: 0x0006
enum class EDownloaderHttpMethod : uint8
{
	Get                                      = 0,
	Post                                     = 1,
	Head                                     = 2,
	Put                                      = 3,
	Delete                                   = 4,
	EDownloaderHttpMethod_MAX                = 5,
};

// ScriptStruct DownloaderTool.DownloaderCDNFailedInfo
// 0x0040 (0x0040 - 0x0000)
struct FDownloaderCDNFailedInfo final
{
public:
	class FString                                 NecessaryURL;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseCDNUrl;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestErrorMsg;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RequestCostTime;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Errorcode;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDTFailedType                                 FailedType;                                        // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownloaderCDNFailedInfo) == 0x000008, "Wrong alignment on FDownloaderCDNFailedInfo");
static_assert(sizeof(FDownloaderCDNFailedInfo) == 0x000040, "Wrong size on FDownloaderCDNFailedInfo");
static_assert(offsetof(FDownloaderCDNFailedInfo, NecessaryURL) == 0x000000, "Member 'FDownloaderCDNFailedInfo::NecessaryURL' has a wrong offset!");
static_assert(offsetof(FDownloaderCDNFailedInfo, BaseCDNUrl) == 0x000010, "Member 'FDownloaderCDNFailedInfo::BaseCDNUrl' has a wrong offset!");
static_assert(offsetof(FDownloaderCDNFailedInfo, RequestErrorMsg) == 0x000020, "Member 'FDownloaderCDNFailedInfo::RequestErrorMsg' has a wrong offset!");
static_assert(offsetof(FDownloaderCDNFailedInfo, RequestCostTime) == 0x000030, "Member 'FDownloaderCDNFailedInfo::RequestCostTime' has a wrong offset!");
static_assert(offsetof(FDownloaderCDNFailedInfo, Errorcode) == 0x000038, "Member 'FDownloaderCDNFailedInfo::Errorcode' has a wrong offset!");
static_assert(offsetof(FDownloaderCDNFailedInfo, FailedType) == 0x00003C, "Member 'FDownloaderCDNFailedInfo::FailedType' has a wrong offset!");

// ScriptStruct DownloaderTool.DownloaderProgressInfo
// 0x0048 (0x0048 - 0x0000)
struct FDownloaderProgressInfo final
{
public:
	class FString                                 UsedCDNBaseURL;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NecessaryURL;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BytesSent;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BytesReceived;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CacheWritedSize;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MixedSize;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalDownloadSize;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloaderProgressInfo) == 0x000008, "Wrong alignment on FDownloaderProgressInfo");
static_assert(sizeof(FDownloaderProgressInfo) == 0x000048, "Wrong size on FDownloaderProgressInfo");
static_assert(offsetof(FDownloaderProgressInfo, UsedCDNBaseURL) == 0x000000, "Member 'FDownloaderProgressInfo::UsedCDNBaseURL' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, NecessaryURL) == 0x000010, "Member 'FDownloaderProgressInfo::NecessaryURL' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, BytesSent) == 0x000020, "Member 'FDownloaderProgressInfo::BytesSent' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, BytesReceived) == 0x000028, "Member 'FDownloaderProgressInfo::BytesReceived' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, CacheWritedSize) == 0x000030, "Member 'FDownloaderProgressInfo::CacheWritedSize' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, MixedSize) == 0x000038, "Member 'FDownloaderProgressInfo::MixedSize' has a wrong offset!");
static_assert(offsetof(FDownloaderProgressInfo, TotalDownloadSize) == 0x000040, "Member 'FDownloaderProgressInfo::TotalDownloadSize' has a wrong offset!");

// ScriptStruct DownloaderTool.CacheEntry
// 0x0030 (0x0030 - 0x0000)
struct FCacheEntry final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULuaAsyncLoadTextureBridge*             TextureBridge;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCacheEntry) == 0x000008, "Wrong alignment on FCacheEntry");
static_assert(sizeof(FCacheEntry) == 0x000030, "Wrong size on FCacheEntry");
static_assert(offsetof(FCacheEntry, Texture) == 0x000000, "Member 'FCacheEntry::Texture' has a wrong offset!");
static_assert(offsetof(FCacheEntry, TextureBridge) == 0x000008, "Member 'FCacheEntry::TextureBridge' has a wrong offset!");

// ScriptStruct DownloaderTool.DownloaderResponse
// 0x0060 (0x0060 - 0x0000)
struct FDownloaderResponse final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownloadFromCache;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NecessaryURL;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UsedCDNBaseURL;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Errorcode;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RawData;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawFileSavePath;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataLength;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentLength;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloaderResponse) == 0x000008, "Wrong alignment on FDownloaderResponse");
static_assert(sizeof(FDownloaderResponse) == 0x000060, "Wrong size on FDownloaderResponse");
static_assert(offsetof(FDownloaderResponse, bWasSuccessful) == 0x000000, "Member 'FDownloaderResponse::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, bDownloadFromCache) == 0x000001, "Member 'FDownloaderResponse::bDownloadFromCache' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, NecessaryURL) == 0x000008, "Member 'FDownloaderResponse::NecessaryURL' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, UsedCDNBaseURL) == 0x000018, "Member 'FDownloaderResponse::UsedCDNBaseURL' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, Errorcode) == 0x000028, "Member 'FDownloaderResponse::Errorcode' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, RawData) == 0x000030, "Member 'FDownloaderResponse::RawData' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, RawFileSavePath) == 0x000040, "Member 'FDownloaderResponse::RawFileSavePath' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, DataLength) == 0x000050, "Member 'FDownloaderResponse::DataLength' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, ContentLength) == 0x000054, "Member 'FDownloaderResponse::ContentLength' has a wrong offset!");
static_assert(offsetof(FDownloaderResponse, Timestamp) == 0x000058, "Member 'FDownloaderResponse::Timestamp' has a wrong offset!");

// ScriptStruct DownloaderTool.UrlTaskRecordInfo
// 0x0010 (0x0010 - 0x0000)
struct FUrlTaskRecordInfo final
{
public:
	bool                                          bUrlTaskSuccess;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHashCheckSuccess;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalDownloadSize;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubTaskChunkSize;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedWritedSize;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUrlTaskRecordInfo) == 0x000004, "Wrong alignment on FUrlTaskRecordInfo");
static_assert(sizeof(FUrlTaskRecordInfo) == 0x000010, "Wrong size on FUrlTaskRecordInfo");
static_assert(offsetof(FUrlTaskRecordInfo, bUrlTaskSuccess) == 0x000000, "Member 'FUrlTaskRecordInfo::bUrlTaskSuccess' has a wrong offset!");
static_assert(offsetof(FUrlTaskRecordInfo, bHashCheckSuccess) == 0x000001, "Member 'FUrlTaskRecordInfo::bHashCheckSuccess' has a wrong offset!");
static_assert(offsetof(FUrlTaskRecordInfo, TotalDownloadSize) == 0x000004, "Member 'FUrlTaskRecordInfo::TotalDownloadSize' has a wrong offset!");
static_assert(offsetof(FUrlTaskRecordInfo, SubTaskChunkSize) == 0x000008, "Member 'FUrlTaskRecordInfo::SubTaskChunkSize' has a wrong offset!");
static_assert(offsetof(FUrlTaskRecordInfo, CachedWritedSize) == 0x00000C, "Member 'FUrlTaskRecordInfo::CachedWritedSize' has a wrong offset!");

// ScriptStruct DownloaderTool.DownloaderFailedInfo
// 0x0028 (0x0028 - 0x0000)
struct FDownloaderFailedInfo final
{
public:
	class FString                                 NecessaryURL;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Errorcode;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDTFailedType                                 FailedType;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileWritePath;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloaderFailedInfo) == 0x000008, "Wrong alignment on FDownloaderFailedInfo");
static_assert(sizeof(FDownloaderFailedInfo) == 0x000028, "Wrong size on FDownloaderFailedInfo");
static_assert(offsetof(FDownloaderFailedInfo, NecessaryURL) == 0x000000, "Member 'FDownloaderFailedInfo::NecessaryURL' has a wrong offset!");
static_assert(offsetof(FDownloaderFailedInfo, Errorcode) == 0x000010, "Member 'FDownloaderFailedInfo::Errorcode' has a wrong offset!");
static_assert(offsetof(FDownloaderFailedInfo, FailedType) == 0x000014, "Member 'FDownloaderFailedInfo::FailedType' has a wrong offset!");
static_assert(offsetof(FDownloaderFailedInfo, FileWritePath) == 0x000018, "Member 'FDownloaderFailedInfo::FileWritePath' has a wrong offset!");

// ScriptStruct DownloaderTool.DownloaderTaskInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FDownloaderTaskInfo final
{
public:
	class FString                                 NecessaryURL;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseCDNUrlList;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JsonRequestStr;                                    // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HashStr;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRetryTime;                                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingResumeTrans;                                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearSubTaskCache;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncWrite;                                       // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncMerge;                                       // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncHashCheck;                                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBackgroundDownload;                            // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReDownload;                                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceWrite;                                       // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedHashCheck;                                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTimeOutFailed;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOutSeconds;                                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallBackWithRawData;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCutInLine;                                        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileDirectory;                                     // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileFullName;                                      // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuccessful;                                       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartTimeStamp;                                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int64                                         CompleteTimeStamp;                                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Filename;                                          // 0x0098(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FileExtension;                                     // 0x00A8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDownloaderTaskInfo) == 0x000008, "Wrong alignment on FDownloaderTaskInfo");
static_assert(sizeof(FDownloaderTaskInfo) == 0x0000B8, "Wrong size on FDownloaderTaskInfo");
static_assert(offsetof(FDownloaderTaskInfo, NecessaryURL) == 0x000000, "Member 'FDownloaderTaskInfo::NecessaryURL' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, BaseCDNUrlList) == 0x000010, "Member 'FDownloaderTaskInfo::BaseCDNUrlList' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, JsonRequestStr) == 0x000020, "Member 'FDownloaderTaskInfo::JsonRequestStr' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, HashStr) == 0x000030, "Member 'FDownloaderTaskInfo::HashStr' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, MaxRetryTime) == 0x000040, "Member 'FDownloaderTaskInfo::MaxRetryTime' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, FileSize) == 0x000044, "Member 'FDownloaderTaskInfo::FileSize' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bUsingResumeTrans) == 0x000048, "Member 'FDownloaderTaskInfo::bUsingResumeTrans' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bClearSubTaskCache) == 0x000049, "Member 'FDownloaderTaskInfo::bClearSubTaskCache' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bAsyncWrite) == 0x00004A, "Member 'FDownloaderTaskInfo::bAsyncWrite' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bAsyncMerge) == 0x00004B, "Member 'FDownloaderTaskInfo::bAsyncMerge' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bAsyncHashCheck) == 0x00004C, "Member 'FDownloaderTaskInfo::bAsyncHashCheck' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bUseBackgroundDownload) == 0x00004D, "Member 'FDownloaderTaskInfo::bUseBackgroundDownload' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bForceReDownload) == 0x00004E, "Member 'FDownloaderTaskInfo::bForceReDownload' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bForceWrite) == 0x00004F, "Member 'FDownloaderTaskInfo::bForceWrite' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bNeedHashCheck) == 0x000050, "Member 'FDownloaderTaskInfo::bNeedHashCheck' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bEnableTimeOutFailed) == 0x000051, "Member 'FDownloaderTaskInfo::bEnableTimeOutFailed' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, TimeOutSeconds) == 0x000054, "Member 'FDownloaderTaskInfo::TimeOutSeconds' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bCallBackWithRawData) == 0x000058, "Member 'FDownloaderTaskInfo::bCallBackWithRawData' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bCutInLine) == 0x000059, "Member 'FDownloaderTaskInfo::bCutInLine' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, FileDirectory) == 0x000060, "Member 'FDownloaderTaskInfo::FileDirectory' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, FileFullName) == 0x000070, "Member 'FDownloaderTaskInfo::FileFullName' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bCompleted) == 0x000080, "Member 'FDownloaderTaskInfo::bCompleted' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, bSuccessful) == 0x000081, "Member 'FDownloaderTaskInfo::bSuccessful' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, StartTimeStamp) == 0x000088, "Member 'FDownloaderTaskInfo::StartTimeStamp' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, CompleteTimeStamp) == 0x000090, "Member 'FDownloaderTaskInfo::CompleteTimeStamp' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, Filename) == 0x000098, "Member 'FDownloaderTaskInfo::Filename' has a wrong offset!");
static_assert(offsetof(FDownloaderTaskInfo, FileExtension) == 0x0000A8, "Member 'FDownloaderTaskInfo::FileExtension' has a wrong offset!");

// ScriptStruct DownloaderTool.DownloaderReqJson
// 0x00B8 (0x00B8 - 0x0000)
struct FDownloaderReqJson final
{
public:
	EDownloaderHttpMethod                         Verb;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Headers;                                           // 0x0008(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Queries;                                           // 0x0058(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloaderReqJson) == 0x000008, "Wrong alignment on FDownloaderReqJson");
static_assert(sizeof(FDownloaderReqJson) == 0x0000B8, "Wrong size on FDownloaderReqJson");
static_assert(offsetof(FDownloaderReqJson, Verb) == 0x000000, "Member 'FDownloaderReqJson::Verb' has a wrong offset!");
static_assert(offsetof(FDownloaderReqJson, Headers) == 0x000008, "Member 'FDownloaderReqJson::Headers' has a wrong offset!");
static_assert(offsetof(FDownloaderReqJson, Queries) == 0x000058, "Member 'FDownloaderReqJson::Queries' has a wrong offset!");
static_assert(offsetof(FDownloaderReqJson, Body) == 0x0000A8, "Member 'FDownloaderReqJson::Body' has a wrong offset!");

}

