#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_CarWeapon_Juggernaut

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Crosshair_CarWeapon_Juggernaut.Crosshair_CarWeapon_Juggernaut_C.ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut
// 0x0090 (0x0090 - 0x0000)
struct Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTmie;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InRollSpeedInterp;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWantFire;                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0038(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut) == 0x000004, "Wrong alignment on Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut");
static_assert(sizeof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut) == 0x000090, "Wrong size on Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, EntryPoint) == 0x000000, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::EntryPoint' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_bool_Variable) == 0x000004, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_float_Variable) == 0x000008, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_bool_Variable_1) == 0x00000C, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_bool_Variable_2) == 0x00000D, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Event_DeltaTmie) == 0x000010, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Event_DeltaTmie' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Event_InRollSpeedInterp) == 0x000014, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Event_InRollSpeedInterp' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Event_bWantFire) == 0x000018, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Event_bWantFire' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001A, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001B, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_FMax_ReturnValue) == 0x00001C, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Less_FloatFloat_ReturnValue) == 0x000021, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000023, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_BooleanAND_ReturnValue_1) == 0x000024, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_float_Variable_1) == 0x000030, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Event_MyGeometry) == 0x000038, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Event_InDeltaTime) == 0x000070, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Select_Default) == 0x000074, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000078, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00007C, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, Temp_bool_Variable_3) == 0x000080, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Select_Default_1) == 0x000084, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Select_Default_2) == 0x000088, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut, K2Node_Select_Default_3) == 0x00008C, "Member 'Crosshair_CarWeapon_Juggernaut_C_ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut::K2Node_Select_Default_3' has a wrong offset!");

// Function Crosshair_CarWeapon_Juggernaut.Crosshair_CarWeapon_Juggernaut_C.Tick
// 0x003C (0x003C - 0x0000)
struct Crosshair_CarWeapon_Juggernaut_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Juggernaut_C_Tick) == 0x000004, "Wrong alignment on Crosshair_CarWeapon_Juggernaut_C_Tick");
static_assert(sizeof(Crosshair_CarWeapon_Juggernaut_C_Tick) == 0x00003C, "Wrong size on Crosshair_CarWeapon_Juggernaut_C_Tick");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_Tick, MyGeometry) == 0x000000, "Member 'Crosshair_CarWeapon_Juggernaut_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_Tick, InDeltaTime) == 0x000038, "Member 'Crosshair_CarWeapon_Juggernaut_C_Tick::InDeltaTime' has a wrong offset!");

// Function Crosshair_CarWeapon_Juggernaut.Crosshair_CarWeapon_Juggernaut_C.OnUpdateGatlingRoll
// 0x000C (0x000C - 0x0000)
struct Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll final
{
public:
	float                                         DeltaTmie;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRollSpeedInterp;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWantFire;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll) == 0x000004, "Wrong alignment on Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll");
static_assert(sizeof(Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll) == 0x00000C, "Wrong size on Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll, DeltaTmie) == 0x000000, "Member 'Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll::DeltaTmie' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll, InRollSpeedInterp) == 0x000004, "Member 'Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll::InRollSpeedInterp' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll, bWantFire) == 0x000008, "Member 'Crosshair_CarWeapon_Juggernaut_C_OnUpdateGatlingRoll::bWantFire' has a wrong offset!");

}

