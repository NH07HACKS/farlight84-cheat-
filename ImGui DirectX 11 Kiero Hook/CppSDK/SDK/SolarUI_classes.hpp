#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarUI

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SolarUI_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SolarUI.SolarAdapterSlotInterface
// 0x0000 (0x0000 - 0x0000)
class ISolarAdapterSlotInterface final
{
public:
	void OnChangeAdapterSlotWidgetParameters(const TArray<struct FWidgetOverrideParam>& Params_0);
	void OnLoadAdapterSlotWidgetFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarAdapterSlotInterface">();
	}
	static class ISolarAdapterSlotInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISolarAdapterSlotInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISolarAdapterSlotInterface) == 0x000001, "Wrong alignment on ISolarAdapterSlotInterface");
static_assert(sizeof(ISolarAdapterSlotInterface) == 0x000001, "Wrong size on ISolarAdapterSlotInterface");

// Class SolarUI.SolarScrollTextBase
// 0x05C0 (0x0700 - 0x0140)
class USolarScrollTextBase : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0140(0x0018)(Edit, NativeAccessSpecifierPublic)
	ESolarScrollTextType                          ScrollType;                                        // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolarScrollTextDirection                     ScrollDirection;                                   // 0x0159(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollSpeed;                                       // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolarScrollTextWaitingType                   WaitingType;                                       // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndPosition;                                       // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0174(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTextLayoutSize;                           // 0x017C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TextLayoutSize;                                    // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        TextStyle;                                         // 0x0190(0x0540)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x06D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x06D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x06D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoWrapText;                                      // 0x06D6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D7[0x1];                                      // 0x06D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x06D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x06DC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         LineHeightPercentage;                              // 0x06EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F0[0x10];                                     // 0x06F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAutoWrapText(bool bInAutoWrapText);
	void SetDisplayTime(float InDisplayTime);
	void SetInterval(float InFixedInterval);
	void SetJustification(ETextJustify InJustification);
	void SetLineHeightPercentage(float InLineHeightPercentage);
	void SetMargin(const struct FMargin& InMargin);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOverrideTextLayoutSize(bool bInOverrideTextLayoutSize);
	void SetPosition(float InStartPosition, float InEndPosition);
	void SetScrollDirection(ESolarScrollTextDirection InScrollDirection);
	void SetScrollSpeed(float InScrollSpeed);
	void SetScrollType(ESolarScrollTextType InScrollType);
	void SetText(const class FText& InText);
	void SetTextBlockStyle(const struct FTextBlockStyle& InTextStyle);
	void SetTextLayoutSize(const struct FVector2D& InTextLayoutSize);
	void SetWaitingType(ESolarScrollTextWaitingType InWaitingType);
	void SetWrapTextAt(float InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarScrollTextBase">();
	}
	static class USolarScrollTextBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarScrollTextBase>();
	}
};
static_assert(alignof(USolarScrollTextBase) == 0x000010, "Wrong alignment on USolarScrollTextBase");
static_assert(sizeof(USolarScrollTextBase) == 0x000700, "Wrong size on USolarScrollTextBase");
static_assert(offsetof(USolarScrollTextBase, Text) == 0x000140, "Member 'USolarScrollTextBase::Text' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, ScrollType) == 0x000158, "Member 'USolarScrollTextBase::ScrollType' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, ScrollDirection) == 0x000159, "Member 'USolarScrollTextBase::ScrollDirection' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, ScrollSpeed) == 0x00015C, "Member 'USolarScrollTextBase::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, DisplayTime) == 0x000160, "Member 'USolarScrollTextBase::DisplayTime' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, WaitingType) == 0x000164, "Member 'USolarScrollTextBase::WaitingType' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, Interval) == 0x000168, "Member 'USolarScrollTextBase::Interval' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, StartPosition) == 0x00016C, "Member 'USolarScrollTextBase::StartPosition' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, EndPosition) == 0x000170, "Member 'USolarScrollTextBase::EndPosition' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, WidgetSize) == 0x000174, "Member 'USolarScrollTextBase::WidgetSize' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, bOverrideTextLayoutSize) == 0x00017C, "Member 'USolarScrollTextBase::bOverrideTextLayoutSize' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, TextLayoutSize) == 0x000180, "Member 'USolarScrollTextBase::TextLayoutSize' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, TextStyle) == 0x000190, "Member 'USolarScrollTextBase::TextStyle' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, MinDesiredWidth) == 0x0006D0, "Member 'USolarScrollTextBase::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, Justification) == 0x0006D4, "Member 'USolarScrollTextBase::Justification' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, WrappingPolicy) == 0x0006D5, "Member 'USolarScrollTextBase::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, AutoWrapText) == 0x0006D6, "Member 'USolarScrollTextBase::AutoWrapText' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, WrapTextAt) == 0x0006D8, "Member 'USolarScrollTextBase::WrapTextAt' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, Margin) == 0x0006DC, "Member 'USolarScrollTextBase::Margin' has a wrong offset!");
static_assert(offsetof(USolarScrollTextBase, LineHeightPercentage) == 0x0006EC, "Member 'USolarScrollTextBase::LineHeightPercentage' has a wrong offset!");

// Class SolarUI.SolarNavigationBase
// 0x00A8 (0x0310 - 0x0268)
class USolarNavigationBase : public UUserWidget
{
public:
	TMap<class FName, struct FSolarWidgetNavigationData> VisualNavigationData;                       // 0x0268(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, uint16>                     WidgetHashTable;                                   // 0x02B8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarNavigationBase">();
	}
	static class USolarNavigationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarNavigationBase>();
	}
};
static_assert(alignof(USolarNavigationBase) == 0x000008, "Wrong alignment on USolarNavigationBase");
static_assert(sizeof(USolarNavigationBase) == 0x000310, "Wrong size on USolarNavigationBase");
static_assert(offsetof(USolarNavigationBase, VisualNavigationData) == 0x000268, "Member 'USolarNavigationBase::VisualNavigationData' has a wrong offset!");
static_assert(offsetof(USolarNavigationBase, WidgetHashTable) == 0x0002B8, "Member 'USolarNavigationBase::WidgetHashTable' has a wrong offset!");

// Class SolarUI.SolarAdapterWidgetBase
// 0x00E8 (0x0240 - 0x0158)
class USolarAdapterWidgetBase : public UContentWidget
{
public:
	TMulticastInlineDelegate<void(class USolarAdapterWidgetBase* AdapterWidget)> OnWidgetLoaded;     // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EWidgetLoadType                               WidgetLoadType;                                    // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         MobileWidgetPath;                                  // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         DesktopWidgetPath;                                 // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUseDesktopWidgetType                         UseDesktopWidgetType;                              // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWidgetOverrideParam>           OverrideParamList;                                 // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                CookedUserWidgetClass;                             // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UUserWidget*>       CacheWidgetMap;                                    // 0x01C0(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            AdapteeWidget;                                     // 0x0210(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedExecuteWidgetOpened;                          // 0x0218(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_219[0x27];                                     // 0x0219(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadUserWidgetAsync();
	void LoadUserWidgetResource();
	void RefreshUIByOverrideParams(const TArray<struct FWidgetOverrideParam>& WidgetOverrideParams);
	void SetAdapterMargin(const struct FMargin& InMargin);
	void SetNeedExecuteWidgetOpened(bool bInNeedExecuteWidgetOpened);
	void SetUseDesktopWidgetType(EUseDesktopWidgetType InType);

	class UUserWidget* GetAdapteeWidget() const;
	class USolarAdapterWidgetBase* GetChildAdapterWidgetFromName_BP(const class FString& InWidgetName) const;
	class USolarUserWidgetBase* GetChildUserWidgetFromName_BP(const class FString& InWidgetName) const;
	class UWidget* GetChildWidgetFromName_BP(const class FString& InWidgetName) const;
	bool GetNeedAdapter(struct FMargin* OutMargin) const;
	bool IsLoadedWidget() const;
	bool IsNeedExecuteWidgetOpened() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarAdapterWidgetBase">();
	}
	static class USolarAdapterWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarAdapterWidgetBase>();
	}
};
static_assert(alignof(USolarAdapterWidgetBase) == 0x000008, "Wrong alignment on USolarAdapterWidgetBase");
static_assert(sizeof(USolarAdapterWidgetBase) == 0x000240, "Wrong size on USolarAdapterWidgetBase");
static_assert(offsetof(USolarAdapterWidgetBase, OnWidgetLoaded) == 0x000158, "Member 'USolarAdapterWidgetBase::OnWidgetLoaded' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, WidgetLoadType) == 0x000168, "Member 'USolarAdapterWidgetBase::WidgetLoadType' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, MobileWidgetPath) == 0x000170, "Member 'USolarAdapterWidgetBase::MobileWidgetPath' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, DesktopWidgetPath) == 0x000188, "Member 'USolarAdapterWidgetBase::DesktopWidgetPath' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, UseDesktopWidgetType) == 0x0001A0, "Member 'USolarAdapterWidgetBase::UseDesktopWidgetType' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, OverrideParamList) == 0x0001A8, "Member 'USolarAdapterWidgetBase::OverrideParamList' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, CookedUserWidgetClass) == 0x0001B8, "Member 'USolarAdapterWidgetBase::CookedUserWidgetClass' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, CacheWidgetMap) == 0x0001C0, "Member 'USolarAdapterWidgetBase::CacheWidgetMap' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, AdapteeWidget) == 0x000210, "Member 'USolarAdapterWidgetBase::AdapteeWidget' has a wrong offset!");
static_assert(offsetof(USolarAdapterWidgetBase, bNeedExecuteWidgetOpened) == 0x000218, "Member 'USolarAdapterWidgetBase::bNeedExecuteWidgetOpened' has a wrong offset!");

// Class SolarUI.SolarUserWidgetBase
// 0x00A8 (0x03B8 - 0x0310)
class USolarUserWidgetBase : public USolarNavigationBase
{
public:
	bool                                          bPreviewUseWidget;                                 // 0x0310(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWidgetAnimation>        PlayingAnimation;                                  // 0x0314(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31C[0x14];                                     // 0x031C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayAnimationParams>           PendingPlayAnimations;                             // 0x0330(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USolarWidgetTimelinePlayer*>     ActiveTimelinePlayers;                             // 0x0340(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USolarWidgetTimelinePlayer*>     StoppedTimelinePlayers;                            // 0x0350(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UWidgetAnimation*, class UUMGSequencePlayer*> DummyPlayers;                           // 0x0360(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExclusivelyAnimationFinished();
	void OnSynchronizeProperties();
	void PlayAnimationByExclusively(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState);
	bool PlayAnimationByName(const class FName& AnimationName, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void ReceivePlatformLayout(EUSolarWidgetLayoutType InLayoutType);
	void SetBlockInputForOneTick();

	class UWidgetAnimation* GetAnimationByName(const class FName& AnimationName) const;
	class USolarAdapterWidgetBase* GetChildAdapterWidgetFromName_BP(const class FString& InWidgetName) const;
	class USolarUserWidgetBase* GetChildUserWidgetFromName_BP(const class FString& InWidgetName) const;
	class UWidget* GetChildWidgetFromName_BP(const class FName& InWidgetName) const;
	bool IsPlatformDesktop() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarUserWidgetBase">();
	}
	static class USolarUserWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarUserWidgetBase>();
	}
};
static_assert(alignof(USolarUserWidgetBase) == 0x000008, "Wrong alignment on USolarUserWidgetBase");
static_assert(sizeof(USolarUserWidgetBase) == 0x0003B8, "Wrong size on USolarUserWidgetBase");
static_assert(offsetof(USolarUserWidgetBase, bPreviewUseWidget) == 0x000310, "Member 'USolarUserWidgetBase::bPreviewUseWidget' has a wrong offset!");
static_assert(offsetof(USolarUserWidgetBase, PlayingAnimation) == 0x000314, "Member 'USolarUserWidgetBase::PlayingAnimation' has a wrong offset!");
static_assert(offsetof(USolarUserWidgetBase, PendingPlayAnimations) == 0x000330, "Member 'USolarUserWidgetBase::PendingPlayAnimations' has a wrong offset!");
static_assert(offsetof(USolarUserWidgetBase, ActiveTimelinePlayers) == 0x000340, "Member 'USolarUserWidgetBase::ActiveTimelinePlayers' has a wrong offset!");
static_assert(offsetof(USolarUserWidgetBase, StoppedTimelinePlayers) == 0x000350, "Member 'USolarUserWidgetBase::StoppedTimelinePlayers' has a wrong offset!");
static_assert(offsetof(USolarUserWidgetBase, DummyPlayers) == 0x000360, "Member 'USolarUserWidgetBase::DummyPlayers' has a wrong offset!");

// Class SolarUI.SolarNavigableWidgetBase
// 0x0030 (0x0298 - 0x0268)
class USolarNavigableWidgetBase : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(class UWidget* Widget)> BeginNavigateEvent;                        // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWidget* Widget)> EndNavigateEvent;                          // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           NavigationAcceptKeys;                              // 0x0288(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FEventReply AcceptNavigate();
	void BeginNavigate();
	void EndNavigate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarNavigableWidgetBase">();
	}
	static class USolarNavigableWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarNavigableWidgetBase>();
	}
};
static_assert(alignof(USolarNavigableWidgetBase) == 0x000008, "Wrong alignment on USolarNavigableWidgetBase");
static_assert(sizeof(USolarNavigableWidgetBase) == 0x000298, "Wrong size on USolarNavigableWidgetBase");
static_assert(offsetof(USolarNavigableWidgetBase, BeginNavigateEvent) == 0x000268, "Member 'USolarNavigableWidgetBase::BeginNavigateEvent' has a wrong offset!");
static_assert(offsetof(USolarNavigableWidgetBase, EndNavigateEvent) == 0x000278, "Member 'USolarNavigableWidgetBase::EndNavigateEvent' has a wrong offset!");
static_assert(offsetof(USolarNavigableWidgetBase, NavigationAcceptKeys) == 0x000288, "Member 'USolarNavigableWidgetBase::NavigationAcceptKeys' has a wrong offset!");

// Class SolarUI.SolarNavigableButtonWidget
// 0x0168 (0x0400 - 0x0298)
class USolarNavigableButtonWidget final : public USolarNavigableWidgetBase
{
public:
	TMulticastInlineDelegate<void()>              OnClicked;                                         // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UButton*                                Button;                                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            CachedNormalBrush;                                 // 0x02F0(0x0110)(Protected, NativeAccessSpecifierProtected)

public:
	void HandleClickEvent();
	void HandleHoveredEvent();
	void HandlePressedEvent();
	void HandleReleasedEvent();
	void HandleUnhoveredEvent();
	void OnClickedEvent();
	void OnHoveredEvent();
	void OnPressedEvent();
	void OnReleasedEvent();
	void OnUnhoveredEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarNavigableButtonWidget">();
	}
	static class USolarNavigableButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarNavigableButtonWidget>();
	}
};
static_assert(alignof(USolarNavigableButtonWidget) == 0x000010, "Wrong alignment on USolarNavigableButtonWidget");
static_assert(sizeof(USolarNavigableButtonWidget) == 0x000400, "Wrong size on USolarNavigableButtonWidget");
static_assert(offsetof(USolarNavigableButtonWidget, OnClicked) == 0x000298, "Member 'USolarNavigableButtonWidget::OnClicked' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, OnPressed) == 0x0002A8, "Member 'USolarNavigableButtonWidget::OnPressed' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, OnReleased) == 0x0002B8, "Member 'USolarNavigableButtonWidget::OnReleased' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, OnHovered) == 0x0002C8, "Member 'USolarNavigableButtonWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, OnUnhovered) == 0x0002D8, "Member 'USolarNavigableButtonWidget::OnUnhovered' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, Button) == 0x0002E8, "Member 'USolarNavigableButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(USolarNavigableButtonWidget, CachedNormalBrush) == 0x0002F0, "Member 'USolarNavigableButtonWidget::CachedNormalBrush' has a wrong offset!");

// Class SolarUI.SolarPanelSlotAdapter
// 0x0010 (0x0038 - 0x0028)
class USolarPanelSlotAdapter : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarPanelSlotAdapter">();
	}
	static class USolarPanelSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarPanelSlotAdapter>();
	}
};
static_assert(alignof(USolarPanelSlotAdapter) == 0x000008, "Wrong alignment on USolarPanelSlotAdapter");
static_assert(sizeof(USolarPanelSlotAdapter) == 0x000038, "Wrong size on USolarPanelSlotAdapter");

// Class SolarUI.SolarButtonSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarButtonSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarButtonSlotAdapter">();
	}
	static class USolarButtonSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarButtonSlotAdapter>();
	}
};
static_assert(alignof(USolarButtonSlotAdapter) == 0x000008, "Wrong alignment on USolarButtonSlotAdapter");
static_assert(sizeof(USolarButtonSlotAdapter) == 0x000050, "Wrong size on USolarButtonSlotAdapter");

// Class SolarUI.SolarCanvasPanelSlotAdapter
// 0x0038 (0x0070 - 0x0038)
class USolarCanvasPanelSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x38];                                      // 0x0038(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarCanvasPanelSlotAdapter">();
	}
	static class USolarCanvasPanelSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarCanvasPanelSlotAdapter>();
	}
};
static_assert(alignof(USolarCanvasPanelSlotAdapter) == 0x000008, "Wrong alignment on USolarCanvasPanelSlotAdapter");
static_assert(sizeof(USolarCanvasPanelSlotAdapter) == 0x000070, "Wrong size on USolarCanvasPanelSlotAdapter");

// Class SolarUI.SolarGridSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarGridSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarGridSlotAdapter">();
	}
	static class USolarGridSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarGridSlotAdapter>();
	}
};
static_assert(alignof(USolarGridSlotAdapter) == 0x000008, "Wrong alignment on USolarGridSlotAdapter");
static_assert(sizeof(USolarGridSlotAdapter) == 0x000050, "Wrong size on USolarGridSlotAdapter");

// Class SolarUI.SolarHorizontalBoxSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarHorizontalBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarHorizontalBoxSlotAdapter">();
	}
	static class USolarHorizontalBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarHorizontalBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarHorizontalBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarHorizontalBoxSlotAdapter");
static_assert(sizeof(USolarHorizontalBoxSlotAdapter) == 0x000050, "Wrong size on USolarHorizontalBoxSlotAdapter");

// Class SolarUI.SolarWidgetAdapter
// 0x0050 (0x0078 - 0x0028)
class USolarWidgetAdapter : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarPanelSlotAdapter*                 SlotAdapter;                                       // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetAdapter">();
	}
	static class USolarWidgetAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetAdapter>();
	}
};
static_assert(alignof(USolarWidgetAdapter) == 0x000008, "Wrong alignment on USolarWidgetAdapter");
static_assert(sizeof(USolarWidgetAdapter) == 0x000078, "Wrong size on USolarWidgetAdapter");
static_assert(offsetof(USolarWidgetAdapter, SlotAdapter) == 0x000040, "Member 'USolarWidgetAdapter::SlotAdapter' has a wrong offset!");

// Class SolarUI.SolarButtonAdapter
// 0x0030 (0x00A8 - 0x0078)
class USolarButtonAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0x30];                                      // 0x0078(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarButtonAdapter">();
	}
	static class USolarButtonAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarButtonAdapter>();
	}
};
static_assert(alignof(USolarButtonAdapter) == 0x000008, "Wrong alignment on USolarButtonAdapter");
static_assert(sizeof(USolarButtonAdapter) == 0x0000A8, "Wrong size on USolarButtonAdapter");

// Class SolarUI.SolarOverlaySlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarOverlaySlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarOverlaySlotAdapter">();
	}
	static class USolarOverlaySlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarOverlaySlotAdapter>();
	}
};
static_assert(alignof(USolarOverlaySlotAdapter) == 0x000008, "Wrong alignment on USolarOverlaySlotAdapter");
static_assert(sizeof(USolarOverlaySlotAdapter) == 0x000050, "Wrong size on USolarOverlaySlotAdapter");

// Class SolarUI.SolarScaleBoxSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarScaleBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarScaleBoxSlotAdapter">();
	}
	static class USolarScaleBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarScaleBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarScaleBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarScaleBoxSlotAdapter");
static_assert(sizeof(USolarScaleBoxSlotAdapter) == 0x000050, "Wrong size on USolarScaleBoxSlotAdapter");

// Class SolarUI.SolarSpline
// 0x0028 (0x0168 - 0x0140)
class USolarSpline final : public UWidget
{
public:
	TArray<struct FBezierSplineCurve>             SplineCurveGroup;                                  // 0x0140(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawClosingMask;                                  // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_151[0x17];                                     // 0x0151(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSplineCurve(struct FBezierSplineCurve& InCurve);
	void ClearSplineCurve();
	void SetDrawClosingMask(bool bShouldDraw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSpline">();
	}
	static class USolarSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSpline>();
	}
};
static_assert(alignof(USolarSpline) == 0x000008, "Wrong alignment on USolarSpline");
static_assert(sizeof(USolarSpline) == 0x000168, "Wrong size on USolarSpline");
static_assert(offsetof(USolarSpline, SplineCurveGroup) == 0x000140, "Member 'USolarSpline::SplineCurveGroup' has a wrong offset!");
static_assert(offsetof(USolarSpline, bDrawClosingMask) == 0x000150, "Member 'USolarSpline::bDrawClosingMask' has a wrong offset!");

// Class SolarUI.SolarScrollBoxSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarScrollBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarScrollBoxSlotAdapter">();
	}
	static class USolarScrollBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarScrollBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarScrollBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarScrollBoxSlotAdapter");
static_assert(sizeof(USolarScrollBoxSlotAdapter) == 0x000050, "Wrong size on USolarScrollBoxSlotAdapter");

// Class SolarUI.SolarSizeBoxSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarSizeBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSizeBoxSlotAdapter">();
	}
	static class USolarSizeBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSizeBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarSizeBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarSizeBoxSlotAdapter");
static_assert(sizeof(USolarSizeBoxSlotAdapter) == 0x000050, "Wrong size on USolarSizeBoxSlotAdapter");

// Class SolarUI.SolarUniformGridSlotAdapter
// 0x0010 (0x0048 - 0x0038)
class USolarUniformGridSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarUniformGridSlotAdapter">();
	}
	static class USolarUniformGridSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarUniformGridSlotAdapter>();
	}
};
static_assert(alignof(USolarUniformGridSlotAdapter) == 0x000008, "Wrong alignment on USolarUniformGridSlotAdapter");
static_assert(sizeof(USolarUniformGridSlotAdapter) == 0x000048, "Wrong size on USolarUniformGridSlotAdapter");

// Class SolarUI.SolarVerticalBoxSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarVerticalBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarVerticalBoxSlotAdapter">();
	}
	static class USolarVerticalBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarVerticalBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarVerticalBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarVerticalBoxSlotAdapter");
static_assert(sizeof(USolarVerticalBoxSlotAdapter) == 0x000050, "Wrong size on USolarVerticalBoxSlotAdapter");

// Class SolarUI.SolarImageAdapter
// 0x0128 (0x01A0 - 0x0078)
class USolarImageAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0x128];                                     // 0x0078(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarImageAdapter">();
	}
	static class USolarImageAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarImageAdapter>();
	}
};
static_assert(alignof(USolarImageAdapter) == 0x000008, "Wrong alignment on USolarImageAdapter");
static_assert(sizeof(USolarImageAdapter) == 0x0001A0, "Wrong size on USolarImageAdapter");

// Class SolarUI.SolarWidgetSwitcherSlotAdapter
// 0x0018 (0x0050 - 0x0038)
class USolarWidgetSwitcherSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetSwitcherSlotAdapter">();
	}
	static class USolarWidgetSwitcherSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetSwitcherSlotAdapter>();
	}
};
static_assert(alignof(USolarWidgetSwitcherSlotAdapter) == 0x000008, "Wrong alignment on USolarWidgetSwitcherSlotAdapter");
static_assert(sizeof(USolarWidgetSwitcherSlotAdapter) == 0x000050, "Wrong size on USolarWidgetSwitcherSlotAdapter");

// Class SolarUI.SolarWrapBoxSlotAdapter
// 0x0020 (0x0058 - 0x0038)
class USolarWrapBoxSlotAdapter final : public USolarPanelSlotAdapter
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWrapBoxSlotAdapter">();
	}
	static class USolarWrapBoxSlotAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWrapBoxSlotAdapter>();
	}
};
static_assert(alignof(USolarWrapBoxSlotAdapter) == 0x000008, "Wrong alignment on USolarWrapBoxSlotAdapter");
static_assert(sizeof(USolarWrapBoxSlotAdapter) == 0x000058, "Wrong size on USolarWrapBoxSlotAdapter");

// Class SolarUI.SolarUIRuntimeSettings
// 0x0020 (0x0058 - 0x0038)
class USolarUIRuntimeSettings final : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                        SpriteAtlasManagerPath;                            // 0x0038(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPaperSpriteAtlasManager*               PaperSpriteAtlasManager;                           // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarUIRuntimeSettings">();
	}
	static class USolarUIRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarUIRuntimeSettings>();
	}
};
static_assert(alignof(USolarUIRuntimeSettings) == 0x000008, "Wrong alignment on USolarUIRuntimeSettings");
static_assert(sizeof(USolarUIRuntimeSettings) == 0x000058, "Wrong size on USolarUIRuntimeSettings");
static_assert(offsetof(USolarUIRuntimeSettings, SpriteAtlasManagerPath) == 0x000038, "Member 'USolarUIRuntimeSettings::SpriteAtlasManagerPath' has a wrong offset!");
static_assert(offsetof(USolarUIRuntimeSettings, PaperSpriteAtlasManager) == 0x000050, "Member 'USolarUIRuntimeSettings::PaperSpriteAtlasManager' has a wrong offset!");

// Class SolarUI.SolarUISettings
// 0x0020 (0x0058 - 0x0038)
class USolarUISettings final : public UDeveloperSettings
{
public:
	TArray<struct FSolarUIMapWidgetAdapterEntry>  WidgetAdapterMapList;                              // 0x0038(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolarUIMapPanelSlotAdapterEntry> PanelSlotAdapterMapList;                         // 0x0048(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarUISettings">();
	}
	static class USolarUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarUISettings>();
	}
};
static_assert(alignof(USolarUISettings) == 0x000008, "Wrong alignment on USolarUISettings");
static_assert(sizeof(USolarUISettings) == 0x000058, "Wrong size on USolarUISettings");
static_assert(offsetof(USolarUISettings, WidgetAdapterMapList) == 0x000038, "Member 'USolarUISettings::WidgetAdapterMapList' has a wrong offset!");
static_assert(offsetof(USolarUISettings, PanelSlotAdapterMapList) == 0x000048, "Member 'USolarUISettings::PanelSlotAdapterMapList' has a wrong offset!");

// Class SolarUI.SolarTextBlockAdapter
// 0x00A8 (0x0120 - 0x0078)
class USolarTextBlockAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0xA8];                                      // 0x0078(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarTextBlockAdapter">();
	}
	static class USolarTextBlockAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarTextBlockAdapter>();
	}
};
static_assert(alignof(USolarTextBlockAdapter) == 0x000008, "Wrong alignment on USolarTextBlockAdapter");
static_assert(sizeof(USolarTextBlockAdapter) == 0x000120, "Wrong size on USolarTextBlockAdapter");

// Class SolarUI.SolarSizeBoxAdapter
// 0x0018 (0x0090 - 0x0078)
class USolarSizeBoxAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarSizeBoxAdapter">();
	}
	static class USolarSizeBoxAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarSizeBoxAdapter>();
	}
};
static_assert(alignof(USolarSizeBoxAdapter) == 0x000008, "Wrong alignment on USolarSizeBoxAdapter");
static_assert(sizeof(USolarSizeBoxAdapter) == 0x000090, "Wrong size on USolarSizeBoxAdapter");

// Class SolarUI.SolarRichTextBlockAdapter
// 0x00A8 (0x0120 - 0x0078)
class USolarRichTextBlockAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0xA8];                                      // 0x0078(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarRichTextBlockAdapter">();
	}
	static class USolarRichTextBlockAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarRichTextBlockAdapter>();
	}
};
static_assert(alignof(USolarRichTextBlockAdapter) == 0x000008, "Wrong alignment on USolarRichTextBlockAdapter");
static_assert(sizeof(USolarRichTextBlockAdapter) == 0x000120, "Wrong size on USolarRichTextBlockAdapter");

// Class SolarUI.SolarListViewAdapter
// 0x0008 (0x0080 - 0x0078)
class USolarListViewAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarListViewAdapter">();
	}
	static class USolarListViewAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarListViewAdapter>();
	}
};
static_assert(alignof(USolarListViewAdapter) == 0x000008, "Wrong alignment on USolarListViewAdapter");
static_assert(sizeof(USolarListViewAdapter) == 0x000080, "Wrong size on USolarListViewAdapter");

// Class SolarUI.SolarTileViewAdapter
// 0x0010 (0x0088 - 0x0078)
class USolarTileViewAdapter final : public USolarWidgetAdapter
{
public:
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarTileViewAdapter">();
	}
	static class USolarTileViewAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarTileViewAdapter>();
	}
};
static_assert(alignof(USolarTileViewAdapter) == 0x000008, "Wrong alignment on USolarTileViewAdapter");
static_assert(sizeof(USolarTileViewAdapter) == 0x000088, "Wrong size on USolarTileViewAdapter");

// Class SolarUI.SolarWidgetContext
// 0x00A0 (0x00C8 - 0x0028)
class USolarWidgetContext final : public UObject
{
public:
	TMap<class UClass*, class USolarWidgetAdapter*> DefaultWidgetAdapterDict;                        // 0x0028(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class UClass*, class USolarPanelSlotAdapter*> DefaultPanelSlotAdapterDict;                  // 0x0078(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetContext">();
	}
	static class USolarWidgetContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetContext>();
	}
};
static_assert(alignof(USolarWidgetContext) == 0x000008, "Wrong alignment on USolarWidgetContext");
static_assert(sizeof(USolarWidgetContext) == 0x0000C8, "Wrong size on USolarWidgetContext");
static_assert(offsetof(USolarWidgetContext, DefaultWidgetAdapterDict) == 0x000028, "Member 'USolarWidgetContext::DefaultWidgetAdapterDict' has a wrong offset!");
static_assert(offsetof(USolarWidgetContext, DefaultPanelSlotAdapterDict) == 0x000078, "Member 'USolarWidgetContext::DefaultPanelSlotAdapterDict' has a wrong offset!");

// Class SolarUI.SolarWidgetLayout
// 0x0018 (0x0040 - 0x0028)
class USolarWidgetLayout final : public UObject
{
public:
	class USolarWidgetContext*                    WidgetContext;                                     // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USolarWidgetLayoutPlatform*>     LayoutPlatforms;                                   // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetLayout">();
	}
	static class USolarWidgetLayout* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetLayout>();
	}
};
static_assert(alignof(USolarWidgetLayout) == 0x000008, "Wrong alignment on USolarWidgetLayout");
static_assert(sizeof(USolarWidgetLayout) == 0x000040, "Wrong size on USolarWidgetLayout");
static_assert(offsetof(USolarWidgetLayout, WidgetContext) == 0x000028, "Member 'USolarWidgetLayout::WidgetContext' has a wrong offset!");
static_assert(offsetof(USolarWidgetLayout, LayoutPlatforms) == 0x000030, "Member 'USolarWidgetLayout::LayoutPlatforms' has a wrong offset!");

// Class SolarUI.SolarWidgetLayoutPlatform
// 0x00B0 (0x00D8 - 0x0028)
class USolarWidgetLayoutPlatform final : public UObject
{
public:
	EUSolarWidgetLayoutType                       WidgetLayoutType;                                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0xF];                                       // 0x0029(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USolarWidgetAdapter*> WidgetAdapterDict;                                 // 0x0038(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetLayoutPlatform">();
	}
	static class USolarWidgetLayoutPlatform* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetLayoutPlatform>();
	}
};
static_assert(alignof(USolarWidgetLayoutPlatform) == 0x000008, "Wrong alignment on USolarWidgetLayoutPlatform");
static_assert(sizeof(USolarWidgetLayoutPlatform) == 0x0000D8, "Wrong size on USolarWidgetLayoutPlatform");
static_assert(offsetof(USolarWidgetLayoutPlatform, WidgetLayoutType) == 0x000028, "Member 'USolarWidgetLayoutPlatform::WidgetLayoutType' has a wrong offset!");
static_assert(offsetof(USolarWidgetLayoutPlatform, WidgetAdapterDict) == 0x000038, "Member 'USolarWidgetLayoutPlatform::WidgetAdapterDict' has a wrong offset!");

// Class SolarUI.SolarWidgetLayoutTest
// 0x0000 (0x03B8 - 0x03B8)
class USolarWidgetLayoutTest final : public USolarUserWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetLayoutTest">();
	}
	static class USolarWidgetLayoutTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetLayoutTest>();
	}
};
static_assert(alignof(USolarWidgetLayoutTest) == 0x000008, "Wrong alignment on USolarWidgetLayoutTest");
static_assert(sizeof(USolarWidgetLayoutTest) == 0x0003B8, "Wrong size on USolarWidgetLayoutTest");

// Class SolarUI.SolarWidgetLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarWidgetLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakSlateBrushAtlasAdapter(const struct FSlateBrushAtlasAdapter& InAtlasAdapter, class FName* OutSpriteName, class UObject** OutResourceObject);
	static class FString GetCustomLayoutJsonString(const class FString& InWidgetBlueprintJsonPath);
	static void NavigateTo(class UWidget* WidgetToNavigate);
	static void NavigateToWidget(class UWidget* Widget);
	static void SetListViewItemFocus(class UListView* ListView, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetLibrary">();
	}
	static class USolarWidgetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetLibrary>();
	}
};
static_assert(alignof(USolarWidgetLibrary) == 0x000008, "Wrong alignment on USolarWidgetLibrary");
static_assert(sizeof(USolarWidgetLibrary) == 0x000028, "Wrong size on USolarWidgetLibrary");

// Class SolarUI.SolarCurveVector
// 0x0208 (0x0238 - 0x0030)
class USolarCurveVector final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurves[0x4];                                  // 0x0030(0x0080)(NativeAccessSpecifierPublic)
	int32                                         ChannelUsed;                                       // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMarginType;                                     // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector4 GetVectorValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarCurveVector">();
	}
	static class USolarCurveVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarCurveVector>();
	}
};
static_assert(alignof(USolarCurveVector) == 0x000008, "Wrong alignment on USolarCurveVector");
static_assert(sizeof(USolarCurveVector) == 0x000238, "Wrong size on USolarCurveVector");
static_assert(offsetof(USolarCurveVector, FloatCurves) == 0x000030, "Member 'USolarCurveVector::FloatCurves' has a wrong offset!");
static_assert(offsetof(USolarCurveVector, ChannelUsed) == 0x000230, "Member 'USolarCurveVector::ChannelUsed' has a wrong offset!");
static_assert(offsetof(USolarCurveVector, bIsMarginType) == 0x000234, "Member 'USolarCurveVector::bIsMarginType' has a wrong offset!");

// Class SolarUI.SolarByteChannel
// 0x0028 (0x0050 - 0x0028)
class USolarByteChannel final : public UObject
{
public:
	TArray<float>                                 Times;                                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Values;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnum*                                  Enum;                                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool GetByteValue(float OldTime, float NewTime, bool bReversePlayback, uint8* OutValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarByteChannel">();
	}
	static class USolarByteChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarByteChannel>();
	}
};
static_assert(alignof(USolarByteChannel) == 0x000008, "Wrong alignment on USolarByteChannel");
static_assert(sizeof(USolarByteChannel) == 0x000050, "Wrong size on USolarByteChannel");
static_assert(offsetof(USolarByteChannel, Times) == 0x000028, "Member 'USolarByteChannel::Times' has a wrong offset!");
static_assert(offsetof(USolarByteChannel, Values) == 0x000038, "Member 'USolarByteChannel::Values' has a wrong offset!");
static_assert(offsetof(USolarByteChannel, Enum) == 0x000048, "Member 'USolarByteChannel::Enum' has a wrong offset!");

// Class SolarUI.SolarWidgetTimeline
// 0x0108 (0x0130 - 0x0028)
class USolarWidgetTimeline final : public UObject
{
public:
	float                                         Length;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSolarTimelineEventEntry>       Events;                                            // 0x0030(0x0010)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSolarTimelineFloatEntry>       InterpFloats;                                      // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSolarTimelineVectorEntry>      InterpVectors;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSolarTimelineLinearColorEntry> InterpLinearColors;                                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSolarTimelineTransformEntry>   InterpTransforms;                                  // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSolarTimelineByteEntry>        InterpByteChannels;                                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0xA0];                                      // 0x0090(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetTimeline">();
	}
	static class USolarWidgetTimeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetTimeline>();
	}
};
static_assert(alignof(USolarWidgetTimeline) == 0x000008, "Wrong alignment on USolarWidgetTimeline");
static_assert(sizeof(USolarWidgetTimeline) == 0x000130, "Wrong size on USolarWidgetTimeline");
static_assert(offsetof(USolarWidgetTimeline, Length) == 0x000028, "Member 'USolarWidgetTimeline::Length' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, Events) == 0x000030, "Member 'USolarWidgetTimeline::Events' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, InterpFloats) == 0x000040, "Member 'USolarWidgetTimeline::InterpFloats' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, InterpVectors) == 0x000050, "Member 'USolarWidgetTimeline::InterpVectors' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, InterpLinearColors) == 0x000060, "Member 'USolarWidgetTimeline::InterpLinearColors' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, InterpTransforms) == 0x000070, "Member 'USolarWidgetTimeline::InterpTransforms' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimeline, InterpByteChannels) == 0x000080, "Member 'USolarWidgetTimeline::InterpByteChannels' has a wrong offset!");

// Class SolarUI.SolarWidgetTimelinePlayer
// 0x0030 (0x0058 - 0x0028)
class USolarWidgetTimelinePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USolarWidgetTimeline>    BindingTimeline;                                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UUserWidget>             OwnerWidget;                                       // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UWidgetAnimation>        AnimationFrom;                                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarWidgetTimelinePlayer">();
	}
	static class USolarWidgetTimelinePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarWidgetTimelinePlayer>();
	}
};
static_assert(alignof(USolarWidgetTimelinePlayer) == 0x000008, "Wrong alignment on USolarWidgetTimelinePlayer");
static_assert(sizeof(USolarWidgetTimelinePlayer) == 0x000058, "Wrong size on USolarWidgetTimelinePlayer");
static_assert(offsetof(USolarWidgetTimelinePlayer, BindingTimeline) == 0x000040, "Member 'USolarWidgetTimelinePlayer::BindingTimeline' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimelinePlayer, OwnerWidget) == 0x000048, "Member 'USolarWidgetTimelinePlayer::OwnerWidget' has a wrong offset!");
static_assert(offsetof(USolarWidgetTimelinePlayer, AnimationFrom) == 0x000050, "Member 'USolarWidgetTimelinePlayer::AnimationFrom' has a wrong offset!");

}

