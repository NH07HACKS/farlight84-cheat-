#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TaskFormula

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TaskFormula.BP_TaskFormula_C
// 0x0000 (0x02E0 - 0x02E0)
class ABP_TaskFormula_C final : public ATaskFormula
{
public:
	void TYUseAvatarCauseDamage(int64 InstID);
	void BigModeOpenAirBoxNum(int64 InstID);
	void BigModeBuyESElectricNum(int64 InstID);
	void SmallModeIntValuePlus(int64 InstID);
	void BigModeIntValuePlus(int64 InstID);
	void AnyIntValuePlus(int64 InstID);
	void BigModeGroupCharTypeDamage(int64 InstID);
	void AnyModeGroupCharTypeKill(int64 InstID);
	void SmallModeGroupCharTypeKill(int64 InstID);
	void GetCurCharacterType(int32* CharacterType);
	void BigModeGroupCharTypeKill(int64 InstID);
	void AnyModeSlideDistance(int64 InstID);
	void SmallModeSlideDistance(int64 InstID);
	void BigModeSlideDistance(int64 InstID);
	void AnyModeKillSameChar(int64 InstID);
	void SmallModeKillSameChar(int64 InstID);
	void BigModeKillSameChar(int64 InstID);
	void AnyModeRepairVehicle(int64 InstID);
	void SmallModeRepairVehicle(int64 InstID);
	void BigModeRepairVehicle(int64 InstID);
	void AnyModeLevelUp(int64 InstID);
	void SmallModeLevelUp(int64 InstID);
	void BigModeLevelUp(int64 TaskID);
	void AnyModeZiplineUseCount(int64 InstID);
	void SmallModeZiplineUseCount(int64 InstID);
	void BigModeZiplineUseCount(int64 InstID);
	void MatchRuleCauseDamage(int64 InstID);
	void MatchRuleKillNum(int64 InstID);
	void StrongholdItemCollectCountFunc(int64 InstID);
	void StrongholdDamageFunc(int64 InstID);
	void StrongholdWalkDistanceFunc(int64 TaskID);
	void StrongholdDanceCountFunc(int64 InstID);
	void StrongholdLifeTimeFunc(int64 InstID);
	void StrongholdBoxCollectCountFunc(int64 TaskID);
	void StrongholdKillCountFuc(int64 InstID);
	void StrongholdVisitCountFunc(int64 InstID);
	void SmallModeItemTypeCollectCount(int64 InstID);
	void BigModeItemTypeCollectCount(int64 InstID);
	void SmallModeCollectBoxNum(int64 InstID);
	void BigModeCollectBoxNum(int64 InstID);
	void SmallModeHoverCarInWaterDistance(int64 InstID);
	void BigModeHoverCarInWaterDistance(int64 InstID);
	void SmallModePosionWalkDistance(int64 InstID);
	void SmallModeSwimDistance(int64 InstID);
	void BigModePosionWalkDistance(int64 InstID);
	void BigModeSwimDistance(int64 InstID);
	void BigModeAvatarKillNum(int64 InstID);
	void BigModeWeaponTypeKillNum(int64 InstID);
	EWeaponType GetCurWeaponType();
	void Get_Drive_Vehicle_ID(int32* AssignedCharacterID);
	void BigModeTotalVehicleDamage(int64 InstID);
	void SmallModeWeaponTypeDamage(int64 InstID);
	void BigModeWeaponTypeDamage(int64 InstID);
	void SmallModeWeaponDamage(int64 InstID);
	void BigModeWeaponDamage(int64 InstID);
	void SmallModeWeaponKillNum(int64 InstID);
	void BigModeWeaponKillNum(int64 InstID);
	void SmallModeLifeTime(int64 InstID);
	void TYBigModeLifeTime(int64 InstID);
	void TYAnyModeFlyCount(int64 InstID);
	void TYBigModeAssistNum(int64 InstID);
	void TYAnyModeAssistNum(int64 InstID);
	void TYBigModeHealSelf(int64 InstID);
	void TYAnyModeHealSelf(int64 InstID);
	void TYBigModeSaveCount(int64 InstID);
	void TYModeCauseDamage(int64 InstID);
	void TYBigModeCauseDamage(int64 InstID);
	void TYAnyModeCauseDamage(int64 InstID);
	void TYBigModeKillDownNum(int64 InstID);
	void TYAnyModeKillDownNum(int64 InstID);
	void TYModeSingleKillNum(int64 InstID);
	void GetWeaponTypeStartIndexPlus1(int32* WeaponType);
	void SmallModeWeaponTypeKillNum(int64 InstID);
	void GetCurCharacterID(int32* AssignedCharacterID);
	void TYModeAvatarKillNum(int64 InstID);
	int32 GetCurWeaponID();
	void TYModeWeaponKillNum(int64 InstID);
	void TYModeKillNum(int64 InstID);
	void TYDriveAnyVechileDistance(int64 InstID);
	void TYUseAvatarKillNum(int64 InstID);
	void TYDriveVechileDistance(int64 InstID);
	void GetSolarPlayerState(class ASolarPlayerState** OutResult);
	void TYWeaponKillNum(int64 InstID);
	void SmallModeWalkDistance(int64 InstID);
	void BigModeWalkDistance(int64 InstID);
	void AnyModeGroupCharTypeDamage(int64 InstID);
	void SmallModeGroupCharTypeDamage(int64 InstID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TaskFormula_C">();
	}
	static class ABP_TaskFormula_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TaskFormula_C>();
	}
};
static_assert(alignof(ABP_TaskFormula_C) == 0x000008, "Wrong alignment on ABP_TaskFormula_C");
static_assert(sizeof(ABP_TaskFormula_C) == 0x0002E0, "Wrong size on ABP_TaskFormula_C");

}

