#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weapon_UI_Widget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Solarland_structs.hpp"
#include "E_PassiveBuff_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.ExecuteUbergraph_Weapon_UI_Widget
// 0x0080 (0x0080 - 0x0000)
struct Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponShootPattern                           CallFunc_GetShootPattern_ReturnValue;              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnabled;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponShootPattern                           K2Node_Event_CurrentShootPattern_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponShootPattern                           K2Node_Event_CurrentShootPattern;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInActive;                            // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerWeapon*                     K2Node_Event_InPlayerWeapon;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInUseHUDColor;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_InHUDColor;                           // 0x003C(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget");
static_assert(sizeof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget) == 0x000080, "Wrong size on Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, EntryPoint) == 0x000000, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::EntryPoint' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_bool_Variable) == 0x000004, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_float_Variable) == 0x000008, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_float_Variable_1) == 0x00000C, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_bool_Variable_1) == 0x000010, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_struct_Variable) == 0x000014, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_IsDesignTime) == 0x000024, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, CallFunc_GetShootPattern_ReturnValue) == 0x000026, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::CallFunc_GetShootPattern_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_bEnabled) == 0x000027, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_CurrentShootPattern_1) == 0x000028, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_CurrentShootPattern_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_CurrentShootPattern) == 0x000029, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_CurrentShootPattern' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_bInActive) == 0x00002A, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_bInActive' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_InPlayerWeapon) == 0x000030, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_InPlayerWeapon' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_bInUseHUDColor) == 0x000038, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_bInUseHUDColor' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Event_InHUDColor) == 0x00003C, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Event_InHUDColor' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_bool_Variable_2) == 0x00004C, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_MakeStruct_LinearColor) == 0x000050, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Select_Default) == 0x000060, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Select_Default_1) == 0x000064, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_int_Variable) == 0x000074, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, Temp_int_Variable_1) == 0x000078, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget, K2Node_Select_Default_2) == 0x00007C, "Member 'Weapon_UI_Widget_C_ExecuteUbergraph_Weapon_UI_Widget::K2Node_Select_Default_2' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.K2_OnSetWeapon
// 0x0020 (0x0020 - 0x0000)
struct Weapon_UI_Widget_C_K2_OnSetWeapon final
{
public:
	class ASolarPlayerWeapon*                     InPlayerWeapon;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInUseHUDColor;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InHUDColor;                                        // 0x000C(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_K2_OnSetWeapon) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_K2_OnSetWeapon");
static_assert(sizeof(Weapon_UI_Widget_C_K2_OnSetWeapon) == 0x000020, "Wrong size on Weapon_UI_Widget_C_K2_OnSetWeapon");
static_assert(offsetof(Weapon_UI_Widget_C_K2_OnSetWeapon, InPlayerWeapon) == 0x000000, "Member 'Weapon_UI_Widget_C_K2_OnSetWeapon::InPlayerWeapon' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_K2_OnSetWeapon, bInUseHUDColor) == 0x000008, "Member 'Weapon_UI_Widget_C_K2_OnSetWeapon::bInUseHUDColor' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_K2_OnSetWeapon, InHUDColor) == 0x00000C, "Member 'Weapon_UI_Widget_C_K2_OnSetWeapon::InHUDColor' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.K2_OnActiveWeapon
// 0x0001 (0x0001 - 0x0000)
struct Weapon_UI_Widget_C_K2_OnActiveWeapon final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_UI_Widget_C_K2_OnActiveWeapon) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_K2_OnActiveWeapon");
static_assert(sizeof(Weapon_UI_Widget_C_K2_OnActiveWeapon) == 0x000001, "Wrong size on Weapon_UI_Widget_C_K2_OnActiveWeapon");
static_assert(offsetof(Weapon_UI_Widget_C_K2_OnActiveWeapon, bInActive) == 0x000000, "Member 'Weapon_UI_Widget_C_K2_OnActiveWeapon::bInActive' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.K2_PostWeaponSwitchShootPattern
// 0x0001 (0x0001 - 0x0000)
struct Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern final
{
public:
	EWeaponShootPattern                           CurrentShootPattern;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern");
static_assert(sizeof(Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern) == 0x000001, "Wrong size on Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern");
static_assert(offsetof(Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern, CurrentShootPattern) == 0x000000, "Member 'Weapon_UI_Widget_C_K2_PostWeaponSwitchShootPattern::CurrentShootPattern' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.K2_UpdateShootPatternVisibility
// 0x0002 (0x0002 - 0x0000)
struct Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponShootPattern                           CurrentShootPattern;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility");
static_assert(sizeof(Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility) == 0x000002, "Wrong size on Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility");
static_assert(offsetof(Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility, bEnabled) == 0x000000, "Member 'Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility::bEnabled' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility, CurrentShootPattern) == 0x000001, "Member 'Weapon_UI_Widget_C_K2_UpdateShootPatternVisibility::CurrentShootPattern' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Weapon_UI_Widget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_UI_Widget_C_PreConstruct) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_PreConstruct");
static_assert(sizeof(Weapon_UI_Widget_C_PreConstruct) == 0x000001, "Wrong size on Weapon_UI_Widget_C_PreConstruct");
static_assert(offsetof(Weapon_UI_Widget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Weapon_UI_Widget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.SetPassiveBuff
// 0x0060 (0x0060 - 0x0000)
struct Weapon_UI_Widget_C_SetPassiveBuff final
{
public:
	E_PassiveBuff                                 Passive_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PassiveBuff                                 Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
};
static_assert(alignof(Weapon_UI_Widget_C_SetPassiveBuff) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_SetPassiveBuff");
static_assert(sizeof(Weapon_UI_Widget_C_SetPassiveBuff) == 0x000060, "Wrong size on Weapon_UI_Widget_C_SetPassiveBuff");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, Passive_0) == 0x000000, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::Passive_0' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, Temp_byte_Variable) == 0x000001, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, Temp_struct_Variable) == 0x000004, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, Temp_struct_Variable_1) == 0x000014, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, K2Node_Select_Default) == 0x000028, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetPassiveBuff, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'Weapon_UI_Widget_C_SetPassiveBuff::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.GetOwingPlayerLevel
// 0x0020 (0x0020 - 0x0000)
struct Weapon_UI_Widget_C_GetOwingPlayerLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalLevel;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetOwningSolarPlayerCharacter_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_GetSolarPlayerState_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_UI_Widget_C_GetOwingPlayerLevel) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_GetOwingPlayerLevel");
static_assert(sizeof(Weapon_UI_Widget_C_GetOwingPlayerLevel) == 0x000020, "Wrong size on Weapon_UI_Widget_C_GetOwingPlayerLevel");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, Level) == 0x000000, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::Level' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, LocalLevel) == 0x000004, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::LocalLevel' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, CallFunc_GetOwningSolarPlayerCharacter_ReturnValue) == 0x000008, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::CallFunc_GetOwningSolarPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, CallFunc_GetSolarPlayerState_ReturnValue) == 0x000010, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::CallFunc_GetSolarPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_GetOwingPlayerLevel, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'Weapon_UI_Widget_C_GetOwingPlayerLevel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.GetWeaponIconWidget
// 0x0008 (0x0008 - 0x0000)
struct Weapon_UI_Widget_C_GetWeaponIconWidget final
{
public:
	class UImage*                                 NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_GetWeaponIconWidget) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_GetWeaponIconWidget");
static_assert(sizeof(Weapon_UI_Widget_C_GetWeaponIconWidget) == 0x000008, "Wrong size on Weapon_UI_Widget_C_GetWeaponIconWidget");
static_assert(offsetof(Weapon_UI_Widget_C_GetWeaponIconWidget, NewParam) == 0x000000, "Member 'Weapon_UI_Widget_C_GetWeaponIconWidget::NewParam' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.UpdateShootPatternUI
// 0x0001 (0x0001 - 0x0000)
struct Weapon_UI_Widget_C_UpdateShootPatternUI final
{
public:
	EWeaponShootPattern                           CurrentShootPattern;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_UpdateShootPatternUI) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_UpdateShootPatternUI");
static_assert(sizeof(Weapon_UI_Widget_C_UpdateShootPatternUI) == 0x000001, "Wrong size on Weapon_UI_Widget_C_UpdateShootPatternUI");
static_assert(offsetof(Weapon_UI_Widget_C_UpdateShootPatternUI, CurrentShootPattern) == 0x000000, "Member 'Weapon_UI_Widget_C_UpdateShootPatternUI::CurrentShootPattern' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.SetFullEquiped
// 0x0005 (0x0005 - 0x0000)
struct Weapon_UI_Widget_C_SetFullEquiped final
{
public:
	bool                                          IsFullEquiped_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_SetFullEquiped) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_SetFullEquiped");
static_assert(sizeof(Weapon_UI_Widget_C_SetFullEquiped) == 0x000005, "Wrong size on Weapon_UI_Widget_C_SetFullEquiped");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquiped, IsFullEquiped_0) == 0x000000, "Member 'Weapon_UI_Widget_C_SetFullEquiped::IsFullEquiped_0' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquiped, Temp_bool_Variable) == 0x000001, "Member 'Weapon_UI_Widget_C_SetFullEquiped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquiped, Temp_byte_Variable) == 0x000002, "Member 'Weapon_UI_Widget_C_SetFullEquiped::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquiped, Temp_byte_Variable_1) == 0x000003, "Member 'Weapon_UI_Widget_C_SetFullEquiped::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquiped, K2Node_Select_Default) == 0x000004, "Member 'Weapon_UI_Widget_C_SetFullEquiped::K2Node_Select_Default' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.SetFullEquipedParts
// 0x0005 (0x0005 - 0x0000)
struct Weapon_UI_Widget_C_SetFullEquipedParts final
{
public:
	bool                                          IsFullEquipedParts_0;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_SetFullEquipedParts) == 0x000001, "Wrong alignment on Weapon_UI_Widget_C_SetFullEquipedParts");
static_assert(sizeof(Weapon_UI_Widget_C_SetFullEquipedParts) == 0x000005, "Wrong size on Weapon_UI_Widget_C_SetFullEquipedParts");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquipedParts, IsFullEquipedParts_0) == 0x000000, "Member 'Weapon_UI_Widget_C_SetFullEquipedParts::IsFullEquipedParts_0' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquipedParts, Temp_bool_Variable) == 0x000001, "Member 'Weapon_UI_Widget_C_SetFullEquipedParts::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquipedParts, Temp_byte_Variable) == 0x000002, "Member 'Weapon_UI_Widget_C_SetFullEquipedParts::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquipedParts, Temp_byte_Variable_1) == 0x000003, "Member 'Weapon_UI_Widget_C_SetFullEquipedParts::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_UI_Widget_C_SetFullEquipedParts, K2Node_Select_Default) == 0x000004, "Member 'Weapon_UI_Widget_C_SetFullEquipedParts::K2Node_Select_Default' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.GetWeaponPanelWidget
// 0x0008 (0x0008 - 0x0000)
struct Weapon_UI_Widget_C_GetWeaponPanelWidget final
{
public:
	class USolarWeaponPanelWidgetDesktop*         OutWidget;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_GetWeaponPanelWidget) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_GetWeaponPanelWidget");
static_assert(sizeof(Weapon_UI_Widget_C_GetWeaponPanelWidget) == 0x000008, "Wrong size on Weapon_UI_Widget_C_GetWeaponPanelWidget");
static_assert(offsetof(Weapon_UI_Widget_C_GetWeaponPanelWidget, OutWidget) == 0x000000, "Member 'Weapon_UI_Widget_C_GetWeaponPanelWidget::OutWidget' has a wrong offset!");

// Function Weapon_UI_Widget.Weapon_UI_Widget_C.GetShootPatternWidget
// 0x0008 (0x0008 - 0x0000)
struct Weapon_UI_Widget_C_GetShootPatternWidget final
{
public:
	class UUI_Weapon_Model_C*                     OutWidget;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_UI_Widget_C_GetShootPatternWidget) == 0x000008, "Wrong alignment on Weapon_UI_Widget_C_GetShootPatternWidget");
static_assert(sizeof(Weapon_UI_Widget_C_GetShootPatternWidget) == 0x000008, "Wrong size on Weapon_UI_Widget_C_GetShootPatternWidget");
static_assert(offsetof(Weapon_UI_Widget_C_GetShootPatternWidget, OutWidget) == 0x000000, "Member 'Weapon_UI_Widget_C_GetShootPatternWidget::OutWidget' has a wrong offset!");

}

