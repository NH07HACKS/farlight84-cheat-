#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_MicroPhoneOperation

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Solarland_structs.hpp"
#include "E_MIcSpeakerStateEnum_structs.hpp"
#include "E_Type_HUD_Settings_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.ExecuteUbergraph_UI_MicroPhoneOperation
// 0x0018 (0x0018 - 0x0000)
struct UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation) == 0x000004, "Wrong alignment on UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation");
static_assert(sizeof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation) == 0x000018, "Wrong size on UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, EntryPoint) == 0x000000, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, Temp_int_Variable) == 0x000004, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, Temp_int_Variable_1) == 0x000008, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, Temp_int_Variable_2) == 0x00000C, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, Temp_int_Variable_3) == 0x000010, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation, K2Node_Event_IsDesignTime) == 0x000014, "Member 'UI_MicroPhoneOperation_C_ExecuteUbergraph_UI_MicroPhoneOperation::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_MicroPhoneOperation_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MicroPhoneOperation_C_PreConstruct) == 0x000001, "Wrong alignment on UI_MicroPhoneOperation_C_PreConstruct");
static_assert(sizeof(UI_MicroPhoneOperation_C_PreConstruct) == 0x000001, "Wrong size on UI_MicroPhoneOperation_C_PreConstruct");
static_assert(offsetof(UI_MicroPhoneOperation_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_MicroPhoneOperation_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.Set Right
// 0x0080 (0x0080 - 0x0000)
struct UI_MicroPhoneOperation_C_Set_Right final
{
public:
	bool                                          Set_Right_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Horizontal_0;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_MicroPhoneOperation_C_Set_Right) == 0x000008, "Wrong alignment on UI_MicroPhoneOperation_C_Set_Right");
static_assert(sizeof(UI_MicroPhoneOperation_C_Set_Right) == 0x000080, "Wrong size on UI_MicroPhoneOperation_C_Set_Right");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Set_Right_0) == 0x000000, "Member 'UI_MicroPhoneOperation_C_Set_Right::Set_Right_0' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Horizontal_0) == 0x000001, "Member 'UI_MicroPhoneOperation_C_Set_Right::Horizontal_0' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_bool_Variable) == 0x000002, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_struct_Variable) == 0x000004, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_struct_Variable_1) == 0x00000C, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_bool_Variable_1) == 0x000014, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, K2Node_Select_Default) == 0x000018, "Member 'UI_MicroPhoneOperation_C_Set_Right::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_struct_Variable_2) == 0x000020, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, Temp_struct_Variable_3) == 0x000028, "Member 'UI_MicroPhoneOperation_C_Set_Right::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, K2Node_MakeStruct_Margin) == 0x000030, "Member 'UI_MicroPhoneOperation_C_Set_Right::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, K2Node_Select_Default_1) == 0x000040, "Member 'UI_MicroPhoneOperation_C_Set_Right::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, K2Node_MakeStruct_Margin_1) == 0x000048, "Member 'UI_MicroPhoneOperation_C_Set_Right::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000058, "Member 'UI_MicroPhoneOperation_C_Set_Right::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000060, "Member 'UI_MicroPhoneOperation_C_Set_Right::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000068, "Member 'UI_MicroPhoneOperation_C_Set_Right::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000070, "Member 'UI_MicroPhoneOperation_C_Set_Right::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_Set_Right, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000078, "Member 'UI_MicroPhoneOperation_C_Set_Right::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.CanUpdateChatHolding
// 0x0002 (0x0002 - 0x0000)
struct UI_MicroPhoneOperation_C_CanUpdateChatHolding final
{
public:
	bool                                          bCanUpdate;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MicroPhoneOperation_C_CanUpdateChatHolding) == 0x000001, "Wrong alignment on UI_MicroPhoneOperation_C_CanUpdateChatHolding");
static_assert(sizeof(UI_MicroPhoneOperation_C_CanUpdateChatHolding) == 0x000002, "Wrong size on UI_MicroPhoneOperation_C_CanUpdateChatHolding");
static_assert(offsetof(UI_MicroPhoneOperation_C_CanUpdateChatHolding, bCanUpdate) == 0x000000, "Member 'UI_MicroPhoneOperation_C_CanUpdateChatHolding::bCanUpdate' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_CanUpdateChatHolding, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'UI_MicroPhoneOperation_C_CanUpdateChatHolding::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.SetHudSettingType
// 0x0001 (0x0001 - 0x0000)
struct UI_MicroPhoneOperation_C_SetHudSettingType final
{
public:
	E_Type_HUD_Settings                           Settings;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_MicroPhoneOperation_C_SetHudSettingType) == 0x000001, "Wrong alignment on UI_MicroPhoneOperation_C_SetHudSettingType");
static_assert(sizeof(UI_MicroPhoneOperation_C_SetHudSettingType) == 0x000001, "Wrong size on UI_MicroPhoneOperation_C_SetHudSettingType");
static_assert(offsetof(UI_MicroPhoneOperation_C_SetHudSettingType, Settings) == 0x000000, "Member 'UI_MicroPhoneOperation_C_SetHudSettingType::Settings' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.BpUpdateMicSpeakerShow
// 0x00D0 (0x00D0 - 0x0000)
struct UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow final
{
public:
	E_MIcSpeakerStateEnum                         State_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAutoAtlasType                                Temp_byte_Variable_1;                              // 0x0003(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_2;                              // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_3;                              // 0x0005(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_4;                              // 0x0006(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_5;                              // 0x0007(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_6;                              // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoAtlasType                                Temp_byte_Variable_7;                              // 0x0009(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value;                           // 0x0010(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_1;                         // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_2;                         // 0x0040(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_3;                         // 0x0058(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_4;                         // 0x0070(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_5;                         // 0x0088(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_6;                         // 0x00A0(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_6;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushAtlasAdapter                CallFunc_Map_Find_Value_7;                         // 0x00B8(0x0010)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_7;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow) == 0x000008, "Wrong alignment on UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow");
static_assert(sizeof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow) == 0x0000D0, "Wrong size on UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, State_0) == 0x000000, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::State_0' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable) == 0x000001, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_1) == 0x000003, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_2) == 0x000004, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_3) == 0x000005, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_4) == 0x000006, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_5) == 0x000007, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_6) == 0x000008, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, Temp_byte_Variable_7) == 0x000009, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value) == 0x000010, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_1) == 0x000028, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_1) == 0x000038, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_2) == 0x000040, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_2) == 0x000050, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_3) == 0x000058, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_3) == 0x000068, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_4) == 0x000070, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_4) == 0x000080, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_5) == 0x000088, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_5) == 0x000098, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_6) == 0x0000A0, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_6' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_6) == 0x0000B0, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_Value_7) == 0x0000B8, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_Value_7' has a wrong offset!");
static_assert(offsetof(UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow, CallFunc_Map_Find_ReturnValue_7) == 0x0000C8, "Member 'UI_MicroPhoneOperation_C_BpUpdateMicSpeakerShow::CallFunc_Map_Find_ReturnValue_7' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.ReceiveWidgetGroupForceHide
// 0x0001 (0x0001 - 0x0000)
struct UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide final
{
public:
	EUIWidgetName                                 InWidgetName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide) == 0x000001, "Wrong alignment on UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide");
static_assert(sizeof(UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide) == 0x000001, "Wrong size on UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide");
static_assert(offsetof(UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide, InWidgetName) == 0x000000, "Member 'UI_MicroPhoneOperation_C_ReceiveWidgetGroupForceHide::InWidgetName' has a wrong offset!");

// Function UI_MicroPhoneOperation.UI_MicroPhoneOperation_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_MicroPhoneOperation_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_MicroPhoneOperation_C_GetModuleName) == 0x000008, "Wrong alignment on UI_MicroPhoneOperation_C_GetModuleName");
static_assert(sizeof(UI_MicroPhoneOperation_C_GetModuleName) == 0x000010, "Wrong size on UI_MicroPhoneOperation_C_GetModuleName");
static_assert(offsetof(UI_MicroPhoneOperation_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_MicroPhoneOperation_C_GetModuleName::ReturnValue' has a wrong offset!");

}

