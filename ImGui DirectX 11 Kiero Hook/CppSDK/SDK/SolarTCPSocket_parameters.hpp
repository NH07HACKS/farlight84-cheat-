#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarTCPSocket

#include "Basic.hpp"


namespace SDK::Params
{

// Function SolarTCPSocket.SolarTCPSocketClient.Connect
// 0x0048 (0x0048 - 0x0000)
struct SolarTCPSocketClient_Connect final
{
public:
	class FString                                 IP;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId, bool bConnected)> OnConnected;                                // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId, bool bDisconnected)> OnDisconnected;                          // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId, const TArray<uint8>& Message)> OnMessageReceived;             // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ConnectionId;                                      // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarTCPSocketClient_Connect) == 0x000008, "Wrong alignment on SolarTCPSocketClient_Connect");
static_assert(sizeof(SolarTCPSocketClient_Connect) == 0x000048, "Wrong size on SolarTCPSocketClient_Connect");
static_assert(offsetof(SolarTCPSocketClient_Connect, IP) == 0x000000, "Member 'SolarTCPSocketClient_Connect::IP' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_Connect, Port) == 0x000010, "Member 'SolarTCPSocketClient_Connect::Port' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_Connect, OnConnected) == 0x000014, "Member 'SolarTCPSocketClient_Connect::OnConnected' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_Connect, OnDisconnected) == 0x000024, "Member 'SolarTCPSocketClient_Connect::OnDisconnected' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_Connect, OnMessageReceived) == 0x000034, "Member 'SolarTCPSocketClient_Connect::OnMessageReceived' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_Connect, ConnectionId) == 0x000044, "Member 'SolarTCPSocketClient_Connect::ConnectionId' has a wrong offset!");

// Function SolarTCPSocket.SolarTCPSocketClient.Disconnect
// 0x0004 (0x0004 - 0x0000)
struct SolarTCPSocketClient_Disconnect final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarTCPSocketClient_Disconnect) == 0x000004, "Wrong alignment on SolarTCPSocketClient_Disconnect");
static_assert(sizeof(SolarTCPSocketClient_Disconnect) == 0x000004, "Wrong size on SolarTCPSocketClient_Disconnect");
static_assert(offsetof(SolarTCPSocketClient_Disconnect, ConnectionId) == 0x000000, "Member 'SolarTCPSocketClient_Disconnect::ConnectionId' has a wrong offset!");

// Function SolarTCPSocket.SolarTCPSocketClient.SendData
// 0x0020 (0x0020 - 0x0000)
struct SolarTCPSocketClient_SendData final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarTCPSocketClient_SendData) == 0x000008, "Wrong alignment on SolarTCPSocketClient_SendData");
static_assert(sizeof(SolarTCPSocketClient_SendData) == 0x000020, "Wrong size on SolarTCPSocketClient_SendData");
static_assert(offsetof(SolarTCPSocketClient_SendData, ConnectionId) == 0x000000, "Member 'SolarTCPSocketClient_SendData::ConnectionId' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_SendData, Data) == 0x000008, "Member 'SolarTCPSocketClient_SendData::Data' has a wrong offset!");
static_assert(offsetof(SolarTCPSocketClient_SendData, ReturnValue) == 0x000018, "Member 'SolarTCPSocketClient_SendData::ReturnValue' has a wrong offset!");

}

