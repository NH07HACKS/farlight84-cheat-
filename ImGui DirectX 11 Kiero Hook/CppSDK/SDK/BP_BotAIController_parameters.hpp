#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BotAIController

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_BotAIController.BP_BotAIController_C.ExecuteUbergraph_BP_BotAIController
// 0x0008 (0x0008 - 0x0000)
struct BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController) == 0x000004, "Wrong alignment on BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController");
static_assert(sizeof(BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController) == 0x000008, "Wrong size on BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController");
static_assert(offsetof(BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController, EntryPoint) == 0x000000, "Member 'BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_BotAIController_C_ExecuteUbergraph_BP_BotAIController::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_BotAIController.BP_BotAIController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BotAIController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BotAIController_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BotAIController_C_ReceiveTick");
static_assert(sizeof(BP_BotAIController_C_ReceiveTick) == 0x000004, "Wrong size on BP_BotAIController_C_ReceiveTick");
static_assert(offsetof(BP_BotAIController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BotAIController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BotAIController.BP_BotAIController_C.SetWarmGameClock
// 0x0001 (0x0001 - 0x0000)
struct BP_BotAIController_C_SetWarmGameClock final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BotAIController_C_SetWarmGameClock) == 0x000001, "Wrong alignment on BP_BotAIController_C_SetWarmGameClock");
static_assert(sizeof(BP_BotAIController_C_SetWarmGameClock) == 0x000001, "Wrong size on BP_BotAIController_C_SetWarmGameClock");
static_assert(offsetof(BP_BotAIController_C_SetWarmGameClock, Enable) == 0x000000, "Member 'BP_BotAIController_C_SetWarmGameClock::Enable' has a wrong offset!");

// Function BP_BotAIController.BP_BotAIController_C.SetupBotAICanUseCharacterData
// 0x000C (0x000C - 0x0000)
struct BP_BotAIController_C_SetupBotAICanUseCharacterData final
{
public:
	int32                                         CharacterID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_BotAIController_C_SetupBotAICanUseCharacterData) == 0x000004, "Wrong alignment on BP_BotAIController_C_SetupBotAICanUseCharacterData");
static_assert(sizeof(BP_BotAIController_C_SetupBotAICanUseCharacterData) == 0x00000C, "Wrong size on BP_BotAIController_C_SetupBotAICanUseCharacterData");
static_assert(offsetof(BP_BotAIController_C_SetupBotAICanUseCharacterData, CharacterID) == 0x000000, "Member 'BP_BotAIController_C_SetupBotAICanUseCharacterData::CharacterID' has a wrong offset!");
static_assert(offsetof(BP_BotAIController_C_SetupBotAICanUseCharacterData, SkinID) == 0x000004, "Member 'BP_BotAIController_C_SetupBotAICanUseCharacterData::SkinID' has a wrong offset!");
static_assert(offsetof(BP_BotAIController_C_SetupBotAICanUseCharacterData, ReturnValue) == 0x000008, "Member 'BP_BotAIController_C_SetupBotAICanUseCharacterData::ReturnValue' has a wrong offset!");

// Function BP_BotAIController.BP_BotAIController_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_BotAIController_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BotAIController_C_GetModuleName) == 0x000008, "Wrong alignment on BP_BotAIController_C_GetModuleName");
static_assert(sizeof(BP_BotAIController_C_GetModuleName) == 0x000010, "Wrong size on BP_BotAIController_C_GetModuleName");
static_assert(offsetof(BP_BotAIController_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_BotAIController_C_GetModuleName::ReturnValue' has a wrong offset!");

}

