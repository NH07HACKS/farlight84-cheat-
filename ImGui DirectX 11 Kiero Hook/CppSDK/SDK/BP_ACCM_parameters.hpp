#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ACCM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ACCM.BP_ACCM_C.FixRotationForBox
// 0x00F0 (0x00F0 - 0x0000)
struct BP_ACCM_C_FixRotationForBox final
{
public:
	struct FTransform                             OriginWorldTransform;                              // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             FixedWorldTransform;                               // 0x0030(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_FixRotationForBox) == 0x000010, "Wrong alignment on BP_ACCM_C_FixRotationForBox");
static_assert(sizeof(BP_ACCM_C_FixRotationForBox) == 0x0000F0, "Wrong size on BP_ACCM_C_FixRotationForBox");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, OriginWorldTransform) == 0x000000, "Member 'BP_ACCM_C_FixRotationForBox::OriginWorldTransform' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, FixedWorldTransform) == 0x000030, "Member 'BP_ACCM_C_FixRotationForBox::FixedWorldTransform' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakTransform_Location) == 0x000060, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_ClampAxis_ReturnValue) == 0x000090, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_ClampAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000094, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_SignOfFloat_ReturnValue) == 0x00009C, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Round_ReturnValue) == 0x0000AC, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_MakeRotator_ReturnValue) == 0x0000B4, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_FixRotationForBox, CallFunc_MakeTransform_ReturnValue) == 0x0000C0, "Member 'BP_ACCM_C_FixRotationForBox::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.TryApplyTempShieldEffect
// 0x0038 (0x0038 - 0x0000)
struct BP_ACCM_C_TryApplyTempShieldEffect final
{
public:
	class ASolarCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarFunctionalityCharacter*           K2Node_DynamicCast_AsSolar_Functionality_Character; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTeammateWith_ReturnValue;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_TryApplyTempShieldEffect) == 0x000008, "Wrong alignment on BP_ACCM_C_TryApplyTempShieldEffect");
static_assert(sizeof(BP_ACCM_C_TryApplyTempShieldEffect) == 0x000038, "Wrong size on BP_ACCM_C_TryApplyTempShieldEffect");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, TargetCharacter) == 0x000000, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, K2Node_DynamicCast_AsSolar_Functionality_Character) == 0x000008, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::K2Node_DynamicCast_AsSolar_Functionality_Character' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, CallFunc_Set_Contains_ReturnValue) == 0x000011, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, CallFunc_GetInstigator_ReturnValue) == 0x000018, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, K2Node_DynamicCast_AsSolar_Character) == 0x000028, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_TryApplyTempShieldEffect, CallFunc_IsTeammateWith_ReturnValue) == 0x000032, "Member 'BP_ACCM_C_TryApplyTempShieldEffect::CallFunc_IsTeammateWith_ReturnValue' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.ApplyEffectToOverlapCharacter
// 0x0048 (0x0048 - 0x0000)
struct BP_ACCM_C_ApplyEffectToOverlapCharacter final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_ApplyEffectToOverlapCharacter) == 0x000008, "Wrong alignment on BP_ACCM_C_ApplyEffectToOverlapCharacter");
static_assert(sizeof(BP_ACCM_C_ApplyEffectToOverlapCharacter) == 0x000048, "Wrong size on BP_ACCM_C_ApplyEffectToOverlapCharacter");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000010, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, K2Node_DynamicCast_AsSolar_Character) == 0x000038, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ApplyEffectToOverlapCharacter, CallFunc_Set_Contains_ReturnValue) == 0x000041, "Member 'BP_ACCM_C_ApplyEffectToOverlapCharacter::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.ReceiveActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_ACCM_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ACCM_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_ACCM_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_ACCM_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong size on BP_ACCM_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_ACCM_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_ACCM_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ACCM_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ACCM_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_ACCM_C_ReceiveTick");
static_assert(sizeof(BP_ACCM_C_ReceiveTick) == 0x000004, "Wrong size on BP_ACCM_C_ReceiveTick");
static_assert(offsetof(BP_ACCM_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_ACCM_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.ReceiveActorEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_ACCM_C_ReceiveActorEndOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ACCM_C_ReceiveActorEndOverlap) == 0x000008, "Wrong alignment on BP_ACCM_C_ReceiveActorEndOverlap");
static_assert(sizeof(BP_ACCM_C_ReceiveActorEndOverlap) == 0x000008, "Wrong size on BP_ACCM_C_ReceiveActorEndOverlap");
static_assert(offsetof(BP_ACCM_C_ReceiveActorEndOverlap, OtherActor) == 0x000000, "Member 'BP_ACCM_C_ReceiveActorEndOverlap::OtherActor' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.CreateBox
// 0x0030 (0x0030 - 0x0000)
struct BP_ACCM_C_CreateBox final
{
public:
	struct FTransform                             WorldTransform;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_CreateBox) == 0x000010, "Wrong alignment on BP_ACCM_C_CreateBox");
static_assert(sizeof(BP_ACCM_C_CreateBox) == 0x000030, "Wrong size on BP_ACCM_C_CreateBox");
static_assert(offsetof(BP_ACCM_C_CreateBox, WorldTransform) == 0x000000, "Member 'BP_ACCM_C_CreateBox::WorldTransform' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.SetBandLifetime
// 0x0004 (0x0004 - 0x0000)
struct BP_ACCM_C_SetBandLifetime final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ACCM_C_SetBandLifetime) == 0x000004, "Wrong alignment on BP_ACCM_C_SetBandLifetime");
static_assert(sizeof(BP_ACCM_C_SetBandLifetime) == 0x000004, "Wrong size on BP_ACCM_C_SetBandLifetime");
static_assert(offsetof(BP_ACCM_C_SetBandLifetime, LifeTime) == 0x000000, "Member 'BP_ACCM_C_SetBandLifetime::LifeTime' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.CreateBand
// 0x0030 (0x0030 - 0x0000)
struct BP_ACCM_C_CreateBand final
{
public:
	struct FTransform                             WorldTransform;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_CreateBand) == 0x000010, "Wrong alignment on BP_ACCM_C_CreateBand");
static_assert(sizeof(BP_ACCM_C_CreateBand) == 0x000030, "Wrong size on BP_ACCM_C_CreateBand");
static_assert(offsetof(BP_ACCM_C_CreateBand, WorldTransform) == 0x000000, "Member 'BP_ACCM_C_CreateBand::WorldTransform' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.OnActivateAbility
// 0x0001 (0x0001 - 0x0000)
struct BP_ACCM_C_OnActivateAbility final
{
public:
	bool                                          bEnableTempShieldEffect;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_OnActivateAbility) == 0x000001, "Wrong alignment on BP_ACCM_C_OnActivateAbility");
static_assert(sizeof(BP_ACCM_C_OnActivateAbility) == 0x000001, "Wrong size on BP_ACCM_C_OnActivateAbility");
static_assert(offsetof(BP_ACCM_C_OnActivateAbility, bEnableTempShieldEffect) == 0x000000, "Member 'BP_ACCM_C_OnActivateAbility::bEnableTempShieldEffect' has a wrong offset!");

// Function BP_ACCM.BP_ACCM_C.ExecuteUbergraph_BP_ACCM
// 0x0210 (0x0210 - 0x0000)
struct BP_ACCM_C_ExecuteUbergraph_BP_ACCM final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor_1;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_WorldTransform;                 // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_FixRotationForBox_FixedWorldTransform;    // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Lifetime;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_WorldTransform;                       // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEnableTempShieldEffect;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x00F0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UBoxComponent*                          CallFunc_AddComponent_ReturnValue;                 // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0128(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x01B0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character_2;            // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character_3;            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAllyWith_ReturnValue;                   // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAllyWith_ReturnValue_1;                 // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM) == 0x000010, "Wrong alignment on BP_ACCM_C_ExecuteUbergraph_BP_ACCM");
static_assert(sizeof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM) == 0x000210, "Wrong size on BP_ACCM_C_ExecuteUbergraph_BP_ACCM");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, EntryPoint) == 0x000000, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_OtherActor_1) == 0x000008, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_AsSolar_Character) == 0x000018, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_HasAuthority_ReturnValue) == 0x000021, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_OtherActor) == 0x000028, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_AsSolar_Character_1) == 0x000030, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_AsSolar_Character_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_HasAuthority_ReturnValue_1) == 0x000039, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_CustomEvent_WorldTransform) == 0x000040, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_CustomEvent_WorldTransform' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_FixRotationForBox_FixedWorldTransform) == 0x000070, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_FixRotationForBox_FixedWorldTransform' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_Lifetime) == 0x0000A0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_Lifetime' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_WorldTransform) == 0x0000B0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_WorldTransform' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_Event_bEnableTempShieldEffect) == 0x0000E0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_Event_bEnableTempShieldEffect' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, Temp_struct_Variable) == 0x0000F0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_AddComponent_ReturnValue) == 0x000120, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000128, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_GetTransform_ReturnValue) == 0x0001B0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_GetOwner_ReturnValue) == 0x0001E0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_GetOwner_ReturnValue_1) == 0x0001E8, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_AsSolar_Character_2) == 0x0001F0, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_AsSolar_Character_2' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_bSuccess_2) == 0x0001F8, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_AsSolar_Character_3) == 0x000200, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_AsSolar_Character_3' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, K2Node_DynamicCast_bSuccess_3) == 0x000208, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_IsAllyWith_ReturnValue) == 0x000209, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_IsAllyWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ACCM_C_ExecuteUbergraph_BP_ACCM, CallFunc_IsAllyWith_ReturnValue_1) == 0x00020A, "Member 'BP_ACCM_C_ExecuteUbergraph_BP_ACCM::CallFunc_IsAllyWith_ReturnValue_1' has a wrong offset!");

}

