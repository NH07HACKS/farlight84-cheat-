#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnLua

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function UnLua.UnLuaInterface.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UnLuaInterface_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaInterface_GetModuleName) == 0x000008, "Wrong alignment on UnLuaInterface_GetModuleName");
static_assert(sizeof(UnLuaInterface_GetModuleName) == 0x000010, "Wrong size on UnLuaInterface_GetModuleName");
static_assert(offsetof(UnLuaInterface_GetModuleName, ReturnValue) == 0x000000, "Member 'UnLuaInterface_GetModuleName::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaManager.InputAction
// 0x0018 (0x0018 - 0x0000)
struct UnLuaManager_InputAction final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_InputAction) == 0x000008, "Wrong alignment on UnLuaManager_InputAction");
static_assert(sizeof(UnLuaManager_InputAction) == 0x000018, "Wrong size on UnLuaManager_InputAction");
static_assert(offsetof(UnLuaManager_InputAction, Key) == 0x000000, "Member 'UnLuaManager_InputAction::Key' has a wrong offset!");

// Function UnLua.UnLuaManager.InputAxis
// 0x0004 (0x0004 - 0x0000)
struct UnLuaManager_InputAxis final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_InputAxis) == 0x000004, "Wrong alignment on UnLuaManager_InputAxis");
static_assert(sizeof(UnLuaManager_InputAxis) == 0x000004, "Wrong size on UnLuaManager_InputAxis");
static_assert(offsetof(UnLuaManager_InputAxis, AxisValue) == 0x000000, "Member 'UnLuaManager_InputAxis::AxisValue' has a wrong offset!");

// Function UnLua.UnLuaManager.InputGesture
// 0x0004 (0x0004 - 0x0000)
struct UnLuaManager_InputGesture final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_InputGesture) == 0x000004, "Wrong alignment on UnLuaManager_InputGesture");
static_assert(sizeof(UnLuaManager_InputGesture) == 0x000004, "Wrong size on UnLuaManager_InputGesture");
static_assert(offsetof(UnLuaManager_InputGesture, Value) == 0x000000, "Member 'UnLuaManager_InputGesture::Value' has a wrong offset!");

// Function UnLua.UnLuaManager.InputTouch
// 0x0010 (0x0010 - 0x0000)
struct UnLuaManager_InputTouch final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_InputTouch) == 0x000004, "Wrong alignment on UnLuaManager_InputTouch");
static_assert(sizeof(UnLuaManager_InputTouch) == 0x000010, "Wrong size on UnLuaManager_InputTouch");
static_assert(offsetof(UnLuaManager_InputTouch, FingerIndex) == 0x000000, "Member 'UnLuaManager_InputTouch::FingerIndex' has a wrong offset!");
static_assert(offsetof(UnLuaManager_InputTouch, Location) == 0x000004, "Member 'UnLuaManager_InputTouch::Location' has a wrong offset!");

// Function UnLua.UnLuaManager.InputVectorAxis
// 0x000C (0x000C - 0x0000)
struct UnLuaManager_InputVectorAxis final
{
public:
	struct FVector                                AxisValue;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_InputVectorAxis) == 0x000004, "Wrong alignment on UnLuaManager_InputVectorAxis");
static_assert(sizeof(UnLuaManager_InputVectorAxis) == 0x00000C, "Wrong size on UnLuaManager_InputVectorAxis");
static_assert(offsetof(UnLuaManager_InputVectorAxis, AxisValue) == 0x000000, "Member 'UnLuaManager_InputVectorAxis::AxisValue' has a wrong offset!");

// Function UnLua.UnLuaManager.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct UnLuaManager_OnActorDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_OnActorDestroyed) == 0x000008, "Wrong alignment on UnLuaManager_OnActorDestroyed");
static_assert(sizeof(UnLuaManager_OnActorDestroyed) == 0x000008, "Wrong size on UnLuaManager_OnActorDestroyed");
static_assert(offsetof(UnLuaManager_OnActorDestroyed, Actor) == 0x000000, "Member 'UnLuaManager_OnActorDestroyed::Actor' has a wrong offset!");

// Function UnLua.UnLuaManager.OnLatentActionCompleted
// 0x0004 (0x0004 - 0x0000)
struct UnLuaManager_OnLatentActionCompleted final
{
public:
	int32                                         LinkID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaManager_OnLatentActionCompleted) == 0x000004, "Wrong alignment on UnLuaManager_OnLatentActionCompleted");
static_assert(sizeof(UnLuaManager_OnLatentActionCompleted) == 0x000004, "Wrong size on UnLuaManager_OnLatentActionCompleted");
static_assert(offsetof(UnLuaManager_OnLatentActionCompleted, LinkID) == 0x000000, "Member 'UnLuaManager_OnLatentActionCompleted::LinkID' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.Simulate
// 0x0004 (0x0004 - 0x0000)
struct UnLuaPerformanceTestProxy_Simulate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_Simulate) == 0x000004, "Wrong alignment on UnLuaPerformanceTestProxy_Simulate");
static_assert(sizeof(UnLuaPerformanceTestProxy_Simulate) == 0x000004, "Wrong size on UnLuaPerformanceTestProxy_Simulate");
static_assert(offsetof(UnLuaPerformanceTestProxy_Simulate, DeltaTime) == 0x000000, "Member 'UnLuaPerformanceTestProxy_Simulate::DeltaTime' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.UpdateIndices
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_UpdateIndices final
{
public:
	TArray<int32>                                 NewIndices;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_UpdateIndices) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_UpdateIndices");
static_assert(sizeof(UnLuaPerformanceTestProxy_UpdateIndices) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_UpdateIndices");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdateIndices, NewIndices) == 0x000000, "Member 'UnLuaPerformanceTestProxy_UpdateIndices::NewIndices' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.UpdateMeshID
// 0x0008 (0x0008 - 0x0000)
struct UnLuaPerformanceTestProxy_UpdateMeshID final
{
public:
	int32                                         NewID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_UpdateMeshID) == 0x000004, "Wrong alignment on UnLuaPerformanceTestProxy_UpdateMeshID");
static_assert(sizeof(UnLuaPerformanceTestProxy_UpdateMeshID) == 0x000008, "Wrong size on UnLuaPerformanceTestProxy_UpdateMeshID");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdateMeshID, NewID) == 0x000000, "Member 'UnLuaPerformanceTestProxy_UpdateMeshID::NewID' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdateMeshID, ReturnValue) == 0x000004, "Member 'UnLuaPerformanceTestProxy_UpdateMeshID::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.UpdateMeshName
// 0x0020 (0x0020 - 0x0000)
struct UnLuaPerformanceTestProxy_UpdateMeshName final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_UpdateMeshName) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_UpdateMeshName");
static_assert(sizeof(UnLuaPerformanceTestProxy_UpdateMeshName) == 0x000020, "Wrong size on UnLuaPerformanceTestProxy_UpdateMeshName");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdateMeshName, NewName) == 0x000000, "Member 'UnLuaPerformanceTestProxy_UpdateMeshName::NewName' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdateMeshName, ReturnValue) == 0x000010, "Member 'UnLuaPerformanceTestProxy_UpdateMeshName::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.UpdatePositions
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_UpdatePositions final
{
public:
	TArray<struct FVector>                        NewPositions;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_UpdatePositions) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_UpdatePositions");
static_assert(sizeof(UnLuaPerformanceTestProxy_UpdatePositions) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_UpdatePositions");
static_assert(offsetof(UnLuaPerformanceTestProxy_UpdatePositions, NewPositions) == 0x000000, "Member 'UnLuaPerformanceTestProxy_UpdatePositions::NewPositions' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetCOM
// 0x000C (0x000C - 0x0000)
struct UnLuaPerformanceTestProxy_GetCOM final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetCOM) == 0x000004, "Wrong alignment on UnLuaPerformanceTestProxy_GetCOM");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetCOM) == 0x00000C, "Wrong size on UnLuaPerformanceTestProxy_GetCOM");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetCOM, ReturnValue) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetCOM::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetIndices
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_GetIndices final
{
public:
	TArray<int32>                                 OutIndices;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetIndices) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_GetIndices");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetIndices) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_GetIndices");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetIndices, OutIndices) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetIndices::OutIndices' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetMeshID
// 0x0004 (0x0004 - 0x0000)
struct UnLuaPerformanceTestProxy_GetMeshID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetMeshID) == 0x000004, "Wrong alignment on UnLuaPerformanceTestProxy_GetMeshID");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetMeshID) == 0x000004, "Wrong size on UnLuaPerformanceTestProxy_GetMeshID");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshID, ReturnValue) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetMeshID::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetMeshInfo
// 0x0060 (0x0060 - 0x0000)
struct UnLuaPerformanceTestProxy_GetMeshInfo final
{
public:
	int32                                         OutMeshID;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutMeshName;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCOM;                                            // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutIndices;                                        // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPositions;                                      // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPredictedPositions;                             // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetMeshInfo) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_GetMeshInfo");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetMeshInfo) == 0x000060, "Wrong size on UnLuaPerformanceTestProxy_GetMeshInfo");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutMeshID) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutMeshID' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutMeshName) == 0x000008, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutMeshName' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutCOM) == 0x000018, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutCOM' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutIndices) == 0x000028, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutIndices' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutPositions) == 0x000038, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutPositions' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, OutPredictedPositions) == 0x000048, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::OutPredictedPositions' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshInfo, ReturnValue) == 0x000058, "Member 'UnLuaPerformanceTestProxy_GetMeshInfo::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetMeshName
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_GetMeshName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetMeshName) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_GetMeshName");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetMeshName) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_GetMeshName");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetMeshName, ReturnValue) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetMeshName::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetPositions
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_GetPositions final
{
public:
	TArray<struct FVector>                        OutPositions;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetPositions) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_GetPositions");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetPositions) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_GetPositions");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetPositions, OutPositions) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetPositions::OutPositions' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.GetPredictedPositions
// 0x0010 (0x0010 - 0x0000)
struct UnLuaPerformanceTestProxy_GetPredictedPositions final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnLuaPerformanceTestProxy_GetPredictedPositions) == 0x000008, "Wrong alignment on UnLuaPerformanceTestProxy_GetPredictedPositions");
static_assert(sizeof(UnLuaPerformanceTestProxy_GetPredictedPositions) == 0x000010, "Wrong size on UnLuaPerformanceTestProxy_GetPredictedPositions");
static_assert(offsetof(UnLuaPerformanceTestProxy_GetPredictedPositions, ReturnValue) == 0x000000, "Member 'UnLuaPerformanceTestProxy_GetPredictedPositions::ReturnValue' has a wrong offset!");

// Function UnLua.UnLuaPerformanceTestProxy.Raycast
// 0x001C (0x001C - 0x0000)
struct UnLuaPerformanceTestProxy_Raycast final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnLuaPerformanceTestProxy_Raycast) == 0x000004, "Wrong alignment on UnLuaPerformanceTestProxy_Raycast");
static_assert(sizeof(UnLuaPerformanceTestProxy_Raycast) == 0x00001C, "Wrong size on UnLuaPerformanceTestProxy_Raycast");
static_assert(offsetof(UnLuaPerformanceTestProxy_Raycast, Origin) == 0x000000, "Member 'UnLuaPerformanceTestProxy_Raycast::Origin' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_Raycast, Direction) == 0x00000C, "Member 'UnLuaPerformanceTestProxy_Raycast::Direction' has a wrong offset!");
static_assert(offsetof(UnLuaPerformanceTestProxy_Raycast, ReturnValue) == 0x000018, "Member 'UnLuaPerformanceTestProxy_Raycast::ReturnValue' has a wrong offset!");

}

