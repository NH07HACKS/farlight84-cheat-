#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_AirlineCruise

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_AirlineCruise.BPC_AirlineCruise_C
// 0x00F0 (0x02D0 - 0x01E0)
class UBPC_AirlineCruise_C final : public UAirlineCruiseComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         AirlineID;                                         // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ASolarPlayerState*, struct FVector> EjectLocation;                                    // 0x01F0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ASolarPlayerState*, struct FVector> LandLocation;                                     // 0x0240(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ASolarCharacter*>                CruisePlayers;                                     // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ClearAllItems;                                     // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseSpecificAirlineData;                           // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAirlineData                           SpecificAirlineData;                               // 0x02A4(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsBoarded_0;                                       // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetPlayerLandLocation(const class ASolarPlayerState*& TargetPlayer, struct FVector* Location, bool* Succeed);
	void GetPlayerEjectLocation(const class ASolarPlayerState*& TargetPlayer, struct FVector* Location, bool* Succeed);
	void GetAirlineData_RealWorld(const struct FAirlineData& AirlineData, struct FVector2D* LineStart, struct FVector2D* LineEnd, struct FVector2D* JumpStart, struct FVector2D* JumpEnd, float* Speed, float* hight);
	void MiniMap2RealWorld(const struct FVector2D& JumpStart, const struct FVector2D& JumpEnd, const struct FVector2D& LineStart, const struct FVector2D& LineEnd, struct FVector2D* JumpStartR, struct FVector2D* JumpEndR, struct FVector2D* LineStartR, struct FVector2D* LineEndR);
	void OnPlayerEjectingStateChanged(ECharacterEjectState State, class ASolarCharacter* TargetCharacter);
	void SetSpecificAirlineData(const struct FAirlineData& AirlineData);
	void ReceiveOnBoarding(const TArray<class ASolarCharacter*>& Characters);
	void ExecuteUbergraph_BPC_AirlineCruise(int32 EntryPoint);
	bool GetPlayerForceJumped(const class ASolarPlayerState*& TargetPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_AirlineCruise_C">();
	}
	static class UBPC_AirlineCruise_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_AirlineCruise_C>();
	}
};
static_assert(alignof(UBPC_AirlineCruise_C) == 0x000008, "Wrong alignment on UBPC_AirlineCruise_C");
static_assert(sizeof(UBPC_AirlineCruise_C) == 0x0002D0, "Wrong size on UBPC_AirlineCruise_C");
static_assert(offsetof(UBPC_AirlineCruise_C, UberGraphFrame) == 0x0001E0, "Member 'UBPC_AirlineCruise_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, AirlineID) == 0x0001E8, "Member 'UBPC_AirlineCruise_C::AirlineID' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, EjectLocation) == 0x0001F0, "Member 'UBPC_AirlineCruise_C::EjectLocation' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, LandLocation) == 0x000240, "Member 'UBPC_AirlineCruise_C::LandLocation' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, CruisePlayers) == 0x000290, "Member 'UBPC_AirlineCruise_C::CruisePlayers' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, ClearAllItems) == 0x0002A0, "Member 'UBPC_AirlineCruise_C::ClearAllItems' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, bUseSpecificAirlineData) == 0x0002A1, "Member 'UBPC_AirlineCruise_C::bUseSpecificAirlineData' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, SpecificAirlineData) == 0x0002A4, "Member 'UBPC_AirlineCruise_C::SpecificAirlineData' has a wrong offset!");
static_assert(offsetof(UBPC_AirlineCruise_C, IsBoarded_0) == 0x0002CC, "Member 'UBPC_AirlineCruise_C::IsBoarded_0' has a wrong offset!");

}

