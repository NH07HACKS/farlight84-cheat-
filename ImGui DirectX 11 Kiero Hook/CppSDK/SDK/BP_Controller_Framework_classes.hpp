#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_Framework

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Controller_Framework.BP_Controller_Framework_C
// 0x0050 (0x1648 - 0x15F8)
class ABP_Controller_Framework_C : public ASCMPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FPoseSnapshot                          Snapshot;                                          // 0x1600(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TempMaxDist;                                       // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempMaxIndex;                                      // 0x163C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnableAiPalRate;                                   // 0x1640(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void MeerkatTriggerReport(const class FString& Value);
	void UpdateAiPalRate(int32 Rate);
	void OnRep_EnableAiPalRate();
	void OnNotifyLockPlayer(const class FString& Name_0);
	void RequestNotifyLockPlayer(const class FString& Name_0);
	void ClientNotifyLockPlayer(const class FString& Name_0);
	void RpcClientRepAceStatusToServer(const class FString& Value);
	void ExecuteUbergraph_BP_Controller_Framework(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Controller_Framework_C">();
	}
	static class ABP_Controller_Framework_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Controller_Framework_C>();
	}
};
static_assert(alignof(ABP_Controller_Framework_C) == 0x000008, "Wrong alignment on ABP_Controller_Framework_C");
static_assert(sizeof(ABP_Controller_Framework_C) == 0x001648, "Wrong size on ABP_Controller_Framework_C");
static_assert(offsetof(ABP_Controller_Framework_C, UberGraphFrame) == 0x0015F8, "Member 'ABP_Controller_Framework_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Controller_Framework_C, Snapshot) == 0x001600, "Member 'ABP_Controller_Framework_C::Snapshot' has a wrong offset!");
static_assert(offsetof(ABP_Controller_Framework_C, TempMaxDist) == 0x001638, "Member 'ABP_Controller_Framework_C::TempMaxDist' has a wrong offset!");
static_assert(offsetof(ABP_Controller_Framework_C, TempMaxIndex) == 0x00163C, "Member 'ABP_Controller_Framework_C::TempMaxIndex' has a wrong offset!");
static_assert(offsetof(ABP_Controller_Framework_C, EnableAiPalRate) == 0x001640, "Member 'ABP_Controller_Framework_C::EnableAiPalRate' has a wrong offset!");

}

