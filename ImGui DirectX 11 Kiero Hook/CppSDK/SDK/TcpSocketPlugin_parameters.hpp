#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TcpSocketPlugin

#include "Basic.hpp"


namespace SDK::Params
{

// Function TcpSocketPlugin.TcpSocketConnection.Concat_BytesBytes
// 0x0030 (0x0030 - 0x0000)
struct TcpSocketConnection_Concat_BytesBytes final
{
public:
	TArray<uint8>                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Concat_BytesBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Concat_BytesBytes");
static_assert(sizeof(TcpSocketConnection_Concat_BytesBytes) == 0x000030, "Wrong size on TcpSocketConnection_Concat_BytesBytes");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, A) == 0x000000, "Member 'TcpSocketConnection_Concat_BytesBytes::A' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, B) == 0x000010, "Member 'TcpSocketConnection_Concat_BytesBytes::B' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, ReturnValue) == 0x000020, "Member 'TcpSocketConnection_Concat_BytesBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Conv_ByteToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_ByteToBytes final
{
public:
	uint8                                         InByte;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_ByteToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_ByteToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_ByteToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_ByteToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_ByteToBytes, InByte) == 0x000000, "Member 'TcpSocketConnection_Conv_ByteToBytes::InByte' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_ByteToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_ByteToBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Conv_FloatToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_FloatToBytes final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_FloatToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_FloatToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_FloatToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_FloatToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_FloatToBytes, InFloat) == 0x000000, "Member 'TcpSocketConnection_Conv_FloatToBytes::InFloat' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_FloatToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_FloatToBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Conv_IntToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_IntToBytes final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_IntToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_IntToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_IntToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_IntToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_IntToBytes, inInt) == 0x000000, "Member 'TcpSocketConnection_Conv_IntToBytes::inInt' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_IntToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_IntToBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Conv_StringToBytes
// 0x0020 (0x0020 - 0x0000)
struct TcpSocketConnection_Conv_StringToBytes final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_StringToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_StringToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_StringToBytes) == 0x000020, "Wrong size on TcpSocketConnection_Conv_StringToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_StringToBytes, InStr) == 0x000000, "Member 'TcpSocketConnection_Conv_StringToBytes::InStr' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_StringToBytes, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Conv_StringToBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Message_ReadByte
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadByte final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadByte) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadByte");
static_assert(sizeof(TcpSocketConnection_Message_ReadByte) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadByte");
static_assert(offsetof(TcpSocketConnection_Message_ReadByte, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadByte::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadByte, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadByte::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Message_ReadBytes
// 0x0030 (0x0030 - 0x0000)
struct TcpSocketConnection_Message_ReadBytes final
{
public:
	int32                                         NumBytes;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Message;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadBytes");
static_assert(sizeof(TcpSocketConnection_Message_ReadBytes) == 0x000030, "Wrong size on TcpSocketConnection_Message_ReadBytes");
static_assert(offsetof(TcpSocketConnection_Message_ReadBytes, NumBytes) == 0x000000, "Member 'TcpSocketConnection_Message_ReadBytes::NumBytes' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadBytes, Message) == 0x000008, "Member 'TcpSocketConnection_Message_ReadBytes::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadBytes, ReturnArray) == 0x000018, "Member 'TcpSocketConnection_Message_ReadBytes::ReturnArray' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadBytes, ReturnValue) == 0x000028, "Member 'TcpSocketConnection_Message_ReadBytes::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Message_ReadFloat
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadFloat final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadFloat) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadFloat");
static_assert(sizeof(TcpSocketConnection_Message_ReadFloat) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadFloat");
static_assert(offsetof(TcpSocketConnection_Message_ReadFloat, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadFloat::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadFloat, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadFloat::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Message_ReadInt
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadInt final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadInt) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadInt");
static_assert(sizeof(TcpSocketConnection_Message_ReadInt) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadInt");
static_assert(offsetof(TcpSocketConnection_Message_ReadInt, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadInt::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadInt, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadInt::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Message_ReadString
// 0x0028 (0x0028 - 0x0000)
struct TcpSocketConnection_Message_ReadString final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringLength;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Message_ReadString) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadString");
static_assert(sizeof(TcpSocketConnection_Message_ReadString) == 0x000028, "Wrong size on TcpSocketConnection_Message_ReadString");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadString::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, StringLength) == 0x000010, "Member 'TcpSocketConnection_Message_ReadString::StringLength' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, ReturnValue) == 0x000018, "Member 'TcpSocketConnection_Message_ReadString::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Connect
// 0x0048 (0x0048 - 0x0000)
struct TcpSocketConnection_Connect final
{
public:
	class FString                                 ipAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId)>           OnDisconnected;                                    // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId)>           OnConnected;                                       // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ConnectionId, TArray<uint8>& Message)> OnMessageReceived;                   // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ConnectionId;                                      // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Connect) == 0x000008, "Wrong alignment on TcpSocketConnection_Connect");
static_assert(sizeof(TcpSocketConnection_Connect) == 0x000048, "Wrong size on TcpSocketConnection_Connect");
static_assert(offsetof(TcpSocketConnection_Connect, ipAddress) == 0x000000, "Member 'TcpSocketConnection_Connect::ipAddress' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, Port) == 0x000010, "Member 'TcpSocketConnection_Connect::Port' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnDisconnected) == 0x000014, "Member 'TcpSocketConnection_Connect::OnDisconnected' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnConnected) == 0x000024, "Member 'TcpSocketConnection_Connect::OnConnected' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnMessageReceived) == 0x000034, "Member 'TcpSocketConnection_Connect::OnMessageReceived' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, ConnectionId) == 0x000044, "Member 'TcpSocketConnection_Connect::ConnectionId' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.Disconnect
// 0x0004 (0x0004 - 0x0000)
struct TcpSocketConnection_Disconnect final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Disconnect) == 0x000004, "Wrong alignment on TcpSocketConnection_Disconnect");
static_assert(sizeof(TcpSocketConnection_Disconnect) == 0x000004, "Wrong size on TcpSocketConnection_Disconnect");
static_assert(offsetof(TcpSocketConnection_Disconnect, ConnectionId) == 0x000000, "Member 'TcpSocketConnection_Disconnect::ConnectionId' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.isConnected
// 0x0008 (0x0008 - 0x0000)
struct TcpSocketConnection_isConnected final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_isConnected) == 0x000004, "Wrong alignment on TcpSocketConnection_isConnected");
static_assert(sizeof(TcpSocketConnection_isConnected) == 0x000008, "Wrong size on TcpSocketConnection_isConnected");
static_assert(offsetof(TcpSocketConnection_isConnected, ConnectionId) == 0x000000, "Member 'TcpSocketConnection_isConnected::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_isConnected, ReturnValue) == 0x000004, "Member 'TcpSocketConnection_isConnected::ReturnValue' has a wrong offset!");

// Function TcpSocketPlugin.TcpSocketConnection.SendData
// 0x0020 (0x0020 - 0x0000)
struct TcpSocketConnection_SendData final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DataToSend;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_SendData) == 0x000008, "Wrong alignment on TcpSocketConnection_SendData");
static_assert(sizeof(TcpSocketConnection_SendData) == 0x000020, "Wrong size on TcpSocketConnection_SendData");
static_assert(offsetof(TcpSocketConnection_SendData, ConnectionId) == 0x000000, "Member 'TcpSocketConnection_SendData::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_SendData, DataToSend) == 0x000008, "Member 'TcpSocketConnection_SendData::DataToSend' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_SendData, ReturnValue) == 0x000018, "Member 'TcpSocketConnection_SendData::ReturnValue' has a wrong offset!");

}

