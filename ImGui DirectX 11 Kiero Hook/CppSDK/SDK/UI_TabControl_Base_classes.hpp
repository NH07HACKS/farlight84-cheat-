#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_TabControl_Base

#include "Basic.hpp"

#include "S_TabItem_structs.hpp"
#include "Engine_structs.hpp"
#include "E_TabStyle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_TabLevel_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_TabControl_Base.UI_TabControl_Base_C
// 0x0120 (0x0710 - 0x05F0)
class UUI_TabControl_Base_C : public USolarUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_TabStyle                                    Style;                                             // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        BindSwitcher;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DefaultSelection;                                  // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, struct FS_TabItem>        QueryItem_base;                                    // 0x0618(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, class UBP_TabItemObj_C*>  QueryItem;                                         // 0x0668(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const class FString& Key, int32 Index)> OnActiveTabChanged;        // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UListView*                              BindList;                                          // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ItemDefaultSize;                                   // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_TabItem>                     PresetItems;                                       // 0x06D8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FS_TabItem>                     Items;                                             // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class FString                                 CurrentSelection;                                  // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDisableScroll;                                   // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnableController;                                // 0x0709(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_TabLevel                                    TabLevel;                                          // 0x070A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomLoad;                                       // 0x070B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CallPreItemsNumChange(int32 ItemsNum, struct FVector2D* Size);
	void PreItemsNumChange(int32 ItemsNum, struct FVector2D* Size);
	void SetIsControllerEnabled(bool IsEnable);
	void Onitemschane();
	void GetBindListView(class UListView** NewParam);
	void SetSelectedIndexPrev();
	void SetSelectedIndexNext();
	void AddItemByItemData(const struct FS_TabItem& TabData, bool* Success);
	void AddSizedItem(const class FString& Key, const class FString& Text, class UObject* Icon, const struct FS_HintData& HintDotData, class UWidget* LinkWidget, const struct FVector2D& Szie, bool* Success);
	void ReviseItem(const class FString& Key, const class FString& Text, class UObject* Icon, const struct FS_HintData& HintDotData, class UWidget* LinkWidget, bool* Success);
	void RefreshAllItems();
	void InsertItem(int32 Index_0, const class FString& Key, const class FString& Text, class UObject* Icon, const struct FS_HintData& HintDotData, class UWidget* LinkWidget);
	void AddItemByPreset(const struct FS_TabItem& S_TabItem);
	void BindChildWidget();
	void SetBindWidget(class UListView** BindList_0);
	void ScrollToItem(const class FString& Key, bool Active, const float InScrollOffset);
	void ClearItems();
	void SetStyle();
	void GetKeys(TArray<class FString>* Keys);
	void AddPresetItem();
	void SetActiveTab(const class FString& Key, bool* Success);
	void GetLinkedWidgetByKey(const class FString& Key, class UWidget** Widget);
	void RemoveItem(const class FString& Key, bool* Success);
	void AddItem(const class FString& Key, const class FString& Text, class UObject* Icon, const struct FS_HintData& HintDotData, class UWidget* LinkWidget, bool* Success);
	void OnItemClicked(class UObject* Item);
	void OnItemSelected(class UObject* Item, bool bIsSelected);
	void BP_OnItemIsHoveredChanged_Event(class UObject* Item, bool bIsHovered);
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_UI_TabControl_Base(int32 EntryPoint);
	void Destruct();
	void OnDeinitialize();
	void OnInitialized();
	void Construct();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_TabControl_Base_C">();
	}
	static class UUI_TabControl_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_TabControl_Base_C>();
	}
};
static_assert(alignof(UUI_TabControl_Base_C) == 0x000008, "Wrong alignment on UUI_TabControl_Base_C");
static_assert(sizeof(UUI_TabControl_Base_C) == 0x000710, "Wrong size on UUI_TabControl_Base_C");
static_assert(offsetof(UUI_TabControl_Base_C, UberGraphFrame) == 0x0005F0, "Member 'UUI_TabControl_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, Style) == 0x0005F8, "Member 'UUI_TabControl_Base_C::Style' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, BindSwitcher) == 0x000600, "Member 'UUI_TabControl_Base_C::BindSwitcher' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, DefaultSelection) == 0x000608, "Member 'UUI_TabControl_Base_C::DefaultSelection' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, QueryItem_base) == 0x000618, "Member 'UUI_TabControl_Base_C::QueryItem_base' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, QueryItem) == 0x000668, "Member 'UUI_TabControl_Base_C::QueryItem' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, OnActiveTabChanged) == 0x0006B8, "Member 'UUI_TabControl_Base_C::OnActiveTabChanged' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, BindList) == 0x0006C8, "Member 'UUI_TabControl_Base_C::BindList' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, ItemDefaultSize) == 0x0006D0, "Member 'UUI_TabControl_Base_C::ItemDefaultSize' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, PresetItems) == 0x0006D8, "Member 'UUI_TabControl_Base_C::PresetItems' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, Items) == 0x0006E8, "Member 'UUI_TabControl_Base_C::Items' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, CurrentSelection) == 0x0006F8, "Member 'UUI_TabControl_Base_C::CurrentSelection' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, IsDisableScroll) == 0x000708, "Member 'UUI_TabControl_Base_C::IsDisableScroll' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, IsEnableController) == 0x000709, "Member 'UUI_TabControl_Base_C::IsEnableController' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, TabLevel) == 0x00070A, "Member 'UUI_TabControl_Base_C::TabLevel' has a wrong offset!");
static_assert(offsetof(UUI_TabControl_Base_C, bCustomLoad) == 0x00070B, "Member 'UUI_TabControl_Base_C::bCustomLoad' has a wrong offset!");

}

