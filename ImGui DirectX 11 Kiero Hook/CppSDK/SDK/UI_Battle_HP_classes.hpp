#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Battle_HP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Battle_HP.UI_Battle_HP_C
// 0x0118 (0x08B8 - 0x07A0)
class UUI_Battle_HP_C final : public UBattleHPWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               HP;                                                // 0x07A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Bg_Black;                                      // 0x07B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_HP_Bg;                                         // 0x07B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_HP;                                           // 0x07C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Size_W;                                            // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Armor_H;                                           // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Space;                                             // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HP_H;                                              // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldSpacing;                                     // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HPSpaceing;                                        // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBattleHPUseDynamicAtlas;                          // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E1[0x3];                                      // 0x07E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmorOffsetRight;                                  // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, float>                    HpProgressParams;                                  // 0x07E8(0x0050)(Edit, BlueprintVisible)
	TMap<class FString, float>                    ShieldProgressParams;                              // 0x0838(0x0050)(Edit, BlueprintVisible)
	float                                         HP_H_PC;                                           // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Space_PC;                                          // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Armor_H_PC;                                        // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              HP_BG;                                             // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_895[0x3];                                      // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ShieldBgColor;                                     // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HPBgColor;                                         // 0x08A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateHpBoardColor(const struct FLinearColor& ShieldBgColor_0, const struct FLinearColor& HPBgColor_0);
	void SetValues(int32 Size_W_0, int32 Armor_H_0, int32 Space_0, int32 HP_H_0);
	void SetHPBarType(int32 SetHPBarType_0);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void ExecuteUbergraph_UI_Battle_HP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Battle_HP_C">();
	}
	static class UUI_Battle_HP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Battle_HP_C>();
	}
};
static_assert(alignof(UUI_Battle_HP_C) == 0x000008, "Wrong alignment on UUI_Battle_HP_C");
static_assert(sizeof(UUI_Battle_HP_C) == 0x0008B8, "Wrong size on UUI_Battle_HP_C");
static_assert(offsetof(UUI_Battle_HP_C, UberGraphFrame) == 0x0007A0, "Member 'UUI_Battle_HP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HP) == 0x0007A8, "Member 'UUI_Battle_HP_C::HP' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Img_Bg_Black) == 0x0007B0, "Member 'UUI_Battle_HP_C::Img_Bg_Black' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Img_HP_Bg) == 0x0007B8, "Member 'UUI_Battle_HP_C::Img_HP_Bg' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Size_HP) == 0x0007C0, "Member 'UUI_Battle_HP_C::Size_HP' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Size_W) == 0x0007C8, "Member 'UUI_Battle_HP_C::Size_W' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Armor_H) == 0x0007CC, "Member 'UUI_Battle_HP_C::Armor_H' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Space) == 0x0007D0, "Member 'UUI_Battle_HP_C::Space' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HP_H) == 0x0007D4, "Member 'UUI_Battle_HP_C::HP_H' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, ShieldSpacing) == 0x0007D8, "Member 'UUI_Battle_HP_C::ShieldSpacing' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HPSpaceing) == 0x0007DC, "Member 'UUI_Battle_HP_C::HPSpaceing' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, bBattleHPUseDynamicAtlas) == 0x0007E0, "Member 'UUI_Battle_HP_C::bBattleHPUseDynamicAtlas' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, ArmorOffsetRight) == 0x0007E4, "Member 'UUI_Battle_HP_C::ArmorOffsetRight' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HpProgressParams) == 0x0007E8, "Member 'UUI_Battle_HP_C::HpProgressParams' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, ShieldProgressParams) == 0x000838, "Member 'UUI_Battle_HP_C::ShieldProgressParams' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HP_H_PC) == 0x000888, "Member 'UUI_Battle_HP_C::HP_H_PC' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Space_PC) == 0x00088C, "Member 'UUI_Battle_HP_C::Space_PC' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, Armor_H_PC) == 0x000890, "Member 'UUI_Battle_HP_C::Armor_H_PC' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HP_BG) == 0x000894, "Member 'UUI_Battle_HP_C::HP_BG' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, ShieldBgColor) == 0x000898, "Member 'UUI_Battle_HP_C::ShieldBgColor' has a wrong offset!");
static_assert(offsetof(UUI_Battle_HP_C, HPBgColor) == 0x0008A8, "Member 'UUI_Battle_HP_C::HPBgColor' has a wrong offset!");

}

