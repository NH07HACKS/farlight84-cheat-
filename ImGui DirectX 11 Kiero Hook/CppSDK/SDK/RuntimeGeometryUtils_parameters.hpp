#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeGeometryUtils

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RuntimeGeometryUtils_structs.hpp"


namespace SDK::Params
{

// Function RuntimeGeometryUtils.SolarBaseDynamicMeshComponent.GetTriangleCount
// 0x0004 (0x0004 - 0x0000)
struct SolarBaseDynamicMeshComponent_GetTriangleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarBaseDynamicMeshComponent_GetTriangleCount) == 0x000004, "Wrong alignment on SolarBaseDynamicMeshComponent_GetTriangleCount");
static_assert(sizeof(SolarBaseDynamicMeshComponent_GetTriangleCount) == 0x000004, "Wrong size on SolarBaseDynamicMeshComponent_GetTriangleCount");
static_assert(offsetof(SolarBaseDynamicMeshComponent_GetTriangleCount, ReturnValue) == 0x000000, "Member 'SolarBaseDynamicMeshComponent_GetTriangleCount::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.SolarBaseDynamicMeshComponent.UpdateMeshWithTag
// 0x0008 (0x0008 - 0x0000)
struct SolarBaseDynamicMeshComponent_UpdateMeshWithTag final
{
public:
	class FName                                   NewTag;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarBaseDynamicMeshComponent_UpdateMeshWithTag) == 0x000004, "Wrong alignment on SolarBaseDynamicMeshComponent_UpdateMeshWithTag");
static_assert(sizeof(SolarBaseDynamicMeshComponent_UpdateMeshWithTag) == 0x000008, "Wrong size on SolarBaseDynamicMeshComponent_UpdateMeshWithTag");
static_assert(offsetof(SolarBaseDynamicMeshComponent_UpdateMeshWithTag, NewTag) == 0x000000, "Member 'SolarBaseDynamicMeshComponent_UpdateMeshWithTag::NewTag' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.BooleanWithMesh
// 0x0010 (0x0010 - 0x0000)
struct DynamicMeshBaseActor_BooleanWithMesh final
{
public:
	class ADynamicMeshBaseActor*                  OtherMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicMeshActorBooleanOperation             Operation;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicMeshBaseActor_BooleanWithMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_BooleanWithMesh");
static_assert(sizeof(DynamicMeshBaseActor_BooleanWithMesh) == 0x000010, "Wrong size on DynamicMeshBaseActor_BooleanWithMesh");
static_assert(offsetof(DynamicMeshBaseActor_BooleanWithMesh, OtherMesh) == 0x000000, "Member 'DynamicMeshBaseActor_BooleanWithMesh::OtherMesh' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_BooleanWithMesh, Operation) == 0x000008, "Member 'DynamicMeshBaseActor_BooleanWithMesh::Operation' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.ContainsPoint
// 0x0014 (0x0014 - 0x0000)
struct DynamicMeshBaseActor_ContainsPoint final
{
public:
	struct FVector                                WorldPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicMeshBaseActor_ContainsPoint) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_ContainsPoint");
static_assert(sizeof(DynamicMeshBaseActor_ContainsPoint) == 0x000014, "Wrong size on DynamicMeshBaseActor_ContainsPoint");
static_assert(offsetof(DynamicMeshBaseActor_ContainsPoint, WorldPoint) == 0x000000, "Member 'DynamicMeshBaseActor_ContainsPoint::WorldPoint' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_ContainsPoint, WindingThreshold) == 0x00000C, "Member 'DynamicMeshBaseActor_ContainsPoint::WindingThreshold' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_ContainsPoint, ReturnValue) == 0x000010, "Member 'DynamicMeshBaseActor_ContainsPoint::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.CopyFromMesh
// 0x0010 (0x0010 - 0x0000)
struct DynamicMeshBaseActor_CopyFromMesh final
{
public:
	class ADynamicMeshBaseActor*                  OtherMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecomputeNormals;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicMeshBaseActor_CopyFromMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_CopyFromMesh");
static_assert(sizeof(DynamicMeshBaseActor_CopyFromMesh) == 0x000010, "Wrong size on DynamicMeshBaseActor_CopyFromMesh");
static_assert(offsetof(DynamicMeshBaseActor_CopyFromMesh, OtherMesh) == 0x000000, "Member 'DynamicMeshBaseActor_CopyFromMesh::OtherMesh' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_CopyFromMesh, bRecomputeNormals) == 0x000008, "Member 'DynamicMeshBaseActor_CopyFromMesh::bRecomputeNormals' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.DistanceToPoint
// 0x002C (0x002C - 0x0000)
struct DynamicMeshBaseActor_DistanceToPoint final
{
public:
	struct FVector                                WorldPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NearestMeshWorldPoint;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NearestTriangle;                                   // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TriBaryCoords;                                     // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_DistanceToPoint) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_DistanceToPoint");
static_assert(sizeof(DynamicMeshBaseActor_DistanceToPoint) == 0x00002C, "Wrong size on DynamicMeshBaseActor_DistanceToPoint");
static_assert(offsetof(DynamicMeshBaseActor_DistanceToPoint, WorldPoint) == 0x000000, "Member 'DynamicMeshBaseActor_DistanceToPoint::WorldPoint' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_DistanceToPoint, NearestMeshWorldPoint) == 0x00000C, "Member 'DynamicMeshBaseActor_DistanceToPoint::NearestMeshWorldPoint' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_DistanceToPoint, NearestTriangle) == 0x000018, "Member 'DynamicMeshBaseActor_DistanceToPoint::NearestTriangle' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_DistanceToPoint, TriBaryCoords) == 0x00001C, "Member 'DynamicMeshBaseActor_DistanceToPoint::TriBaryCoords' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_DistanceToPoint, ReturnValue) == 0x000028, "Member 'DynamicMeshBaseActor_DistanceToPoint::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.GetTriangleCount
// 0x0004 (0x0004 - 0x0000)
struct DynamicMeshBaseActor_GetTriangleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_GetTriangleCount) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_GetTriangleCount");
static_assert(sizeof(DynamicMeshBaseActor_GetTriangleCount) == 0x000004, "Wrong size on DynamicMeshBaseActor_GetTriangleCount");
static_assert(offsetof(DynamicMeshBaseActor_GetTriangleCount, ReturnValue) == 0x000000, "Member 'DynamicMeshBaseActor_GetTriangleCount::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.ImportMesh
// 0x0018 (0x0018 - 0x0000)
struct DynamicMeshBaseActor_ImportMesh final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipOrientation;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecomputeNormals;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicMeshBaseActor_ImportMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_ImportMesh");
static_assert(sizeof(DynamicMeshBaseActor_ImportMesh) == 0x000018, "Wrong size on DynamicMeshBaseActor_ImportMesh");
static_assert(offsetof(DynamicMeshBaseActor_ImportMesh, Path) == 0x000000, "Member 'DynamicMeshBaseActor_ImportMesh::Path' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_ImportMesh, bFlipOrientation) == 0x000010, "Member 'DynamicMeshBaseActor_ImportMesh::bFlipOrientation' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_ImportMesh, bRecomputeNormals) == 0x000011, "Member 'DynamicMeshBaseActor_ImportMesh::bRecomputeNormals' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_ImportMesh, ReturnValue) == 0x000012, "Member 'DynamicMeshBaseActor_ImportMesh::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.IntersectRay
// 0x0040 (0x0040 - 0x0000)
struct DynamicMeshBaseActor_IntersectRay final
{
public:
	struct FVector                                RayOrigin;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldHitPoint;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NearestTriangle;                                   // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TriBaryCoords;                                     // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicMeshBaseActor_IntersectRay) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_IntersectRay");
static_assert(sizeof(DynamicMeshBaseActor_IntersectRay) == 0x000040, "Wrong size on DynamicMeshBaseActor_IntersectRay");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, RayOrigin) == 0x000000, "Member 'DynamicMeshBaseActor_IntersectRay::RayOrigin' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, RayDirection) == 0x00000C, "Member 'DynamicMeshBaseActor_IntersectRay::RayDirection' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, WorldHitPoint) == 0x000018, "Member 'DynamicMeshBaseActor_IntersectRay::WorldHitPoint' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, HitDistance) == 0x000024, "Member 'DynamicMeshBaseActor_IntersectRay::HitDistance' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, NearestTriangle) == 0x000028, "Member 'DynamicMeshBaseActor_IntersectRay::NearestTriangle' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, TriBaryCoords) == 0x00002C, "Member 'DynamicMeshBaseActor_IntersectRay::TriBaryCoords' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, MaxDistance) == 0x000038, "Member 'DynamicMeshBaseActor_IntersectRay::MaxDistance' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_IntersectRay, ReturnValue) == 0x00003C, "Member 'DynamicMeshBaseActor_IntersectRay::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.IntersectWithMesh
// 0x0008 (0x0008 - 0x0000)
struct DynamicMeshBaseActor_IntersectWithMesh final
{
public:
	class ADynamicMeshBaseActor*                  OtherMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_IntersectWithMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_IntersectWithMesh");
static_assert(sizeof(DynamicMeshBaseActor_IntersectWithMesh) == 0x000008, "Wrong size on DynamicMeshBaseActor_IntersectWithMesh");
static_assert(offsetof(DynamicMeshBaseActor_IntersectWithMesh, OtherMesh) == 0x000000, "Member 'DynamicMeshBaseActor_IntersectWithMesh::OtherMesh' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.NearestPoint
// 0x0018 (0x0018 - 0x0000)
struct DynamicMeshBaseActor_NearestPoint final
{
public:
	struct FVector                                WorldPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_NearestPoint) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_NearestPoint");
static_assert(sizeof(DynamicMeshBaseActor_NearestPoint) == 0x000018, "Wrong size on DynamicMeshBaseActor_NearestPoint");
static_assert(offsetof(DynamicMeshBaseActor_NearestPoint, WorldPoint) == 0x000000, "Member 'DynamicMeshBaseActor_NearestPoint::WorldPoint' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_NearestPoint, ReturnValue) == 0x00000C, "Member 'DynamicMeshBaseActor_NearestPoint::ReturnValue' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.SimplifyMeshToTriCount
// 0x0004 (0x0004 - 0x0000)
struct DynamicMeshBaseActor_SimplifyMeshToTriCount final
{
public:
	int32                                         TargetTriangleCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_SimplifyMeshToTriCount) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_SimplifyMeshToTriCount");
static_assert(sizeof(DynamicMeshBaseActor_SimplifyMeshToTriCount) == 0x000004, "Wrong size on DynamicMeshBaseActor_SimplifyMeshToTriCount");
static_assert(offsetof(DynamicMeshBaseActor_SimplifyMeshToTriCount, TargetTriangleCount) == 0x000000, "Member 'DynamicMeshBaseActor_SimplifyMeshToTriCount::TargetTriangleCount' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.SolidifyMesh
// 0x0008 (0x0008 - 0x0000)
struct DynamicMeshBaseActor_SolidifyMesh final
{
public:
	int32                                         VoxelResolution;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_SolidifyMesh) == 0x000004, "Wrong alignment on DynamicMeshBaseActor_SolidifyMesh");
static_assert(sizeof(DynamicMeshBaseActor_SolidifyMesh) == 0x000008, "Wrong size on DynamicMeshBaseActor_SolidifyMesh");
static_assert(offsetof(DynamicMeshBaseActor_SolidifyMesh, VoxelResolution) == 0x000000, "Member 'DynamicMeshBaseActor_SolidifyMesh::VoxelResolution' has a wrong offset!");
static_assert(offsetof(DynamicMeshBaseActor_SolidifyMesh, WindingThreshold) == 0x000004, "Member 'DynamicMeshBaseActor_SolidifyMesh::WindingThreshold' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.SubtractMesh
// 0x0008 (0x0008 - 0x0000)
struct DynamicMeshBaseActor_SubtractMesh final
{
public:
	class ADynamicMeshBaseActor*                  OtherMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_SubtractMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_SubtractMesh");
static_assert(sizeof(DynamicMeshBaseActor_SubtractMesh) == 0x000008, "Wrong size on DynamicMeshBaseActor_SubtractMesh");
static_assert(offsetof(DynamicMeshBaseActor_SubtractMesh, OtherMesh) == 0x000000, "Member 'DynamicMeshBaseActor_SubtractMesh::OtherMesh' has a wrong offset!");

// Function RuntimeGeometryUtils.DynamicMeshBaseActor.UnionWithMesh
// 0x0008 (0x0008 - 0x0000)
struct DynamicMeshBaseActor_UnionWithMesh final
{
public:
	class ADynamicMeshBaseActor*                  OtherMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMeshBaseActor_UnionWithMesh) == 0x000008, "Wrong alignment on DynamicMeshBaseActor_UnionWithMesh");
static_assert(sizeof(DynamicMeshBaseActor_UnionWithMesh) == 0x000008, "Wrong size on DynamicMeshBaseActor_UnionWithMesh");
static_assert(offsetof(DynamicMeshBaseActor_UnionWithMesh, OtherMesh) == 0x000000, "Member 'DynamicMeshBaseActor_UnionWithMesh::OtherMesh' has a wrong offset!");

}

