#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIParticleSystem

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UIParticleSystem.ParticleSystemWidget
// 0x0030 (0x0170 - 0x0140)
class UParticleSystemWidget final : public UWidget
{
public:
	class UParticleSystem*                        ParticleSystemTemplate;                            // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReactivate;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveSysWhenInit;                                // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               WorldParticleComponent;                            // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 WorldParticleActor;                                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateParticles(bool bActive, bool bReset);
	void SetReactivate(bool bActivateAndReset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleSystemWidget">();
	}
	static class UParticleSystemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSystemWidget>();
	}
};
static_assert(alignof(UParticleSystemWidget) == 0x000008, "Wrong alignment on UParticleSystemWidget");
static_assert(sizeof(UParticleSystemWidget) == 0x000170, "Wrong size on UParticleSystemWidget");
static_assert(offsetof(UParticleSystemWidget, ParticleSystemTemplate) == 0x000140, "Member 'UParticleSystemWidget::ParticleSystemTemplate' has a wrong offset!");
static_assert(offsetof(UParticleSystemWidget, bReactivate) == 0x000148, "Member 'UParticleSystemWidget::bReactivate' has a wrong offset!");
static_assert(offsetof(UParticleSystemWidget, bActiveSysWhenInit) == 0x000149, "Member 'UParticleSystemWidget::bActiveSysWhenInit' has a wrong offset!");
static_assert(offsetof(UParticleSystemWidget, WorldParticleComponent) == 0x000150, "Member 'UParticleSystemWidget::WorldParticleComponent' has a wrong offset!");
static_assert(offsetof(UParticleSystemWidget, WorldParticleActor) == 0x000158, "Member 'UParticleSystemWidget::WorldParticleActor' has a wrong offset!");

// Class UIParticleSystem.UIParticleComponent
// 0x0000 (0x0870 - 0x0870)
class UUIParticleComponent final : public UParticleSystemComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleComponent">();
	}
	static class UUIParticleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleComponent>();
	}
};
static_assert(alignof(UUIParticleComponent) == 0x000010, "Wrong alignment on UUIParticleComponent");
static_assert(sizeof(UUIParticleComponent) == 0x000870, "Wrong size on UUIParticleComponent");

// Class UIParticleSystem.UIParticleActor
// 0x0000 (0x02D8 - 0x02D8)
class AUIParticleActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleActor">();
	}
	static class AUIParticleActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUIParticleActor>();
	}
};
static_assert(alignof(AUIParticleActor) == 0x000008, "Wrong alignment on AUIParticleActor");
static_assert(sizeof(AUIParticleActor) == 0x0002D8, "Wrong size on AUIParticleActor");

}

