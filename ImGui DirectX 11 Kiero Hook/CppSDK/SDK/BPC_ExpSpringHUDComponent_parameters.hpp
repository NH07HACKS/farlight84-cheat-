#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_ExpSpringHUDComponent

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "S_ExpSpring_Notice_Index_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnRewardDataUpdated
// 0x0008 (0x0008 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated final
{
public:
	class ASolarExpSpringPointActor*              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated) == 0x000008, "Wrong size on BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated, Point) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_OnRewardDataUpdated::Point' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnCurRewardIndexSwitched
// 0x0008 (0x0008 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched final
{
public:
	class ASolarExpSpringPointActor*              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched) == 0x000008, "Wrong size on BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched, Point) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_OnCurRewardIndexSwitched::Point' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ExecuteUbergraph_BPC_ExpSpringHUDComponent
// 0x0220 (0x0220 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_ShowSolarWidget_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_EXPSpring_HUDNotice_C*              K2Node_DynamicCast_AsUI_EXPSpring_HUDNotice;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarExpSpringPointActor*              K2Node_Event_Point_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorMarkBase*                         K2Node_Event_WorldMark;                            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWorldMark_Secondary_C*                 K2Node_DynamicCast_AsWorld_Mark_Secondary;         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanShowWorldMark_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPreOpenProgress_ReturnValue;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetChestTransform_Location;               // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_GetChestTransform_Rotation;               // 0x0060(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FExpSpringPointMarkInfo                K2Node_Event_Info;                                 // 0x0088(0x0048)(ConstParm, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpSpringPointMarkInfo                K2Node_Event_Info_1;                               // 0x00D8(0x0048)(ConstParm, ContainsInstancedReference)
	bool                                          K2Node_Event_SetVisible;                           // 0x0120(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWorldMark_Secondary_C*                 K2Node_DynamicCast_AsWorld_Mark_Secondary_1;       // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarExpSpringPointActor*              K2Node_Event_EnteredPoint;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_OpenID;                               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpSpringPointMarkInfo                K2Node_Event_PointData;                            // 0x0148(0x0048)(ConstParm, ContainsInstancedReference)
	EExpSpringPointState                          K2Node_Event_PointState;                           // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpSpringPointState                          K2Node_Event_LastPointState;                       // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldActorShowHUDNotice_ReturnValue;     // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarExpSpringPointActor*              K2Node_Event_Point_1;                              // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01A4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_SetTimerForNextTick_ReturnValue;          // 0x01B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldActorShowHUDNotice_ReturnValue_1;   // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C3[0x5];                                      // 0x01C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x01C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ExpSpring_Notice_Index              K2Node_MakeStruct_S_ExpSpring_Notice_Index;        // 0x01E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarExpSpringPointActor*              K2Node_Event_Point;                                // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent2D_ReturnValue;                  // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent2D_ReturnValue_1;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_206[0x2];                                      // 0x0206(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0208(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_SetTimerForNextTick_ReturnValue_1;        // 0x0218(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent) == 0x000010, "Wrong alignment on BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent) == 0x000220, "Wrong size on BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, EntryPoint) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_ShowSolarWidget_ReturnValue) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_ShowSolarWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_AsUI_EXPSpring_HUDNotice) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_AsUI_EXPSpring_HUDNotice' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_Point_2) == 0x000020, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_Point_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_WorldMark) == 0x000028, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_WorldMark' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_AsWorld_Mark_Secondary) == 0x000030, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_AsWorld_Mark_Secondary' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_GetOwningPlayer_ReturnValue) == 0x000040, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_CanShowWorldMark_ReturnValue) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_CanShowWorldMark_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_GetPreOpenProgress_ReturnValue) == 0x00004C, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_GetPreOpenProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_GetChestTransform_Location) == 0x000050, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_GetChestTransform_Location' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_GetChestTransform_Rotation) == 0x000060, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_GetChestTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Add_VectorVector_ReturnValue) == 0x000074, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_Info) == 0x000088, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_Info' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue) == 0x0000D4, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_Info_1) == 0x0000D8, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_Info_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_SetVisible) == 0x000120, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_SetVisible' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_DeltaSeconds) == 0x000124, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_AsWorld_Mark_Secondary_1) == 0x000128, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_AsWorld_Mark_Secondary_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_DynamicCast_bSuccess_2) == 0x000130, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000131, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_1) == 0x000132, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_EnteredPoint) == 0x000138, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_EnteredPoint' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_OpenID) == 0x000140, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_OpenID' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_2) == 0x000141, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_PointData) == 0x000148, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_PointData' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_PointState) == 0x000190, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_PointState' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_LastPointState) == 0x000191, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_LastPointState' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000192, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_SwitchEnum_CmpSuccess_1) == 0x000193, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_ShouldActorShowHUDNotice_ReturnValue) == 0x000194, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_ShouldActorShowHUDNotice_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_Point_1) == 0x000198, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_Point_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_3) == 0x0001A0, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_CreateDelegate_OutputDelegate) == 0x0001A4, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_SetTimerForNextTick_ReturnValue) == 0x0001B8, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_SetTimerForNextTick_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Map_Contains_ReturnValue) == 0x0001C0, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_4) == 0x0001C1, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_ShouldActorShowHUDNotice_ReturnValue_1) == 0x0001C2, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_ShouldActorShowHUDNotice_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Map_Keys_Keys) == 0x0001C8, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Array_Length_ReturnValue) == 0x0001D8, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, Temp_int_Array_Index_Variable) == 0x0001DC, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Less_IntInt_ReturnValue) == 0x0001E0, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_Array_Get_Item) == 0x0001E1, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_MakeStruct_S_ExpSpring_Notice_Index) == 0x0001E4, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_MakeStruct_S_ExpSpring_Notice_Index' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_Event_Point) == 0x0001F0, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_Event_Point' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_PostEvent2D_ReturnValue) == 0x0001F8, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_PostEvent2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_5) == 0x0001FC, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_PostEvent2D_ReturnValue_1) == 0x000200, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_PostEvent2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_6) == 0x000204, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_IsValid_ReturnValue_7) == 0x000205, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000208, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent, CallFunc_SetTimerForNextTick_ReturnValue_1) == 0x000218, "Member 'BPC_ExpSpringHUDComponent_C_ExecuteUbergraph_BPC_ExpSpringHUDComponent::CallFunc_SetTimerForNextTick_ReturnValue_1' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShouldShowHUDNotice
// 0x0108 (0x0108 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice final
{
public:
	class ASolarExpSpringPointActor*              Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerEntered_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerController*                 CallFunc_GetSolarPlayerController_ReturnValue;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_GetLocalPlayer_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerController*                 CallFunc_GetSolarPlayerController_ReturnValue_1;   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTeammateWith_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice) == 0x000108, "Wrong size on BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, Actor) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::Actor' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, PlayerState) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::PlayerState' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, ReturnValue) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_IsPlayerEntered_ReturnValue) == 0x000028, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_IsPlayerEntered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_GetSolarPlayerController_ReturnValue) == 0x000030, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_GetSolarPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Conv_BoolToString_ReturnValue) == 0x000038, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000068, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_GetLocalPlayer_ReturnValue) == 0x000080, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_GetLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_GetSolarPlayerController_ReturnValue_1) == 0x000088, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_GetSolarPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_IsTeammateWith_ReturnValue) == 0x000090, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_IsTeammateWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000091, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Not_PreBool_ReturnValue) == 0x000092, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000098, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x0000A8, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000B8, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_BooleanOR_ReturnValue) == 0x0000C8, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000D0, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E0, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000E8, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F8, "Member 'BPC_ExpSpringHUDComponent_C_ShouldShowHUDNotice::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShouldActorShowHUDNotice
// 0x0068 (0x0068 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice final
{
public:
	class ASolarExpSpringPointActor*              Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerState*                      ViewportPlayer;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarReplaySubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_GetLocalPlayer_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarReplayPlayerController*           CallFunc_GetReplayController_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerController*                 CallFunc_GetSolarPlayerController_ReturnValue;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetViewportFocusedCharacter_ReturnValue;  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetViewportFocusedCharacter_ReturnValue_1; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_GetPlayerStateByCharacterOrController_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_GetPlayerStateByCharacterOrController_ReturnValue_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowHUDNotice_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerEntered_ReturnValue;              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice) == 0x000068, "Wrong size on BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, Target) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::Target' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, ReturnValue) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, ViewportPlayer) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::ViewportPlayer' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetLocalPlayer_ReturnValue) == 0x000020, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetReplayController_ReturnValue) == 0x000028, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetReplayController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetSolarPlayerController_ReturnValue) == 0x000030, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetSolarPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetViewportFocusedCharacter_ReturnValue) == 0x000038, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetViewportFocusedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetViewportFocusedCharacter_ReturnValue_1) == 0x000040, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetViewportFocusedCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetPlayerStateByCharacterOrController_ReturnValue) == 0x000050, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetPlayerStateByCharacterOrController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_GetPlayerStateByCharacterOrController_ReturnValue_1) == 0x000058, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_GetPlayerStateByCharacterOrController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_ShouldShowHUDNotice_ReturnValue) == 0x000060, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_ShouldShowHUDNotice_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_IsPlayerEntered_ReturnValue) == 0x000061, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_IsPlayerEntered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice, CallFunc_IsPlaying_ReturnValue) == 0x000062, "Member 'BPC_ExpSpringHUDComponent_C_ShouldActorShowHUDNotice::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetWorldMarkPointHasEnemy
// 0x0010 (0x0010 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy final
{
public:
	class UWorldMark_Secondary_C*                 WorldMark;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEnemy;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy) == 0x000010, "Wrong size on BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy, WorldMark) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy::WorldMark' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy, HasEnemy) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointHasEnemy::HasEnemy' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetWorldMarkPointState
// 0x0038 (0x0038 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState final
{
public:
	class UActorMarkBase*                         WorldMark;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarExpSpringPointActor*              Point;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEnemy;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDeadlineTime_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPointTime_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldMark_Secondary_C*                 K2Node_DynamicCast_AsWorld_Mark_Secondary;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EExpSpringPointState                          Temp_byte_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EExpSpringPointState                          Temp_byte_Variable_1;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState) == 0x000038, "Wrong size on BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, WorldMark) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::WorldMark' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Point) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Point' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, HasEnemy) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::HasEnemy' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable) == 0x000011, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, CallFunc_GetDeadlineTime_ReturnValue) == 0x000014, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::CallFunc_GetDeadlineTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, CallFunc_GetPointTime_ReturnValue) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::CallFunc_GetPointTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, K2Node_DynamicCast_AsWorld_Mark_Secondary) == 0x000020, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::K2Node_DynamicCast_AsWorld_Mark_Secondary' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_1) == 0x00002A, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_2) == 0x00002B, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_3) == 0x00002C, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_byte_Variable) == 0x00002D, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_4) == 0x00002E, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, K2Node_Select_Default) == 0x00002F, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_5) == 0x000030, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_6) == 0x000031, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_bool_Variable_7) == 0x000032, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, Temp_byte_Variable_1) == 0x000033, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState, K2Node_Select_Default_1) == 0x000034, "Member 'BPC_ExpSpringHUDComponent_C_SetWorldMarkPointState::K2Node_Select_Default_1' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.CreateWorldMark
// 0x0010 (0x0010 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_CreateWorldMark final
{
public:
	class UActorMarkBase*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorMarkBase*                         CallFunc_RegisterWorldMarkOnPos_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_CreateWorldMark) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_CreateWorldMark");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_CreateWorldMark) == 0x000010, "Wrong size on BPC_ExpSpringHUDComponent_C_CreateWorldMark");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_CreateWorldMark, ReturnValue) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_CreateWorldMark::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_CreateWorldMark, CallFunc_RegisterWorldMarkOnPos_ReturnValue) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_CreateWorldMark::CallFunc_RegisterWorldMarkOnPos_ReturnValue' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.NativeOnPointOpenClose
// 0x0010 (0x0010 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose final
{
public:
	class ASolarExpSpringPointActor*              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpen;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose) == 0x000010, "Wrong size on BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose, Point) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose::Point' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose, IsOpen) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_NativeOnPointOpenClose::IsOpen' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.PushPointOpenMessage
// 0x0028 (0x0028 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_PushPointOpenMessage final
{
public:
	uint8                                         OpenID;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         t_OpenIndex;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ExpSpring_Notice_Index              CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameState*                        CallFunc_GetSolarGameState_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_PushPointOpenMessage");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage) == 0x000028, "Wrong size on BPC_ExpSpringHUDComponent_C_PushPointOpenMessage");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, OpenID) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::OpenID' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, t_OpenIndex) == 0x000004, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::t_OpenIndex' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_Map_Find_Value) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_GetSolarGameState_ReturnValue) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_GetSolarGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000020, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_PushPointOpenMessage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000025, "Member 'BPC_ExpSpringHUDComponent_C_PushPointOpenMessage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.MoveNextMessage
// 0x0058 (0x0058 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_MoveNextMessage final
{
public:
	uint8                                         OpenID;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent2D_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ExpSpring_Notice_Index              CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarExpSpringGameComponent*           CallFunc_Get_ReturnValue;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRoundOpenTimeByOpenID_ReturnValue;     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ExpSpring_Notice_Index              K2Node_MakeStruct_S_ExpSpring_Notice_Index;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarGameState*                        CallFunc_GetSolarGameState_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_MoveNextMessage) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_MoveNextMessage");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_MoveNextMessage) == 0x000058, "Wrong size on BPC_ExpSpringHUDComponent_C_MoveNextMessage");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, OpenID) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::OpenID' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, Index_0) == 0x000004, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::Index_0' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_PostEvent2D_ReturnValue) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_PostEvent2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Map_Remove_ReturnValue) == 0x00000C, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Map_Find_Value) == 0x000010, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Get_ReturnValue) == 0x000020, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_GetRoundOpenTimeByOpenID_ReturnValue) == 0x000028, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_GetRoundOpenTimeByOpenID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, Temp_int_Variable) == 0x00002C, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, K2Node_MakeStruct_S_ExpSpring_Notice_Index) == 0x000038, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::K2Node_MakeStruct_S_ExpSpring_Notice_Index' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_GetSolarGameState_ReturnValue) == 0x000040, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_GetSolarGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Less_FloatFloat_ReturnValue) == 0x00004C, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_MoveNextMessage, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BPC_ExpSpringHUDComponent_C_MoveNextMessage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetPointMarkInfo
// 0x0050 (0x0050 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_SetPointMarkInfo final
{
public:
	struct FExpSpringPointMarkInfo                Info;                                              // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          SetVisible;                                        // 0x0048(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_SetPointMarkInfo) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_SetPointMarkInfo");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_SetPointMarkInfo) == 0x000050, "Wrong size on BPC_ExpSpringHUDComponent_C_SetPointMarkInfo");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetPointMarkInfo, Info) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_SetPointMarkInfo::Info' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetPointMarkInfo, SetVisible) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_SetPointMarkInfo::SetVisible' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.SetPointMarkInvisible
// 0x0048 (0x0048 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible final
{
public:
	struct FExpSpringPointMarkInfo                Info;                                              // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible) == 0x000048, "Wrong size on BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible, Info) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_SetPointMarkInvisible::Info' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.InitWorldMark
// 0x0010 (0x0010 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_InitWorldMark final
{
public:
	class ASolarExpSpringPointActor*              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorMarkBase*                         WorldMark;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_InitWorldMark) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_InitWorldMark");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_InitWorldMark) == 0x000010, "Wrong size on BPC_ExpSpringHUDComponent_C_InitWorldMark");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_InitWorldMark, Point) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_InitWorldMark::Point' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_InitWorldMark, WorldMark) == 0x000008, "Member 'BPC_ExpSpringHUDComponent_C_InitWorldMark::WorldMark' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BPC_ExpSpringHUDComponent_C_ReceiveTick");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_ReceiveTick) == 0x000004, "Wrong size on BPC_ExpSpringHUDComponent_C_ReceiveTick");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.OnPlayerEnterPoint
// 0x0008 (0x0008 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint final
{
public:
	class ASolarExpSpringPointActor*              EnteredPoint;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint) == 0x000008, "Wrong size on BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint, EnteredPoint) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_OnPlayerEnterPoint::EnteredPoint' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.ShowOpenMessage
// 0x0001 (0x0001 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_ShowOpenMessage final
{
public:
	uint8                                         OpenID;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_ShowOpenMessage) == 0x000001, "Wrong alignment on BPC_ExpSpringHUDComponent_C_ShowOpenMessage");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_ShowOpenMessage) == 0x000001, "Wrong size on BPC_ExpSpringHUDComponent_C_ShowOpenMessage");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_ShowOpenMessage, OpenID) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_ShowOpenMessage::OpenID' has a wrong offset!");

// Function BPC_ExpSpringHUDComponent.BPC_ExpSpringHUDComponent_C.NativeOnPointStateUpdated
// 0x0050 (0x0050 - 0x0000)
struct BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated final
{
public:
	struct FExpSpringPointMarkInfo                PointData;                                         // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	EExpSpringPointState                          PointState;                                        // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpSpringPointState                          LastPointState;                                    // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated) == 0x000008, "Wrong alignment on BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated");
static_assert(sizeof(BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated) == 0x000050, "Wrong size on BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated, PointData) == 0x000000, "Member 'BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated::PointData' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated, PointState) == 0x000048, "Member 'BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated::PointState' has a wrong offset!");
static_assert(offsetof(BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated, LastPointState) == 0x000049, "Member 'BPC_ExpSpringHUDComponent_C_NativeOnPointStateUpdated::LastPointState' has a wrong offset!");

}

