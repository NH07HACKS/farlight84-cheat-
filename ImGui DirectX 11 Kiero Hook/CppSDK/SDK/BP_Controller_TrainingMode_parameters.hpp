#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_TrainingMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SolarGM_BattleLua
// 0x0020 (0x0020 - 0x0000)
struct BP_Controller_TrainingMode_C_SolarGM_BattleLua final
{
public:
	class FString                                 CmdName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Params_0;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_SolarGM_BattleLua) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_SolarGM_BattleLua");
static_assert(sizeof(BP_Controller_TrainingMode_C_SolarGM_BattleLua) == 0x000020, "Wrong size on BP_Controller_TrainingMode_C_SolarGM_BattleLua");
static_assert(offsetof(BP_Controller_TrainingMode_C_SolarGM_BattleLua, CmdName) == 0x000000, "Member 'BP_Controller_TrainingMode_C_SolarGM_BattleLua::CmdName' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_SolarGM_BattleLua, Params_0) == 0x000010, "Member 'BP_Controller_TrainingMode_C_SolarGM_BattleLua::Params_0' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UploadReplayMonitor
// 0x0001 (0x0001 - 0x0000)
struct BP_Controller_TrainingMode_C_UploadReplayMonitor final
{
public:
	bool                                          bIsKillCam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_UploadReplayMonitor) == 0x000001, "Wrong alignment on BP_Controller_TrainingMode_C_UploadReplayMonitor");
static_assert(sizeof(BP_Controller_TrainingMode_C_UploadReplayMonitor) == 0x000001, "Wrong size on BP_Controller_TrainingMode_C_UploadReplayMonitor");
static_assert(offsetof(BP_Controller_TrainingMode_C_UploadReplayMonitor, bIsKillCam) == 0x000000, "Member 'BP_Controller_TrainingMode_C_UploadReplayMonitor::bIsKillCam' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UpdateAiPalRate
// 0x0004 (0x0004 - 0x0000)
struct BP_Controller_TrainingMode_C_UpdateAiPalRate final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_TrainingMode_C_UpdateAiPalRate) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_UpdateAiPalRate");
static_assert(sizeof(BP_Controller_TrainingMode_C_UpdateAiPalRate) == 0x000004, "Wrong size on BP_Controller_TrainingMode_C_UpdateAiPalRate");
static_assert(offsetof(BP_Controller_TrainingMode_C_UpdateAiPalRate, Rate) == 0x000000, "Member 'BP_Controller_TrainingMode_C_UpdateAiPalRate::Rate' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SolarGM_ShowBattleResultReviewBusinessCard
// 0x0001 (0x0001 - 0x0000)
struct BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard) == 0x000001, "Wrong alignment on BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard");
static_assert(sizeof(BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard) == 0x000001, "Wrong size on BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard");
static_assert(offsetof(BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard, bVisible) == 0x000000, "Member 'BP_Controller_TrainingMode_C_SolarGM_ShowBattleResultReviewBusinessCard::bVisible' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.SetInputActionSwitch
// 0x0008 (0x0008 - 0x0000)
struct BP_Controller_TrainingMode_C_SetInputActionSwitch final
{
public:
	int32                                         ActionID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOn;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_SetInputActionSwitch) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_SetInputActionSwitch");
static_assert(sizeof(BP_Controller_TrainingMode_C_SetInputActionSwitch) == 0x000008, "Wrong size on BP_Controller_TrainingMode_C_SetInputActionSwitch");
static_assert(offsetof(BP_Controller_TrainingMode_C_SetInputActionSwitch, ActionID) == 0x000000, "Member 'BP_Controller_TrainingMode_C_SetInputActionSwitch::ActionID' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_SetInputActionSwitch, bOn) == 0x000004, "Member 'BP_Controller_TrainingMode_C_SetInputActionSwitch::bOn' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetNoticeLocalText
// 0x0068 (0x0068 - 0x0000)
struct BP_Controller_TrainingMode_C_GetNoticeLocalText final
{
public:
	int32                                         InNoticeID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            InNoticeParams;                                    // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_GetNoticeLocalText) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_GetNoticeLocalText");
static_assert(sizeof(BP_Controller_TrainingMode_C_GetNoticeLocalText) == 0x000068, "Wrong size on BP_Controller_TrainingMode_C_GetNoticeLocalText");
static_assert(offsetof(BP_Controller_TrainingMode_C_GetNoticeLocalText, InNoticeID) == 0x000000, "Member 'BP_Controller_TrainingMode_C_GetNoticeLocalText::InNoticeID' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_GetNoticeLocalText, InNoticeParams) == 0x000008, "Member 'BP_Controller_TrainingMode_C_GetNoticeLocalText::InNoticeParams' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_GetNoticeLocalText, ReturnValue) == 0x000058, "Member 'BP_Controller_TrainingMode_C_GetNoticeLocalText::ReturnValue' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Controller_TrainingMode_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Controller_TrainingMode_C_ReceiveEndPlay");
static_assert(sizeof(BP_Controller_TrainingMode_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Controller_TrainingMode_C_ReceiveEndPlay");
static_assert(offsetof(BP_Controller_TrainingMode_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Controller_TrainingMode_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.UpdateEnableAiPalRate
// 0x0004 (0x0004 - 0x0000)
struct BP_Controller_TrainingMode_C_UpdateEnableAiPalRate final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_UpdateEnableAiPalRate) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_UpdateEnableAiPalRate");
static_assert(sizeof(BP_Controller_TrainingMode_C_UpdateEnableAiPalRate) == 0x000004, "Wrong size on BP_Controller_TrainingMode_C_UpdateEnableAiPalRate");
static_assert(offsetof(BP_Controller_TrainingMode_C_UpdateEnableAiPalRate, Rate) == 0x000000, "Member 'BP_Controller_TrainingMode_C_UpdateEnableAiPalRate::Rate' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.MeerkatTriggerReport
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_TrainingMode_C_MeerkatTriggerReport final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_TrainingMode_C_MeerkatTriggerReport) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_MeerkatTriggerReport");
static_assert(sizeof(BP_Controller_TrainingMode_C_MeerkatTriggerReport) == 0x000010, "Wrong size on BP_Controller_TrainingMode_C_MeerkatTriggerReport");
static_assert(offsetof(BP_Controller_TrainingMode_C_MeerkatTriggerReport, Value) == 0x000000, "Member 'BP_Controller_TrainingMode_C_MeerkatTriggerReport::Value' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.CustomModeShowNotice
// 0x0038 (0x0038 - 0x0000)
struct BP_Controller_TrainingMode_C_CustomModeShowNotice final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNoticeID;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InText;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InIcon;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNoticeColor;                                     // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_CustomModeShowNotice) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_CustomModeShowNotice");
static_assert(sizeof(BP_Controller_TrainingMode_C_CustomModeShowNotice) == 0x000038, "Wrong size on BP_Controller_TrainingMode_C_CustomModeShowNotice");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InType) == 0x000000, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InType' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InNoticeID) == 0x000004, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InNoticeID' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InClass) == 0x000008, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InClass' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InTime) == 0x000010, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InTime' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InText) == 0x000018, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InText' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InIcon) == 0x000028, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InIcon' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_CustomModeShowNotice, InNoticeColor) == 0x000030, "Member 'BP_Controller_TrainingMode_C_CustomModeShowNotice::InNoticeColor' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.QueryStage
// 0x0004 (0x0004 - 0x0000)
struct BP_Controller_TrainingMode_C_QueryStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_QueryStage) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_QueryStage");
static_assert(sizeof(BP_Controller_TrainingMode_C_QueryStage) == 0x000004, "Wrong size on BP_Controller_TrainingMode_C_QueryStage");
static_assert(offsetof(BP_Controller_TrainingMode_C_QueryStage, ReturnValue) == 0x000000, "Member 'BP_Controller_TrainingMode_C_QueryStage::ReturnValue' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.RecordSpectateInfoToBI
// 0x0028 (0x0028 - 0x0000)
struct BP_Controller_TrainingMode_C_RecordSpectateInfoToBI final
{
public:
	struct FSpectateReportInfo                    SpectateReportInfo;                                // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_RecordSpectateInfoToBI) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_RecordSpectateInfoToBI");
static_assert(sizeof(BP_Controller_TrainingMode_C_RecordSpectateInfoToBI) == 0x000028, "Wrong size on BP_Controller_TrainingMode_C_RecordSpectateInfoToBI");
static_assert(offsetof(BP_Controller_TrainingMode_C_RecordSpectateInfoToBI, SpectateReportInfo) == 0x000000, "Member 'BP_Controller_TrainingMode_C_RecordSpectateInfoToBI::SpectateReportInfo' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.OnNotifyLockPlayer
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_TrainingMode_C_OnNotifyLockPlayer final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_TrainingMode_C_OnNotifyLockPlayer) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_OnNotifyLockPlayer");
static_assert(sizeof(BP_Controller_TrainingMode_C_OnNotifyLockPlayer) == 0x000010, "Wrong size on BP_Controller_TrainingMode_C_OnNotifyLockPlayer");
static_assert(offsetof(BP_Controller_TrainingMode_C_OnNotifyLockPlayer, Name_0) == 0x000000, "Member 'BP_Controller_TrainingMode_C_OnNotifyLockPlayer::Name_0' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.IsMatching
// 0x0001 (0x0001 - 0x0000)
struct BP_Controller_TrainingMode_C_IsMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_IsMatching) == 0x000001, "Wrong alignment on BP_Controller_TrainingMode_C_IsMatching");
static_assert(sizeof(BP_Controller_TrainingMode_C_IsMatching) == 0x000001, "Wrong size on BP_Controller_TrainingMode_C_IsMatching");
static_assert(offsetof(BP_Controller_TrainingMode_C_IsMatching, ReturnValue) == 0x000000, "Member 'BP_Controller_TrainingMode_C_IsMatching::ReturnValue' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.LuaShowUI
// 0x0020 (0x0020 - 0x0000)
struct BP_Controller_TrainingMode_C_LuaShowUI final
{
public:
	class FString                                 WidgetPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UIName;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_LuaShowUI) == 0x000008, "Wrong alignment on BP_Controller_TrainingMode_C_LuaShowUI");
static_assert(sizeof(BP_Controller_TrainingMode_C_LuaShowUI) == 0x000020, "Wrong size on BP_Controller_TrainingMode_C_LuaShowUI");
static_assert(offsetof(BP_Controller_TrainingMode_C_LuaShowUI, WidgetPath) == 0x000000, "Member 'BP_Controller_TrainingMode_C_LuaShowUI::WidgetPath' has a wrong offset!");
static_assert(offsetof(BP_Controller_TrainingMode_C_LuaShowUI, UIName) == 0x000010, "Member 'BP_Controller_TrainingMode_C_LuaShowUI::UIName' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetCustomStandardScreenSize
// 0x0008 (0x0008 - 0x0000)
struct BP_Controller_TrainingMode_C_GetCustomStandardScreenSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_GetCustomStandardScreenSize) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_GetCustomStandardScreenSize");
static_assert(sizeof(BP_Controller_TrainingMode_C_GetCustomStandardScreenSize) == 0x000008, "Wrong size on BP_Controller_TrainingMode_C_GetCustomStandardScreenSize");
static_assert(offsetof(BP_Controller_TrainingMode_C_GetCustomStandardScreenSize, ReturnValue) == 0x000000, "Member 'BP_Controller_TrainingMode_C_GetCustomStandardScreenSize::ReturnValue' has a wrong offset!");

// Function BP_Controller_TrainingMode.BP_Controller_TrainingMode_C.GetMobileStandardScreenSize
// 0x0008 (0x0008 - 0x0000)
struct BP_Controller_TrainingMode_C_GetMobileStandardScreenSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_Controller_TrainingMode_C_GetMobileStandardScreenSize) == 0x000004, "Wrong alignment on BP_Controller_TrainingMode_C_GetMobileStandardScreenSize");
static_assert(sizeof(BP_Controller_TrainingMode_C_GetMobileStandardScreenSize) == 0x000008, "Wrong size on BP_Controller_TrainingMode_C_GetMobileStandardScreenSize");
static_assert(offsetof(BP_Controller_TrainingMode_C_GetMobileStandardScreenSize, ReturnValue) == 0x000000, "Member 'BP_Controller_TrainingMode_C_GetMobileStandardScreenSize::ReturnValue' has a wrong offset!");

}

