#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimNativeWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LimNativeWidget_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LimNativeWidget.AgoraManager
// 0x0170 (0x0198 - 0x0028)
class UAgoraManager final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bSuccess)> OnPermissionResult;                                // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ChannelId, int32 LocalUID)> OnEnterRoom;      // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ChannelId, int32 LocalUID)> OnExitRoom;       // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnabled)> OnEnableMic;                                       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& RoomChannelID, int32 LocalUID)> OnUpdateChannel_Lobby; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& RoomChannelID, const class FString& TeamChannelID, int32 LocalUID, int32 PublishOpt, int32 SubscribeOption)> OnUpdateChannel_Battle; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 State, int32 Reason)> OnConnectionChanged;                   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<int32>& UserList, const TArray<int32>& UserVolumeList)> OnAgoraUserInfoUpdate; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Volume, bool bVad)> OnAgoraLocalInfoUpdate;                  // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool EnterRoom, const class FString& ChannelId, int32 UserUID)> OnUserRoomStateChange; // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Muted, const class FString& ChannelId, int32 UserUID)> OnUserAudioStateChanged; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& DeviceID, int32 DeviceType, int32 DeviceState)> OnAudioStateChanged; // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Uid, int32 Volume)> OnSetSpeakerVolumeByUid;                 // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<int32>                                 MuteUIDList;                                       // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x80];                                     // 0x0118(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DestroyInstance();
	static class UAgoraManager* GetInstance();
	static bool IsInitialized();

	void EnableMic(const bool bEnable);
	void EnableMicNoiseReduction(bool bEnable);
	void FinishSDKInitation();
	void Init(bool bEnableLog);
	void InitVoiceSDK(bool bEnableLog);
	void InnerEnableMic(const bool bEnable);
	void PreInit(const class FString& Appkey);
	void UnInit();
	void UnRegisterLuaEvent();

	void AgoraAudioDump(bool bEnable) const;
	void EnableAudioIndication(const int32 Millions, const int32 Smooth, const bool bReportVad) const;
	void EnableAudioIndicationEx(const int32 Millions, const int32 Smooth, const bool bReportVad, const class FString& RoomID, const int32 LocalUID) const;
	void EnableSpeaker(const bool bEnable) const;
	void EnterRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const;
	void EnterRoomPro(const class FString& RoomID, const class FString& TeamID, const class FString& RoomToken, const class FString& TeamToken, const int32 Uid, const EAgoraGamePublishOption PublishOpt, const EAgoraGameSubscribeOption SubscribeOpt) const;
	void ExitRoom() const;
	int32 GameSetMicVolume(const int32 MicVolume) const;
	int32 GameSetSpeakerVolume(const int32 Volume) const;
	int32 GameSetSpeakerVolumeByUid(const int32 Uid, const int32 Volume) const;
	TArray<struct FRTCDeviceInfo> GetMicList() const;
	TArray<struct FRTCDeviceInfo> GetSpeakerList() const;
	void InnerEnterRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const;
	bool IsInRtcRoom() const;
	bool IsInRtcRoomEx(const class FString& RoomID, const int32 Uid) const;
	void MediaMute(const class FString& RoomID, const class FString& TeamID, const int32 Uid) const;
	void MuteLocalAudioStream(bool bMute, const class FString& RoomID, const class FString& TeamID, const int32 LocalUID) const;
	void MuteRemoteAudioStream(const int32 TargetUID, const class FString& MuteRoomID, bool bMute, const int32 LocalUID) const;
	void SelectMic(const class FString& InDeviceID) const;
	void SelectSpeak(const class FString& InDeviceID) const;
	void SetAudioSessionRestriction() const;
	void SetChannelPublishSubscribeOption(const class FString& RoomID, const class FString& TeamID, const EAgoraGamePublishOption SelectedPublishOption, const EAgoraGameSubscribeOption SelectedSubscribeOption, const int32 Uid) const;
	void SetSubscribeAudioBlocklist(const TArray<int32>& OpenIDList, const class FString& RoomID, const class FString& TeamID, const int32 Uid) const;
	void SwitchRoom(const class FString& RoomID, const class FString& AppToken, const int32 Uid) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AgoraManager">();
	}
	static class UAgoraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAgoraManager>();
	}
};
static_assert(alignof(UAgoraManager) == 0x000008, "Wrong alignment on UAgoraManager");
static_assert(sizeof(UAgoraManager) == 0x000198, "Wrong size on UAgoraManager");
static_assert(offsetof(UAgoraManager, OnPermissionResult) == 0x000038, "Member 'UAgoraManager::OnPermissionResult' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnEnterRoom) == 0x000048, "Member 'UAgoraManager::OnEnterRoom' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnExitRoom) == 0x000058, "Member 'UAgoraManager::OnExitRoom' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnEnableMic) == 0x000068, "Member 'UAgoraManager::OnEnableMic' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnUpdateChannel_Lobby) == 0x000078, "Member 'UAgoraManager::OnUpdateChannel_Lobby' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnUpdateChannel_Battle) == 0x000088, "Member 'UAgoraManager::OnUpdateChannel_Battle' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnConnectionChanged) == 0x000098, "Member 'UAgoraManager::OnConnectionChanged' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnAgoraUserInfoUpdate) == 0x0000A8, "Member 'UAgoraManager::OnAgoraUserInfoUpdate' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnAgoraLocalInfoUpdate) == 0x0000B8, "Member 'UAgoraManager::OnAgoraLocalInfoUpdate' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnUserRoomStateChange) == 0x0000C8, "Member 'UAgoraManager::OnUserRoomStateChange' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnUserAudioStateChanged) == 0x0000D8, "Member 'UAgoraManager::OnUserAudioStateChanged' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnAudioStateChanged) == 0x0000E8, "Member 'UAgoraManager::OnAudioStateChanged' has a wrong offset!");
static_assert(offsetof(UAgoraManager, OnSetSpeakerVolumeByUid) == 0x0000F8, "Member 'UAgoraManager::OnSetSpeakerVolumeByUid' has a wrong offset!");
static_assert(offsetof(UAgoraManager, MuteUIDList) == 0x000108, "Member 'UAgoraManager::MuteUIDList' has a wrong offset!");

// Class LimNativeWidget.AudioPermissionHelperProxy
// 0x0020 (0x0048 - 0x0028)
class UAudioPermissionHelperProxy final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool CheckAndroidAudioPermission();
	static EIOSAudioPermissionState CheckIOSAudioPermission();

	void AcquireAndroidAudioPermission();
	void AcquireIOSAudioPermission();
	void OnAndroidPermissionResult(const TArray<class FString>& Permissions, const TArray<bool>& Results);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioPermissionHelperProxy">();
	}
	static class UAudioPermissionHelperProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioPermissionHelperProxy>();
	}
};
static_assert(alignof(UAudioPermissionHelperProxy) == 0x000008, "Wrong alignment on UAudioPermissionHelperProxy");
static_assert(sizeof(UAudioPermissionHelperProxy) == 0x000048, "Wrong size on UAudioPermissionHelperProxy");

// Class LimNativeWidget.LimNativeWidgetSettings
// 0x0190 (0x01C8 - 0x0038)
class ULimNativeWidgetSettings final : public UDeveloperSettings
{
public:
	class FString                                 rDownloadPath;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileIOThreadIntervalMs;                            // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDiskFileExpiredDuration;                     // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedResponseExpiredDuration;                     // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CachedResponseMaxCount;                            // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LocalizationTable;                                 // 0x0058(0x0018)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvId;                                             // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GME_AppId;                                         // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GME_PrivateKey;                                    // 0x0090(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GME_Test_AppId;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GME_Test_PrivateKey;                               // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestGmeEnv;                                       // 0x00C0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GME_EventTick;                                     // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRecordingTime;                                  // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLimSdkLog;                                    // 0x00CC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lim_SDKRegion;                                     // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lim_SDKRegion_Domestic;                            // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lim_GameID;                                        // 0x00F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lim_Slssvr;                                        // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lim_Slssvr_Test;                                   // 0x0108(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lim_Slssvr_Domestic;                               // 0x0118(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lim_Slssvr_Domestic_Test;                          // 0x0128(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Use_Farlight_Domain;                               // 0x0138(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Use_Farlight_Domain_Domestic;                      // 0x013C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nertc_AppKey;                                      // 0x0140(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nertc_AppToken;                                    // 0x0150(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nertc_Test_AppKey;                                 // 0x0160(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nertc_Test_AppToken;                               // 0x0170(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Agora_AppKey;                                      // 0x0180(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Agora_AppToken;                                    // 0x0190(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Agora_Test_AppKey;                                 // 0x01A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Agora_Test_AppToken;                               // 0x01B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnvOversea;                                       // 0x01C0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULimNativeWidgetSettings* GetInstance();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LimNativeWidgetSettings">();
	}
	static class ULimNativeWidgetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULimNativeWidgetSettings>();
	}
};
static_assert(alignof(ULimNativeWidgetSettings) == 0x000008, "Wrong alignment on ULimNativeWidgetSettings");
static_assert(sizeof(ULimNativeWidgetSettings) == 0x0001C8, "Wrong size on ULimNativeWidgetSettings");
static_assert(offsetof(ULimNativeWidgetSettings, rDownloadPath) == 0x000038, "Member 'ULimNativeWidgetSettings::rDownloadPath' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, FileIOThreadIntervalMs) == 0x000048, "Member 'ULimNativeWidgetSettings::FileIOThreadIntervalMs' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, CachedDiskFileExpiredDuration) == 0x00004C, "Member 'ULimNativeWidgetSettings::CachedDiskFileExpiredDuration' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, CachedResponseExpiredDuration) == 0x000050, "Member 'ULimNativeWidgetSettings::CachedResponseExpiredDuration' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, CachedResponseMaxCount) == 0x000054, "Member 'ULimNativeWidgetSettings::CachedResponseMaxCount' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, LocalizationTable) == 0x000058, "Member 'ULimNativeWidgetSettings::LocalizationTable' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, EnvId) == 0x000070, "Member 'ULimNativeWidgetSettings::EnvId' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, GME_AppId) == 0x000080, "Member 'ULimNativeWidgetSettings::GME_AppId' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, GME_PrivateKey) == 0x000090, "Member 'ULimNativeWidgetSettings::GME_PrivateKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, GME_Test_AppId) == 0x0000A0, "Member 'ULimNativeWidgetSettings::GME_Test_AppId' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, GME_Test_PrivateKey) == 0x0000B0, "Member 'ULimNativeWidgetSettings::GME_Test_PrivateKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, bTestGmeEnv) == 0x0000C0, "Member 'ULimNativeWidgetSettings::bTestGmeEnv' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, GME_EventTick) == 0x0000C4, "Member 'ULimNativeWidgetSettings::GME_EventTick' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, MaxRecordingTime) == 0x0000C8, "Member 'ULimNativeWidgetSettings::MaxRecordingTime' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, bShowLimSdkLog) == 0x0000CC, "Member 'ULimNativeWidgetSettings::bShowLimSdkLog' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_SDKRegion) == 0x0000D0, "Member 'ULimNativeWidgetSettings::Lim_SDKRegion' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_SDKRegion_Domestic) == 0x0000E0, "Member 'ULimNativeWidgetSettings::Lim_SDKRegion_Domestic' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_GameID) == 0x0000F0, "Member 'ULimNativeWidgetSettings::Lim_GameID' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_Slssvr) == 0x0000F8, "Member 'ULimNativeWidgetSettings::Lim_Slssvr' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_Slssvr_Test) == 0x000108, "Member 'ULimNativeWidgetSettings::Lim_Slssvr_Test' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_Slssvr_Domestic) == 0x000118, "Member 'ULimNativeWidgetSettings::Lim_Slssvr_Domestic' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Lim_Slssvr_Domestic_Test) == 0x000128, "Member 'ULimNativeWidgetSettings::Lim_Slssvr_Domestic_Test' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Use_Farlight_Domain) == 0x000138, "Member 'ULimNativeWidgetSettings::Use_Farlight_Domain' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Use_Farlight_Domain_Domestic) == 0x00013C, "Member 'ULimNativeWidgetSettings::Use_Farlight_Domain_Domestic' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Nertc_AppKey) == 0x000140, "Member 'ULimNativeWidgetSettings::Nertc_AppKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Nertc_AppToken) == 0x000150, "Member 'ULimNativeWidgetSettings::Nertc_AppToken' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Nertc_Test_AppKey) == 0x000160, "Member 'ULimNativeWidgetSettings::Nertc_Test_AppKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Nertc_Test_AppToken) == 0x000170, "Member 'ULimNativeWidgetSettings::Nertc_Test_AppToken' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Agora_AppKey) == 0x000180, "Member 'ULimNativeWidgetSettings::Agora_AppKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Agora_AppToken) == 0x000190, "Member 'ULimNativeWidgetSettings::Agora_AppToken' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Agora_Test_AppKey) == 0x0001A0, "Member 'ULimNativeWidgetSettings::Agora_Test_AppKey' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, Agora_Test_AppToken) == 0x0001B0, "Member 'ULimNativeWidgetSettings::Agora_Test_AppToken' has a wrong offset!");
static_assert(offsetof(ULimNativeWidgetSettings, bEnvOversea) == 0x0001C0, "Member 'ULimNativeWidgetSettings::bEnvOversea' has a wrong offset!");

// Class LimNativeWidget.NertcManager
// 0x01C8 (0x01F0 - 0x0028)
class UNertcManager final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bSuccess)> OnPermissionResult;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 RoomID, int32 Uid, int32 Result, int64 Elapsed)> OnEnterRoom; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Result, int64 Reason)> OnExitRoom;                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 State, int32 Reason)> OnConnectionChanged;                   // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<int32>& UidList, const TArray<int32>& VolumeList)> OnNertcUserInfoUpdate; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Volume, bool bVad)> OnNertcLocalInfoUpdate;                  // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool EnterRoom, int32 Uid)> OnUserRoomStateChange;                 // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Muted, int32 Uid)> OnUserAudioStateChanged;                   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bChanged)> OnAudioStateChanged;                               // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Errorcode)> OnAuthGetResult;                                 // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Errorcode, const class FString& FilePath)> OnRecodeComplete; // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Errorcode, const class FString& FilePath)> OnPlayComplete;   // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Errorcode, const class FString& FilePath, const class FString& FileID)> OnUploadComplete; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Errorcode, const class FString& FilePath, const class FString& FileID)> OnDownloadComplete; // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<int32>                                 MuteUIDList;                                       // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& RoomID, int32 Uid)> OnEnterRoomPre;           // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitRoomPre;                                     // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(uint8 SendRule, const TArray<int32>& SendList, uint8 RecvRule, const TArray<int32>& RecvList)> OnSetAudioSendAndRecv; // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnabled)> OnEnableMic;                                       // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnabled)> OnEnableSpeaker;                                   // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Uid, int32 Volume)> OnSetSpeakerVolumeByUid;                 // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x60];                                     // 0x0190(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DestroyInstance();
	static class UNertcManager* GetInstance();
	static class FString GetRecordingLocalFilePath();
	static bool IsInitialized();

	void ApplyNertcAuth(int32 Uid, const class FString& Token);
	void CancelRecording();
	bool CheckPlatformMicPermission();
	void DownloadRecordedFile(const class FString& FileID, const class FString& FilePath);
	void EnableAudioIndication(bool InEnable, int32 Millions, bool bEnableLocal);
	void EnableMic(bool InEnable);
	void EnableMicNoiseReduction(bool bEnable);
	void EnableRangeVoice(bool bEnbale);
	void EnableSpeaker(bool InEnable);
	void EnterRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid);
	void ExitRoom();
	void GetFileSize(const class FString& FilePath);
	TArray<struct FRTCDeviceInfo> GetMicList();
	TArray<struct FRTCDeviceInfo> GetSpeakerList();
	int32 GetVoiceFileDuration(const class FString& FilePath);
	void Init(bool bEnableLog);
	void InnerEnableMic(bool InEnable);
	void InnerEnterRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid);
	bool IsInRtcRoom();
	void MediaMute(int32 Uid, bool bMute);
	void PauseRecording();
	void PlayRecordedFile(const class FString& FilePath);
	void PreInit(const class FString& Appkey);
	void ResumeRecording();
	void SelectMic(const class FString& InDeviceID);
	void SelectSpeak(const class FString& InDeviceID);
	void SetAudioSendAndRecvRules(ERTCAudioRouteSendType InSendType, const TArray<int32>& InSendOpenIDList, ERTCAudioRouteRecvType InRecvType, const TArray<int32>& InRecvOpenIDList);
	void SetMaxMessageLength(int32 MsTime);
	void SetRangeAudioMode(ERTCRangeAudioMode InAudioMode);
	void SetRangeAudioTeamID(int32 TeamID);
	void SetSubscribeAudioAllowlist(const TArray<int32>& OpenIDList);
	void SetSubscribeAudioBlocklist(const TArray<int32>& OpenIDList);
	void SetSubscribeAudioOnlyBy(const TArray<int32>& OpenIDList);
	void StartRecording(const class FString& FilePath);
	void StopPlayFile();
	void StopRecording();
	void SwitchRoom(const class FString& RoomID, const class FString& AppToken, int32 Uid, int32 TeamID, int32 AudioDistance);
	void UnInit();
	void UnRegisterLuaEvent();
	void UpdateAudioRecvRange(int32 InRange);
	void UpdateSelfPosition(const struct FVector& InSelfPosition, const struct FRotator& InSelfRotator);
	void UploadRecordedFile(const class FString& FilePath);

	int32 GameSetSpeakerVolumeByUid(const int32 Uid, const int32 Volume) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NertcManager">();
	}
	static class UNertcManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNertcManager>();
	}
};
static_assert(alignof(UNertcManager) == 0x000008, "Wrong alignment on UNertcManager");
static_assert(sizeof(UNertcManager) == 0x0001F0, "Wrong size on UNertcManager");
static_assert(offsetof(UNertcManager, OnPermissionResult) == 0x000040, "Member 'UNertcManager::OnPermissionResult' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnEnterRoom) == 0x000050, "Member 'UNertcManager::OnEnterRoom' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnExitRoom) == 0x000060, "Member 'UNertcManager::OnExitRoom' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnConnectionChanged) == 0x000070, "Member 'UNertcManager::OnConnectionChanged' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnNertcUserInfoUpdate) == 0x000080, "Member 'UNertcManager::OnNertcUserInfoUpdate' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnNertcLocalInfoUpdate) == 0x000090, "Member 'UNertcManager::OnNertcLocalInfoUpdate' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnUserRoomStateChange) == 0x0000A0, "Member 'UNertcManager::OnUserRoomStateChange' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnUserAudioStateChanged) == 0x0000B0, "Member 'UNertcManager::OnUserAudioStateChanged' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnAudioStateChanged) == 0x0000C0, "Member 'UNertcManager::OnAudioStateChanged' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnAuthGetResult) == 0x0000D0, "Member 'UNertcManager::OnAuthGetResult' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnRecodeComplete) == 0x0000E0, "Member 'UNertcManager::OnRecodeComplete' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnPlayComplete) == 0x0000F0, "Member 'UNertcManager::OnPlayComplete' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnUploadComplete) == 0x000100, "Member 'UNertcManager::OnUploadComplete' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnDownloadComplete) == 0x000110, "Member 'UNertcManager::OnDownloadComplete' has a wrong offset!");
static_assert(offsetof(UNertcManager, MuteUIDList) == 0x000120, "Member 'UNertcManager::MuteUIDList' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnEnterRoomPre) == 0x000130, "Member 'UNertcManager::OnEnterRoomPre' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnExitRoomPre) == 0x000140, "Member 'UNertcManager::OnExitRoomPre' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnSetAudioSendAndRecv) == 0x000150, "Member 'UNertcManager::OnSetAudioSendAndRecv' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnEnableMic) == 0x000160, "Member 'UNertcManager::OnEnableMic' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnEnableSpeaker) == 0x000170, "Member 'UNertcManager::OnEnableSpeaker' has a wrong offset!");
static_assert(offsetof(UNertcManager, OnSetSpeakerVolumeByUid) == 0x000180, "Member 'UNertcManager::OnSetSpeakerVolumeByUid' has a wrong offset!");

}

