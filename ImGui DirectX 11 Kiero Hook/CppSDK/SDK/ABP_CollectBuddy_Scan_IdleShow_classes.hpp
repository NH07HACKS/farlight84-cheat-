#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CollectBuddy_Scan_IdleShow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ABP_Buddy_Collect_Base_classes.hpp"


namespace SDK
{

// DynamicClass ABP_CollectBuddy_Scan_IdleShow.ABP_CollectBuddy_Scan_IdleShow_C
// 0x0020 (0x05D0 - 0x05B0)
class UABP_CollectBuddy_Scan_IdleShow_C final : public UABP_Buddy_Collect_Base_C
{
public:
	struct FTimerHandle                           SleepEmotionAnimHandle;                            // 0x05A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SleepEmotionAnimPlayCurve;                         // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepEmotionAnimElapseTime;                        // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepEmotionAnimTickInterval;                      // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_ABP_CollectBuddy_Scan_IdleShow_C; // 0x05C0(0x0010)(ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)

public:
	void AnimNotify_OnEndSleep();
	void AnimNotify_OnStartSleep();
	void CustomEvent_0();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABP_CollectBuddy_Scan_IdleShow_C">();
	}
	static class UABP_CollectBuddy_Scan_IdleShow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CollectBuddy_Scan_IdleShow_C>();
	}
};
static_assert(alignof(UABP_CollectBuddy_Scan_IdleShow_C) == 0x000010, "Wrong alignment on UABP_CollectBuddy_Scan_IdleShow_C");
static_assert(sizeof(UABP_CollectBuddy_Scan_IdleShow_C) == 0x0005D0, "Wrong size on UABP_CollectBuddy_Scan_IdleShow_C");
static_assert(offsetof(UABP_CollectBuddy_Scan_IdleShow_C, SleepEmotionAnimHandle) == 0x0005A8, "Member 'UABP_CollectBuddy_Scan_IdleShow_C::SleepEmotionAnimHandle' has a wrong offset!");
static_assert(offsetof(UABP_CollectBuddy_Scan_IdleShow_C, SleepEmotionAnimPlayCurve) == 0x0005B0, "Member 'UABP_CollectBuddy_Scan_IdleShow_C::SleepEmotionAnimPlayCurve' has a wrong offset!");
static_assert(offsetof(UABP_CollectBuddy_Scan_IdleShow_C, SleepEmotionAnimElapseTime) == 0x0005B8, "Member 'UABP_CollectBuddy_Scan_IdleShow_C::SleepEmotionAnimElapseTime' has a wrong offset!");
static_assert(offsetof(UABP_CollectBuddy_Scan_IdleShow_C, SleepEmotionAnimTickInterval) == 0x0005BC, "Member 'UABP_CollectBuddy_Scan_IdleShow_C::SleepEmotionAnimTickInterval' has a wrong offset!");
static_assert(offsetof(UABP_CollectBuddy_Scan_IdleShow_C, K2Node_CreateDelegate_OutputDelegate_ABP_CollectBuddy_Scan_IdleShow_C) == 0x0005C0, "Member 'UABP_CollectBuddy_Scan_IdleShow_C::K2Node_CreateDelegate_OutputDelegate_ABP_CollectBuddy_Scan_IdleShow_C' has a wrong offset!");

}

