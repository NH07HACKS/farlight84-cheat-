#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractionDoor

#include "Basic.hpp"

#include "BP_InteractionDoor_classes.hpp"
#include "BP_InteractionDoor_parameters.hpp"


namespace SDK
{

// Function BP_InteractionDoor.BP_InteractionDoor_C.CalcCloseDoorVelocity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractionDoor_C::CalcCloseDoorVelocity(float Dist, float Angle, float* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractionDoor_C", "CalcCloseDoorVelocity");

	Params::BP_InteractionDoor_C_CalcCloseDoorVelocity Parms{};

	Parms.Dist = Dist;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = Parms.Velocity;
}


// Function BP_InteractionDoor.BP_InteractionDoor_C.CalcOpenDoorForce
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  First                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Second                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractionDoor_C::CalcOpenDoorForce(float Dist, float Angle, float* First, float* Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractionDoor_C", "CalcOpenDoorForce");

	Params::BP_InteractionDoor_C_CalcOpenDoorForce Parms{};

	Parms.Dist = Dist;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);

	if (First != nullptr)
		*First = Parms.First;

	if (Second != nullptr)
		*Second = Parms.Second;
}


// Function BP_InteractionDoor.BP_InteractionDoor_C.ReceiveDoorClosingAngularVelocity
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HitPointToShaftDist                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayerToShaftDist                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CombatAngle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_InteractionDoor_C::ReceiveDoorClosingAngularVelocity(float HitPointToShaftDist, float PlayerToShaftDist, float CombatAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractionDoor_C", "ReceiveDoorClosingAngularVelocity");

	Params::BP_InteractionDoor_C_ReceiveDoorClosingAngularVelocity Parms{};

	Parms.HitPointToShaftDist = HitPointToShaftDist;
	Parms.PlayerToShaftDist = PlayerToShaftDist;
	Parms.CombatAngle = CombatAngle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractionDoor.BP_InteractionDoor_C.ReceiveComputeRotationalForce
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HitPointToShaftDist                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayerToShaftDist                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CombatAngle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutFirstTorque                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutSecondTorque                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractionDoor_C::ReceiveComputeRotationalForce(float HitPointToShaftDist, float PlayerToShaftDist, float CombatAngle, float* OutFirstTorque, float* OutSecondTorque)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractionDoor_C", "ReceiveComputeRotationalForce");

	Params::BP_InteractionDoor_C_ReceiveComputeRotationalForce Parms{};

	Parms.HitPointToShaftDist = HitPointToShaftDist;
	Parms.PlayerToShaftDist = PlayerToShaftDist;
	Parms.CombatAngle = CombatAngle;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFirstTorque != nullptr)
		*OutFirstTorque = Parms.OutFirstTorque;

	if (OutSecondTorque != nullptr)
		*OutSecondTorque = Parms.OutSecondTorque;
}

}

