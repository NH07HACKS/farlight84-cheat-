#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_AirlineCruise

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.GetPlayerLandLocation
// 0x0028 (0x0028 - 0x0000)
struct BPC_AirlineCruise_C_GetPlayerLandLocation final
{
public:
	const class ASolarPlayerState*                TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Succeed;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_AirlineCruise_C_GetPlayerLandLocation) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_GetPlayerLandLocation");
static_assert(sizeof(BPC_AirlineCruise_C_GetPlayerLandLocation) == 0x000028, "Wrong size on BPC_AirlineCruise_C_GetPlayerLandLocation");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerLandLocation, TargetPlayer) == 0x000000, "Member 'BPC_AirlineCruise_C_GetPlayerLandLocation::TargetPlayer' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerLandLocation, Location) == 0x000008, "Member 'BPC_AirlineCruise_C_GetPlayerLandLocation::Location' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerLandLocation, Succeed) == 0x000014, "Member 'BPC_AirlineCruise_C_GetPlayerLandLocation::Succeed' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerLandLocation, CallFunc_Map_Find_Value) == 0x000018, "Member 'BPC_AirlineCruise_C_GetPlayerLandLocation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerLandLocation, CallFunc_Map_Find_ReturnValue) == 0x000024, "Member 'BPC_AirlineCruise_C_GetPlayerLandLocation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.GetPlayerEjectLocation
// 0x0028 (0x0028 - 0x0000)
struct BPC_AirlineCruise_C_GetPlayerEjectLocation final
{
public:
	const class ASolarPlayerState*                TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Succeed;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_AirlineCruise_C_GetPlayerEjectLocation) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_GetPlayerEjectLocation");
static_assert(sizeof(BPC_AirlineCruise_C_GetPlayerEjectLocation) == 0x000028, "Wrong size on BPC_AirlineCruise_C_GetPlayerEjectLocation");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerEjectLocation, TargetPlayer) == 0x000000, "Member 'BPC_AirlineCruise_C_GetPlayerEjectLocation::TargetPlayer' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerEjectLocation, Location) == 0x000008, "Member 'BPC_AirlineCruise_C_GetPlayerEjectLocation::Location' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerEjectLocation, Succeed) == 0x000014, "Member 'BPC_AirlineCruise_C_GetPlayerEjectLocation::Succeed' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerEjectLocation, CallFunc_Map_Find_Value) == 0x000018, "Member 'BPC_AirlineCruise_C_GetPlayerEjectLocation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerEjectLocation, CallFunc_Map_Find_ReturnValue) == 0x000024, "Member 'BPC_AirlineCruise_C_GetPlayerEjectLocation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.GetAirlineData_RealWorld
// 0x00A0 (0x00A0 - 0x0000)
struct BPC_AirlineCruise_C_GetAirlineData_RealWorld final
{
public:
	struct FAirlineData                           AirlineData;                                       // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FVector2D                              LineStart;                                         // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineEnd;                                           // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              JumpStart;                                         // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              JumpEnd;                                           // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         hight;                                             // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation;  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_1; // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_2; // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_3; // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_2;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_3;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_AirlineCruise_C_GetAirlineData_RealWorld) == 0x000004, "Wrong alignment on BPC_AirlineCruise_C_GetAirlineData_RealWorld");
static_assert(sizeof(BPC_AirlineCruise_C_GetAirlineData_RealWorld) == 0x0000A0, "Wrong size on BPC_AirlineCruise_C_GetAirlineData_RealWorld");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, AirlineData) == 0x000000, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::AirlineData' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, LineStart) == 0x000028, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::LineStart' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, LineEnd) == 0x000030, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::LineEnd' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, JumpStart) == 0x000038, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::JumpStart' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, JumpEnd) == 0x000040, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::JumpEnd' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, Speed) == 0x000048, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::Speed' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, hight) == 0x00004C, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::hight' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation) == 0x000050, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_1) == 0x00005C, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000068, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000070, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_2) == 0x000078, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_2' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_3) == 0x000084, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_3' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_2) == 0x000090, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetAirlineData_RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_3) == 0x000098, "Member 'BPC_AirlineCruise_C_GetAirlineData_RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_3' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.MiniMap2RealWorld
// 0x0090 (0x0090 - 0x0000)
struct BPC_AirlineCruise_C_MiniMap2RealWorld final
{
public:
	struct FVector2D                              JumpStart;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              JumpEnd;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineStart;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineEnd;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              JumpStartR;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              JumpEndR;                                          // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineStartR;                                        // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineEndR;                                          // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation;  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_1; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_2; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__A_MiniMapToWorldLocation_WorldLocation_3; // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_2;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_3;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_AirlineCruise_C_MiniMap2RealWorld) == 0x000004, "Wrong alignment on BPC_AirlineCruise_C_MiniMap2RealWorld");
static_assert(sizeof(BPC_AirlineCruise_C_MiniMap2RealWorld) == 0x000090, "Wrong size on BPC_AirlineCruise_C_MiniMap2RealWorld");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, JumpStart) == 0x000000, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::JumpStart' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, JumpEnd) == 0x000008, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::JumpEnd' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, LineStart) == 0x000010, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::LineStart' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, LineEnd) == 0x000018, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::LineEnd' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, JumpStartR) == 0x000020, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::JumpStartR' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, JumpEndR) == 0x000028, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::JumpEndR' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, LineStartR) == 0x000030, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::LineStartR' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, LineEndR) == 0x000038, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::LineEndR' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation) == 0x000040, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_1) == 0x00004C, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000058, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000060, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_2) == 0x000068, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_2' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc__A_MiniMapToWorldLocation_WorldLocation_3) == 0x000074, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc__A_MiniMapToWorldLocation_WorldLocation_3' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_2) == 0x000080, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_MiniMap2RealWorld, CallFunc_Conv_VectorToVector2D_ReturnValue_3) == 0x000088, "Member 'BPC_AirlineCruise_C_MiniMap2RealWorld::CallFunc_Conv_VectorToVector2D_ReturnValue_3' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.OnPlayerEjectingStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BPC_AirlineCruise_C_OnPlayerEjectingStateChanged final
{
public:
	ECharacterEjectState                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        TargetCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_AirlineCruise_C_OnPlayerEjectingStateChanged) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_OnPlayerEjectingStateChanged");
static_assert(sizeof(BPC_AirlineCruise_C_OnPlayerEjectingStateChanged) == 0x000010, "Wrong size on BPC_AirlineCruise_C_OnPlayerEjectingStateChanged");
static_assert(offsetof(BPC_AirlineCruise_C_OnPlayerEjectingStateChanged, State) == 0x000000, "Member 'BPC_AirlineCruise_C_OnPlayerEjectingStateChanged::State' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_OnPlayerEjectingStateChanged, TargetCharacter) == 0x000008, "Member 'BPC_AirlineCruise_C_OnPlayerEjectingStateChanged::TargetCharacter' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.SetSpecificAirlineData
// 0x0028 (0x0028 - 0x0000)
struct BPC_AirlineCruise_C_SetSpecificAirlineData final
{
public:
	struct FAirlineData                           AirlineData;                                       // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(BPC_AirlineCruise_C_SetSpecificAirlineData) == 0x000004, "Wrong alignment on BPC_AirlineCruise_C_SetSpecificAirlineData");
static_assert(sizeof(BPC_AirlineCruise_C_SetSpecificAirlineData) == 0x000028, "Wrong size on BPC_AirlineCruise_C_SetSpecificAirlineData");
static_assert(offsetof(BPC_AirlineCruise_C_SetSpecificAirlineData, AirlineData) == 0x000000, "Member 'BPC_AirlineCruise_C_SetSpecificAirlineData::AirlineData' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.ReceiveOnBoarding
// 0x0010 (0x0010 - 0x0000)
struct BPC_AirlineCruise_C_ReceiveOnBoarding final
{
public:
	TArray<class ASolarCharacter*>                Characters;                                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPC_AirlineCruise_C_ReceiveOnBoarding) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_ReceiveOnBoarding");
static_assert(sizeof(BPC_AirlineCruise_C_ReceiveOnBoarding) == 0x000010, "Wrong size on BPC_AirlineCruise_C_ReceiveOnBoarding");
static_assert(offsetof(BPC_AirlineCruise_C_ReceiveOnBoarding, Characters) == 0x000000, "Member 'BPC_AirlineCruise_C_ReceiveOnBoarding::Characters' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.ExecuteUbergraph_BPC_AirlineCruise
// 0x00F8 (0x00F8 - 0x0000)
struct BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECharacterEjectState State, class ASolarCharacter* TargetCharacter)> K2Node_CreateDelegate_OutputDelegate; // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	ECharacterEjectState                          Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SolarCharacterPlayer_C*             K2Node_DynamicCast_AsBP_Solar_Character_Player;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECharacterEjectState                          K2Node_CustomEvent_State;                          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_CustomEvent_TargetCharacter;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_GetPlayerStateByCharacterOrController_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAirlineData                           K2Node_CustomEvent_AirlineData;                    // 0x0058(0x0028)(ConstParm, NoDestructor)
	TMap<class ASolarPlayerState*, struct FVector> K2Node_Select_Default;                            // 0x0080(0x0050)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASolarCharacter*>                K2Node_Event_Characters;                           // 0x00E8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise");
static_assert(sizeof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise) == 0x0000F8, "Wrong size on BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, EntryPoint) == 0x000000, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, Temp_byte_Variable) == 0x000014, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Array_Get_Item) == 0x000020, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_DynamicCast_AsBP_Solar_Character_Player) == 0x000028, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_DynamicCast_AsBP_Solar_Character_Player' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_CustomEvent_State) == 0x000031, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_CustomEvent_TargetCharacter) == 0x000038, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_CustomEvent_TargetCharacter' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_GetPlayerStateByCharacterOrController_ReturnValue) == 0x000050, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_GetPlayerStateByCharacterOrController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_CustomEvent_AirlineData) == 0x000058, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_CustomEvent_AirlineData' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_Select_Default) == 0x000080, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, Temp_int_Loop_Counter_Variable) == 0x0000D0, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Map_Find_Value) == 0x0000D4, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Map_Find_ReturnValue) == 0x0000E0, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Less_IntInt_ReturnValue) == 0x0000E1, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise, K2Node_Event_Characters) == 0x0000E8, "Member 'BPC_AirlineCruise_C_ExecuteUbergraph_BPC_AirlineCruise::K2Node_Event_Characters' has a wrong offset!");

// Function BPC_AirlineCruise.BPC_AirlineCruise_C.GetPlayerForceJumped
// 0x0010 (0x0010 - 0x0000)
struct BPC_AirlineCruise_C_GetPlayerForceJumped final
{
public:
	const class ASolarPlayerState*                TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForceJumpPlayer_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_AirlineCruise_C_GetPlayerForceJumped) == 0x000008, "Wrong alignment on BPC_AirlineCruise_C_GetPlayerForceJumped");
static_assert(sizeof(BPC_AirlineCruise_C_GetPlayerForceJumped) == 0x000010, "Wrong size on BPC_AirlineCruise_C_GetPlayerForceJumped");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerForceJumped, TargetPlayer) == 0x000000, "Member 'BPC_AirlineCruise_C_GetPlayerForceJumped::TargetPlayer' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerForceJumped, ReturnValue) == 0x000008, "Member 'BPC_AirlineCruise_C_GetPlayerForceJumped::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_AirlineCruise_C_GetPlayerForceJumped, CallFunc_IsForceJumpPlayer_ReturnValue) == 0x000009, "Member 'BPC_AirlineCruise_C_GetPlayerForceJumped::CallFunc_IsForceJumpPlayer_ReturnValue' has a wrong offset!");

}

