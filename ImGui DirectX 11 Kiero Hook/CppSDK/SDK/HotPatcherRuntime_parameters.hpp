#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HotPatcherRuntime

#include "Basic.hpp"

#include "HotPatcherRuntime_structs.hpp"


namespace SDK::Params
{

// Function HotPatcherRuntime.FlibAssetManageHelper.CombineAssetDependencies
// 0x00F0 (0x00F0 - 0x0000)
struct FlibAssetManageHelper_CombineAssetDependencies final
{
public:
	struct FAssetDependenciesInfo                 A;                                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 B;                                                 // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 ReturnValue;                                       // 0x00A0(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_CombineAssetDependencies) == 0x000008, "Wrong alignment on FlibAssetManageHelper_CombineAssetDependencies");
static_assert(sizeof(FlibAssetManageHelper_CombineAssetDependencies) == 0x0000F0, "Wrong size on FlibAssetManageHelper_CombineAssetDependencies");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetDependencies, A) == 0x000000, "Member 'FlibAssetManageHelper_CombineAssetDependencies::A' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetDependencies, B) == 0x000050, "Member 'FlibAssetManageHelper_CombineAssetDependencies::B' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetDependencies, ReturnValue) == 0x0000A0, "Member 'FlibAssetManageHelper_CombineAssetDependencies::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.CombineAssetsDetailAsFAssetDepenInfo
// 0x0068 (0x0068 - 0x0000)
struct FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo final
{
public:
	TArray<struct FAssetDetail>                   InAssetsDetailList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 OutAssetInfo;                                      // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo) == 0x000008, "Wrong alignment on FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo");
static_assert(sizeof(FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo) == 0x000068, "Wrong size on FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo, InAssetsDetailList) == 0x000000, "Member 'FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo::InAssetsDetailList' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo, OutAssetInfo) == 0x000010, "Member 'FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo::OutAssetInfo' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo, ReturnValue) == 0x000060, "Member 'FlibAssetManageHelper_CombineAssetsDetailAsFAssetDepenInfo::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.ConvLongPackageNameToCookedPath
// 0x0058 (0x0058 - 0x0000)
struct FlibAssetManageHelper_ConvLongPackageNameToCookedPath final
{
public:
	class FString                                 InProjectAbsDir;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLongPackageName;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutCookedAssetPath;                                // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutCookedAssetRelativePath;                        // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath) == 0x000008, "Wrong alignment on FlibAssetManageHelper_ConvLongPackageNameToCookedPath");
static_assert(sizeof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath) == 0x000058, "Wrong size on FlibAssetManageHelper_ConvLongPackageNameToCookedPath");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, InProjectAbsDir) == 0x000000, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::InProjectAbsDir' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, InPlatformName) == 0x000010, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, InLongPackageName) == 0x000020, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::InLongPackageName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, OutCookedAssetPath) == 0x000030, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::OutCookedAssetPath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, OutCookedAssetRelativePath) == 0x000040, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::OutCookedAssetRelativePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvLongPackageNameToCookedPath, ReturnValue) == 0x000050, "Member 'FlibAssetManageHelper_ConvLongPackageNameToCookedPath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.ConvRelativeDirToAbsDir
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_ConvRelativeDirToAbsDir final
{
public:
	class FString                                 InRelativePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutAbsPath;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_ConvRelativeDirToAbsDir) == 0x000008, "Wrong alignment on FlibAssetManageHelper_ConvRelativeDirToAbsDir");
static_assert(sizeof(FlibAssetManageHelper_ConvRelativeDirToAbsDir) == 0x000028, "Wrong size on FlibAssetManageHelper_ConvRelativeDirToAbsDir");
static_assert(offsetof(FlibAssetManageHelper_ConvRelativeDirToAbsDir, InRelativePath) == 0x000000, "Member 'FlibAssetManageHelper_ConvRelativeDirToAbsDir::InRelativePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvRelativeDirToAbsDir, OutAbsPath) == 0x000010, "Member 'FlibAssetManageHelper_ConvRelativeDirToAbsDir::OutAbsPath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ConvRelativeDirToAbsDir, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_ConvRelativeDirToAbsDir::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.ExportCookPakCommandToFile
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_ExportCookPakCommandToFile final
{
public:
	TArray<class FString>                         InCommand;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFile;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_ExportCookPakCommandToFile) == 0x000008, "Wrong alignment on FlibAssetManageHelper_ExportCookPakCommandToFile");
static_assert(sizeof(FlibAssetManageHelper_ExportCookPakCommandToFile) == 0x000028, "Wrong size on FlibAssetManageHelper_ExportCookPakCommandToFile");
static_assert(offsetof(FlibAssetManageHelper_ExportCookPakCommandToFile, InCommand) == 0x000000, "Member 'FlibAssetManageHelper_ExportCookPakCommandToFile::InCommand' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ExportCookPakCommandToFile, InFile) == 0x000010, "Member 'FlibAssetManageHelper_ExportCookPakCommandToFile::InFile' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ExportCookPakCommandToFile, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_ExportCookPakCommandToFile::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.FilenameToPackagePath
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_FilenameToPackagePath final
{
public:
	class FString                                 InAbsPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPackagePath;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_FilenameToPackagePath) == 0x000008, "Wrong alignment on FlibAssetManageHelper_FilenameToPackagePath");
static_assert(sizeof(FlibAssetManageHelper_FilenameToPackagePath) == 0x000028, "Wrong size on FlibAssetManageHelper_FilenameToPackagePath");
static_assert(offsetof(FlibAssetManageHelper_FilenameToPackagePath, InAbsPath) == 0x000000, "Member 'FlibAssetManageHelper_FilenameToPackagePath::InAbsPath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilenameToPackagePath, OutPackagePath) == 0x000010, "Member 'FlibAssetManageHelper_FilenameToPackagePath::OutPackagePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilenameToPackagePath, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_FilenameToPackagePath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.FilterNoRefAssets
// 0x0030 (0x0030 - 0x0000)
struct FlibAssetManageHelper_FilterNoRefAssets final
{
public:
	TArray<struct FAssetDetail>                   InAssetsDetail;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutHasRefAssetsDetail;                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutDontHasRefAssetsDetail;                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_FilterNoRefAssets) == 0x000008, "Wrong alignment on FlibAssetManageHelper_FilterNoRefAssets");
static_assert(sizeof(FlibAssetManageHelper_FilterNoRefAssets) == 0x000030, "Wrong size on FlibAssetManageHelper_FilterNoRefAssets");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssets, InAssetsDetail) == 0x000000, "Member 'FlibAssetManageHelper_FilterNoRefAssets::InAssetsDetail' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssets, OutHasRefAssetsDetail) == 0x000010, "Member 'FlibAssetManageHelper_FilterNoRefAssets::OutHasRefAssetsDetail' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssets, OutDontHasRefAssetsDetail) == 0x000020, "Member 'FlibAssetManageHelper_FilterNoRefAssets::OutDontHasRefAssetsDetail' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.FilterNoRefAssetsWithIgnoreFilter
// 0x0040 (0x0040 - 0x0000)
struct FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter final
{
public:
	TArray<struct FAssetDetail>                   InAssetsDetail;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InIgnoreFilters;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutHasRefAssetsDetail;                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutDontHasRefAssetsDetail;                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter) == 0x000008, "Wrong alignment on FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter");
static_assert(sizeof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter) == 0x000040, "Wrong size on FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter, InAssetsDetail) == 0x000000, "Member 'FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter::InAssetsDetail' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter, InIgnoreFilters) == 0x000010, "Member 'FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter::InIgnoreFilters' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter, OutHasRefAssetsDetail) == 0x000020, "Member 'FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter::OutHasRefAssetsDetail' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter, OutDontHasRefAssetsDetail) == 0x000030, "Member 'FlibAssetManageHelper_FilterNoRefAssetsWithIgnoreFilter::OutDontHasRefAssetsDetail' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.FindFilesRecursive
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_FindFilesRecursive final
{
public:
	class FString                                 InStartDir;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutFileList;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRecursive;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_FindFilesRecursive) == 0x000008, "Wrong alignment on FlibAssetManageHelper_FindFilesRecursive");
static_assert(sizeof(FlibAssetManageHelper_FindFilesRecursive) == 0x000028, "Wrong size on FlibAssetManageHelper_FindFilesRecursive");
static_assert(offsetof(FlibAssetManageHelper_FindFilesRecursive, InStartDir) == 0x000000, "Member 'FlibAssetManageHelper_FindFilesRecursive::InStartDir' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FindFilesRecursive, OutFileList) == 0x000010, "Member 'FlibAssetManageHelper_FindFilesRecursive::OutFileList' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FindFilesRecursive, InRecursive) == 0x000020, "Member 'FlibAssetManageHelper_FindFilesRecursive::InRecursive' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_FindFilesRecursive, ReturnValue) == 0x000021, "Member 'FlibAssetManageHelper_FindFilesRecursive::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetAllEnabledModuleName
// 0x0050 (0x0050 - 0x0000)
struct FlibAssetManageHelper_GetAllEnabledModuleName final
{
public:
	TMap<class FString, class FString>            OutModules;                                        // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_GetAllEnabledModuleName) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetAllEnabledModuleName");
static_assert(sizeof(FlibAssetManageHelper_GetAllEnabledModuleName) == 0x000050, "Wrong size on FlibAssetManageHelper_GetAllEnabledModuleName");
static_assert(offsetof(FlibAssetManageHelper_GetAllEnabledModuleName, OutModules) == 0x000000, "Member 'FlibAssetManageHelper_GetAllEnabledModuleName::OutModules' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetAssetPackageGUID
// 0x0020 (0x0020 - 0x0000)
struct FlibAssetManageHelper_GetAssetPackageGUID final
{
public:
	class FString                                 InPackagePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutGUID;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetAssetPackageGUID) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetAssetPackageGUID");
static_assert(sizeof(FlibAssetManageHelper_GetAssetPackageGUID) == 0x000020, "Wrong size on FlibAssetManageHelper_GetAssetPackageGUID");
static_assert(offsetof(FlibAssetManageHelper_GetAssetPackageGUID, InPackagePath) == 0x000000, "Member 'FlibAssetManageHelper_GetAssetPackageGUID::InPackagePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetAssetPackageGUID, OutGUID) == 0x000010, "Member 'FlibAssetManageHelper_GetAssetPackageGUID::OutGUID' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetAssetPackageGUID, ReturnValue) == 0x000018, "Member 'FlibAssetManageHelper_GetAssetPackageGUID::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetAssetReferenceEx
// 0x0040 (0x0040 - 0x0000)
struct FlibAssetManageHelper_GetAssetReferenceEx final
{
public:
	struct FAssetDetail                           InAsset;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EAssetRegistryDependencyTypeEx>        SearchAssetDepTypes;                               // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutRefAsset;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetAssetReferenceEx) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetAssetReferenceEx");
static_assert(sizeof(FlibAssetManageHelper_GetAssetReferenceEx) == 0x000040, "Wrong size on FlibAssetManageHelper_GetAssetReferenceEx");
static_assert(offsetof(FlibAssetManageHelper_GetAssetReferenceEx, InAsset) == 0x000000, "Member 'FlibAssetManageHelper_GetAssetReferenceEx::InAsset' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetAssetReferenceEx, SearchAssetDepTypes) == 0x000018, "Member 'FlibAssetManageHelper_GetAssetReferenceEx::SearchAssetDepTypes' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetAssetReferenceEx, OutRefAsset) == 0x000028, "Member 'FlibAssetManageHelper_GetAssetReferenceEx::OutRefAsset' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetAssetReferenceEx, ReturnValue) == 0x000038, "Member 'FlibAssetManageHelper_GetAssetReferenceEx::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetEnableModuleAbsDir
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_GetEnableModuleAbsDir final
{
public:
	class FString                                 InModuleName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPath;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetEnableModuleAbsDir) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetEnableModuleAbsDir");
static_assert(sizeof(FlibAssetManageHelper_GetEnableModuleAbsDir) == 0x000028, "Wrong size on FlibAssetManageHelper_GetEnableModuleAbsDir");
static_assert(offsetof(FlibAssetManageHelper_GetEnableModuleAbsDir, InModuleName) == 0x000000, "Member 'FlibAssetManageHelper_GetEnableModuleAbsDir::InModuleName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetEnableModuleAbsDir, OutPath) == 0x000010, "Member 'FlibAssetManageHelper_GetEnableModuleAbsDir::OutPath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetEnableModuleAbsDir, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_GetEnableModuleAbsDir::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetModuleNameByRelativePath
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_GetModuleNameByRelativePath final
{
public:
	class FString                                 InRelativePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutModuleName;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetModuleNameByRelativePath) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetModuleNameByRelativePath");
static_assert(sizeof(FlibAssetManageHelper_GetModuleNameByRelativePath) == 0x000028, "Wrong size on FlibAssetManageHelper_GetModuleNameByRelativePath");
static_assert(offsetof(FlibAssetManageHelper_GetModuleNameByRelativePath, InRelativePath) == 0x000000, "Member 'FlibAssetManageHelper_GetModuleNameByRelativePath::InRelativePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetModuleNameByRelativePath, OutModuleName) == 0x000010, "Member 'FlibAssetManageHelper_GetModuleNameByRelativePath::OutModuleName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetModuleNameByRelativePath, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_GetModuleNameByRelativePath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetPluginModuleAbsDir
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_GetPluginModuleAbsDir final
{
public:
	class FString                                 InPluginModuleName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPath;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetPluginModuleAbsDir) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetPluginModuleAbsDir");
static_assert(sizeof(FlibAssetManageHelper_GetPluginModuleAbsDir) == 0x000028, "Wrong size on FlibAssetManageHelper_GetPluginModuleAbsDir");
static_assert(offsetof(FlibAssetManageHelper_GetPluginModuleAbsDir, InPluginModuleName) == 0x000000, "Member 'FlibAssetManageHelper_GetPluginModuleAbsDir::InPluginModuleName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetPluginModuleAbsDir, OutPath) == 0x000010, "Member 'FlibAssetManageHelper_GetPluginModuleAbsDir::OutPath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetPluginModuleAbsDir, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_GetPluginModuleAbsDir::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetRedirectorList
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_GetRedirectorList final
{
public:
	TArray<class FString>                         InFilterPackagePaths;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetDetail>                   OutRedirector;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetRedirectorList) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetRedirectorList");
static_assert(sizeof(FlibAssetManageHelper_GetRedirectorList) == 0x000028, "Wrong size on FlibAssetManageHelper_GetRedirectorList");
static_assert(offsetof(FlibAssetManageHelper_GetRedirectorList, InFilterPackagePaths) == 0x000000, "Member 'FlibAssetManageHelper_GetRedirectorList::InFilterPackagePaths' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetRedirectorList, OutRedirector) == 0x000010, "Member 'FlibAssetManageHelper_GetRedirectorList::OutRedirector' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetRedirectorList, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_GetRedirectorList::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.GetSpecifyAssetDetail
// 0x0030 (0x0030 - 0x0000)
struct FlibAssetManageHelper_GetSpecifyAssetDetail final
{
public:
	class FString                                 InLongPackageName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetDetail                           OutAssetDetail;                                    // 0x0010(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_GetSpecifyAssetDetail) == 0x000008, "Wrong alignment on FlibAssetManageHelper_GetSpecifyAssetDetail");
static_assert(sizeof(FlibAssetManageHelper_GetSpecifyAssetDetail) == 0x000030, "Wrong size on FlibAssetManageHelper_GetSpecifyAssetDetail");
static_assert(offsetof(FlibAssetManageHelper_GetSpecifyAssetDetail, InLongPackageName) == 0x000000, "Member 'FlibAssetManageHelper_GetSpecifyAssetDetail::InLongPackageName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetSpecifyAssetDetail, OutAssetDetail) == 0x000010, "Member 'FlibAssetManageHelper_GetSpecifyAssetDetail::OutAssetDetail' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_GetSpecifyAssetDetail, ReturnValue) == 0x000028, "Member 'FlibAssetManageHelper_GetSpecifyAssetDetail::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.LoadFileToString
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_LoadFileToString final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_LoadFileToString) == 0x000008, "Wrong alignment on FlibAssetManageHelper_LoadFileToString");
static_assert(sizeof(FlibAssetManageHelper_LoadFileToString) == 0x000028, "Wrong size on FlibAssetManageHelper_LoadFileToString");
static_assert(offsetof(FlibAssetManageHelper_LoadFileToString, InFile) == 0x000000, "Member 'FlibAssetManageHelper_LoadFileToString::InFile' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_LoadFileToString, OutString) == 0x000010, "Member 'FlibAssetManageHelper_LoadFileToString::OutString' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_LoadFileToString, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_LoadFileToString::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.LongPackageNameToPackagePath
// 0x0020 (0x0020 - 0x0000)
struct FlibAssetManageHelper_LongPackageNameToPackagePath final
{
public:
	class FString                                 InLongPackageName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_LongPackageNameToPackagePath) == 0x000008, "Wrong alignment on FlibAssetManageHelper_LongPackageNameToPackagePath");
static_assert(sizeof(FlibAssetManageHelper_LongPackageNameToPackagePath) == 0x000020, "Wrong size on FlibAssetManageHelper_LongPackageNameToPackagePath");
static_assert(offsetof(FlibAssetManageHelper_LongPackageNameToPackagePath, InLongPackageName) == 0x000000, "Member 'FlibAssetManageHelper_LongPackageNameToPackagePath::InLongPackageName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_LongPackageNameToPackagePath, ReturnValue) == 0x000010, "Member 'FlibAssetManageHelper_LongPackageNameToPackagePath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.ModuleIsEnabled
// 0x0018 (0x0018 - 0x0000)
struct FlibAssetManageHelper_ModuleIsEnabled final
{
public:
	class FString                                 InModuleName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_ModuleIsEnabled) == 0x000008, "Wrong alignment on FlibAssetManageHelper_ModuleIsEnabled");
static_assert(sizeof(FlibAssetManageHelper_ModuleIsEnabled) == 0x000018, "Wrong size on FlibAssetManageHelper_ModuleIsEnabled");
static_assert(offsetof(FlibAssetManageHelper_ModuleIsEnabled, InModuleName) == 0x000000, "Member 'FlibAssetManageHelper_ModuleIsEnabled::InModuleName' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_ModuleIsEnabled, ReturnValue) == 0x000010, "Member 'FlibAssetManageHelper_ModuleIsEnabled::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.PackagePathToFilename
// 0x0020 (0x0020 - 0x0000)
struct FlibAssetManageHelper_PackagePathToFilename final
{
public:
	class FString                                 InPackagePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibAssetManageHelper_PackagePathToFilename) == 0x000008, "Wrong alignment on FlibAssetManageHelper_PackagePathToFilename");
static_assert(sizeof(FlibAssetManageHelper_PackagePathToFilename) == 0x000020, "Wrong size on FlibAssetManageHelper_PackagePathToFilename");
static_assert(offsetof(FlibAssetManageHelper_PackagePathToFilename, InPackagePath) == 0x000000, "Member 'FlibAssetManageHelper_PackagePathToFilename::InPackagePath' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_PackagePathToFilename, ReturnValue) == 0x000010, "Member 'FlibAssetManageHelper_PackagePathToFilename::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibAssetManageHelper.SaveStringToFile
// 0x0028 (0x0028 - 0x0000)
struct FlibAssetManageHelper_SaveStringToFile final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibAssetManageHelper_SaveStringToFile) == 0x000008, "Wrong alignment on FlibAssetManageHelper_SaveStringToFile");
static_assert(sizeof(FlibAssetManageHelper_SaveStringToFile) == 0x000028, "Wrong size on FlibAssetManageHelper_SaveStringToFile");
static_assert(offsetof(FlibAssetManageHelper_SaveStringToFile, InFile) == 0x000000, "Member 'FlibAssetManageHelper_SaveStringToFile::InFile' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_SaveStringToFile, inString) == 0x000010, "Member 'FlibAssetManageHelper_SaveStringToFile::inString' has a wrong offset!");
static_assert(offsetof(FlibAssetManageHelper_SaveStringToFile, ReturnValue) == 0x000020, "Member 'FlibAssetManageHelper_SaveStringToFile::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.CloseShaderbytecode
// 0x0010 (0x0010 - 0x0000)
struct FlibPakHelper_CloseShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPakHelper_CloseShaderbytecode) == 0x000008, "Wrong alignment on FlibPakHelper_CloseShaderbytecode");
static_assert(sizeof(FlibPakHelper_CloseShaderbytecode) == 0x000010, "Wrong size on FlibPakHelper_CloseShaderbytecode");
static_assert(offsetof(FlibPakHelper_CloseShaderbytecode, LibraryName) == 0x000000, "Member 'FlibPakHelper_CloseShaderbytecode::LibraryName' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.CreateFileByBytes
// 0x0028 (0x0028 - 0x0000)
struct FlibPakHelper_CreateFileByBytes final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InBytes;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWriteFlag;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_CreateFileByBytes) == 0x000008, "Wrong alignment on FlibPakHelper_CreateFileByBytes");
static_assert(sizeof(FlibPakHelper_CreateFileByBytes) == 0x000028, "Wrong size on FlibPakHelper_CreateFileByBytes");
static_assert(offsetof(FlibPakHelper_CreateFileByBytes, InFile) == 0x000000, "Member 'FlibPakHelper_CreateFileByBytes::InFile' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_CreateFileByBytes, InBytes) == 0x000010, "Member 'FlibPakHelper_CreateFileByBytes::InBytes' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_CreateFileByBytes, InWriteFlag) == 0x000020, "Member 'FlibPakHelper_CreateFileByBytes::InWriteFlag' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_CreateFileByBytes, ReturnValue) == 0x000024, "Member 'FlibPakHelper_CreateFileByBytes::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.ExecMountPak
// 0x0028 (0x0028 - 0x0000)
struct FlibPakHelper_ExecMountPak final
{
public:
	class FString                                 InPakPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPakOrder;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMountPoint;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPakHelper_ExecMountPak) == 0x000008, "Wrong alignment on FlibPakHelper_ExecMountPak");
static_assert(sizeof(FlibPakHelper_ExecMountPak) == 0x000028, "Wrong size on FlibPakHelper_ExecMountPak");
static_assert(offsetof(FlibPakHelper_ExecMountPak, InPakPath) == 0x000000, "Member 'FlibPakHelper_ExecMountPak::InPakPath' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ExecMountPak, InPakOrder) == 0x000010, "Member 'FlibPakHelper_ExecMountPak::InPakOrder' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ExecMountPak, InMountPoint) == 0x000018, "Member 'FlibPakHelper_ExecMountPak::InMountPoint' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.GetAllMountedPaks
// 0x0010 (0x0010 - 0x0000)
struct FlibPakHelper_GetAllMountedPaks final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPakHelper_GetAllMountedPaks) == 0x000008, "Wrong alignment on FlibPakHelper_GetAllMountedPaks");
static_assert(sizeof(FlibPakHelper_GetAllMountedPaks) == 0x000010, "Wrong size on FlibPakHelper_GetAllMountedPaks");
static_assert(offsetof(FlibPakHelper_GetAllMountedPaks, ReturnValue) == 0x000000, "Member 'FlibPakHelper_GetAllMountedPaks::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.GetPakOrderByPakPath
// 0x0018 (0x0018 - 0x0000)
struct FlibPakHelper_GetPakOrderByPakPath final
{
public:
	class FString                                 PakFile;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_GetPakOrderByPakPath) == 0x000008, "Wrong alignment on FlibPakHelper_GetPakOrderByPakPath");
static_assert(sizeof(FlibPakHelper_GetPakOrderByPakPath) == 0x000018, "Wrong size on FlibPakHelper_GetPakOrderByPakPath");
static_assert(offsetof(FlibPakHelper_GetPakOrderByPakPath, PakFile) == 0x000000, "Member 'FlibPakHelper_GetPakOrderByPakPath::PakFile' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_GetPakOrderByPakPath, ReturnValue) == 0x000010, "Member 'FlibPakHelper_GetPakOrderByPakPath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.LoadAssetRegistry
// 0x0028 (0x0028 - 0x0000)
struct FlibPakHelper_LoadAssetRegistry final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LibraryDir;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_LoadAssetRegistry) == 0x000008, "Wrong alignment on FlibPakHelper_LoadAssetRegistry");
static_assert(sizeof(FlibPakHelper_LoadAssetRegistry) == 0x000028, "Wrong size on FlibPakHelper_LoadAssetRegistry");
static_assert(offsetof(FlibPakHelper_LoadAssetRegistry, LibraryName) == 0x000000, "Member 'FlibPakHelper_LoadAssetRegistry::LibraryName' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_LoadAssetRegistry, LibraryDir) == 0x000010, "Member 'FlibPakHelper_LoadAssetRegistry::LibraryDir' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_LoadAssetRegistry, ReturnValue) == 0x000020, "Member 'FlibPakHelper_LoadAssetRegistry::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.LoadShaderbytecode
// 0x0028 (0x0028 - 0x0000)
struct FlibPakHelper_LoadShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LibraryDir;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_LoadShaderbytecode) == 0x000008, "Wrong alignment on FlibPakHelper_LoadShaderbytecode");
static_assert(sizeof(FlibPakHelper_LoadShaderbytecode) == 0x000028, "Wrong size on FlibPakHelper_LoadShaderbytecode");
static_assert(offsetof(FlibPakHelper_LoadShaderbytecode, LibraryName) == 0x000000, "Member 'FlibPakHelper_LoadShaderbytecode::LibraryName' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_LoadShaderbytecode, LibraryDir) == 0x000010, "Member 'FlibPakHelper_LoadShaderbytecode::LibraryDir' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_LoadShaderbytecode, ReturnValue) == 0x000020, "Member 'FlibPakHelper_LoadShaderbytecode::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.MountPak
// 0x0030 (0x0030 - 0x0000)
struct FlibPakHelper_MountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PakOrder;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMountPoint;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_MountPak) == 0x000008, "Wrong alignment on FlibPakHelper_MountPak");
static_assert(sizeof(FlibPakHelper_MountPak) == 0x000030, "Wrong size on FlibPakHelper_MountPak");
static_assert(offsetof(FlibPakHelper_MountPak, PakPath) == 0x000000, "Member 'FlibPakHelper_MountPak::PakPath' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_MountPak, PakOrder) == 0x000010, "Member 'FlibPakHelper_MountPak::PakOrder' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_MountPak, InMountPoint) == 0x000018, "Member 'FlibPakHelper_MountPak::InMountPoint' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_MountPak, ReturnValue) == 0x000028, "Member 'FlibPakHelper_MountPak::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.OpenPSO
// 0x0018 (0x0018 - 0x0000)
struct FlibPakHelper_OpenPSO final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_OpenPSO) == 0x000008, "Wrong alignment on FlibPakHelper_OpenPSO");
static_assert(sizeof(FlibPakHelper_OpenPSO) == 0x000018, "Wrong size on FlibPakHelper_OpenPSO");
static_assert(offsetof(FlibPakHelper_OpenPSO, Name_0) == 0x000000, "Member 'FlibPakHelper_OpenPSO::Name_0' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_OpenPSO, ReturnValue) == 0x000010, "Member 'FlibPakHelper_OpenPSO::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.ScanAllVersionDescribleFiles
// 0x0010 (0x0010 - 0x0000)
struct FlibPakHelper_ScanAllVersionDescribleFiles final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPakHelper_ScanAllVersionDescribleFiles) == 0x000008, "Wrong alignment on FlibPakHelper_ScanAllVersionDescribleFiles");
static_assert(sizeof(FlibPakHelper_ScanAllVersionDescribleFiles) == 0x000010, "Wrong size on FlibPakHelper_ScanAllVersionDescribleFiles");
static_assert(offsetof(FlibPakHelper_ScanAllVersionDescribleFiles, ReturnValue) == 0x000000, "Member 'FlibPakHelper_ScanAllVersionDescribleFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.ScanExtenFilesInDirectory
// 0x0040 (0x0040 - 0x0000)
struct FlibPakHelper_ScanExtenFilesInDirectory final
{
public:
	class FString                                 InRelativePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InExtenPostfix;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRecursively;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutFiles;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_ScanExtenFilesInDirectory) == 0x000008, "Wrong alignment on FlibPakHelper_ScanExtenFilesInDirectory");
static_assert(sizeof(FlibPakHelper_ScanExtenFilesInDirectory) == 0x000040, "Wrong size on FlibPakHelper_ScanExtenFilesInDirectory");
static_assert(offsetof(FlibPakHelper_ScanExtenFilesInDirectory, InRelativePath) == 0x000000, "Member 'FlibPakHelper_ScanExtenFilesInDirectory::InRelativePath' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanExtenFilesInDirectory, InExtenPostfix) == 0x000010, "Member 'FlibPakHelper_ScanExtenFilesInDirectory::InExtenPostfix' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanExtenFilesInDirectory, InRecursively) == 0x000020, "Member 'FlibPakHelper_ScanExtenFilesInDirectory::InRecursively' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanExtenFilesInDirectory, OutFiles) == 0x000028, "Member 'FlibPakHelper_ScanExtenFilesInDirectory::OutFiles' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanExtenFilesInDirectory, ReturnValue) == 0x000038, "Member 'FlibPakHelper_ScanExtenFilesInDirectory::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.ScanExtenPakFiles
// 0x0010 (0x0010 - 0x0000)
struct FlibPakHelper_ScanExtenPakFiles final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPakHelper_ScanExtenPakFiles) == 0x000008, "Wrong alignment on FlibPakHelper_ScanExtenPakFiles");
static_assert(sizeof(FlibPakHelper_ScanExtenPakFiles) == 0x000010, "Wrong size on FlibPakHelper_ScanExtenPakFiles");
static_assert(offsetof(FlibPakHelper_ScanExtenPakFiles, ReturnValue) == 0x000000, "Member 'FlibPakHelper_ScanExtenPakFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.ScanPlatformDirectory
// 0x0030 (0x0030 - 0x0000)
struct FlibPakHelper_ScanPlatformDirectory final
{
public:
	class FString                                 InRelativePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFile;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDir;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursively;                                      // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutResault;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_ScanPlatformDirectory) == 0x000008, "Wrong alignment on FlibPakHelper_ScanPlatformDirectory");
static_assert(sizeof(FlibPakHelper_ScanPlatformDirectory) == 0x000030, "Wrong size on FlibPakHelper_ScanPlatformDirectory");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, InRelativePath) == 0x000000, "Member 'FlibPakHelper_ScanPlatformDirectory::InRelativePath' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, bIncludeFile) == 0x000010, "Member 'FlibPakHelper_ScanPlatformDirectory::bIncludeFile' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, bIncludeDir) == 0x000011, "Member 'FlibPakHelper_ScanPlatformDirectory::bIncludeDir' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, bRecursively) == 0x000012, "Member 'FlibPakHelper_ScanPlatformDirectory::bRecursively' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, OutResault) == 0x000018, "Member 'FlibPakHelper_ScanPlatformDirectory::OutResault' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_ScanPlatformDirectory, ReturnValue) == 0x000028, "Member 'FlibPakHelper_ScanPlatformDirectory::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPakHelper.UnMountPak
// 0x0018 (0x0018 - 0x0000)
struct FlibPakHelper_UnMountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPakHelper_UnMountPak) == 0x000008, "Wrong alignment on FlibPakHelper_UnMountPak");
static_assert(sizeof(FlibPakHelper_UnMountPak) == 0x000018, "Wrong size on FlibPakHelper_UnMountPak");
static_assert(offsetof(FlibPakHelper_UnMountPak, PakPath) == 0x000000, "Member 'FlibPakHelper_UnMountPak::PakPath' has a wrong offset!");
static_assert(offsetof(FlibPakHelper_UnMountPak, ReturnValue) == 0x000010, "Member 'FlibPakHelper_UnMountPak::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.CloseShaderbytecode
// 0x0010 (0x0010 - 0x0000)
struct FlibPatchParserHelper_CloseShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_CloseShaderbytecode) == 0x000008, "Wrong alignment on FlibPatchParserHelper_CloseShaderbytecode");
static_assert(sizeof(FlibPatchParserHelper_CloseShaderbytecode) == 0x000010, "Wrong size on FlibPatchParserHelper_CloseShaderbytecode");
static_assert(offsetof(FlibPatchParserHelper_CloseShaderbytecode, LibraryName) == 0x000000, "Member 'FlibPatchParserHelper_CloseShaderbytecode::LibraryName' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.DiffVersionAllPlatformExFiles
// 0x0288 (0x0288 - 0x0000)
struct FlibPatchParserHelper_DiffVersionAllPlatformExFiles final
{
public:
	struct FHotPatcherVersion                     InBaseVersion;                                     // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHotPatcherVersion                     InNewVersion;                                      // 0x0118(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<ETargetPlatform, struct FPatchVersionExternDiff> OutDiff;                                   // 0x0230(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0280(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles) == 0x000008, "Wrong alignment on FlibPatchParserHelper_DiffVersionAllPlatformExFiles");
static_assert(sizeof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles) == 0x000288, "Wrong size on FlibPatchParserHelper_DiffVersionAllPlatformExFiles");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles, InBaseVersion) == 0x000000, "Member 'FlibPatchParserHelper_DiffVersionAllPlatformExFiles::InBaseVersion' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles, InNewVersion) == 0x000118, "Member 'FlibPatchParserHelper_DiffVersionAllPlatformExFiles::InNewVersion' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles, OutDiff) == 0x000230, "Member 'FlibPatchParserHelper_DiffVersionAllPlatformExFiles::OutDiff' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAllPlatformExFiles, ReturnValue) == 0x000280, "Member 'FlibPatchParserHelper_DiffVersionAllPlatformExFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.DiffVersionAssets
// 0x0198 (0x0198 - 0x0000)
struct FlibPatchParserHelper_DiffVersionAssets final
{
public:
	struct FAssetDependenciesInfo                 InNewVersion;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 InBaseVersion;                                     // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 OutAddAsset;                                       // 0x00A0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 OutModifyAsset;                                    // 0x00F0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAssetDependenciesInfo                 OutDeleteAsset;                                    // 0x0140(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0190(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_DiffVersionAssets) == 0x000008, "Wrong alignment on FlibPatchParserHelper_DiffVersionAssets");
static_assert(sizeof(FlibPatchParserHelper_DiffVersionAssets) == 0x000198, "Wrong size on FlibPatchParserHelper_DiffVersionAssets");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, InNewVersion) == 0x000000, "Member 'FlibPatchParserHelper_DiffVersionAssets::InNewVersion' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, InBaseVersion) == 0x000050, "Member 'FlibPatchParserHelper_DiffVersionAssets::InBaseVersion' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, OutAddAsset) == 0x0000A0, "Member 'FlibPatchParserHelper_DiffVersionAssets::OutAddAsset' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, OutModifyAsset) == 0x0000F0, "Member 'FlibPatchParserHelper_DiffVersionAssets::OutModifyAsset' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, OutDeleteAsset) == 0x000140, "Member 'FlibPatchParserHelper_DiffVersionAssets::OutDeleteAsset' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_DiffVersionAssets, ReturnValue) == 0x000190, "Member 'FlibPatchParserHelper_DiffVersionAssets::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetAllExFilesByPlatform
// 0x0048 (0x0048 - 0x0000)
struct FlibPatchParserHelper_GetAllExFilesByPlatform final
{
public:
	struct FPlatformExternAssets                  InPlatformConf;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InGeneratedHash;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformExternFiles                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetAllExFilesByPlatform) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetAllExFilesByPlatform");
static_assert(sizeof(FlibPatchParserHelper_GetAllExFilesByPlatform) == 0x000048, "Wrong size on FlibPatchParserHelper_GetAllExFilesByPlatform");
static_assert(offsetof(FlibPatchParserHelper_GetAllExFilesByPlatform, InPlatformConf) == 0x000000, "Member 'FlibPatchParserHelper_GetAllExFilesByPlatform::InPlatformConf' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAllExFilesByPlatform, InGeneratedHash) == 0x000028, "Member 'FlibPatchParserHelper_GetAllExFilesByPlatform::InGeneratedHash' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAllExFilesByPlatform, ReturnValue) == 0x000030, "Member 'FlibPatchParserHelper_GetAllExFilesByPlatform::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetAvailableMaps
// 0x0028 (0x0028 - 0x0000)
struct FlibPatchParserHelper_GetAvailableMaps final
{
public:
	class FString                                 GameName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeEngineMaps;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludePluginMaps;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sorted;                                            // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetAvailableMaps) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetAvailableMaps");
static_assert(sizeof(FlibPatchParserHelper_GetAvailableMaps) == 0x000028, "Wrong size on FlibPatchParserHelper_GetAvailableMaps");
static_assert(offsetof(FlibPatchParserHelper_GetAvailableMaps, GameName) == 0x000000, "Member 'FlibPatchParserHelper_GetAvailableMaps::GameName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAvailableMaps, IncludeEngineMaps) == 0x000010, "Member 'FlibPatchParserHelper_GetAvailableMaps::IncludeEngineMaps' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAvailableMaps, IncludePluginMaps) == 0x000011, "Member 'FlibPatchParserHelper_GetAvailableMaps::IncludePluginMaps' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAvailableMaps, Sorted) == 0x000012, "Member 'FlibPatchParserHelper_GetAvailableMaps::Sorted' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetAvailableMaps, ReturnValue) == 0x000018, "Member 'FlibPatchParserHelper_GetAvailableMaps::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetCookedAssetRegistryFiles
// 0x0048 (0x0048 - 0x0000)
struct FlibPatchParserHelper_GetCookedAssetRegistryFiles final
{
public:
	class FString                                 InProjectAbsDir;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InProjectName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFiles;                                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_GetCookedAssetRegistryFiles) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetCookedAssetRegistryFiles");
static_assert(sizeof(FlibPatchParserHelper_GetCookedAssetRegistryFiles) == 0x000048, "Wrong size on FlibPatchParserHelper_GetCookedAssetRegistryFiles");
static_assert(offsetof(FlibPatchParserHelper_GetCookedAssetRegistryFiles, InProjectAbsDir) == 0x000000, "Member 'FlibPatchParserHelper_GetCookedAssetRegistryFiles::InProjectAbsDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedAssetRegistryFiles, InProjectName) == 0x000010, "Member 'FlibPatchParserHelper_GetCookedAssetRegistryFiles::InProjectName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedAssetRegistryFiles, InPlatformName) == 0x000020, "Member 'FlibPatchParserHelper_GetCookedAssetRegistryFiles::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedAssetRegistryFiles, OutFiles) == 0x000030, "Member 'FlibPatchParserHelper_GetCookedAssetRegistryFiles::OutFiles' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedAssetRegistryFiles, ReturnValue) == 0x000040, "Member 'FlibPatchParserHelper_GetCookedAssetRegistryFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetCookedGlobalShaderCacheFiles
// 0x0030 (0x0030 - 0x0000)
struct FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles final
{
public:
	class FString                                 InProjectDir;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles");
static_assert(sizeof(FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles) == 0x000030, "Wrong size on FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles");
static_assert(offsetof(FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles, InProjectDir) == 0x000000, "Member 'FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles::InProjectDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles, InPlatformName) == 0x000010, "Member 'FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles, ReturnValue) == 0x000020, "Member 'FlibPatchParserHelper_GetCookedGlobalShaderCacheFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetCookedShaderBytecodeFiles
// 0x0050 (0x0050 - 0x0000)
struct FlibPatchParserHelper_GetCookedShaderBytecodeFiles final
{
public:
	class FString                                 InProjectAbsDir;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InProjectName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGalobalBytecode;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InProjectBytecode;                                 // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutFiles;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetCookedShaderBytecodeFiles");
static_assert(sizeof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles) == 0x000050, "Wrong size on FlibPatchParserHelper_GetCookedShaderBytecodeFiles");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, InProjectAbsDir) == 0x000000, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::InProjectAbsDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, InProjectName) == 0x000010, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::InProjectName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, InPlatformName) == 0x000020, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, InGalobalBytecode) == 0x000030, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::InGalobalBytecode' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, InProjectBytecode) == 0x000031, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::InProjectBytecode' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, OutFiles) == 0x000038, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::OutFiles' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetCookedShaderBytecodeFiles, ReturnValue) == 0x000048, "Member 'FlibPatchParserHelper_GetCookedShaderBytecodeFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetEnabledPluginConfigs
// 0x0020 (0x0020 - 0x0000)
struct FlibPatchParserHelper_GetEnabledPluginConfigs final
{
public:
	class FString                                 InPlatformName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetEnabledPluginConfigs) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetEnabledPluginConfigs");
static_assert(sizeof(FlibPatchParserHelper_GetEnabledPluginConfigs) == 0x000020, "Wrong size on FlibPatchParserHelper_GetEnabledPluginConfigs");
static_assert(offsetof(FlibPatchParserHelper_GetEnabledPluginConfigs, InPlatformName) == 0x000000, "Member 'FlibPatchParserHelper_GetEnabledPluginConfigs::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetEnabledPluginConfigs, ReturnValue) == 0x000010, "Member 'FlibPatchParserHelper_GetEnabledPluginConfigs::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetEngineConfigs
// 0x0020 (0x0020 - 0x0000)
struct FlibPatchParserHelper_GetEngineConfigs final
{
public:
	class FString                                 InPlatformName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetEngineConfigs) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetEngineConfigs");
static_assert(sizeof(FlibPatchParserHelper_GetEngineConfigs) == 0x000020, "Wrong size on FlibPatchParserHelper_GetEngineConfigs");
static_assert(offsetof(FlibPatchParserHelper_GetEngineConfigs, InPlatformName) == 0x000000, "Member 'FlibPatchParserHelper_GetEngineConfigs::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetEngineConfigs, ReturnValue) == 0x000010, "Member 'FlibPatchParserHelper_GetEngineConfigs::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetIniConfigs
// 0x0030 (0x0030 - 0x0000)
struct FlibPatchParserHelper_GetIniConfigs final
{
public:
	class FString                                 InSearchDir;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetIniConfigs) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetIniConfigs");
static_assert(sizeof(FlibPatchParserHelper_GetIniConfigs) == 0x000030, "Wrong size on FlibPatchParserHelper_GetIniConfigs");
static_assert(offsetof(FlibPatchParserHelper_GetIniConfigs, InSearchDir) == 0x000000, "Member 'FlibPatchParserHelper_GetIniConfigs::InSearchDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetIniConfigs, InPlatformName) == 0x000010, "Member 'FlibPatchParserHelper_GetIniConfigs::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetIniConfigs, ReturnValue) == 0x000020, "Member 'FlibPatchParserHelper_GetIniConfigs::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetPakFileInfo
// 0x0040 (0x0040 - 0x0000)
struct FlibPatchParserHelper_GetPakFileInfo final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPakFileInfo                           OutFileInfo;                                       // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_GetPakFileInfo) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetPakFileInfo");
static_assert(sizeof(FlibPatchParserHelper_GetPakFileInfo) == 0x000040, "Wrong size on FlibPatchParserHelper_GetPakFileInfo");
static_assert(offsetof(FlibPatchParserHelper_GetPakFileInfo, InFile) == 0x000000, "Member 'FlibPatchParserHelper_GetPakFileInfo::InFile' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetPakFileInfo, OutFileInfo) == 0x000010, "Member 'FlibPatchParserHelper_GetPakFileInfo::OutFileInfo' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetPakFileInfo, ReturnValue) == 0x000038, "Member 'FlibPatchParserHelper_GetPakFileInfo::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetProjectFilePath
// 0x0010 (0x0010 - 0x0000)
struct FlibPatchParserHelper_GetProjectFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetProjectFilePath) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetProjectFilePath");
static_assert(sizeof(FlibPatchParserHelper_GetProjectFilePath) == 0x000010, "Wrong size on FlibPatchParserHelper_GetProjectFilePath");
static_assert(offsetof(FlibPatchParserHelper_GetProjectFilePath, ReturnValue) == 0x000000, "Member 'FlibPatchParserHelper_GetProjectFilePath::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetProjectIniFiles
// 0x0030 (0x0030 - 0x0000)
struct FlibPatchParserHelper_GetProjectIniFiles final
{
public:
	class FString                                 InProjectDir;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlatformName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetProjectIniFiles) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetProjectIniFiles");
static_assert(sizeof(FlibPatchParserHelper_GetProjectIniFiles) == 0x000030, "Wrong size on FlibPatchParserHelper_GetProjectIniFiles");
static_assert(offsetof(FlibPatchParserHelper_GetProjectIniFiles, InProjectDir) == 0x000000, "Member 'FlibPatchParserHelper_GetProjectIniFiles::InProjectDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetProjectIniFiles, InPlatformName) == 0x000010, "Member 'FlibPatchParserHelper_GetProjectIniFiles::InPlatformName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_GetProjectIniFiles, ReturnValue) == 0x000020, "Member 'FlibPatchParserHelper_GetProjectIniFiles::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.GetProjectName
// 0x0010 (0x0010 - 0x0000)
struct FlibPatchParserHelper_GetProjectName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_GetProjectName) == 0x000008, "Wrong alignment on FlibPatchParserHelper_GetProjectName");
static_assert(sizeof(FlibPatchParserHelper_GetProjectName) == 0x000010, "Wrong size on FlibPatchParserHelper_GetProjectName");
static_assert(offsetof(FlibPatchParserHelper_GetProjectName, ReturnValue) == 0x000000, "Member 'FlibPatchParserHelper_GetProjectName::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.HashStringWithSHA1
// 0x0020 (0x0020 - 0x0000)
struct FlibPatchParserHelper_HashStringWithSHA1 final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibPatchParserHelper_HashStringWithSHA1) == 0x000008, "Wrong alignment on FlibPatchParserHelper_HashStringWithSHA1");
static_assert(sizeof(FlibPatchParserHelper_HashStringWithSHA1) == 0x000020, "Wrong size on FlibPatchParserHelper_HashStringWithSHA1");
static_assert(offsetof(FlibPatchParserHelper_HashStringWithSHA1, inString) == 0x000000, "Member 'FlibPatchParserHelper_HashStringWithSHA1::inString' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_HashStringWithSHA1, ReturnValue) == 0x000010, "Member 'FlibPatchParserHelper_HashStringWithSHA1::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibPatchParserHelper.LoadShaderbytecode
// 0x0028 (0x0028 - 0x0000)
struct FlibPatchParserHelper_LoadShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LibraryDir;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibPatchParserHelper_LoadShaderbytecode) == 0x000008, "Wrong alignment on FlibPatchParserHelper_LoadShaderbytecode");
static_assert(sizeof(FlibPatchParserHelper_LoadShaderbytecode) == 0x000028, "Wrong size on FlibPatchParserHelper_LoadShaderbytecode");
static_assert(offsetof(FlibPatchParserHelper_LoadShaderbytecode, LibraryName) == 0x000000, "Member 'FlibPatchParserHelper_LoadShaderbytecode::LibraryName' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_LoadShaderbytecode, LibraryDir) == 0x000010, "Member 'FlibPatchParserHelper_LoadShaderbytecode::LibraryDir' has a wrong offset!");
static_assert(offsetof(FlibPatchParserHelper_LoadShaderbytecode, ReturnValue) == 0x000020, "Member 'FlibPatchParserHelper_LoadShaderbytecode::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.EnableLogPSO
// 0x0002 (0x0002 - 0x0000)
struct FlibShaderPipelineCacheHelper_EnableLogPSO final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_EnableLogPSO) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_EnableLogPSO");
static_assert(sizeof(FlibShaderPipelineCacheHelper_EnableLogPSO) == 0x000002, "Wrong size on FlibShaderPipelineCacheHelper_EnableLogPSO");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableLogPSO, bEnable) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_EnableLogPSO::bEnable' has a wrong offset!");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableLogPSO, ReturnValue) == 0x000001, "Member 'FlibShaderPipelineCacheHelper_EnableLogPSO::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.EnableSaveBoundPSOLog
// 0x0002 (0x0002 - 0x0000)
struct FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog");
static_assert(sizeof(FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog) == 0x000002, "Wrong size on FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog, bEnable) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog::bEnable' has a wrong offset!");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog, ReturnValue) == 0x000001, "Member 'FlibShaderPipelineCacheHelper_EnableSaveBoundPSOLog::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.EnableShaderPipelineCache
// 0x0002 (0x0002 - 0x0000)
struct FlibShaderPipelineCacheHelper_EnableShaderPipelineCache final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_EnableShaderPipelineCache) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_EnableShaderPipelineCache");
static_assert(sizeof(FlibShaderPipelineCacheHelper_EnableShaderPipelineCache) == 0x000002, "Wrong size on FlibShaderPipelineCacheHelper_EnableShaderPipelineCache");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableShaderPipelineCache, bEnable) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_EnableShaderPipelineCache::bEnable' has a wrong offset!");
static_assert(offsetof(FlibShaderPipelineCacheHelper_EnableShaderPipelineCache, ReturnValue) == 0x000001, "Member 'FlibShaderPipelineCacheHelper_EnableShaderPipelineCache::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.IsEnabledLogPSO
// 0x0001 (0x0001 - 0x0000)
struct FlibShaderPipelineCacheHelper_IsEnabledLogPSO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_IsEnabledLogPSO) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_IsEnabledLogPSO");
static_assert(sizeof(FlibShaderPipelineCacheHelper_IsEnabledLogPSO) == 0x000001, "Wrong size on FlibShaderPipelineCacheHelper_IsEnabledLogPSO");
static_assert(offsetof(FlibShaderPipelineCacheHelper_IsEnabledLogPSO, ReturnValue) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_IsEnabledLogPSO::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.IsEnabledSaveBoundPSOLog
// 0x0001 (0x0001 - 0x0000)
struct FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog");
static_assert(sizeof(FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog) == 0x000001, "Wrong size on FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog");
static_assert(offsetof(FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog, ReturnValue) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_IsEnabledSaveBoundPSOLog::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.IsEnabledUsePSO
// 0x0001 (0x0001 - 0x0000)
struct FlibShaderPipelineCacheHelper_IsEnabledUsePSO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_IsEnabledUsePSO) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_IsEnabledUsePSO");
static_assert(sizeof(FlibShaderPipelineCacheHelper_IsEnabledUsePSO) == 0x000001, "Wrong size on FlibShaderPipelineCacheHelper_IsEnabledUsePSO");
static_assert(offsetof(FlibShaderPipelineCacheHelper_IsEnabledUsePSO, ReturnValue) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_IsEnabledUsePSO::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.LoadShaderPipelineCache
// 0x0018 (0x0018 - 0x0000)
struct FlibShaderPipelineCacheHelper_LoadShaderPipelineCache final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlibShaderPipelineCacheHelper_LoadShaderPipelineCache) == 0x000008, "Wrong alignment on FlibShaderPipelineCacheHelper_LoadShaderPipelineCache");
static_assert(sizeof(FlibShaderPipelineCacheHelper_LoadShaderPipelineCache) == 0x000018, "Wrong size on FlibShaderPipelineCacheHelper_LoadShaderPipelineCache");
static_assert(offsetof(FlibShaderPipelineCacheHelper_LoadShaderPipelineCache, Name_0) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_LoadShaderPipelineCache::Name_0' has a wrong offset!");
static_assert(offsetof(FlibShaderPipelineCacheHelper_LoadShaderPipelineCache, ReturnValue) == 0x000010, "Member 'FlibShaderPipelineCacheHelper_LoadShaderPipelineCache::ReturnValue' has a wrong offset!");

// Function HotPatcherRuntime.FlibShaderPipelineCacheHelper.SavePipelineFileCache
// 0x0002 (0x0002 - 0x0000)
struct FlibShaderPipelineCacheHelper_SavePipelineFileCache final
{
public:
	EPSOSaveMode                                  Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlibShaderPipelineCacheHelper_SavePipelineFileCache) == 0x000001, "Wrong alignment on FlibShaderPipelineCacheHelper_SavePipelineFileCache");
static_assert(sizeof(FlibShaderPipelineCacheHelper_SavePipelineFileCache) == 0x000002, "Wrong size on FlibShaderPipelineCacheHelper_SavePipelineFileCache");
static_assert(offsetof(FlibShaderPipelineCacheHelper_SavePipelineFileCache, Mode) == 0x000000, "Member 'FlibShaderPipelineCacheHelper_SavePipelineFileCache::Mode' has a wrong offset!");
static_assert(offsetof(FlibShaderPipelineCacheHelper_SavePipelineFileCache, ReturnValue) == 0x000001, "Member 'FlibShaderPipelineCacheHelper_SavePipelineFileCache::ReturnValue' has a wrong offset!");

}

