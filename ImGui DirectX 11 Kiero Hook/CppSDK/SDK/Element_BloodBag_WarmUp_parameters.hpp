#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Element_BloodBag_WarmUp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.ExecuteUbergraph_Element_BloodBag_WarmUp
// 0x00F0 (0x00F0 - 0x0000)
struct Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PlaySound2Dbyname_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_NewLocation;                    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        K2Node_Event_SolarCharacter;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERecoveryPackageState                         K2Node_Event_OldState;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x00E8(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp) == 0x000008, "Wrong alignment on Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp");
static_assert(sizeof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp) == 0x0000F0, "Wrong size on Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, EntryPoint) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::EntryPoint' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_PlaySound2Dbyname_ReturnValue) == 0x000004, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_PlaySound2Dbyname_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000018, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, K2Node_CustomEvent_NewLocation) == 0x000024, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::K2Node_CustomEvent_NewLocation' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, K2Node_Event_SolarCharacter) == 0x000030, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::K2Node_Event_SolarCharacter' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, K2Node_Event_OldState) == 0x000038, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::K2Node_Event_OldState' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_IsLocallyControlled_ReturnValue) == 0x00003A, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000049, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x00004C, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000D4, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0000E8, "Member 'Element_BloodBag_WarmUp_C_ExecuteUbergraph_Element_BloodBag_WarmUp::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.OnRecoveryPackageStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged final
{
public:
	ERecoveryPackageState                         OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged) == 0x000001, "Wrong alignment on Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged");
static_assert(sizeof(Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged) == 0x000001, "Wrong size on Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged");
static_assert(offsetof(Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged, OldState) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_OnRecoveryPackageStateChanged::OldState' has a wrong offset!");

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.PlayPickupByCharacterEffect
// 0x0008 (0x0008 - 0x0000)
struct Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect final
{
public:
	class ASolarCharacter*                        SolarCharacter;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect) == 0x000008, "Wrong alignment on Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect");
static_assert(sizeof(Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect) == 0x000008, "Wrong size on Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect");
static_assert(offsetof(Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect, SolarCharacter) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_PlayPickupByCharacterEffect::SolarCharacter' has a wrong offset!");

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.Event_MoveToDeathCharacterLocation
// 0x000C (0x000C - 0x0000)
struct Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation) == 0x000004, "Wrong alignment on Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation");
static_assert(sizeof(Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation) == 0x00000C, "Wrong size on Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation");
static_assert(offsetof(Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation, NewLocation) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_Event_MoveToDeathCharacterLocation::NewLocation' has a wrong offset!");

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.FloatingAnimTick
// 0x0140 (0x0140 - 0x0000)
struct Element_BloodBag_WarmUp_C_FloatingAnimTick final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_FloatingAnimTick) == 0x000004, "Wrong alignment on Element_BloodBag_WarmUp_C_FloatingAnimTick");
static_assert(sizeof(Element_BloodBag_WarmUp_C_FloatingAnimTick) == 0x000140, "Wrong size on Element_BloodBag_WarmUp_C_FloatingAnimTick");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000004, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Sin_ReturnValue) == 0x000008, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_MakeRotator_ReturnValue) == 0x00000C, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000018, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00001C, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000030, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_FloatingAnimTick, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000B8, "Member 'Element_BloodBag_WarmUp_C_FloatingAnimTick::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function Element_BloodBag_WarmUp.Element_BloodBag_WarmUp_C.DisappearAnimTick
// 0x00D4 (0x00D4 - 0x0000)
struct Element_BloodBag_WarmUp_C_DisappearAnimTick final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Clamp01_ReturnValue;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Clamp01_ReturnValue_1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Element_BloodBag_WarmUp_C_DisappearAnimTick) == 0x000004, "Wrong alignment on Element_BloodBag_WarmUp_C_DisappearAnimTick");
static_assert(sizeof(Element_BloodBag_WarmUp_C_DisappearAnimTick) == 0x0000D4, "Wrong size on Element_BloodBag_WarmUp_C_DisappearAnimTick");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_GetSocketLocation_ReturnValue) == 0x000004, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000018, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Clamp01_ReturnValue) == 0x00001C, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Clamp01_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Clamp01_ReturnValue_1) == 0x000020, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Clamp01_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000028, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_VLerp_ReturnValue) == 0x000040, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Element_BloodBag_WarmUp_C_DisappearAnimTick, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00004C, "Member 'Element_BloodBag_WarmUp_C_DisappearAnimTick::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

}

