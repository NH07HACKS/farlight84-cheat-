#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshWidget

#include "Basic.hpp"

#include "MeshWidget_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class MeshWidget.MeshWidgetUWidget
// 0x0010 (0x0150 - 0x0140)
class UMeshWidgetUWidget : public UWidget
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshWidgetUWidget">();
	}
	static class UMeshWidgetUWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshWidgetUWidget>();
	}
};
static_assert(alignof(UMeshWidgetUWidget) == 0x000008, "Wrong alignment on UMeshWidgetUWidget");
static_assert(sizeof(UMeshWidgetUWidget) == 0x000150, "Wrong size on UMeshWidgetUWidget");

// Class MeshWidget.UIMeshWidget
// 0x0500 (0x0650 - 0x0150)
class UUIMeshWidget : public UMeshWidgetUWidget
{
public:
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumInstance;                                       // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIMeshInstanceData>            InstanceDatas;                                     // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIMeshCameraInfo                      CameraInfo;                                        // 0x0170(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FUIMeshVertex>                  MeshVertices;                                      // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint16>                                MeshIndices;                                       // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0210(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushDelegate;                                     // 0x0320(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FUIMeshTransformInfo>           MeshInfos;                                         // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PlaceHolderBrush;                                  // 0x0340(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DynamicDefaultBrush;                               // 0x0450(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0560(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bSuccess)> OnURLDownloadFinish;                               // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_578[0xD8];                                     // 0x0578(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DownloadImage(const class FString& InNecessaryURL, const TArray<class FString>& InBaseCDNUrlList);
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void OnGetTextureFinished(const class FString& FilePath, class UTexture2DDynamic* Texture);
	void ResetToPlaceholder();
	void SetBrushByTexture2D(class UTexture2D* NewTexture);
	void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
	void SetBrushMaterial(class UMaterialInterface* Material);
	void SetBrushScalar(const TMap<class FName, float>& ScalarParameterValues);
	void SetCameraPosition(const struct FVector& InCameraPosition);
	void SetCameraRotate(const struct FVector& InCameraRotate);
	void SetHalfFov(float HalfFov);
	void SetInstanceData1(const struct FVector4& InstanceData, int32 GEN_PARAM_ARRAY_INDEX);
	void SetInstanceData2(const struct FVector4& InstanceData, int32 GEN_PARAM_ARRAY_INDEX);
	void SetMeshRotate(const struct FVector& InRotate, int32 GEN_PARAM_ARRAY_INDEX);
	void SetMeshScale(const struct FVector& InScale, int32 GEN_PARAM_ARRAY_INDEX);
	void SetMeshTransform(const struct FTransform& InMeshTransform, int32 MeshId);
	void SetMeshTranslate(const struct FVector& InTranslate, int32 GEN_PARAM_ARRAY_INDEX);
	void SetNearClip(float NearClip);
	void SetPlaceHolderBrushScalar(const TMap<class FName, float>& ScalarParameterValues);
	void SetViewProjectionMatrix(const struct FMatrix& ViewProjectionMatrix);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIMeshWidget">();
	}
	static class UUIMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIMeshWidget>();
	}
};
static_assert(alignof(UUIMeshWidget) == 0x000010, "Wrong alignment on UUIMeshWidget");
static_assert(sizeof(UUIMeshWidget) == 0x000650, "Wrong size on UUIMeshWidget");
static_assert(offsetof(UUIMeshWidget, NumInstance) == 0x000158, "Member 'UUIMeshWidget::NumInstance' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, InstanceDatas) == 0x000160, "Member 'UUIMeshWidget::InstanceDatas' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, CameraInfo) == 0x000170, "Member 'UUIMeshWidget::CameraInfo' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, MeshVertices) == 0x0001F0, "Member 'UUIMeshWidget::MeshVertices' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, MeshIndices) == 0x000200, "Member 'UUIMeshWidget::MeshIndices' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, Brush) == 0x000210, "Member 'UUIMeshWidget::Brush' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, BrushDelegate) == 0x000320, "Member 'UUIMeshWidget::BrushDelegate' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, MeshInfos) == 0x000330, "Member 'UUIMeshWidget::MeshInfos' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, PlaceHolderBrush) == 0x000340, "Member 'UUIMeshWidget::PlaceHolderBrush' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, DynamicDefaultBrush) == 0x000450, "Member 'UUIMeshWidget::DynamicDefaultBrush' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, Filter) == 0x000560, "Member 'UUIMeshWidget::Filter' has a wrong offset!");
static_assert(offsetof(UUIMeshWidget, OnURLDownloadFinish) == 0x000568, "Member 'UUIMeshWidget::OnURLDownloadFinish' has a wrong offset!");

// Class MeshWidget.GeometryBasedRectangleUIMeshWidget
// 0x0070 (0x06C0 - 0x0650)
class UGeometryBasedRectangleUIMeshWidget final : public UUIMeshWidget
{
public:
	bool                                          bKeepSlope;                                        // 0x0650(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepVertexDistance;                               // 0x0651(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_652[0x2];                                      // 0x0652(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BoundingBox;                                       // 0x0654(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVertexCluster>                 MeshVertexClusters;                                // 0x0660(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_670[0x50];                                     // 0x0670(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryBasedRectangleUIMeshWidget">();
	}
	static class UGeometryBasedRectangleUIMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryBasedRectangleUIMeshWidget>();
	}
};
static_assert(alignof(UGeometryBasedRectangleUIMeshWidget) == 0x000010, "Wrong alignment on UGeometryBasedRectangleUIMeshWidget");
static_assert(sizeof(UGeometryBasedRectangleUIMeshWidget) == 0x0006C0, "Wrong size on UGeometryBasedRectangleUIMeshWidget");
static_assert(offsetof(UGeometryBasedRectangleUIMeshWidget, bKeepSlope) == 0x000650, "Member 'UGeometryBasedRectangleUIMeshWidget::bKeepSlope' has a wrong offset!");
static_assert(offsetof(UGeometryBasedRectangleUIMeshWidget, bKeepVertexDistance) == 0x000651, "Member 'UGeometryBasedRectangleUIMeshWidget::bKeepVertexDistance' has a wrong offset!");
static_assert(offsetof(UGeometryBasedRectangleUIMeshWidget, BoundingBox) == 0x000654, "Member 'UGeometryBasedRectangleUIMeshWidget::BoundingBox' has a wrong offset!");
static_assert(offsetof(UGeometryBasedRectangleUIMeshWidget, MeshVertexClusters) == 0x000660, "Member 'UGeometryBasedRectangleUIMeshWidget::MeshVertexClusters' has a wrong offset!");

// Class MeshWidget.ParticleWidget
// 0x0040 (0x0190 - 0x0150)
class UParticleWidget final : public UMeshWidgetUWidget
{
public:
	class USlateVectorArtData*                    TrailMeshAsset;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxParticleCount;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x34];                                     // 0x015C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleWidget">();
	}
	static class UParticleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleWidget>();
	}
};
static_assert(alignof(UParticleWidget) == 0x000008, "Wrong alignment on UParticleWidget");
static_assert(sizeof(UParticleWidget) == 0x000190, "Wrong size on UParticleWidget");
static_assert(offsetof(UParticleWidget, TrailMeshAsset) == 0x000150, "Member 'UParticleWidget::TrailMeshAsset' has a wrong offset!");
static_assert(offsetof(UParticleWidget, MaxParticleCount) == 0x000158, "Member 'UParticleWidget::MaxParticleCount' has a wrong offset!");

// Class MeshWidget.MeshRectangleWidget
// 0x0070 (0x01C0 - 0x0150)
class UMeshRectangleWidget : public UMeshWidgetUWidget
{
public:
	class UMaterialInterface*                     BaseMaterial;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFloat4PerInstance;                              // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiElementBatch;                                // 0x015C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstancesHittestable;                             // 0x015D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Index)>   OnClicked;                                         // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnPressed;                                         // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnHovered;                                         // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnUnhovered;                                       // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x20];                                     // 0x01A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitUnitTestProvider();
	void ModifyInstanceNum(int32 dNum);
	void SetInstanceNum(int32 NewNum);
	void SetInstancesHittestability(bool InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshRectangleWidget">();
	}
	static class UMeshRectangleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshRectangleWidget>();
	}
};
static_assert(alignof(UMeshRectangleWidget) == 0x000008, "Wrong alignment on UMeshRectangleWidget");
static_assert(sizeof(UMeshRectangleWidget) == 0x0001C0, "Wrong size on UMeshRectangleWidget");
static_assert(offsetof(UMeshRectangleWidget, BaseMaterial) == 0x000150, "Member 'UMeshRectangleWidget::BaseMaterial' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, NumFloat4PerInstance) == 0x000158, "Member 'UMeshRectangleWidget::NumFloat4PerInstance' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, bMultiElementBatch) == 0x00015C, "Member 'UMeshRectangleWidget::bMultiElementBatch' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, bInstancesHittestable) == 0x00015D, "Member 'UMeshRectangleWidget::bInstancesHittestable' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, OnClicked) == 0x000160, "Member 'UMeshRectangleWidget::OnClicked' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, OnPressed) == 0x000170, "Member 'UMeshRectangleWidget::OnPressed' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, OnHovered) == 0x000180, "Member 'UMeshRectangleWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(UMeshRectangleWidget, OnUnhovered) == 0x000190, "Member 'UMeshRectangleWidget::OnUnhovered' has a wrong offset!");

// Class MeshWidget.TextMeshWidget
// 0x0030 (0x0180 - 0x0150)
class UTextMeshWidget final : public UMeshWidgetUWidget
{
public:
	class UMaterialInterface*                     BaseMaterial;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x28];                                     // 0x0158(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextMeshWidget">();
	}
	static class UTextMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextMeshWidget>();
	}
};
static_assert(alignof(UTextMeshWidget) == 0x000008, "Wrong alignment on UTextMeshWidget");
static_assert(sizeof(UTextMeshWidget) == 0x000180, "Wrong size on UTextMeshWidget");
static_assert(offsetof(UTextMeshWidget, BaseMaterial) == 0x000150, "Member 'UTextMeshWidget::BaseMaterial' has a wrong offset!");

// Class MeshWidget.ProgressBarMeshWidget
// 0x0030 (0x0180 - 0x0150)
class UProgressBarMeshWidget final : public UMeshWidgetUWidget
{
public:
	class UMaterialInterface*                     BaseMaterial;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x28];                                     // 0x0158(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProgressBarMeshWidget">();
	}
	static class UProgressBarMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressBarMeshWidget>();
	}
};
static_assert(alignof(UProgressBarMeshWidget) == 0x000008, "Wrong alignment on UProgressBarMeshWidget");
static_assert(sizeof(UProgressBarMeshWidget) == 0x000180, "Wrong size on UProgressBarMeshWidget");
static_assert(offsetof(UProgressBarMeshWidget, BaseMaterial) == 0x000150, "Member 'UProgressBarMeshWidget::BaseMaterial' has a wrong offset!");

}

