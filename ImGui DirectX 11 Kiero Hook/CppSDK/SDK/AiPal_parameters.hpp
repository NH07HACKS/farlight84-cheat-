#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AiPal

#include "Basic.hpp"


namespace SDK::Params
{

// Function AiPal.AiPalComponent.SetBattleID
// 0x0010 (0x0010 - 0x0000)
struct AiPalComponent_SetBattleID final
{
public:
	class FString                                 BattleID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetBattleID) == 0x000008, "Wrong alignment on AiPalComponent_SetBattleID");
static_assert(sizeof(AiPalComponent_SetBattleID) == 0x000010, "Wrong size on AiPalComponent_SetBattleID");
static_assert(offsetof(AiPalComponent_SetBattleID, BattleID) == 0x000000, "Member 'AiPalComponent_SetBattleID::BattleID' has a wrong offset!");

// Function AiPal.AiPalComponent.SetClientEnv
// 0x0010 (0x0010 - 0x0000)
struct AiPalComponent_SetClientEnv final
{
public:
	class FString                                 ClientEnv;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetClientEnv) == 0x000008, "Wrong alignment on AiPalComponent_SetClientEnv");
static_assert(sizeof(AiPalComponent_SetClientEnv) == 0x000010, "Wrong size on AiPalComponent_SetClientEnv");
static_assert(offsetof(AiPalComponent_SetClientEnv, ClientEnv) == 0x000000, "Member 'AiPalComponent_SetClientEnv::ClientEnv' has a wrong offset!");

// Function AiPal.AiPalComponent.SetDetectGap_ms
// 0x0004 (0x0004 - 0x0000)
struct AiPalComponent_SetDetectGap_ms final
{
public:
	int32                                         DetectGap_ms;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetDetectGap_ms) == 0x000004, "Wrong alignment on AiPalComponent_SetDetectGap_ms");
static_assert(sizeof(AiPalComponent_SetDetectGap_ms) == 0x000004, "Wrong size on AiPalComponent_SetDetectGap_ms");
static_assert(offsetof(AiPalComponent_SetDetectGap_ms, DetectGap_ms) == 0x000000, "Member 'AiPalComponent_SetDetectGap_ms::DetectGap_ms' has a wrong offset!");

// Function AiPal.AiPalComponent.SetMaxDetectTimes
// 0x0004 (0x0004 - 0x0000)
struct AiPalComponent_SetMaxDetectTimes final
{
public:
	int32                                         DetectGap_ms;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetMaxDetectTimes) == 0x000004, "Wrong alignment on AiPalComponent_SetMaxDetectTimes");
static_assert(sizeof(AiPalComponent_SetMaxDetectTimes) == 0x000004, "Wrong size on AiPalComponent_SetMaxDetectTimes");
static_assert(offsetof(AiPalComponent_SetMaxDetectTimes, DetectGap_ms) == 0x000000, "Member 'AiPalComponent_SetMaxDetectTimes::DetectGap_ms' has a wrong offset!");

// Function AiPal.AiPalComponent.SetPlayerID
// 0x0010 (0x0010 - 0x0000)
struct AiPalComponent_SetPlayerID final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetPlayerID) == 0x000008, "Wrong alignment on AiPalComponent_SetPlayerID");
static_assert(sizeof(AiPalComponent_SetPlayerID) == 0x000010, "Wrong size on AiPalComponent_SetPlayerID");
static_assert(offsetof(AiPalComponent_SetPlayerID, PlayerID) == 0x000000, "Member 'AiPalComponent_SetPlayerID::PlayerID' has a wrong offset!");

// Function AiPal.AiPalComponent.SetServerIndex
// 0x0001 (0x0001 - 0x0000)
struct AiPalComponent_SetServerIndex final
{
public:
	bool                                          IsDomestic;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetServerIndex) == 0x000001, "Wrong alignment on AiPalComponent_SetServerIndex");
static_assert(sizeof(AiPalComponent_SetServerIndex) == 0x000001, "Wrong size on AiPalComponent_SetServerIndex");
static_assert(offsetof(AiPalComponent_SetServerIndex, IsDomestic) == 0x000000, "Member 'AiPalComponent_SetServerIndex::IsDomestic' has a wrong offset!");

// Function AiPal.AiPalComponent.SetThreshold
// 0x0004 (0x0004 - 0x0000)
struct AiPalComponent_SetThreshold final
{
public:
	float                                         ThresholdPer;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AiPalComponent_SetThreshold) == 0x000004, "Wrong alignment on AiPalComponent_SetThreshold");
static_assert(sizeof(AiPalComponent_SetThreshold) == 0x000004, "Wrong size on AiPalComponent_SetThreshold");
static_assert(offsetof(AiPalComponent_SetThreshold, ThresholdPer) == 0x000000, "Member 'AiPalComponent_SetThreshold::ThresholdPer' has a wrong offset!");

}

