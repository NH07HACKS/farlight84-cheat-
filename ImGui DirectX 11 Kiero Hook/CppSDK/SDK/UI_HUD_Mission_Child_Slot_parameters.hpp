#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD_Mission_Child_Slot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.ExecuteUbergraph_UI_HUD_Mission_Child_Slot
// 0x0018 (0x0018 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot) == 0x000008, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot) == 0x000018, "Wrong size on UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot, EntryPoint) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot, K2Node_Event_bIsExpanded) == 0x000004, "Member 'UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot, K2Node_Event_bIsSelected) == 0x000005, "Member 'UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot, K2Node_Event_ListItemObject) == 0x000008, "Member 'UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'UI_HUD_Mission_Child_Slot_C_ExecuteUbergraph_UI_HUD_Mission_Child_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_PreConstruct");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_PreConstruct) == 0x000001, "Wrong size on UI_HUD_Mission_Child_Slot_C_PreConstruct");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.SetNext
// 0x0005 (0x0005 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_SetNext final
{
public:
	bool                                          IsHaveNext_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_SetNext) == 0x000001, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_SetNext");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_SetNext) == 0x000005, "Wrong size on UI_HUD_Mission_Child_Slot_C_SetNext");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_SetNext, IsHaveNext_0) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_SetNext::IsHaveNext_0' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_SetNext, Temp_bool_Variable) == 0x000001, "Member 'UI_HUD_Mission_Child_Slot_C_SetNext::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_SetNext, Temp_byte_Variable) == 0x000002, "Member 'UI_HUD_Mission_Child_Slot_C_SetNext::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_SetNext, Temp_byte_Variable_1) == 0x000003, "Member 'UI_HUD_Mission_Child_Slot_C_SetNext::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_SetNext, K2Node_Select_Default) == 0x000004, "Member 'UI_HUD_Mission_Child_Slot_C_SetNext::K2Node_Select_Default' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.Set IsActivity Task
// 0x0034 (0x0034 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task final
{
public:
	bool                                          IsActivity_Task_0;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task) == 0x000004, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task) == 0x000034, "Wrong size on UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task, IsActivity_Task_0) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task::IsActivity_Task_0' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task, Temp_bool_Variable) == 0x000001, "Member 'UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task, Temp_struct_Variable) == 0x000004, "Member 'UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task, Temp_struct_Variable_1) == 0x000014, "Member 'UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task, K2Node_Select_Default) == 0x000024, "Member 'UI_HUD_Mission_Child_Slot_C_Set_IsActivity_Task::K2Node_Select_Default' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_HUD_Mission_Child_Slot.UI_HUD_Mission_Child_Slot_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_HUD_Mission_Child_Slot_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Mission_Child_Slot_C_GetModuleName) == 0x000008, "Wrong alignment on UI_HUD_Mission_Child_Slot_C_GetModuleName");
static_assert(sizeof(UI_HUD_Mission_Child_Slot_C_GetModuleName) == 0x000010, "Wrong size on UI_HUD_Mission_Child_Slot_C_GetModuleName");
static_assert(offsetof(UI_HUD_Mission_Child_Slot_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_HUD_Mission_Child_Slot_C_GetModuleName::ReturnValue' has a wrong offset!");

}

