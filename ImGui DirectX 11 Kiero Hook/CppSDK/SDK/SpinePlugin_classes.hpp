#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "ProceduralMeshComponent_classes.hpp"
#include "Engine_classes.hpp"
#include "SpinePlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class SpinePlugin.SpineAtlasAsset
// 0x0030 (0x0060 - 0x0030)
class USpineAtlasAsset final : public UPrimaryDataAsset
{
public:
	TArray<class UTexture2D*>                     atlasPages;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RawData;                                           // 0x0048(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   atlasFileName;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAtlasAsset">();
	}
	static class USpineAtlasAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAtlasAsset>();
	}
};
static_assert(alignof(USpineAtlasAsset) == 0x000008, "Wrong alignment on USpineAtlasAsset");
static_assert(sizeof(USpineAtlasAsset) == 0x000060, "Wrong size on USpineAtlasAsset");
static_assert(offsetof(USpineAtlasAsset, atlasPages) == 0x000030, "Member 'USpineAtlasAsset::atlasPages' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, RawData) == 0x000048, "Member 'USpineAtlasAsset::RawData' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, atlasFileName) == 0x000058, "Member 'USpineAtlasAsset::atlasFileName' has a wrong offset!");

// Class SpinePlugin.SpineBoneDriverComponent
// 0x0020 (0x0360 - 0x0340)
class USpineBoneDriverComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x0353(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0xC];                                      // 0x0354(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeforeUpdateWorldTransform(class USpineSkeletonComponent* Skeleton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneDriverComponent">();
	}
	static class USpineBoneDriverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneDriverComponent>();
	}
};
static_assert(alignof(USpineBoneDriverComponent) == 0x000010, "Wrong alignment on USpineBoneDriverComponent");
static_assert(sizeof(USpineBoneDriverComponent) == 0x000360, "Wrong size on USpineBoneDriverComponent");
static_assert(offsetof(USpineBoneDriverComponent, Target) == 0x000338, "Member 'USpineBoneDriverComponent::Target' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, BoneName) == 0x000340, "Member 'USpineBoneDriverComponent::BoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseComponentTransform) == 0x000350, "Member 'USpineBoneDriverComponent::UseComponentTransform' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UsePosition) == 0x000351, "Member 'USpineBoneDriverComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseRotation) == 0x000352, "Member 'USpineBoneDriverComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseScale) == 0x000353, "Member 'USpineBoneDriverComponent::UseScale' has a wrong offset!");

// Class SpinePlugin.SpineBoneFollowerComponent
// 0x0020 (0x0360 - 0x0340)
class USpineBoneFollowerComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x0353(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0xC];                                      // 0x0354(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneFollowerComponent">();
	}
	static class USpineBoneFollowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneFollowerComponent>();
	}
};
static_assert(alignof(USpineBoneFollowerComponent) == 0x000010, "Wrong alignment on USpineBoneFollowerComponent");
static_assert(sizeof(USpineBoneFollowerComponent) == 0x000360, "Wrong size on USpineBoneFollowerComponent");
static_assert(offsetof(USpineBoneFollowerComponent, Target) == 0x000338, "Member 'USpineBoneFollowerComponent::Target' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, BoneName) == 0x000340, "Member 'USpineBoneFollowerComponent::BoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseComponentTransform) == 0x000350, "Member 'USpineBoneFollowerComponent::UseComponentTransform' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UsePosition) == 0x000351, "Member 'USpineBoneFollowerComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseRotation) == 0x000352, "Member 'USpineBoneFollowerComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseScale) == 0x000353, "Member 'USpineBoneFollowerComponent::UseScale' has a wrong offset!");

// Class SpinePlugin.TrackEntry
// 0x0068 (0x0090 - 0x0028)
class UTrackEntry final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationStart;                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationInterrupt;                     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry, const struct FSpineEvent& evt)> AnimationEvent; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationComplete;                      // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationEnd;                           // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationDispose;                       // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAlpha();
	float getAnimationDuration();
	float GetAnimationEnd();
	float GetAnimationLast();
	class FString getAnimationName();
	float GetAnimationStart();
	float GetAttachmentThreshold();
	float GetDelay();
	float GetDrawOrderThreshold();
	float GetEventThreshold();
	bool GetLoop();
	float GetMixDuration();
	float GetMixTime();
	float GetTimeScale();
	float GetTrackEnd();
	int32 GetTrackIndex();
	float GetTrackTime();
	bool isValidAnimation();
	void SetAlpha(float Alpha);
	void SetAnimationEnd(float animationEnd_0);
	void SetAnimationLast(float animationLast);
	void SetAnimationStart(float animationStart_0);
	void SetAttachmentThreshold(float attachmentThreshold);
	void SetDelay(float Delay);
	void SetDrawOrderThreshold(float drawOrderThreshold);
	void SetEventThreshold(float eventThreshold);
	void SetLoop(bool Loop);
	void SetMixDuration(float mixDuration);
	void SetMixTime(float mixTime);
	void SetTimeScale(float TimeScale);
	void SetTrackEnd(float trackEnd);
	void SetTrackTime(float trackTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrackEntry">();
	}
	static class UTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrackEntry>();
	}
};
static_assert(alignof(UTrackEntry) == 0x000008, "Wrong alignment on UTrackEntry");
static_assert(sizeof(UTrackEntry) == 0x000090, "Wrong size on UTrackEntry");
static_assert(offsetof(UTrackEntry, animationStart) == 0x000028, "Member 'UTrackEntry::animationStart' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationInterrupt) == 0x000038, "Member 'UTrackEntry::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationEvent) == 0x000048, "Member 'UTrackEntry::AnimationEvent' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationComplete) == 0x000058, "Member 'UTrackEntry::AnimationComplete' has a wrong offset!");
static_assert(offsetof(UTrackEntry, animationEnd) == 0x000068, "Member 'UTrackEntry::animationEnd' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationDispose) == 0x000078, "Member 'UTrackEntry::AnimationDispose' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonComponent
// 0x0058 (0x0118 - 0x00C0)
class USpineSkeletonComponent : public UActorComponent
{
public:
	class USpineAtlasAsset*                       Atlas;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineSkeletonComponent* Skeleton)> BeforeUpdateWorldTransform; // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineSkeletonComponent* Skeleton)> AfterUpdateWorldTransform; // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x28];                                      // 0x00F0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneWorldTransform(const class FString& BoneName);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetBonesToSetupPose();
	void SetBoneWorldPosition(const class FString& BoneName, const struct FVector& Position);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotColor(const class FString& SlotName, const struct FColor& Color);
	void SetSlotsToSetupPose();
	void SetToSetupPose();
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonComponent">();
	}
	static class USpineSkeletonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonComponent>();
	}
};
static_assert(alignof(USpineSkeletonComponent) == 0x000008, "Wrong alignment on USpineSkeletonComponent");
static_assert(sizeof(USpineSkeletonComponent) == 0x000118, "Wrong size on USpineSkeletonComponent");
static_assert(offsetof(USpineSkeletonComponent, Atlas) == 0x0000C0, "Member 'USpineSkeletonComponent::Atlas' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, SkeletonData) == 0x0000C8, "Member 'USpineSkeletonComponent::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, BeforeUpdateWorldTransform) == 0x0000D0, "Member 'USpineSkeletonComponent::BeforeUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, AfterUpdateWorldTransform) == 0x0000E0, "Member 'USpineSkeletonComponent::AfterUpdateWorldTransform' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonAnimationComponent
// 0x0100 (0x0218 - 0x0118)
class USpineSkeletonAnimationComponent final : public USpineSkeletonComponent
{
public:
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationStart;                         // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationInterrupt;                     // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry, const struct FSpineEvent& evt)> AnimationEvent; // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationComplete;                      // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationEnd;                           // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationDispose;                       // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PreviewAnimation;                                  // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewSkin;                                       // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x01A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F1[0x27];                                     // 0x01F1(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetTimeScale();
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	void SetAutoPlay(bool bInAutoPlays);
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetTimeScale(float TimeScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonAnimationComponent">();
	}
	static class USpineSkeletonAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonAnimationComponent>();
	}
};
static_assert(alignof(USpineSkeletonAnimationComponent) == 0x000008, "Wrong alignment on USpineSkeletonAnimationComponent");
static_assert(sizeof(USpineSkeletonAnimationComponent) == 0x000218, "Wrong size on USpineSkeletonAnimationComponent");
static_assert(offsetof(USpineSkeletonAnimationComponent, animationStart) == 0x000118, "Member 'USpineSkeletonAnimationComponent::animationStart' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationInterrupt) == 0x000128, "Member 'USpineSkeletonAnimationComponent::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationEvent) == 0x000138, "Member 'USpineSkeletonAnimationComponent::AnimationEvent' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationComplete) == 0x000148, "Member 'USpineSkeletonAnimationComponent::AnimationComplete' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, animationEnd) == 0x000158, "Member 'USpineSkeletonAnimationComponent::animationEnd' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationDispose) == 0x000168, "Member 'USpineSkeletonAnimationComponent::AnimationDispose' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewAnimation) == 0x000178, "Member 'USpineSkeletonAnimationComponent::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewSkin) == 0x000188, "Member 'USpineSkeletonAnimationComponent::PreviewSkin' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, trackEntries) == 0x0001A0, "Member 'USpineSkeletonAnimationComponent::trackEntries' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, bAutoPlaying) == 0x0001F0, "Member 'USpineSkeletonAnimationComponent::bAutoPlaying' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonDataAsset
// 0x00D0 (0x00F8 - 0x0028)
class USpineSkeletonDataAsset final : public UObject
{
public:
	float                                         DefaultMix;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpineAnimationStateMixData>    MixData;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Bones;                                             // 0x0040(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Slots;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Skins;                                             // 0x0060(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Animations;                                        // 0x0070(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Events;                                            // 0x0080(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RawData;                                           // 0x0090(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   skeletonDataFileName;                              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x50];                                      // 0x00A8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonDataAsset">();
	}
	static class USpineSkeletonDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonDataAsset>();
	}
};
static_assert(alignof(USpineSkeletonDataAsset) == 0x000008, "Wrong alignment on USpineSkeletonDataAsset");
static_assert(sizeof(USpineSkeletonDataAsset) == 0x0000F8, "Wrong size on USpineSkeletonDataAsset");
static_assert(offsetof(USpineSkeletonDataAsset, DefaultMix) == 0x000028, "Member 'USpineSkeletonDataAsset::DefaultMix' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, MixData) == 0x000030, "Member 'USpineSkeletonDataAsset::MixData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Bones) == 0x000040, "Member 'USpineSkeletonDataAsset::Bones' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Slots) == 0x000050, "Member 'USpineSkeletonDataAsset::Slots' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Skins) == 0x000060, "Member 'USpineSkeletonDataAsset::Skins' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Animations) == 0x000070, "Member 'USpineSkeletonDataAsset::Animations' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Events) == 0x000080, "Member 'USpineSkeletonDataAsset::Events' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, RawData) == 0x000090, "Member 'USpineSkeletonDataAsset::RawData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, skeletonDataFileName) == 0x0000A0, "Member 'USpineSkeletonDataAsset::skeletonDataFileName' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonRendererComponent
// 0x02C0 (0x09C0 - 0x0700)
class USpineSkeletonRendererComponent final : public UProceduralMeshComponent
{
public:
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x0728(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x0748(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x075C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0764(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_775[0x1F3];                                    // 0x0775(0x01F3)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0968(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 Indices;                                           // 0x0978(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        Normals;                                           // 0x0988(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      UVs;                                               // 0x0998(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FColor>                         Colors;                                            // 0x09A8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9B8[0x8];                                      // 0x09B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonRendererComponent">();
	}
	static class USpineSkeletonRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonRendererComponent>();
	}
};
static_assert(alignof(USpineSkeletonRendererComponent) == 0x000010, "Wrong alignment on USpineSkeletonRendererComponent");
static_assert(sizeof(USpineSkeletonRendererComponent) == 0x0009C0, "Wrong size on USpineSkeletonRendererComponent");
static_assert(offsetof(USpineSkeletonRendererComponent, NormalBlendMaterial) == 0x0006F8, "Member 'USpineSkeletonRendererComponent::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AdditiveBlendMaterial) == 0x000700, "Member 'USpineSkeletonRendererComponent::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MultiplyBlendMaterial) == 0x000708, "Member 'USpineSkeletonRendererComponent::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, ScreenBlendMaterial) == 0x000710, "Member 'USpineSkeletonRendererComponent::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasNormalBlendMaterials) == 0x000718, "Member 'USpineSkeletonRendererComponent::atlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasAdditiveBlendMaterials) == 0x000728, "Member 'USpineSkeletonRendererComponent::atlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasMultiplyBlendMaterials) == 0x000738, "Member 'USpineSkeletonRendererComponent::atlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, atlasScreenBlendMaterials) == 0x000748, "Member 'USpineSkeletonRendererComponent::atlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, DepthOffset) == 0x000758, "Member 'USpineSkeletonRendererComponent::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, TextureParameterName) == 0x00075C, "Member 'USpineSkeletonRendererComponent::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Color) == 0x000764, "Member 'USpineSkeletonRendererComponent::Color' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, bCreateCollision) == 0x000774, "Member 'USpineSkeletonRendererComponent::bCreateCollision' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Vertices) == 0x000968, "Member 'USpineSkeletonRendererComponent::Vertices' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Indices) == 0x000978, "Member 'USpineSkeletonRendererComponent::Indices' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Normals) == 0x000988, "Member 'USpineSkeletonRendererComponent::Normals' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, UVs) == 0x000998, "Member 'USpineSkeletonRendererComponent::UVs' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Colors) == 0x0009A8, "Member 'USpineSkeletonRendererComponent::Colors' has a wrong offset!");

// Class SpinePlugin.SpineWidget
// 0x0600 (0x0740 - 0x0140)
class USpineWidget final : public UWidget
{
public:
	class FString                                 InitialSkin;                                       // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       Atlas;                                             // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x018C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x01A0(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> BeforeUpdateWorldTransform;         // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> AfterUpdateWorldTransform;          // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationStart;                         // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationInterrupt;                     // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry, const struct FSpineEvent& evt)> AnimationEvent; // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationComplete;                      // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> animationEnd;                           // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* entry)> AnimationDispose;                       // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x40];                                     // 0x0330(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x0370(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x50];                                     // 0x0380(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x03D0(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x50];                                     // 0x03E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0430(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x50];                                     // 0x0440(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x0490(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x240];                                    // 0x04A0(0x0240)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x06E0(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_731[0xF];                                      // 0x0731(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneTransform(const class FString& BoneName);
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	float GetTimeScale();
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetAutoPlay(bool bInAutoPlays);
	void SetBonesToSetupPose();
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotsToSetupPose();
	void SetTimeScale(float TimeScale);
	void SetToSetupPose();
	void Tick(float DeltaTime, bool CallDelegates);
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineWidget">();
	}
	static class USpineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineWidget>();
	}
};
static_assert(alignof(USpineWidget) == 0x000010, "Wrong alignment on USpineWidget");
static_assert(sizeof(USpineWidget) == 0x000740, "Wrong size on USpineWidget");
static_assert(offsetof(USpineWidget, InitialSkin) == 0x000140, "Member 'USpineWidget::InitialSkin' has a wrong offset!");
static_assert(offsetof(USpineWidget, Atlas) == 0x000150, "Member 'USpineWidget::Atlas' has a wrong offset!");
static_assert(offsetof(USpineWidget, SkeletonData) == 0x000158, "Member 'USpineWidget::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineWidget, NormalBlendMaterial) == 0x000160, "Member 'USpineWidget::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, AdditiveBlendMaterial) == 0x000168, "Member 'USpineWidget::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, MultiplyBlendMaterial) == 0x000170, "Member 'USpineWidget::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, ScreenBlendMaterial) == 0x000178, "Member 'USpineWidget::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, TextureParameterName) == 0x000180, "Member 'USpineWidget::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineWidget, DepthOffset) == 0x000188, "Member 'USpineWidget::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineWidget, Color) == 0x00018C, "Member 'USpineWidget::Color' has a wrong offset!");
static_assert(offsetof(USpineWidget, Brush) == 0x0001A0, "Member 'USpineWidget::Brush' has a wrong offset!");
static_assert(offsetof(USpineWidget, BeforeUpdateWorldTransform) == 0x0002B0, "Member 'USpineWidget::BeforeUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, AfterUpdateWorldTransform) == 0x0002C0, "Member 'USpineWidget::AfterUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, animationStart) == 0x0002D0, "Member 'USpineWidget::animationStart' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationInterrupt) == 0x0002E0, "Member 'USpineWidget::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationEvent) == 0x0002F0, "Member 'USpineWidget::AnimationEvent' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationComplete) == 0x000300, "Member 'USpineWidget::AnimationComplete' has a wrong offset!");
static_assert(offsetof(USpineWidget, animationEnd) == 0x000310, "Member 'USpineWidget::animationEnd' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationDispose) == 0x000320, "Member 'USpineWidget::AnimationDispose' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasNormalBlendMaterials) == 0x000370, "Member 'USpineWidget::atlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasAdditiveBlendMaterials) == 0x0003D0, "Member 'USpineWidget::atlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasMultiplyBlendMaterials) == 0x000430, "Member 'USpineWidget::atlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, atlasScreenBlendMaterials) == 0x000490, "Member 'USpineWidget::atlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, trackEntries) == 0x0006E0, "Member 'USpineWidget::trackEntries' has a wrong offset!");
static_assert(offsetof(USpineWidget, bAutoPlaying) == 0x000730, "Member 'USpineWidget::bAutoPlaying' has a wrong offset!");

}

