#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_CustomMode

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Solarland_structs.hpp"
#include "E_NoticeType_Noya_structs.hpp"
#include "UMG_structs.hpp"
#include "E_NoticeLevel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_CustomMode.FL_CustomMode_C
// 0x0000 (0x0028 - 0x0028)
class UFL_CustomMode_C final : public UBlueprintFunctionLibrary
{
public:
	static void Convert_ToString_(const struct FKey& Key, class UObject* __WorldContext, class FString* KeyString);
	static void 触发提示(class UObject* 图标, const class FString& 文本, E_NoticeLevel 强度等级, class UObject* __WorldContext);
	static void 角色是否存活(class ASolarCharacter* 角色, class UObject* __WorldContext, bool* 是否存活);
	static void 切换控件可见性(class UUserWidget* Target, class UObject* __WorldContext, bool* Visible, class UUserWidget** Widget);
	static void 物品下标(int32 单页物品数量, int32 页码, int32 物品序号, class UObject* __WorldContext, int32* 列表下标);
	static void 获取页码数量(int32 ItemCount, int32 PageCapacity, class UObject* __WorldContext, int32* PageCount);
	static void 设置可见性(class UWidget* Target, bool Visiable, class UObject* __WorldContext);
	static void 随机POP元素(TArray<class ASolarMapElementBase*>& Array, int32 数量, class UObject* __WorldContext, TArray<class ASolarMapElementBase*>* Resault);
	static void 是否为本地角色(class ASolarCharacter* 角色, class UObject* __WorldContext, bool* 本地角色);
	static void ToInt_StringArray_(TArray<class FString>& str, class UObject* __WorldContext, TArray<int32>* Int);
	static void 获取地面高度(const struct FVector& 位置, bool 从上到下, class UObject* __WorldContext, struct FVector* 地面位置, float* Z, bool* 是否在水中);
	static void 角色健康状态(class ASolarCharacter* 角色, class UObject* __WorldContext, ECharacterHealthState* 健康状态);
	static void 仅注册小地图标记物(class UClass* InMapMarkClass, const struct FVector& InMarkPos, bool EdgeSupport, int32 ZOrder, class UObject* __WorldContext, class UMapMarkBase** Output);
	static void 坐标打点(const struct FVector& Vector, class UObject* __WorldContext, class FString* str);
	static void 角色势力列表(TArray<class AActor*>& 角色, class UObject* __WorldContext, TArray<class FString>* Result);
	static EDriveState 角色驾驶状态(class AActor* NewParam, class UObject* __WorldContext);
	static void 注册Noya被动提示(E_NoticeType_Noya 类型, float 持续时间, const class FString& 文本, const TMap<uint8, bool>& 触发条件, int32 可触发次数, class UObject* __WorldContext);
	static void 触发Noya主动提示(E_NoticeType_Noya 类型, float 持续时间, const class FString& 文本, class UObject* __WorldContext);
	static void 更新Noya触发条件(const TMap<uint8, bool>& 触发条件, class UObject* __WorldContext);
	static void 获取Noya界面(class UObject* __WorldContext, class UUI_Notice_Noya_C** NoyaWidget);
	static void 设置Noya提示触发间隔(float 被动提示触发间隔, class UObject* __WorldContext);
	static void Number_2Letter(int32 Number, class UObject* __WorldContext, class FString* Letter);
	static void 获取打包类型(class UObject* __WorldContext, ESolarBuildConfiguration* 打包类型);
	static void 抽选随机数字(int32 下限, int32 上限, TArray<int32>& 排除, class UObject* __WorldContext, int32* Result);
	static void 转换时间字符串(int32 秒数, class UObject* __WorldContext, class FText* 时间);
	static void ArrayContain(TArray<class FString>& Main, TArray<class FString>& Sub, class UObject* __WorldContext, bool* Contain);
	static void Name2String(TArray<class FName>& Names, class UObject* __WorldContext, TArray<class FString>* Strings);
	static class UBPC_RequestMessage_C* GetRequestComponet(class UObject* __WorldContext);
	static void _s_BindOnRequestDealt(const TDelegate<void(const struct FS_MessageRequest& Info, bool Result)>& Event, class UObject* __WorldContext, class ABP_RequestMessage_C** RequestManager);
	static void _c_BindOnRequestReplied(const TDelegate<void(const class FString& Handle, bool Reply, uint8 Type, int32 ReplierPlayerID)>& Event, class UObject* __WorldContext);
	static void _c_BindOnReceiveRequest(const TDelegate<void(const class FString& Handle, uint8 Type, int32 SenderPlayerID)>& Event, class UObject* __WorldContext);
	static ESolarNetMode GetNetMode(class UObject* __WorldContext);
	static void Pawn_is_a_vehicle(class APawn* Pawn, class UObject* __WorldContext, bool* Result);
	static void 获取武器Icon(int32 ID, class UObject* __WorldContext, class UTexture2D** 武器Icon, int32* 品质, int32* PartsType);
	static void 获取武器技能Icon(int32 ID, class UObject* __WorldContext, class UTexture2D** 武器技能Icon, int32* 武器技能本地化ID);
	static void 从物品ID获取本地化文本ID(int32 ID, class UObject* __WorldContext, int32* 文本ID);
	static void _s_BindOnPlayerDisconnected(const TDelegate<void(const class ASolarPlayerController* PC)>& Event, class UObject* __WorldContext, bool* bSuccess);
	static void _s_BindOnPlayerReconnected(const TDelegate<void(const class ASolarPlayerController* PC)>& Event, class UObject* __WorldContext, bool* bSuccess);
	static class ULocal_RequestMessage_C* Get_Loc_Request_Componet(const class UObject* WorldContextObject, class UObject* __WorldContext);
	static void Get_Portrait_from_Avatar_ID(int32 Avatar_ID, class UObject* __WorldContext, class UTexture2D** Portrait_Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_CustomMode_C">();
	}
	static class UFL_CustomMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_CustomMode_C>();
	}
};
static_assert(alignof(UFL_CustomMode_C) == 0x000008, "Wrong alignment on UFL_CustomMode_C");
static_assert(sizeof(UFL_CustomMode_C) == 0x000028, "Wrong size on UFL_CustomMode_C");

}

