#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TutorialSequence_2

#include "Basic.hpp"


namespace SDK::Params
{

// Function TutorialSequence_2.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x00C8 (0x00C8 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_Spawner;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_4; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_10;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_5; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_9;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_4; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_8;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_3; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_7;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_6;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_1; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_5;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_3; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_4;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR;   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_3;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_2; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_1; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID_1;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACineCameraActor*                       K2Node_CustomEvent_CineCameraActor_seq_2;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BotAISpawnerInGuide_Sequence_C*     K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StepID;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x0000C8, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Spawner) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Spawner' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_4) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_10) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_10' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_5) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_9) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_9' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_4) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_8) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_3) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_7) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_2) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_6) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_1) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_5) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_3) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_4) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_3) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_2) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_2) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_1) == 0x0000A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID_1) == 0x0000A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CineCameraActor_seq_2) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CineCameraActor_seq_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_StepID) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.InitMoveAndAttackActor
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_InitMoveAndAttackActor final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     Spawner;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_InitMoveAndAttackActor) == 0x000008, "Wrong alignment on SequenceDirector_C_InitMoveAndAttackActor");
static_assert(sizeof(SequenceDirector_C_InitMoveAndAttackActor) == 0x000008, "Wrong size on SequenceDirector_C_InitMoveAndAttackActor");
static_assert(offsetof(SequenceDirector_C_InitMoveAndAttackActor, Spawner) == 0x000000, "Member 'SequenceDirector_C_InitMoveAndAttackActor::Spawner' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Duck_Roll
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Duck_Roll final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Duck_Roll) == 0x000008, "Wrong alignment on SequenceDirector_C_Duck_Roll");
static_assert(sizeof(SequenceDirector_C_Duck_Roll) == 0x000010, "Wrong size on SequenceDirector_C_Duck_Roll");
static_assert(offsetof(SequenceDirector_C_Duck_Roll, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_Duck_Roll::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Duck_Roll, StepID) == 0x000008, "Member 'SequenceDirector_C_Duck_Roll::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.CineCameraActor_seq_2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_CineCameraActor_seq_2_Event_0 final
{
public:
	class ACineCameraActor*                       CineCameraActor_seq_2;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_CineCameraActor_seq_2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_CineCameraActor_seq_2_Event_0");
static_assert(sizeof(SequenceDirector_C_CineCameraActor_seq_2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_CineCameraActor_seq_2_Event_0");
static_assert(offsetof(SequenceDirector_C_CineCameraActor_seq_2_Event_0, CineCameraActor_seq_2) == 0x000000, "Member 'SequenceDirector_C_CineCameraActor_seq_2_Event_0::CineCameraActor_seq_2' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Duck_Move_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Duck_Move_2 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Duck_Move_2) == 0x000008, "Wrong alignment on SequenceDirector_C_Duck_Move_2");
static_assert(sizeof(SequenceDirector_C_Duck_Move_2) == 0x000010, "Wrong size on SequenceDirector_C_Duck_Move_2");
static_assert(offsetof(SequenceDirector_C_Duck_Move_2, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_Duck_Move_2::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Duck_Move_2, StepID) == 0x000008, "Member 'SequenceDirector_C_Duck_Move_2::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Duck_StopRoll
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Duck_StopRoll final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Duck_StopRoll) == 0x000008, "Wrong alignment on SequenceDirector_C_Duck_StopRoll");
static_assert(sizeof(SequenceDirector_C_Duck_StopRoll) == 0x000010, "Wrong size on SequenceDirector_C_Duck_StopRoll");
static_assert(offsetof(SequenceDirector_C_Duck_StopRoll, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_Duck_StopRoll::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Duck_StopRoll, StepID) == 0x000008, "Member 'SequenceDirector_C_Duck_StopRoll::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Lover_Move
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Lover_Move final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Lover_Move) == 0x000008, "Wrong alignment on SequenceDirector_C_Lover_Move");
static_assert(sizeof(SequenceDirector_C_Lover_Move) == 0x000010, "Wrong size on SequenceDirector_C_Lover_Move");
static_assert(offsetof(SequenceDirector_C_Lover_Move, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Lover_Move::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Lover_Move, StepID) == 0x000008, "Member 'SequenceDirector_C_Lover_Move::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Ducksyde_Move
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Ducksyde_Move final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Ducksyde_Move) == 0x000008, "Wrong alignment on SequenceDirector_C_Ducksyde_Move");
static_assert(sizeof(SequenceDirector_C_Ducksyde_Move) == 0x000010, "Wrong size on SequenceDirector_C_Ducksyde_Move");
static_assert(offsetof(SequenceDirector_C_Ducksyde_Move, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_Ducksyde_Move::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Ducksyde_Move, StepID) == 0x000008, "Member 'SequenceDirector_C_Ducksyde_Move::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Lover_ReadyToFight
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Lover_ReadyToFight final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Lover_ReadyToFight) == 0x000008, "Wrong alignment on SequenceDirector_C_Lover_ReadyToFight");
static_assert(sizeof(SequenceDirector_C_Lover_ReadyToFight) == 0x000010, "Wrong size on SequenceDirector_C_Lover_ReadyToFight");
static_assert(offsetof(SequenceDirector_C_Lover_ReadyToFight, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Lover_ReadyToFight::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Lover_ReadyToFight, StepID) == 0x000008, "Member 'SequenceDirector_C_Lover_ReadyToFight::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Lover_Move_3
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Lover_Move_3 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Lover_Move_3) == 0x000008, "Wrong alignment on SequenceDirector_C_Lover_Move_3");
static_assert(sizeof(SequenceDirector_C_Lover_Move_3) == 0x000010, "Wrong size on SequenceDirector_C_Lover_Move_3");
static_assert(offsetof(SequenceDirector_C_Lover_Move_3, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Lover_Move_3::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Lover_Move_3, StepID) == 0x000008, "Member 'SequenceDirector_C_Lover_Move_3::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Lover_BombActivate
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Lover_BombActivate final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Lover_BombActivate) == 0x000008, "Wrong alignment on SequenceDirector_C_Lover_BombActivate");
static_assert(sizeof(SequenceDirector_C_Lover_BombActivate) == 0x000010, "Wrong size on SequenceDirector_C_Lover_BombActivate");
static_assert(offsetof(SequenceDirector_C_Lover_BombActivate, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Lover_BombActivate::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Lover_BombActivate, StepID) == 0x000008, "Member 'SequenceDirector_C_Lover_BombActivate::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Ducksyde_Move_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Ducksyde_Move_2 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Ducksyde_Move_2) == 0x000008, "Wrong alignment on SequenceDirector_C_Ducksyde_Move_2");
static_assert(sizeof(SequenceDirector_C_Ducksyde_Move_2) == 0x000010, "Wrong size on SequenceDirector_C_Ducksyde_Move_2");
static_assert(offsetof(SequenceDirector_C_Ducksyde_Move_2, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Ducksyde_Move_2::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Ducksyde_Move_2, StepID) == 0x000008, "Member 'SequenceDirector_C_Ducksyde_Move_2::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Lover_ReleaseBomb
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Lover_ReleaseBomb final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Lover_ReleaseBomb) == 0x000008, "Wrong alignment on SequenceDirector_C_Lover_ReleaseBomb");
static_assert(sizeof(SequenceDirector_C_Lover_ReleaseBomb) == 0x000010, "Wrong size on SequenceDirector_C_Lover_ReleaseBomb");
static_assert(offsetof(SequenceDirector_C_Lover_ReleaseBomb, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_Lover_ReleaseBomb::BP_BotAISpawnerInSequence_LR' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Lover_ReleaseBomb, StepID) == 0x000008, "Member 'SequenceDirector_C_Lover_ReleaseBomb::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.Duck_ReadyToFight
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Duck_ReadyToFight final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StepID;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Duck_ReadyToFight) == 0x000008, "Wrong alignment on SequenceDirector_C_Duck_ReadyToFight");
static_assert(sizeof(SequenceDirector_C_Duck_ReadyToFight) == 0x000010, "Wrong size on SequenceDirector_C_Duck_ReadyToFight");
static_assert(offsetof(SequenceDirector_C_Duck_ReadyToFight, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_Duck_ReadyToFight::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Duck_ReadyToFight, StepID) == 0x000008, "Member 'SequenceDirector_C_Duck_ReadyToFight::StepID' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ACineCameraActor*                       CineCameraActor_seq_2;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, CineCameraActor_seq_2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::CineCameraActor_seq_2' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     Spawner;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, Spawner) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::Spawner' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_LR;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, BP_BotAISpawnerInSequence_LR) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::BP_BotAISpawnerInSequence_LR' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     Spawner;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, Spawner) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::Spawner' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");

// Function TutorialSequence_2.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13 final
{
public:
	class ABP_BotAISpawnerInGuide_Sequence_C*     BP_BotAISpawnerInSequence_Duck;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13, BP_BotAISpawnerInSequence_Duck) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13::BP_BotAISpawnerInSequence_Duck' has a wrong offset!");

}

