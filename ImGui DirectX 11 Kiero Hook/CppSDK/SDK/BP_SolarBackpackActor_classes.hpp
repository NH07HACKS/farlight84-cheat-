#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SolarBackpackActor

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SolarBackpackActor.BP_SolarBackpackActor_C
// 0x0020 (0x0558 - 0x0538)
class ABP_SolarBackpackActor_C : public ASolarBackpackActor
{
public:
	class UMaterialInstanceConstant*              MI_Outline;                                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PcOutlineWidthBias;                                // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             NoNeedOutlineMats;                                 // 0x0548(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void FX_Default();
	void FX_LowPower();
	void FX_Charging();
	void FX_Flying();
	void FX_Idle();
	class UMaterialInstanceDynamic* TryCreateDynamicMaterialInstance(class UPrimitiveComponent* Component, int32 ElementIndex, class UMaterialInterface* SourceMaterial, class FName OptionlName);
	void LobbyForceSetLOD();
	void SetOutline();
	void Check_Platform_Graphics(bool* NeedOutLine);
	void Check_Platform_PCOnly(bool* isIgnoreTranslucentSection);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SolarBackpackActor_C">();
	}
	static class ABP_SolarBackpackActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SolarBackpackActor_C>();
	}
};
static_assert(alignof(ABP_SolarBackpackActor_C) == 0x000008, "Wrong alignment on ABP_SolarBackpackActor_C");
static_assert(sizeof(ABP_SolarBackpackActor_C) == 0x000558, "Wrong size on ABP_SolarBackpackActor_C");
static_assert(offsetof(ABP_SolarBackpackActor_C, MI_Outline) == 0x000538, "Member 'ABP_SolarBackpackActor_C::MI_Outline' has a wrong offset!");
static_assert(offsetof(ABP_SolarBackpackActor_C, PcOutlineWidthBias) == 0x000540, "Member 'ABP_SolarBackpackActor_C::PcOutlineWidthBias' has a wrong offset!");
static_assert(offsetof(ABP_SolarBackpackActor_C, NoNeedOutlineMats) == 0x000548, "Member 'ABP_SolarBackpackActor_C::NoNeedOutlineMats' has a wrong offset!");

}

