#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_MCP_Skill_DuckRollingMesh

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// DynamicClass ABP_MCP_Skill_DuckRollingMesh.ABP_MCP_Skill_DuckRollingMesh_C
// 0x0200 (0x04B0 - 0x02B0)
class UABP_MCP_Skill_DuckRollingMesh_C final : public UAnimInstance
{
public:
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02A8(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x02D8(0x0048)(NativeAccessSpecifierPublic)
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0320(0x0110)(NativeAccessSpecifierPublic)
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0430(0x0020)(NativeAccessSpecifierPublic)
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0450(0x0020)(NativeAccessSpecifierPublic)
	int32                                         PoseIndex;                                         // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoneRotation;                                      // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RootOffsetZ;                                       // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0484(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0488(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0490(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDuckRollingMeshComponent*              K2Node_DynamicCast_AsB_Duck_Rolling_Mesh_Component; // 0x0498(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x04A0(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0xF];                                      // 0x04A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MCP_Skill_DuckRollingMesh_AnimGraphNode_ModifyBone_91AEC0A84734F98DAFCF6A96BF96E989();
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);
	void AnimGraph(struct FPoseLink* bpp__AnimGraph__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ABP_MCP_Skill_DuckRollingMesh_C">();
	}
	static class UABP_MCP_Skill_DuckRollingMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_MCP_Skill_DuckRollingMesh_C>();
	}
};
static_assert(alignof(UABP_MCP_Skill_DuckRollingMesh_C) == 0x000010, "Wrong alignment on UABP_MCP_Skill_DuckRollingMesh_C");
static_assert(sizeof(UABP_MCP_Skill_DuckRollingMesh_C) == 0x0004B0, "Wrong size on UABP_MCP_Skill_DuckRollingMesh_C");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, AnimGraphNode_Root) == 0x0002A8, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, AnimGraphNode_Slot) == 0x0002D8, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, AnimGraphNode_ModifyBone) == 0x000320, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, AnimGraphNode_LocalToComponentSpace) == 0x000430, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, AnimGraphNode_ComponentToLocalSpace) == 0x000450, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, PoseIndex) == 0x000470, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::PoseIndex' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, BoneRotation) == 0x000474, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::BoneRotation' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, RootOffsetZ) == 0x000480, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::RootOffsetZ' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, K2Node_Event_DeltaTimeX) == 0x000484, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, K2Node_DynamicCast_AsSolar_Character) == 0x000488, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, K2Node_DynamicCast_bSuccess) == 0x000490, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, K2Node_DynamicCast_AsB_Duck_Rolling_Mesh_Component) == 0x000498, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::K2Node_DynamicCast_AsB_Duck_Rolling_Mesh_Component' has a wrong offset!");
static_assert(offsetof(UABP_MCP_Skill_DuckRollingMesh_C, K2Node_DynamicCast_bSuccess_1) == 0x0004A0, "Member 'UABP_MCP_Skill_DuckRollingMesh_C::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

