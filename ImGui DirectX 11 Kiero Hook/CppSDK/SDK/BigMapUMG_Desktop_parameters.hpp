#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BigMapUMG_Desktop

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BigMapUMG_Desktop.BigMapUMG_Desktop_C.ExecuteUbergraph_BigMapUMG_Desktop
// 0x0004 (0x0004 - 0x0000)
struct BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop) == 0x000004, "Wrong alignment on BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop");
static_assert(sizeof(BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop) == 0x000004, "Wrong size on BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop");
static_assert(offsetof(BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop, EntryPoint) == 0x000000, "Member 'BigMapUMG_Desktop_C_ExecuteUbergraph_BigMapUMG_Desktop::EntryPoint' has a wrong offset!");

// Function BigMapUMG_Desktop.BigMapUMG_Desktop_C.OnBackKey
// 0x0001 (0x0001 - 0x0000)
struct BigMapUMG_Desktop_C_OnBackKey final
{
public:
	EWidgetBackKeyType                            BackKeyType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BigMapUMG_Desktop_C_OnBackKey) == 0x000001, "Wrong alignment on BigMapUMG_Desktop_C_OnBackKey");
static_assert(sizeof(BigMapUMG_Desktop_C_OnBackKey) == 0x000001, "Wrong size on BigMapUMG_Desktop_C_OnBackKey");
static_assert(offsetof(BigMapUMG_Desktop_C_OnBackKey, BackKeyType) == 0x000000, "Member 'BigMapUMG_Desktop_C_OnBackKey::BackKeyType' has a wrong offset!");

// Function BigMapUMG_Desktop.BigMapUMG_Desktop_C.ReceiveTick
// 0x003C (0x003C - 0x0000)
struct BigMapUMG_Desktop_C_ReceiveTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BigMapUMG_Desktop_C_ReceiveTick) == 0x000004, "Wrong alignment on BigMapUMG_Desktop_C_ReceiveTick");
static_assert(sizeof(BigMapUMG_Desktop_C_ReceiveTick) == 0x00003C, "Wrong size on BigMapUMG_Desktop_C_ReceiveTick");
static_assert(offsetof(BigMapUMG_Desktop_C_ReceiveTick, MyGeometry) == 0x000000, "Member 'BigMapUMG_Desktop_C_ReceiveTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BigMapUMG_Desktop_C_ReceiveTick, InDeltaTime) == 0x000038, "Member 'BigMapUMG_Desktop_C_ReceiveTick::InDeltaTime' has a wrong offset!");

// Function BigMapUMG_Desktop.BigMapUMG_Desktop_C.InitFOVOnUIOpen
// 0x0004 (0x0004 - 0x0000)
struct BigMapUMG_Desktop_C_InitFOVOnUIOpen final
{
public:
	float                                         InFOV;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BigMapUMG_Desktop_C_InitFOVOnUIOpen) == 0x000004, "Wrong alignment on BigMapUMG_Desktop_C_InitFOVOnUIOpen");
static_assert(sizeof(BigMapUMG_Desktop_C_InitFOVOnUIOpen) == 0x000004, "Wrong size on BigMapUMG_Desktop_C_InitFOVOnUIOpen");
static_assert(offsetof(BigMapUMG_Desktop_C_InitFOVOnUIOpen, InFOV) == 0x000000, "Member 'BigMapUMG_Desktop_C_InitFOVOnUIOpen::InFOV' has a wrong offset!");

// Function BigMapUMG_Desktop.BigMapUMG_Desktop_C.OnMouseWheel
// 0x0160 (0x0160 - 0x0000)
struct BigMapUMG_Desktop_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BigMapUMG_Desktop_C_OnMouseWheel) == 0x000008, "Wrong alignment on BigMapUMG_Desktop_C_OnMouseWheel");
static_assert(sizeof(BigMapUMG_Desktop_C_OnMouseWheel) == 0x000160, "Wrong size on BigMapUMG_Desktop_C_OnMouseWheel");
static_assert(offsetof(BigMapUMG_Desktop_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'BigMapUMG_Desktop_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(BigMapUMG_Desktop_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'BigMapUMG_Desktop_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(BigMapUMG_Desktop_C_OnMouseWheel, ReturnValue) == 0x0000A8, "Member 'BigMapUMG_Desktop_C_OnMouseWheel::ReturnValue' has a wrong offset!");

}

