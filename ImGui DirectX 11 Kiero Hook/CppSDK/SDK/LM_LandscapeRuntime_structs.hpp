#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LM_LandscapeRuntime

#include "Basic.hpp"


namespace SDK
{

// Enum LM_LandscapeRuntime.ELMCopyTextureType
// NumValues: 0x0004
enum class ELMCopyTextureType : uint8
{
	Normal                                   = 0,
	Float16ToR8G8                            = 1,
	R8G8ToFloat16                            = 2,
	ELMCopyTextureType_MAX                   = 3,
};

// Enum LM_LandscapeRuntime.ELMSampleMode
// NumValues: 0x0004
enum class ELMSampleMode : uint8
{
	Normal                                   = 0,
	Point                                    = 1,
	Bilinear                                 = 2,
	ELMSampleMode_MAX                        = 3,
};

// Enum LM_LandscapeRuntime.ELMBlendMode
// NumValues: 0x0003
enum class ELMBlendMode : uint8
{
	Blend                                    = 0,
	Override                                 = 1,
	ELMBlendMode_MAX                         = 2,
};

// Enum LM_LandscapeRuntime.ELMLayerMixMethod
// NumValues: 0x0009
enum class ELMLayerMixMethod : uint8
{
	Type_Add                                 = 0,
	Type_Subtract                            = 1,
	Type_Multiply                            = 2,
	Type_Copy                                = 3,
	Type_Clamp                               = 4,
	Type_Blend                               = 5,
	Type_Min                                 = 6,
	Type_Max                                 = 7,
	Type_None                                = 8,
};

// ScriptStruct LM_LandscapeRuntime.LMTilePixelData
// 0x0008 (0x0008 - 0x0000)
struct FLMTilePixelData final
{
public:
	uint16                                        Data;                                              // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Len;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLMTilePixelData) == 0x000004, "Wrong alignment on FLMTilePixelData");
static_assert(sizeof(FLMTilePixelData) == 0x000008, "Wrong size on FLMTilePixelData");
static_assert(offsetof(FLMTilePixelData, Data) == 0x000000, "Member 'FLMTilePixelData::Data' has a wrong offset!");
static_assert(offsetof(FLMTilePixelData, Len) == 0x000004, "Member 'FLMTilePixelData::Len' has a wrong offset!");

}

