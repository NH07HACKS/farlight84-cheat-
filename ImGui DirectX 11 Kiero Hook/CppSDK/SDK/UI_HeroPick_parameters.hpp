#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HeroPick

#include "Basic.hpp"

#include "E_HeroPick_Stage_structs.hpp"


namespace SDK::Params
{

// Function UI_HeroPick.UI_HeroPick_C.ExecuteUbergraph_UI_HeroPick
// 0x0018 (0x0018 - 0x0000)
struct UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick) == 0x000008, "Wrong alignment on UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick");
static_assert(sizeof(UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick) == 0x000018, "Wrong size on UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick");
static_assert(offsetof(UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick, EntryPoint) == 0x000000, "Member 'UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick, K2Node_Event_IsDesignTime) == 0x000010, "Member 'UI_HeroPick_C_ExecuteUbergraph_UI_HeroPick::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HeroPick_C_PreConstruct");
static_assert(sizeof(UI_HeroPick_C_PreConstruct) == 0x000001, "Wrong size on UI_HeroPick_C_PreConstruct");
static_assert(offsetof(UI_HeroPick_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HeroPick_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.SetHeropickStage
// 0x0020 (0x0020 - 0x0000)
struct UI_HeroPick_C_SetHeropickStage final
{
public:
	E_HeroPick_Stage                              Stage_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HeroPick_Stage                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_C_SetHeropickStage) == 0x000008, "Wrong alignment on UI_HeroPick_C_SetHeropickStage");
static_assert(sizeof(UI_HeroPick_C_SetHeropickStage) == 0x000020, "Wrong size on UI_HeroPick_C_SetHeropickStage");
static_assert(offsetof(UI_HeroPick_C_SetHeropickStage, Stage_0) == 0x000000, "Member 'UI_HeroPick_C_SetHeropickStage::Stage_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_SetHeropickStage, Temp_byte_Variable) == 0x000001, "Member 'UI_HeroPick_C_SetHeropickStage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_SetHeropickStage, Temp_object_Variable) == 0x000008, "Member 'UI_HeroPick_C_SetHeropickStage::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_SetHeropickStage, Temp_object_Variable_1) == 0x000010, "Member 'UI_HeroPick_C_SetHeropickStage::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_SetHeropickStage, K2Node_Select_Default) == 0x000018, "Member 'UI_HeroPick_C_SetHeropickStage::K2Node_Select_Default' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.LuaHiddenSelfAndSub
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_C_LuaHiddenSelfAndSub final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_LuaHiddenSelfAndSub) == 0x000001, "Wrong alignment on UI_HeroPick_C_LuaHiddenSelfAndSub");
static_assert(sizeof(UI_HeroPick_C_LuaHiddenSelfAndSub) == 0x000001, "Wrong size on UI_HeroPick_C_LuaHiddenSelfAndSub");
static_assert(offsetof(UI_HeroPick_C_LuaHiddenSelfAndSub, IsHidden) == 0x000000, "Member 'UI_HeroPick_C_LuaHiddenSelfAndSub::IsHidden' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.Enable3DHeroPickLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_C_Enable3DHeroPickLayout final
{
public:
	bool                                          Enalbe3DLayout;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_Enable3DHeroPickLayout) == 0x000001, "Wrong alignment on UI_HeroPick_C_Enable3DHeroPickLayout");
static_assert(sizeof(UI_HeroPick_C_Enable3DHeroPickLayout) == 0x000001, "Wrong size on UI_HeroPick_C_Enable3DHeroPickLayout");
static_assert(offsetof(UI_HeroPick_C_Enable3DHeroPickLayout, Enalbe3DLayout) == 0x000000, "Member 'UI_HeroPick_C_Enable3DHeroPickLayout::Enalbe3DLayout' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.ShowMyTurn
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_C_ShowMyTurn final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_ShowMyTurn) == 0x000001, "Wrong alignment on UI_HeroPick_C_ShowMyTurn");
static_assert(sizeof(UI_HeroPick_C_ShowMyTurn) == 0x000001, "Wrong size on UI_HeroPick_C_ShowMyTurn");
static_assert(offsetof(UI_HeroPick_C_ShowMyTurn, bShow) == 0x000000, "Member 'UI_HeroPick_C_ShowMyTurn::bShow' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.BP_PlayerConfirm
// 0x0004 (0x0004 - 0x0000)
struct UI_HeroPick_C_BP_PlayerConfirm final
{
public:
	int32                                         InPos;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_BP_PlayerConfirm) == 0x000004, "Wrong alignment on UI_HeroPick_C_BP_PlayerConfirm");
static_assert(sizeof(UI_HeroPick_C_BP_PlayerConfirm) == 0x000004, "Wrong size on UI_HeroPick_C_BP_PlayerConfirm");
static_assert(offsetof(UI_HeroPick_C_BP_PlayerConfirm, InPos) == 0x000000, "Member 'UI_HeroPick_C_BP_PlayerConfirm::InPos' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.LuaCancelConfrimInHeroCard
// 0x0004 (0x0004 - 0x0000)
struct UI_HeroPick_C_LuaCancelConfrimInHeroCard final
{
public:
	int32                                         Pos;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_LuaCancelConfrimInHeroCard) == 0x000004, "Wrong alignment on UI_HeroPick_C_LuaCancelConfrimInHeroCard");
static_assert(sizeof(UI_HeroPick_C_LuaCancelConfrimInHeroCard) == 0x000004, "Wrong size on UI_HeroPick_C_LuaCancelConfrimInHeroCard");
static_assert(offsetof(UI_HeroPick_C_LuaCancelConfrimInHeroCard, Pos) == 0x000000, "Member 'UI_HeroPick_C_LuaCancelConfrimInHeroCard::Pos' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.PlayCharacterConfirmVoice
// 0x0004 (0x0004 - 0x0000)
struct UI_HeroPick_C_PlayCharacterConfirmVoice final
{
public:
	int32                                         SkinID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_PlayCharacterConfirmVoice) == 0x000004, "Wrong alignment on UI_HeroPick_C_PlayCharacterConfirmVoice");
static_assert(sizeof(UI_HeroPick_C_PlayCharacterConfirmVoice) == 0x000004, "Wrong size on UI_HeroPick_C_PlayCharacterConfirmVoice");
static_assert(offsetof(UI_HeroPick_C_PlayCharacterConfirmVoice, SkinID) == 0x000000, "Member 'UI_HeroPick_C_PlayCharacterConfirmVoice::SkinID' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.DisplayPlayerPickedSkin
// 0x000C (0x000C - 0x0000)
struct UI_HeroPick_C_DisplayPlayerPickedSkin final
{
public:
	int32                                         Pos;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSkinID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_DisplayPlayerPickedSkin) == 0x000004, "Wrong alignment on UI_HeroPick_C_DisplayPlayerPickedSkin");
static_assert(sizeof(UI_HeroPick_C_DisplayPlayerPickedSkin) == 0x00000C, "Wrong size on UI_HeroPick_C_DisplayPlayerPickedSkin");
static_assert(offsetof(UI_HeroPick_C_DisplayPlayerPickedSkin, Pos) == 0x000000, "Member 'UI_HeroPick_C_DisplayPlayerPickedSkin::Pos' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_DisplayPlayerPickedSkin, CharacterID) == 0x000004, "Member 'UI_HeroPick_C_DisplayPlayerPickedSkin::CharacterID' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_DisplayPlayerPickedSkin, InSkinID) == 0x000008, "Member 'UI_HeroPick_C_DisplayPlayerPickedSkin::InSkinID' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.BP_OnPlayerSelectHero
// 0x000C (0x000C - 0x0000)
struct UI_HeroPick_C_BP_OnPlayerSelectHero final
{
public:
	int32                                         Pos;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSkinID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_BP_OnPlayerSelectHero) == 0x000004, "Wrong alignment on UI_HeroPick_C_BP_OnPlayerSelectHero");
static_assert(sizeof(UI_HeroPick_C_BP_OnPlayerSelectHero) == 0x00000C, "Wrong size on UI_HeroPick_C_BP_OnPlayerSelectHero");
static_assert(offsetof(UI_HeroPick_C_BP_OnPlayerSelectHero, Pos) == 0x000000, "Member 'UI_HeroPick_C_BP_OnPlayerSelectHero::Pos' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_BP_OnPlayerSelectHero, CharacterID) == 0x000004, "Member 'UI_HeroPick_C_BP_OnPlayerSelectHero::CharacterID' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_BP_OnPlayerSelectHero, InSkinID) == 0x000008, "Member 'UI_HeroPick_C_BP_OnPlayerSelectHero::InSkinID' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.ShowEmoji
// 0x0008 (0x0008 - 0x0000)
struct UI_HeroPick_C_ShowEmoji final
{
public:
	int32                                         EmojiID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pos;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_ShowEmoji) == 0x000004, "Wrong alignment on UI_HeroPick_C_ShowEmoji");
static_assert(sizeof(UI_HeroPick_C_ShowEmoji) == 0x000008, "Wrong size on UI_HeroPick_C_ShowEmoji");
static_assert(offsetof(UI_HeroPick_C_ShowEmoji, EmojiID) == 0x000000, "Member 'UI_HeroPick_C_ShowEmoji::EmojiID' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_ShowEmoji, Pos) == 0x000004, "Member 'UI_HeroPick_C_ShowEmoji::Pos' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.BP_SetHeroPortrait
// 0x0030 (0x0030 - 0x0000)
struct UI_HeroPick_C_BP_SetHeroPortrait final
{
public:
	int32                                         Pos;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CharacterIcon;                                     // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_BP_SetHeroPortrait) == 0x000008, "Wrong alignment on UI_HeroPick_C_BP_SetHeroPortrait");
static_assert(sizeof(UI_HeroPick_C_BP_SetHeroPortrait) == 0x000030, "Wrong size on UI_HeroPick_C_BP_SetHeroPortrait");
static_assert(offsetof(UI_HeroPick_C_BP_SetHeroPortrait, Pos) == 0x000000, "Member 'UI_HeroPick_C_BP_SetHeroPortrait::Pos' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_BP_SetHeroPortrait, CharacterIcon) == 0x000008, "Member 'UI_HeroPick_C_BP_SetHeroPortrait::CharacterIcon' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.GetCharacterCurSkin
// 0x0008 (0x0008 - 0x0000)
struct UI_HeroPick_C_GetCharacterCurSkin final
{
public:
	int32                                         InCharID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_GetCharacterCurSkin) == 0x000004, "Wrong alignment on UI_HeroPick_C_GetCharacterCurSkin");
static_assert(sizeof(UI_HeroPick_C_GetCharacterCurSkin) == 0x000008, "Wrong size on UI_HeroPick_C_GetCharacterCurSkin");
static_assert(offsetof(UI_HeroPick_C_GetCharacterCurSkin, InCharID) == 0x000000, "Member 'UI_HeroPick_C_GetCharacterCurSkin::InCharID' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_GetCharacterCurSkin, ReturnValue) == 0x000004, "Member 'UI_HeroPick_C_GetCharacterCurSkin::ReturnValue' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.ShowPlayerHeroInfo
// 0x0008 (0x0008 - 0x0000)
struct UI_HeroPick_C_ShowPlayerHeroInfo final
{
public:
	int32                                         Pos;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HeroPick_C_ShowPlayerHeroInfo) == 0x000004, "Wrong alignment on UI_HeroPick_C_ShowPlayerHeroInfo");
static_assert(sizeof(UI_HeroPick_C_ShowPlayerHeroInfo) == 0x000008, "Wrong size on UI_HeroPick_C_ShowPlayerHeroInfo");
static_assert(offsetof(UI_HeroPick_C_ShowPlayerHeroInfo, Pos) == 0x000000, "Member 'UI_HeroPick_C_ShowPlayerHeroInfo::Pos' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_C_ShowPlayerHeroInfo, CharacterID) == 0x000004, "Member 'UI_HeroPick_C_ShowPlayerHeroInfo::CharacterID' has a wrong offset!");

// Function UI_HeroPick.UI_HeroPick_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_HeroPick_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_C_GetModuleName) == 0x000008, "Wrong alignment on UI_HeroPick_C_GetModuleName");
static_assert(sizeof(UI_HeroPick_C_GetModuleName) == 0x000010, "Wrong size on UI_HeroPick_C_GetModuleName");
static_assert(offsetof(UI_HeroPick_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_HeroPick_C_GetModuleName::ReturnValue' has a wrong offset!");

}

