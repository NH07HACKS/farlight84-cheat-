#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarFramework

#include "Basic.hpp"

#include "SolarFramework_structs.hpp"


namespace SDK::Params
{

// Function SolarFramework.SolarContainer.IsWorldTearingDown
// 0x0001 (0x0001 - 0x0000)
struct SolarContainer_IsWorldTearingDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarContainer_IsWorldTearingDown) == 0x000001, "Wrong alignment on SolarContainer_IsWorldTearingDown");
static_assert(sizeof(SolarContainer_IsWorldTearingDown) == 0x000001, "Wrong size on SolarContainer_IsWorldTearingDown");
static_assert(offsetof(SolarContainer_IsWorldTearingDown, ReturnValue) == 0x000000, "Member 'SolarContainer_IsWorldTearingDown::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.OnScopeChanged
// 0x0002 (0x0002 - 0x0000)
struct SolarArchitecture_OnScopeChanged final
{
public:
	EScope                                        InLastScope;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScope                                        InCurScope;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_OnScopeChanged) == 0x000001, "Wrong alignment on SolarArchitecture_OnScopeChanged");
static_assert(sizeof(SolarArchitecture_OnScopeChanged) == 0x000002, "Wrong size on SolarArchitecture_OnScopeChanged");
static_assert(offsetof(SolarArchitecture_OnScopeChanged, InLastScope) == 0x000000, "Member 'SolarArchitecture_OnScopeChanged::InLastScope' has a wrong offset!");
static_assert(offsetof(SolarArchitecture_OnScopeChanged, InCurScope) == 0x000001, "Member 'SolarArchitecture_OnScopeChanged::InCurScope' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.GetCurScope
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_GetCurScope final
{
public:
	EScope                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_GetCurScope) == 0x000001, "Wrong alignment on SolarArchitecture_GetCurScope");
static_assert(sizeof(SolarArchitecture_GetCurScope) == 0x000001, "Wrong size on SolarArchitecture_GetCurScope");
static_assert(offsetof(SolarArchitecture_GetCurScope, ReturnValue) == 0x000000, "Member 'SolarArchitecture_GetCurScope::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.GetManager
// 0x0010 (0x0010 - 0x0000)
struct SolarArchitecture_GetManager final
{
public:
	TSubclassOf<class USolarAbstractManager>      ManagerClass;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarAbstractManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_GetManager) == 0x000008, "Wrong alignment on SolarArchitecture_GetManager");
static_assert(sizeof(SolarArchitecture_GetManager) == 0x000010, "Wrong size on SolarArchitecture_GetManager");
static_assert(offsetof(SolarArchitecture_GetManager, ManagerClass) == 0x000000, "Member 'SolarArchitecture_GetManager::ManagerClass' has a wrong offset!");
static_assert(offsetof(SolarArchitecture_GetManager, ReturnValue) == 0x000008, "Member 'SolarArchitecture_GetManager::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.GetModel
// 0x0010 (0x0010 - 0x0000)
struct SolarArchitecture_GetModel final
{
public:
	TSubclassOf<class USolarAbstractModel>        ModelClass;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarAbstractModel*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_GetModel) == 0x000008, "Wrong alignment on SolarArchitecture_GetModel");
static_assert(sizeof(SolarArchitecture_GetModel) == 0x000010, "Wrong size on SolarArchitecture_GetModel");
static_assert(offsetof(SolarArchitecture_GetModel, ModelClass) == 0x000000, "Member 'SolarArchitecture_GetModel::ModelClass' has a wrong offset!");
static_assert(offsetof(SolarArchitecture_GetModel, ReturnValue) == 0x000008, "Member 'SolarArchitecture_GetModel::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsInScope
// 0x0002 (0x0002 - 0x0000)
struct SolarArchitecture_IsInScope final
{
public:
	EScope                                        InScopeMask;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsInScope) == 0x000001, "Wrong alignment on SolarArchitecture_IsInScope");
static_assert(sizeof(SolarArchitecture_IsInScope) == 0x000002, "Wrong size on SolarArchitecture_IsInScope");
static_assert(offsetof(SolarArchitecture_IsInScope, InScopeMask) == 0x000000, "Member 'SolarArchitecture_IsInScope::InScopeMask' has a wrong offset!");
static_assert(offsetof(SolarArchitecture_IsInScope, ReturnValue) == 0x000001, "Member 'SolarArchitecture_IsInScope::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsLastScopeLogin
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsLastScopeLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsLastScopeLogin) == 0x000001, "Wrong alignment on SolarArchitecture_IsLastScopeLogin");
static_assert(sizeof(SolarArchitecture_IsLastScopeLogin) == 0x000001, "Wrong size on SolarArchitecture_IsLastScopeLogin");
static_assert(offsetof(SolarArchitecture_IsLastScopeLogin, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsLastScopeLogin::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsLatScopeLobby
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsLatScopeLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsLatScopeLobby) == 0x000001, "Wrong alignment on SolarArchitecture_IsLatScopeLobby");
static_assert(sizeof(SolarArchitecture_IsLatScopeLobby) == 0x000001, "Wrong size on SolarArchitecture_IsLatScopeLobby");
static_assert(offsetof(SolarArchitecture_IsLatScopeLobby, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsLatScopeLobby::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsScopeBattle
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsScopeBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsScopeBattle) == 0x000001, "Wrong alignment on SolarArchitecture_IsScopeBattle");
static_assert(sizeof(SolarArchitecture_IsScopeBattle) == 0x000001, "Wrong size on SolarArchitecture_IsScopeBattle");
static_assert(offsetof(SolarArchitecture_IsScopeBattle, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsScopeBattle::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsScopeLobby
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsScopeLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsScopeLobby) == 0x000001, "Wrong alignment on SolarArchitecture_IsScopeLobby");
static_assert(sizeof(SolarArchitecture_IsScopeLobby) == 0x000001, "Wrong size on SolarArchitecture_IsScopeLobby");
static_assert(offsetof(SolarArchitecture_IsScopeLobby, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsScopeLobby::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsScopeLogin
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsScopeLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsScopeLogin) == 0x000001, "Wrong alignment on SolarArchitecture_IsScopeLogin");
static_assert(sizeof(SolarArchitecture_IsScopeLogin) == 0x000001, "Wrong size on SolarArchitecture_IsScopeLogin");
static_assert(offsetof(SolarArchitecture_IsScopeLogin, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsScopeLogin::ReturnValue' has a wrong offset!");

// Function SolarFramework.SolarArchitecture.IsScopeSettlement
// 0x0001 (0x0001 - 0x0000)
struct SolarArchitecture_IsScopeSettlement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarArchitecture_IsScopeSettlement) == 0x000001, "Wrong alignment on SolarArchitecture_IsScopeSettlement");
static_assert(sizeof(SolarArchitecture_IsScopeSettlement) == 0x000001, "Wrong size on SolarArchitecture_IsScopeSettlement");
static_assert(offsetof(SolarArchitecture_IsScopeSettlement, ReturnValue) == 0x000000, "Member 'SolarArchitecture_IsScopeSettlement::ReturnValue' has a wrong offset!");

}

