#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubUI_Item_Desktop

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.ExecuteUbergraph_SubUI_Item_Desktop
// 0x0030 (0x0030 - 0x0000)
struct SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bActivate;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InQuickItem;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentItemType_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop) == 0x000008, "Wrong alignment on SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop");
static_assert(sizeof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop) == 0x000030, "Wrong size on SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, EntryPoint) == 0x000000, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::EntryPoint' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, K2Node_Event_bActivate) == 0x000004, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::K2Node_Event_bActivate' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, K2Node_Event_InQuickItem) == 0x000008, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::K2Node_Event_InQuickItem' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, CallFunc_GetCurrentItemType_ReturnValue) == 0x000018, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::CallFunc_GetCurrentItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000020, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop, K2Node_Event_IsDesignTime) == 0x000028, "Member 'SubUI_Item_Desktop_C_ExecuteUbergraph_SubUI_Item_Desktop::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.UpdateActivateWheelStyle
// 0x0001 (0x0001 - 0x0000)
struct SubUI_Item_Desktop_C_UpdateActivateWheelStyle final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SubUI_Item_Desktop_C_UpdateActivateWheelStyle) == 0x000001, "Wrong alignment on SubUI_Item_Desktop_C_UpdateActivateWheelStyle");
static_assert(sizeof(SubUI_Item_Desktop_C_UpdateActivateWheelStyle) == 0x000001, "Wrong size on SubUI_Item_Desktop_C_UpdateActivateWheelStyle");
static_assert(offsetof(SubUI_Item_Desktop_C_UpdateActivateWheelStyle, bActivate) == 0x000000, "Member 'SubUI_Item_Desktop_C_UpdateActivateWheelStyle::bActivate' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct SubUI_Item_Desktop_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SubUI_Item_Desktop_C_PreConstruct) == 0x000001, "Wrong alignment on SubUI_Item_Desktop_C_PreConstruct");
static_assert(sizeof(SubUI_Item_Desktop_C_PreConstruct) == 0x000001, "Wrong size on SubUI_Item_Desktop_C_PreConstruct");
static_assert(offsetof(SubUI_Item_Desktop_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'SubUI_Item_Desktop_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.UpdateQuickItemBPImplement
// 0x0004 (0x0004 - 0x0000)
struct SubUI_Item_Desktop_C_UpdateQuickItemBPImplement final
{
public:
	int32                                         InQuickItem;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SubUI_Item_Desktop_C_UpdateQuickItemBPImplement) == 0x000004, "Wrong alignment on SubUI_Item_Desktop_C_UpdateQuickItemBPImplement");
static_assert(sizeof(SubUI_Item_Desktop_C_UpdateQuickItemBPImplement) == 0x000004, "Wrong size on SubUI_Item_Desktop_C_UpdateQuickItemBPImplement");
static_assert(offsetof(SubUI_Item_Desktop_C_UpdateQuickItemBPImplement, InQuickItem) == 0x000000, "Member 'SubUI_Item_Desktop_C_UpdateQuickItemBPImplement::InQuickItem' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.UpdateActionName
// 0x0010 (0x0010 - 0x0000)
struct SubUI_Item_Desktop_C_UpdateActionName final
{
public:
	class FString                                 InActionName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SubUI_Item_Desktop_C_UpdateActionName) == 0x000008, "Wrong alignment on SubUI_Item_Desktop_C_UpdateActionName");
static_assert(sizeof(SubUI_Item_Desktop_C_UpdateActionName) == 0x000010, "Wrong size on SubUI_Item_Desktop_C_UpdateActionName");
static_assert(offsetof(SubUI_Item_Desktop_C_UpdateActionName, InActionName) == 0x000000, "Member 'SubUI_Item_Desktop_C_UpdateActionName::InActionName' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.SetType
// 0x0001 (0x0001 - 0x0000)
struct SubUI_Item_Desktop_C_SetType final
{
public:
	bool                                          Vehicle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SubUI_Item_Desktop_C_SetType) == 0x000001, "Wrong alignment on SubUI_Item_Desktop_C_SetType");
static_assert(sizeof(SubUI_Item_Desktop_C_SetType) == 0x000001, "Wrong size on SubUI_Item_Desktop_C_SetType");
static_assert(offsetof(SubUI_Item_Desktop_C_SetType, Vehicle) == 0x000000, "Member 'SubUI_Item_Desktop_C_SetType::Vehicle' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.UpdateItemCount
// 0x0008 (0x0008 - 0x0000)
struct SubUI_Item_Desktop_C_UpdateItemCount final
{
public:
	int32                                         ItemID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SubUI_Item_Desktop_C_UpdateItemCount) == 0x000004, "Wrong alignment on SubUI_Item_Desktop_C_UpdateItemCount");
static_assert(sizeof(SubUI_Item_Desktop_C_UpdateItemCount) == 0x000008, "Wrong size on SubUI_Item_Desktop_C_UpdateItemCount");
static_assert(offsetof(SubUI_Item_Desktop_C_UpdateItemCount, ItemID) == 0x000000, "Member 'SubUI_Item_Desktop_C_UpdateItemCount::ItemID' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_UpdateItemCount, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'SubUI_Item_Desktop_C_UpdateItemCount::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function SubUI_Item_Desktop.SubUI_Item_Desktop_C.SetOpenWheel
// 0x0009 (0x0009 - 0x0000)
struct SubUI_Item_Desktop_C_SetOpenWheel final
{
public:
	bool                                          IsOpenWheel_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SubUI_Item_Desktop_C_SetOpenWheel) == 0x000001, "Wrong alignment on SubUI_Item_Desktop_C_SetOpenWheel");
static_assert(sizeof(SubUI_Item_Desktop_C_SetOpenWheel) == 0x000009, "Wrong size on SubUI_Item_Desktop_C_SetOpenWheel");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, IsOpenWheel_0) == 0x000000, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::IsOpenWheel_0' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_byte_Variable) == 0x000001, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_byte_Variable_1) == 0x000002, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_bool_Variable) == 0x000003, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_byte_Variable_2) == 0x000004, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_byte_Variable_3) == 0x000005, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, Temp_bool_Variable_1) == 0x000006, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, K2Node_Select_Default) == 0x000007, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(SubUI_Item_Desktop_C_SetOpenWheel, K2Node_Select_Default_1) == 0x000008, "Member 'SubUI_Item_Desktop_C_SetOpenWheel::K2Node_Select_Default_1' has a wrong offset!");

}

