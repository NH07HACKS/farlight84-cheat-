#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarTCPSocket

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class SolarTCPSocket.SolarTCPSocketClient
// 0x00B8 (0x00E0 - 0x0028)
class USolarTCPSocketClient final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SendBufferSize;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceiveBufferSize;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenTicks;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x9C];                                      // 0x0044(0x009C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Connect(const class FString& IP, int32 Port, const TDelegate<void(int32 ConnectionId, bool bConnected)>& OnConnected, const TDelegate<void(int32 ConnectionId, bool bDisconnected)>& OnDisconnected, const TDelegate<void(int32 ConnectionId, const TArray<uint8>& Message)>& OnMessageReceived, int32* ConnectionId);
	void Disconnect(int32 ConnectionId);
	bool SendData(int32 ConnectionId, const TArray<uint8>& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarTCPSocketClient">();
	}
	static class USolarTCPSocketClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarTCPSocketClient>();
	}
};
static_assert(alignof(USolarTCPSocketClient) == 0x000008, "Wrong alignment on USolarTCPSocketClient");
static_assert(sizeof(USolarTCPSocketClient) == 0x0000E0, "Wrong size on USolarTCPSocketClient");
static_assert(offsetof(USolarTCPSocketClient, SendBufferSize) == 0x000038, "Member 'USolarTCPSocketClient::SendBufferSize' has a wrong offset!");
static_assert(offsetof(USolarTCPSocketClient, ReceiveBufferSize) == 0x00003C, "Member 'USolarTCPSocketClient::ReceiveBufferSize' has a wrong offset!");
static_assert(offsetof(USolarTCPSocketClient, TimeBetweenTicks) == 0x000040, "Member 'USolarTCPSocketClient::TimeBetweenTicks' has a wrong offset!");

}

