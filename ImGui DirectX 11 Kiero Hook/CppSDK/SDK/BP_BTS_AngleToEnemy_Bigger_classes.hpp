#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BTS_AngleToEnemy_Bigger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BTS_AngleToEnemy_Bigger.BP_BTS_AngleToEnemy_Bigger_C
// 0x0090 (0x0128 - 0x0098)
class UBP_BTS_AngleToEnemy_Bigger_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ASolarBotAIController*                  SelfController;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 Angle;                                             // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 Guest;                                             // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 Host;                                              // 0x0100(0x0028)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_BTS_AngleToEnemy_Bigger(int32 EntryPoint);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn_0);
	void ReceiveSearchStartAI(class AAIController* OwnerController, class APawn* ControlledPawn_0);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn_0, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BTS_AngleToEnemy_Bigger_C">();
	}
	static class UBP_BTS_AngleToEnemy_Bigger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BTS_AngleToEnemy_Bigger_C>();
	}
};
static_assert(alignof(UBP_BTS_AngleToEnemy_Bigger_C) == 0x000008, "Wrong alignment on UBP_BTS_AngleToEnemy_Bigger_C");
static_assert(sizeof(UBP_BTS_AngleToEnemy_Bigger_C) == 0x000128, "Wrong size on UBP_BTS_AngleToEnemy_Bigger_C");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, UberGraphFrame) == 0x000098, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, SelfController) == 0x0000A0, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::SelfController' has a wrong offset!");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, ControlledPawn) == 0x0000A8, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::ControlledPawn' has a wrong offset!");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, Angle) == 0x0000B0, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::Angle' has a wrong offset!");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, Guest) == 0x0000D8, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::Guest' has a wrong offset!");
static_assert(offsetof(UBP_BTS_AngleToEnemy_Bigger_C, Host) == 0x000100, "Member 'UBP_BTS_AngleToEnemy_Bigger_C::Host' has a wrong offset!");

}

