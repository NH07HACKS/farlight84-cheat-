#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HeroPick_SkinList_Slot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Item_Quality_structs.hpp"
#include "UMG_structs.hpp"
#include "E_HeroPick_SkinState_structs.hpp"


namespace SDK::Params
{

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.ExecuteUbergraph_UI_HeroPick_SkinList_Slot
// 0x0018 (0x0018 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsHover;                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot) == 0x000008, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot) == 0x000018, "Wrong size on UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, EntryPoint) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, K2Node_Event_bIsExpanded) == 0x000004, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, K2Node_Event_bIsSelected) == 0x000005, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, K2Node_Event_ListItemObject) == 0x000008, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, CallFunc_IsPCPlatform_IsPCPlatform) == 0x000011, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::CallFunc_IsPCPlatform_IsPCPlatform' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot, K2Node_CustomEvent_IsHover) == 0x000012, "Member 'UI_HeroPick_SkinList_Slot_C_ExecuteUbergraph_UI_HeroPick_SkinList_Slot::K2Node_CustomEvent_IsHover' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.ShowHoverEffect
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_ShowHoverEffect final
{
public:
	bool                                          IsHover;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_ShowHoverEffect) == 0x000001, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_ShowHoverEffect");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_ShowHoverEffect) == 0x000001, "Wrong size on UI_HeroPick_SkinList_Slot_C_ShowHoverEffect");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_ShowHoverEffect, IsHover) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_ShowHoverEffect::IsHover' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_PreConstruct");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_PreConstruct) == 0x000001, "Wrong size on UI_HeroPick_SkinList_Slot_C_PreConstruct");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.SetLock
// 0x0024 (0x0024 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_SetLock final
{
public:
	E_HeroPick_SkinState                          SkinState_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HeroPick_SkinState                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_SetLock) == 0x000004, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_SetLock");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_SetLock) == 0x000024, "Wrong size on UI_HeroPick_SkinList_Slot_C_SetLock");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, SkinState_0) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::SkinState_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_byte_Variable) == 0x000001, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable) == 0x000004, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_1) == 0x000008, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_2) == 0x00000C, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_3) == 0x000010, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_4) == 0x000014, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_5) == 0x000018, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, Temp_int_Variable_6) == 0x00001C, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetLock, K2Node_Select_Default) == 0x000020, "Member 'UI_HeroPick_SkinList_Slot_C_SetLock::K2Node_Select_Default' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.SetQuality
// 0x0024 (0x0024 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_SetQuality final
{
public:
	E_Item_Quality                                QualityState_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLobbyQualityColor_TxtColor;            // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLobbyQualityColor_FrameColor;          // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_SetQuality) == 0x000004, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_SetQuality");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_SetQuality) == 0x000024, "Wrong size on UI_HeroPick_SkinList_Slot_C_SetQuality");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetQuality, QualityState_0) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_SetQuality::QualityState_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetQuality, CallFunc_GetLobbyQualityColor_TxtColor) == 0x000004, "Member 'UI_HeroPick_SkinList_Slot_C_SetQuality::CallFunc_GetLobbyQualityColor_TxtColor' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetQuality, CallFunc_GetLobbyQualityColor_FrameColor) == 0x000014, "Member 'UI_HeroPick_SkinList_Slot_C_SetQuality::CallFunc_GetLobbyQualityColor_FrameColor' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.SetSelect
// 0x01E0 (0x01E0 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_SetSelect final
{
public:
	bool                                          Select_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0078(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00A0(0x0028)()
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_3;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00E0(0x0028)()
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0108(0x0068)(HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLobbyQualityColor_TxtColor;            // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLobbyQualityColor_FrameColor;          // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0190(0x0028)()
	struct FSlateColor                            K2Node_Select_Default_4;                           // 0x01B8(0x0028)()
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_SetSelect) == 0x000008, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_SetSelect");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_SetSelect) == 0x0001E0, "Wrong size on UI_HeroPick_SkinList_Slot_C_SetSelect");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Select_0) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Select_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_struct_Variable) == 0x000004, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_struct_Variable_1) == 0x000014, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_bool_Variable) == 0x000024, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_struct_Variable_2) == 0x000028, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_struct_Variable_3) == 0x000038, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_bool_Variable_1) == 0x000048, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_name_Variable) == 0x00004C, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_name_Variable_1) == 0x000054, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_bool_Variable_2) == 0x00005C, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_bool_Variable_3) == 0x00005D, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_byte_Variable) == 0x00005E, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_byte_Variable_1) == 0x00005F, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_Select_Default) == 0x000060, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, Temp_bool_Variable_4) == 0x000061, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_Select_Default_1) == 0x000064, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_MakeStruct_SlateColor) == 0x000078, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_MakeStruct_SlateColor_1) == 0x0000A0, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_Select_Default_2) == 0x0000C8, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_Select_Default_3) == 0x0000D8, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_MakeStruct_SlateColor_2) == 0x0000E0, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_MakeStruct_SlateFontInfo) == 0x000108, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, CallFunc_GetLobbyQualityColor_TxtColor) == 0x000170, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::CallFunc_GetLobbyQualityColor_TxtColor' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, CallFunc_GetLobbyQualityColor_FrameColor) == 0x000180, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::CallFunc_GetLobbyQualityColor_FrameColor' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_MakeStruct_SlateColor_3) == 0x000190, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetSelect, K2Node_Select_Default_4) == 0x0001B8, "Member 'UI_HeroPick_SkinList_Slot_C_SetSelect::K2Node_Select_Default_4' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.SetDiamondEnough
// 0x0058 (0x0058 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_SetDiamondEnough final
{
public:
	bool                                          IsEnough_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_SetDiamondEnough) == 0x000008, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_SetDiamondEnough");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_SetDiamondEnough) == 0x000058, "Wrong size on UI_HeroPick_SkinList_Slot_C_SetDiamondEnough");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetDiamondEnough, IsEnough_0) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_SetDiamondEnough::IsEnough_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetDiamondEnough, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'UI_HeroPick_SkinList_Slot_C_SetDiamondEnough::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_SetDiamondEnough, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'UI_HeroPick_SkinList_Slot_C_SetDiamondEnough::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_HeroPick_SkinList_Slot.UI_HeroPick_SkinList_Slot_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_HeroPick_SkinList_Slot_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_SkinList_Slot_C_GetModuleName) == 0x000008, "Wrong alignment on UI_HeroPick_SkinList_Slot_C_GetModuleName");
static_assert(sizeof(UI_HeroPick_SkinList_Slot_C_GetModuleName) == 0x000010, "Wrong size on UI_HeroPick_SkinList_Slot_C_GetModuleName");
static_assert(offsetof(UI_HeroPick_SkinList_Slot_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_HeroPick_SkinList_Slot_C_GetModuleName::ReturnValue' has a wrong offset!");

}

