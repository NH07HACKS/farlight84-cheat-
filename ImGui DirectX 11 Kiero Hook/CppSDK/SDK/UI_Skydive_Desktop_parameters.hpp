#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Skydive_Desktop

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SolarUI_structs.hpp"


namespace SDK::Params
{

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.ExecuteUbergraph_UI_Skydive_Desktop
// 0x000C (0x000C - 0x0000)
struct UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUSolarWidgetLayoutType                       Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop) == 0x000004, "Wrong alignment on UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop");
static_assert(sizeof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop) == 0x00000C, "Wrong size on UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, EntryPoint) == 0x000000, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, Temp_byte_Variable) == 0x000004, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, Temp_bool_Variable) == 0x000005, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, Temp_bool_Variable_1) == 0x000006, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, K2Node_Event_InLayoutType) == 0x000007, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop, K2Node_Select_Default) == 0x000008, "Member 'UI_Skydive_Desktop_C_ExecuteUbergraph_UI_Skydive_Desktop::K2Node_Select_Default' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_Skydive_Desktop_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Skydive_Desktop_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_Skydive_Desktop_C_ReceivePlatformLayout");
static_assert(sizeof(UI_Skydive_Desktop_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_Skydive_Desktop_C_ReceivePlatformLayout");
static_assert(offsetof(UI_Skydive_Desktop_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_Skydive_Desktop_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.ClearFollowKeyProgress
// 0x0018 (0x0018 - 0x0000)
struct UI_Skydive_Desktop_C_ClearFollowKeyProgress final
{
public:
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_KeyPrompt_C*                        K2Node_DynamicCast_AsUI_Key_Prompt;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Skydive_Desktop_C_ClearFollowKeyProgress) == 0x000008, "Wrong alignment on UI_Skydive_Desktop_C_ClearFollowKeyProgress");
static_assert(sizeof(UI_Skydive_Desktop_C_ClearFollowKeyProgress) == 0x000018, "Wrong size on UI_Skydive_Desktop_C_ClearFollowKeyProgress");
static_assert(offsetof(UI_Skydive_Desktop_C_ClearFollowKeyProgress, CallFunc_GetActiveWidget_ReturnValue) == 0x000000, "Member 'UI_Skydive_Desktop_C_ClearFollowKeyProgress::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ClearFollowKeyProgress, K2Node_DynamicCast_AsUI_Key_Prompt) == 0x000008, "Member 'UI_Skydive_Desktop_C_ClearFollowKeyProgress::K2Node_DynamicCast_AsUI_Key_Prompt' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_ClearFollowKeyProgress, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'UI_Skydive_Desktop_C_ClearFollowKeyProgress::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.StartFollowKeyProgress
// 0x0018 (0x0018 - 0x0000)
struct UI_Skydive_Desktop_C_StartFollowKeyProgress final
{
public:
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_KeyPrompt_C*                        K2Node_DynamicCast_AsUI_Key_Prompt;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Skydive_Desktop_C_StartFollowKeyProgress) == 0x000008, "Wrong alignment on UI_Skydive_Desktop_C_StartFollowKeyProgress");
static_assert(sizeof(UI_Skydive_Desktop_C_StartFollowKeyProgress) == 0x000018, "Wrong size on UI_Skydive_Desktop_C_StartFollowKeyProgress");
static_assert(offsetof(UI_Skydive_Desktop_C_StartFollowKeyProgress, CallFunc_GetActiveWidget_ReturnValue) == 0x000000, "Member 'UI_Skydive_Desktop_C_StartFollowKeyProgress::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_StartFollowKeyProgress, K2Node_DynamicCast_AsUI_Key_Prompt) == 0x000008, "Member 'UI_Skydive_Desktop_C_StartFollowKeyProgress::K2Node_DynamicCast_AsUI_Key_Prompt' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_StartFollowKeyProgress, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'UI_Skydive_Desktop_C_StartFollowKeyProgress::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.SetParachuteButtonVisibility
// 0x0005 (0x0005 - 0x0000)
struct UI_Skydive_Desktop_C_SetParachuteButtonVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility) == 0x000001, "Wrong alignment on UI_Skydive_Desktop_C_SetParachuteButtonVisibility");
static_assert(sizeof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility) == 0x000005, "Wrong size on UI_Skydive_Desktop_C_SetParachuteButtonVisibility");
static_assert(offsetof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility, bVisible) == 0x000000, "Member 'UI_Skydive_Desktop_C_SetParachuteButtonVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility, Temp_bool_Variable) == 0x000001, "Member 'UI_Skydive_Desktop_C_SetParachuteButtonVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility, Temp_byte_Variable) == 0x000002, "Member 'UI_Skydive_Desktop_C_SetParachuteButtonVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Skydive_Desktop_C_SetParachuteButtonVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetParachuteButtonVisibility, K2Node_Select_Default) == 0x000004, "Member 'UI_Skydive_Desktop_C_SetParachuteButtonVisibility::K2Node_Select_Default' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.SetCruisePlayerNumVisibility
// 0x0005 (0x0005 - 0x0000)
struct UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility) == 0x000001, "Wrong alignment on UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility");
static_assert(sizeof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility) == 0x000005, "Wrong size on UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility");
static_assert(offsetof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility, bVisible) == 0x000000, "Member 'UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility, Temp_bool_Variable) == 0x000001, "Member 'UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility, Temp_byte_Variable) == 0x000002, "Member 'UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility, K2Node_Select_Default) == 0x000004, "Member 'UI_Skydive_Desktop_C_SetCruisePlayerNumVisibility::K2Node_Select_Default' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.OnCruiseCharacterCountUpdated
// 0x00B0 (0x00B0 - 0x0000)
struct UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated final
{
public:
	int32                                         TotalCount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CruiseCount;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
};
static_assert(alignof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated) == 0x000008, "Wrong alignment on UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated");
static_assert(sizeof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated) == 0x0000B0, "Wrong size on UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, TotalCount) == 0x000000, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::TotalCount' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, CruiseCount) == 0x000004, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::CruiseCount' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, K2Node_MakeArray_Array) == 0x000088, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated, CallFunc_Format_ReturnValue) == 0x000098, "Member 'UI_Skydive_Desktop_C_OnCruiseCharacterCountUpdated::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.SetRelationButtonGroupVisibility
// 0x0005 (0x0005 - 0x0000)
struct UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility) == 0x000001, "Wrong alignment on UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility");
static_assert(sizeof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility) == 0x000005, "Wrong size on UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility");
static_assert(offsetof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility, bVisible) == 0x000000, "Member 'UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility, Temp_bool_Variable) == 0x000001, "Member 'UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility, Temp_byte_Variable) == 0x000002, "Member 'UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility, K2Node_Select_Default) == 0x000004, "Member 'UI_Skydive_Desktop_C_SetRelationButtonGroupVisibility::K2Node_Select_Default' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.RefreshSkydivingLeaderContent
// 0x0158 (0x0158 - 0x0000)
struct UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bLocalPlayerIsLeader;                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsFollowLeader;                                   // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryGetLocalText_bSuccess;                 // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_TryGetLocalText_LocalText;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00C0(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D8(0x0018)()
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetLocalText_bSuccess_1;               // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_TryGetLocalText_LocalText_1;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x0110(0x0018)()
	bool                                          CallFunc_TryGetLocalText_bSuccess_2;               // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_TryGetLocalText_LocalText_2;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x0140(0x0018)()
};
static_assert(alignof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent) == 0x000008, "Wrong alignment on UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent");
static_assert(sizeof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent) == 0x000158, "Wrong size on UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, TeamIndex) == 0x000000, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::TeamIndex' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, playerName) == 0x000008, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::playerName' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, bLocalPlayerIsLeader) == 0x000018, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::bLocalPlayerIsLeader' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, bIsFollowLeader) == 0x000019, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::bIsFollowLeader' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, Temp_int_Variable) == 0x000038, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, K2Node_MakeArray_Array) == 0x000080, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Get_Item) == 0x000090, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Get_Item_1) == 0x000094, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Get_Item_2) == 0x000098, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, Temp_int_Variable_1) == 0x00009C, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, K2Node_Select_Default) == 0x0000A4, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_bSuccess) == 0x0000A9, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_LocalText) == 0x0000B0, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_LocalText' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000C0, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Format_ReturnValue) == 0x0000D8, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Get_Item_3) == 0x0000F0, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_bSuccess_1) == 0x0000F4, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_bSuccess_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_LocalText_1) == 0x0000F8, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_LocalText_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Array_Get_Item_4) == 0x000108, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Conv_StringToText_ReturnValue_2) == 0x000110, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_bSuccess_2) == 0x000128, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_bSuccess_2' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_TryGetLocalText_LocalText_2) == 0x000130, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_TryGetLocalText_LocalText_2' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent, CallFunc_Conv_StringToText_ReturnValue_3) == 0x000140, "Member 'UI_Skydive_Desktop_C_RefreshSkydivingLeaderContent::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");

// Function UI_Skydive_Desktop.UI_Skydive_Desktop_C.SetSkydiveNoticeVisibility
// 0x0005 (0x0005 - 0x0000)
struct UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility) == 0x000001, "Wrong alignment on UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility");
static_assert(sizeof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility) == 0x000005, "Wrong size on UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility");
static_assert(offsetof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility, bVisible) == 0x000000, "Member 'UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility, Temp_bool_Variable) == 0x000001, "Member 'UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility, Temp_byte_Variable) == 0x000002, "Member 'UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility, K2Node_Select_Default) == 0x000004, "Member 'UI_Skydive_Desktop_C_SetSkydiveNoticeVisibility::K2Node_Select_Default' has a wrong offset!");

}

