#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_TrainingMode

#include "Basic.hpp"

#include "BP_Controller_Framework_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Controller_TrainingMode.BP_Controller_TrainingMode_C
// 0x0000 (0x1648 - 0x1648)
class ABP_Controller_TrainingMode_C final : public ABP_Controller_Framework_C
{
public:
	void OnCharacterRebirthLua();
	void SolarGM_BattleLua(const class FString& CmdName, const TArray<class FString>& Params_0);
	void UploadReplayMonitor(bool bIsKillCam);
	void UpdateAiPalRate(int32 Rate);
	void DebugSetPlayerData();
	void SolarGM_ShowBattleResultReviewBusinessCard(bool bVisible);
	void ShowBackpackUI();
	void SetInputActionSwitch(int32 ActionID, bool bOn);
	class FString GetNoticeLocalText(int32 InNoticeID, const TMap<class FString, class FString>& InNoticeParams);
	void TryRecordBattlePlayerData();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void UpdateEnableAiPalRate(int32 Rate);
	void OnCharacterDeathLua();
	void ReceiveBeginPlay();
	void DebugInitTask();
	void MeerkatTriggerReport(const class FString& Value);
	void CustomModeShowNotice(const int32 InType, const int32 InNoticeID, class UClass* InClass, const float InTime, const class FString& InText, class UObject* InIcon, const int32 InNoticeColor);
	void NotifyMonsterSpawn();
	int32 QueryStage();
	void NotifyCrouchIsLocked();
	void RecordSpectateInfoToBI(struct FSpectateReportInfo* SpectateReportInfo);
	void DebugUpdateTask();
	void OnNotifyLockPlayer(const class FString& Name_0);
	bool IsMatching();
	void LuaShowUI(const class FString& WidgetPath, const class FString& UIName);

	struct FIntPoint GetCustomStandardScreenSize() const;
	struct FIntPoint GetMobileStandardScreenSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Controller_TrainingMode_C">();
	}
	static class ABP_Controller_TrainingMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Controller_TrainingMode_C>();
	}
};
static_assert(alignof(ABP_Controller_TrainingMode_C) == 0x000008, "Wrong alignment on ABP_Controller_TrainingMode_C");
static_assert(sizeof(ABP_Controller_TrainingMode_C) == 0x001648, "Wrong size on ABP_Controller_TrainingMode_C");

}

