#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Humanoid

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Humanoid.BP_Humanoid_C
// 0x0050 (0x0328 - 0x02D8)
class ABP_Humanoid_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   ChildActor;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       MovePath;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Time_740F48494C425CDB2BD155AC135C810E;  // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_740F48494C425CDB2BD155AC135C810E; // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanMove;                                          // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockRotation;                                      // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0314(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepMovingWhenDowned;                             // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPosition;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Humanoid(int32 EntryPoint);
	void CustomEvent_0(bool bIsDwon);
	void ReceiveBeginPlay();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void SetPosition(float Time);
	void OnRep_PlayRate();
	void OnRep_CurrentPosition();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Humanoid_C">();
	}
	static class ABP_Humanoid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Humanoid_C>();
	}
};
static_assert(alignof(ABP_Humanoid_C) == 0x000008, "Wrong alignment on ABP_Humanoid_C");
static_assert(sizeof(ABP_Humanoid_C) == 0x000328, "Wrong size on ABP_Humanoid_C");
static_assert(offsetof(ABP_Humanoid_C, UberGraphFrame) == 0x0002D8, "Member 'ABP_Humanoid_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, ChildActor) == 0x0002E0, "Member 'ABP_Humanoid_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, MovePath) == 0x0002E8, "Member 'ABP_Humanoid_C::MovePath' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, DefaultSceneRoot) == 0x0002F0, "Member 'ABP_Humanoid_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, Timeline_0_Time_740F48494C425CDB2BD155AC135C810E) == 0x0002F8, "Member 'ABP_Humanoid_C::Timeline_0_Time_740F48494C425CDB2BD155AC135C810E' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, Timeline_0__Direction_740F48494C425CDB2BD155AC135C810E) == 0x0002FC, "Member 'ABP_Humanoid_C::Timeline_0__Direction_740F48494C425CDB2BD155AC135C810E' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, Timeline_0) == 0x000300, "Member 'ABP_Humanoid_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, bCanMove) == 0x000308, "Member 'ABP_Humanoid_C::bCanMove' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, MoveSpeed) == 0x00030C, "Member 'ABP_Humanoid_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, LockRotation) == 0x000310, "Member 'ABP_Humanoid_C::LockRotation' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, PlayRate) == 0x000314, "Member 'ABP_Humanoid_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, bKeepMovingWhenDowned) == 0x000318, "Member 'ABP_Humanoid_C::bKeepMovingWhenDowned' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, StartPosition) == 0x00031C, "Member 'ABP_Humanoid_C::StartPosition' has a wrong offset!");
static_assert(offsetof(ABP_Humanoid_C, CurrentPosition) == 0x000320, "Member 'ABP_Humanoid_C::CurrentPosition' has a wrong offset!");

}

