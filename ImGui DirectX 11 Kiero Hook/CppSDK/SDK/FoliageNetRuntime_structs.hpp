#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FoliageNetRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FoliageNetRuntime.EInputState
// NumValues: 0x0003
enum class EInputState : uint8
{
	STATE_WAIT                               = 0,
	STATE_COMPLETED                          = 1,
	STATE_MAX                                = 2,
};

// ScriptStruct FoliageNetRuntime.FoliageNetNodeObjectData
// 0x0010 (0x0010 - 0x0000)
struct FFoliageNetNodeObjectData final
{
public:
	int32                                         Proportion;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSizeScale;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetUpPositionScale;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomData;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageNetNodeObjectData) == 0x000004, "Wrong alignment on FFoliageNetNodeObjectData");
static_assert(sizeof(FFoliageNetNodeObjectData) == 0x000010, "Wrong size on FFoliageNetNodeObjectData");
static_assert(offsetof(FFoliageNetNodeObjectData, Proportion) == 0x000000, "Member 'FFoliageNetNodeObjectData::Proportion' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeObjectData, RootSizeScale) == 0x000004, "Member 'FFoliageNetNodeObjectData::RootSizeScale' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeObjectData, OffsetUpPositionScale) == 0x000008, "Member 'FFoliageNetNodeObjectData::OffsetUpPositionScale' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeObjectData, CustomData) == 0x00000C, "Member 'FFoliageNetNodeObjectData::CustomData' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNetNodeObject
// 0x0028 (0x0028 - 0x0000)
struct FFoliageNetNodeObject final
{
public:
	struct FSoftObjectPath                        AssetObject;                                       // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageNetNodeObjectData              ObjectData;                                        // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageNetNodeObject) == 0x000008, "Wrong alignment on FFoliageNetNodeObject");
static_assert(sizeof(FFoliageNetNodeObject) == 0x000028, "Wrong size on FFoliageNetNodeObject");
static_assert(offsetof(FFoliageNetNodeObject, AssetObject) == 0x000000, "Member 'FFoliageNetNodeObject::AssetObject' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeObject, ObjectData) == 0x000018, "Member 'FFoliageNetNodeObject::ObjectData' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNetOtherData
// 0x0088 (0x0088 - 0x0000)
struct FFoliageNetOtherData final
{
public:
	struct FVector                                ScaleSize;                                         // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSizeForLowLayerMultiple;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSizeForLandscape;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixNormal;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixParent;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomUp;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomYaw;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CollisionTag;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seed;                                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableEdgeGrowth;                                  // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceMin;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMax;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSize;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFrec;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlignRotBlend;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlignScaleBlend;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainsName;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRootMask;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamableRenderAsset*                 RootMask;                                          // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMaskExpand;                                    // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMaskScale;                                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMaskRotation;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageNetOtherData) == 0x000008, "Wrong alignment on FFoliageNetOtherData");
static_assert(sizeof(FFoliageNetOtherData) == 0x000088, "Wrong size on FFoliageNetOtherData");
static_assert(offsetof(FFoliageNetOtherData, ScaleSize) == 0x000000, "Member 'FFoliageNetOtherData::ScaleSize' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootSizeForLowLayerMultiple) == 0x00000C, "Member 'FFoliageNetOtherData::RootSizeForLowLayerMultiple' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootSizeForLandscape) == 0x000010, "Member 'FFoliageNetOtherData::RootSizeForLandscape' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, MixNormal) == 0x000014, "Member 'FFoliageNetOtherData::MixNormal' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, MixParent) == 0x000018, "Member 'FFoliageNetOtherData::MixParent' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RandomUp) == 0x00001C, "Member 'FFoliageNetOtherData::RandomUp' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RandomYaw) == 0x000020, "Member 'FFoliageNetOtherData::RandomYaw' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, CollisionTag) == 0x000028, "Member 'FFoliageNetOtherData::CollisionTag' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, Seed) == 0x000038, "Member 'FFoliageNetOtherData::Seed' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, EnableEdgeGrowth) == 0x00003C, "Member 'FFoliageNetOtherData::EnableEdgeGrowth' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, DistanceMin) == 0x000040, "Member 'FFoliageNetOtherData::DistanceMin' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, DistanceMax) == 0x000044, "Member 'FFoliageNetOtherData::DistanceMax' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, NoiseSize) == 0x000048, "Member 'FFoliageNetOtherData::NoiseSize' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, NoiseFrec) == 0x00004C, "Member 'FFoliageNetOtherData::NoiseFrec' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, AlignRotBlend) == 0x000050, "Member 'FFoliageNetOtherData::AlignRotBlend' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, AlignScaleBlend) == 0x000054, "Member 'FFoliageNetOtherData::AlignScaleBlend' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, ContainsName) == 0x000058, "Member 'FFoliageNetOtherData::ContainsName' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, EnableRootMask) == 0x000068, "Member 'FFoliageNetOtherData::EnableRootMask' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootMask) == 0x000070, "Member 'FFoliageNetOtherData::RootMask' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootMaskExpand) == 0x000078, "Member 'FFoliageNetOtherData::RootMaskExpand' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootMaskScale) == 0x00007C, "Member 'FFoliageNetOtherData::RootMaskScale' has a wrong offset!");
static_assert(offsetof(FFoliageNetOtherData, RootMaskRotation) == 0x000080, "Member 'FFoliageNetOtherData::RootMaskRotation' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNetNodeData
// 0x00D8 (0x00D8 - 0x0000)
struct FFoliageNetNodeData final
{
public:
	int32                                         LayerIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probablity;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthOrder;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointCont;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AssetScale;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSize;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfMinDistance;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceFormParent;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverlapParent;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageNetNodeObject>          AssetObject;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageNetOtherData                   OtherData;                                         // 0x0048(0x0088)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         ChildrenCount;                                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParent;                                         // 0x00D4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disabled;                                          // 0x00D5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageNetNodeData) == 0x000008, "Wrong alignment on FFoliageNetNodeData");
static_assert(sizeof(FFoliageNetNodeData) == 0x0000D8, "Wrong size on FFoliageNetNodeData");
static_assert(offsetof(FFoliageNetNodeData, LayerIndex) == 0x000000, "Member 'FFoliageNetNodeData::LayerIndex' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, Probablity) == 0x000004, "Member 'FFoliageNetNodeData::Probablity' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, BirthOrder) == 0x000008, "Member 'FFoliageNetNodeData::BirthOrder' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, Density) == 0x00000C, "Member 'FFoliageNetNodeData::Density' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, PointCont) == 0x000010, "Member 'FFoliageNetNodeData::PointCont' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, AssetScale) == 0x000018, "Member 'FFoliageNetNodeData::AssetScale' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, RootSize) == 0x000020, "Member 'FFoliageNetNodeData::RootSize' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, SelfMinDistance) == 0x000024, "Member 'FFoliageNetNodeData::SelfMinDistance' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, DistanceFormParent) == 0x000028, "Member 'FFoliageNetNodeData::DistanceFormParent' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, bIsOverlapParent) == 0x000030, "Member 'FFoliageNetNodeData::bIsOverlapParent' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, AssetObject) == 0x000038, "Member 'FFoliageNetNodeData::AssetObject' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, OtherData) == 0x000048, "Member 'FFoliageNetNodeData::OtherData' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, ChildrenCount) == 0x0000D0, "Member 'FFoliageNetNodeData::ChildrenCount' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, bIsParent) == 0x0000D4, "Member 'FFoliageNetNodeData::bIsParent' has a wrong offset!");
static_assert(offsetof(FFoliageNetNodeData, Disabled) == 0x0000D5, "Member 'FFoliageNetNodeData::Disabled' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNodeInfo
// 0x0010 (0x0010 - 0x0000)
struct FFoliageNodeInfo final
{
public:
	class FName                                   NodeLable;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NodeTypeName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageNodeInfo) == 0x000004, "Wrong alignment on FFoliageNodeInfo");
static_assert(sizeof(FFoliageNodeInfo) == 0x000010, "Wrong size on FFoliageNodeInfo");
static_assert(offsetof(FFoliageNodeInfo, NodeLable) == 0x000000, "Member 'FFoliageNodeInfo::NodeLable' has a wrong offset!");
static_assert(offsetof(FFoliageNodeInfo, NodeTypeName) == 0x000008, "Member 'FFoliageNodeInfo::NodeTypeName' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNodeOutputPinConnectInfo
// 0x0010 (0x0010 - 0x0000)
struct FFoliageNodeOutputPinConnectInfo final
{
public:
	class UFoliageNetFunLib*                      ConnectNextLib;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageNodeOutputPinConnectInfo) == 0x000008, "Wrong alignment on FFoliageNodeOutputPinConnectInfo");
static_assert(sizeof(FFoliageNodeOutputPinConnectInfo) == 0x000010, "Wrong size on FFoliageNodeOutputPinConnectInfo");
static_assert(offsetof(FFoliageNodeOutputPinConnectInfo, ConnectNextLib) == 0x000000, "Member 'FFoliageNodeOutputPinConnectInfo::ConnectNextLib' has a wrong offset!");
static_assert(offsetof(FFoliageNodeOutputPinConnectInfo, ConnectIndex) == 0x000008, "Member 'FFoliageNodeOutputPinConnectInfo::ConnectIndex' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNodeInputPinConnectInfo
// 0x0001 (0x0001 - 0x0000)
struct FFoliageNodeInputPinConnectInfo final
{
public:
	EInputState                                   InputState;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageNodeInputPinConnectInfo) == 0x000001, "Wrong alignment on FFoliageNodeInputPinConnectInfo");
static_assert(sizeof(FFoliageNodeInputPinConnectInfo) == 0x000001, "Wrong size on FFoliageNodeInputPinConnectInfo");
static_assert(offsetof(FFoliageNodeInputPinConnectInfo, InputState) == 0x000000, "Member 'FFoliageNodeInputPinConnectInfo::InputState' has a wrong offset!");

// ScriptStruct FoliageNetRuntime.FoliageNodePinInfo
// 0x0028 (0x0028 - 0x0000)
struct FFoliageNodePinInfo final
{
public:
	class FName                                   PinCategory;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PinName;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFoliageNodeOutputPinConnectInfo> OutConnectsInfo;                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageNodeInputPinConnectInfo        InputConnectInfo;                                  // 0x0020(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageNodePinInfo) == 0x000008, "Wrong alignment on FFoliageNodePinInfo");
static_assert(sizeof(FFoliageNodePinInfo) == 0x000028, "Wrong size on FFoliageNodePinInfo");
static_assert(offsetof(FFoliageNodePinInfo, PinCategory) == 0x000000, "Member 'FFoliageNodePinInfo::PinCategory' has a wrong offset!");
static_assert(offsetof(FFoliageNodePinInfo, PinName) == 0x000008, "Member 'FFoliageNodePinInfo::PinName' has a wrong offset!");
static_assert(offsetof(FFoliageNodePinInfo, OutConnectsInfo) == 0x000010, "Member 'FFoliageNodePinInfo::OutConnectsInfo' has a wrong offset!");
static_assert(offsetof(FFoliageNodePinInfo, InputConnectInfo) == 0x000020, "Member 'FFoliageNodePinInfo::InputConnectInfo' has a wrong offset!");

}

