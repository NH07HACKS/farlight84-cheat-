#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimNativeWidget

#include "Basic.hpp"

#include "LimNativeWidget_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LimNativeWidget.AgoraManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct AgoraManager_GetInstance final
{
public:
	class UAgoraManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GetInstance) == 0x000008, "Wrong alignment on AgoraManager_GetInstance");
static_assert(sizeof(AgoraManager_GetInstance) == 0x000008, "Wrong size on AgoraManager_GetInstance");
static_assert(offsetof(AgoraManager_GetInstance, ReturnValue) == 0x000000, "Member 'AgoraManager_GetInstance::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_IsInitialized) == 0x000001, "Wrong alignment on AgoraManager_IsInitialized");
static_assert(sizeof(AgoraManager_IsInitialized) == 0x000001, "Wrong size on AgoraManager_IsInitialized");
static_assert(offsetof(AgoraManager_IsInitialized, ReturnValue) == 0x000000, "Member 'AgoraManager_IsInitialized::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnableMic
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_EnableMic final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_EnableMic) == 0x000001, "Wrong alignment on AgoraManager_EnableMic");
static_assert(sizeof(AgoraManager_EnableMic) == 0x000001, "Wrong size on AgoraManager_EnableMic");
static_assert(offsetof(AgoraManager_EnableMic, bEnable) == 0x000000, "Member 'AgoraManager_EnableMic::bEnable' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnableMicNoiseReduction
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_EnableMicNoiseReduction final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_EnableMicNoiseReduction) == 0x000001, "Wrong alignment on AgoraManager_EnableMicNoiseReduction");
static_assert(sizeof(AgoraManager_EnableMicNoiseReduction) == 0x000001, "Wrong size on AgoraManager_EnableMicNoiseReduction");
static_assert(offsetof(AgoraManager_EnableMicNoiseReduction, bEnable) == 0x000000, "Member 'AgoraManager_EnableMicNoiseReduction::bEnable' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.Init
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_Init final
{
public:
	bool                                          bEnableLog;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_Init) == 0x000001, "Wrong alignment on AgoraManager_Init");
static_assert(sizeof(AgoraManager_Init) == 0x000001, "Wrong size on AgoraManager_Init");
static_assert(offsetof(AgoraManager_Init, bEnableLog) == 0x000000, "Member 'AgoraManager_Init::bEnableLog' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.InitVoiceSDK
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_InitVoiceSDK final
{
public:
	bool                                          bEnableLog;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_InitVoiceSDK) == 0x000001, "Wrong alignment on AgoraManager_InitVoiceSDK");
static_assert(sizeof(AgoraManager_InitVoiceSDK) == 0x000001, "Wrong size on AgoraManager_InitVoiceSDK");
static_assert(offsetof(AgoraManager_InitVoiceSDK, bEnableLog) == 0x000000, "Member 'AgoraManager_InitVoiceSDK::bEnableLog' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.InnerEnableMic
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_InnerEnableMic final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_InnerEnableMic) == 0x000001, "Wrong alignment on AgoraManager_InnerEnableMic");
static_assert(sizeof(AgoraManager_InnerEnableMic) == 0x000001, "Wrong size on AgoraManager_InnerEnableMic");
static_assert(offsetof(AgoraManager_InnerEnableMic, bEnable) == 0x000000, "Member 'AgoraManager_InnerEnableMic::bEnable' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.PreInit
// 0x0010 (0x0010 - 0x0000)
struct AgoraManager_PreInit final
{
public:
	class FString                                 Appkey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_PreInit) == 0x000008, "Wrong alignment on AgoraManager_PreInit");
static_assert(sizeof(AgoraManager_PreInit) == 0x000010, "Wrong size on AgoraManager_PreInit");
static_assert(offsetof(AgoraManager_PreInit, Appkey) == 0x000000, "Member 'AgoraManager_PreInit::Appkey' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.AgoraAudioDump
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_AgoraAudioDump final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_AgoraAudioDump) == 0x000001, "Wrong alignment on AgoraManager_AgoraAudioDump");
static_assert(sizeof(AgoraManager_AgoraAudioDump) == 0x000001, "Wrong size on AgoraManager_AgoraAudioDump");
static_assert(offsetof(AgoraManager_AgoraAudioDump, bEnable) == 0x000000, "Member 'AgoraManager_AgoraAudioDump::bEnable' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnableAudioIndication
// 0x000C (0x000C - 0x0000)
struct AgoraManager_EnableAudioIndication final
{
public:
	int32                                         Millions;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smooth;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReportVad;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_EnableAudioIndication) == 0x000004, "Wrong alignment on AgoraManager_EnableAudioIndication");
static_assert(sizeof(AgoraManager_EnableAudioIndication) == 0x00000C, "Wrong size on AgoraManager_EnableAudioIndication");
static_assert(offsetof(AgoraManager_EnableAudioIndication, Millions) == 0x000000, "Member 'AgoraManager_EnableAudioIndication::Millions' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndication, Smooth) == 0x000004, "Member 'AgoraManager_EnableAudioIndication::Smooth' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndication, bReportVad) == 0x000008, "Member 'AgoraManager_EnableAudioIndication::bReportVad' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnableAudioIndicationEx
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_EnableAudioIndicationEx final
{
public:
	int32                                         Millions;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smooth;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReportVad;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoomID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUID;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_EnableAudioIndicationEx) == 0x000008, "Wrong alignment on AgoraManager_EnableAudioIndicationEx");
static_assert(sizeof(AgoraManager_EnableAudioIndicationEx) == 0x000028, "Wrong size on AgoraManager_EnableAudioIndicationEx");
static_assert(offsetof(AgoraManager_EnableAudioIndicationEx, Millions) == 0x000000, "Member 'AgoraManager_EnableAudioIndicationEx::Millions' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndicationEx, Smooth) == 0x000004, "Member 'AgoraManager_EnableAudioIndicationEx::Smooth' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndicationEx, bReportVad) == 0x000008, "Member 'AgoraManager_EnableAudioIndicationEx::bReportVad' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndicationEx, RoomID) == 0x000010, "Member 'AgoraManager_EnableAudioIndicationEx::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnableAudioIndicationEx, LocalUID) == 0x000020, "Member 'AgoraManager_EnableAudioIndicationEx::LocalUID' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnableSpeaker
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_EnableSpeaker final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_EnableSpeaker) == 0x000001, "Wrong alignment on AgoraManager_EnableSpeaker");
static_assert(sizeof(AgoraManager_EnableSpeaker) == 0x000001, "Wrong size on AgoraManager_EnableSpeaker");
static_assert(offsetof(AgoraManager_EnableSpeaker, bEnable) == 0x000000, "Member 'AgoraManager_EnableSpeaker::bEnable' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnterRoom
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_EnterRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_EnterRoom) == 0x000008, "Wrong alignment on AgoraManager_EnterRoom");
static_assert(sizeof(AgoraManager_EnterRoom) == 0x000028, "Wrong size on AgoraManager_EnterRoom");
static_assert(offsetof(AgoraManager_EnterRoom, RoomID) == 0x000000, "Member 'AgoraManager_EnterRoom::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoom, AppToken) == 0x000010, "Member 'AgoraManager_EnterRoom::AppToken' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoom, Uid) == 0x000020, "Member 'AgoraManager_EnterRoom::Uid' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.EnterRoomPro
// 0x0048 (0x0048 - 0x0000)
struct AgoraManager_EnterRoomPro final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomToken;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamToken;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAgoraGamePublishOption                       PublishOpt;                                        // 0x0044(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAgoraGameSubscribeOption                     SubscribeOpt;                                      // 0x0045(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_EnterRoomPro) == 0x000008, "Wrong alignment on AgoraManager_EnterRoomPro");
static_assert(sizeof(AgoraManager_EnterRoomPro) == 0x000048, "Wrong size on AgoraManager_EnterRoomPro");
static_assert(offsetof(AgoraManager_EnterRoomPro, RoomID) == 0x000000, "Member 'AgoraManager_EnterRoomPro::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, TeamID) == 0x000010, "Member 'AgoraManager_EnterRoomPro::TeamID' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, RoomToken) == 0x000020, "Member 'AgoraManager_EnterRoomPro::RoomToken' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, TeamToken) == 0x000030, "Member 'AgoraManager_EnterRoomPro::TeamToken' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, Uid) == 0x000040, "Member 'AgoraManager_EnterRoomPro::Uid' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, PublishOpt) == 0x000044, "Member 'AgoraManager_EnterRoomPro::PublishOpt' has a wrong offset!");
static_assert(offsetof(AgoraManager_EnterRoomPro, SubscribeOpt) == 0x000045, "Member 'AgoraManager_EnterRoomPro::SubscribeOpt' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.GameSetMicVolume
// 0x0008 (0x0008 - 0x0000)
struct AgoraManager_GameSetMicVolume final
{
public:
	int32                                         MicVolume;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GameSetMicVolume) == 0x000004, "Wrong alignment on AgoraManager_GameSetMicVolume");
static_assert(sizeof(AgoraManager_GameSetMicVolume) == 0x000008, "Wrong size on AgoraManager_GameSetMicVolume");
static_assert(offsetof(AgoraManager_GameSetMicVolume, MicVolume) == 0x000000, "Member 'AgoraManager_GameSetMicVolume::MicVolume' has a wrong offset!");
static_assert(offsetof(AgoraManager_GameSetMicVolume, ReturnValue) == 0x000004, "Member 'AgoraManager_GameSetMicVolume::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.GameSetSpeakerVolume
// 0x0008 (0x0008 - 0x0000)
struct AgoraManager_GameSetSpeakerVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GameSetSpeakerVolume) == 0x000004, "Wrong alignment on AgoraManager_GameSetSpeakerVolume");
static_assert(sizeof(AgoraManager_GameSetSpeakerVolume) == 0x000008, "Wrong size on AgoraManager_GameSetSpeakerVolume");
static_assert(offsetof(AgoraManager_GameSetSpeakerVolume, Volume) == 0x000000, "Member 'AgoraManager_GameSetSpeakerVolume::Volume' has a wrong offset!");
static_assert(offsetof(AgoraManager_GameSetSpeakerVolume, ReturnValue) == 0x000004, "Member 'AgoraManager_GameSetSpeakerVolume::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.GameSetSpeakerVolumeByUid
// 0x000C (0x000C - 0x0000)
struct AgoraManager_GameSetSpeakerVolumeByUid final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Volume;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GameSetSpeakerVolumeByUid) == 0x000004, "Wrong alignment on AgoraManager_GameSetSpeakerVolumeByUid");
static_assert(sizeof(AgoraManager_GameSetSpeakerVolumeByUid) == 0x00000C, "Wrong size on AgoraManager_GameSetSpeakerVolumeByUid");
static_assert(offsetof(AgoraManager_GameSetSpeakerVolumeByUid, Uid) == 0x000000, "Member 'AgoraManager_GameSetSpeakerVolumeByUid::Uid' has a wrong offset!");
static_assert(offsetof(AgoraManager_GameSetSpeakerVolumeByUid, Volume) == 0x000004, "Member 'AgoraManager_GameSetSpeakerVolumeByUid::Volume' has a wrong offset!");
static_assert(offsetof(AgoraManager_GameSetSpeakerVolumeByUid, ReturnValue) == 0x000008, "Member 'AgoraManager_GameSetSpeakerVolumeByUid::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.GetMicList
// 0x0010 (0x0010 - 0x0000)
struct AgoraManager_GetMicList final
{
public:
	TArray<struct FRTCDeviceInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GetMicList) == 0x000008, "Wrong alignment on AgoraManager_GetMicList");
static_assert(sizeof(AgoraManager_GetMicList) == 0x000010, "Wrong size on AgoraManager_GetMicList");
static_assert(offsetof(AgoraManager_GetMicList, ReturnValue) == 0x000000, "Member 'AgoraManager_GetMicList::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.GetSpeakerList
// 0x0010 (0x0010 - 0x0000)
struct AgoraManager_GetSpeakerList final
{
public:
	TArray<struct FRTCDeviceInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_GetSpeakerList) == 0x000008, "Wrong alignment on AgoraManager_GetSpeakerList");
static_assert(sizeof(AgoraManager_GetSpeakerList) == 0x000010, "Wrong size on AgoraManager_GetSpeakerList");
static_assert(offsetof(AgoraManager_GetSpeakerList, ReturnValue) == 0x000000, "Member 'AgoraManager_GetSpeakerList::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.InnerEnterRoom
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_InnerEnterRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_InnerEnterRoom) == 0x000008, "Wrong alignment on AgoraManager_InnerEnterRoom");
static_assert(sizeof(AgoraManager_InnerEnterRoom) == 0x000028, "Wrong size on AgoraManager_InnerEnterRoom");
static_assert(offsetof(AgoraManager_InnerEnterRoom, RoomID) == 0x000000, "Member 'AgoraManager_InnerEnterRoom::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_InnerEnterRoom, AppToken) == 0x000010, "Member 'AgoraManager_InnerEnterRoom::AppToken' has a wrong offset!");
static_assert(offsetof(AgoraManager_InnerEnterRoom, Uid) == 0x000020, "Member 'AgoraManager_InnerEnterRoom::Uid' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.IsInRtcRoom
// 0x0001 (0x0001 - 0x0000)
struct AgoraManager_IsInRtcRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_IsInRtcRoom) == 0x000001, "Wrong alignment on AgoraManager_IsInRtcRoom");
static_assert(sizeof(AgoraManager_IsInRtcRoom) == 0x000001, "Wrong size on AgoraManager_IsInRtcRoom");
static_assert(offsetof(AgoraManager_IsInRtcRoom, ReturnValue) == 0x000000, "Member 'AgoraManager_IsInRtcRoom::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.IsInRtcRoomEx
// 0x0018 (0x0018 - 0x0000)
struct AgoraManager_IsInRtcRoomEx final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_IsInRtcRoomEx) == 0x000008, "Wrong alignment on AgoraManager_IsInRtcRoomEx");
static_assert(sizeof(AgoraManager_IsInRtcRoomEx) == 0x000018, "Wrong size on AgoraManager_IsInRtcRoomEx");
static_assert(offsetof(AgoraManager_IsInRtcRoomEx, RoomID) == 0x000000, "Member 'AgoraManager_IsInRtcRoomEx::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_IsInRtcRoomEx, Uid) == 0x000010, "Member 'AgoraManager_IsInRtcRoomEx::Uid' has a wrong offset!");
static_assert(offsetof(AgoraManager_IsInRtcRoomEx, ReturnValue) == 0x000014, "Member 'AgoraManager_IsInRtcRoomEx::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.MediaMute
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_MediaMute final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_MediaMute) == 0x000008, "Wrong alignment on AgoraManager_MediaMute");
static_assert(sizeof(AgoraManager_MediaMute) == 0x000028, "Wrong size on AgoraManager_MediaMute");
static_assert(offsetof(AgoraManager_MediaMute, RoomID) == 0x000000, "Member 'AgoraManager_MediaMute::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MediaMute, TeamID) == 0x000010, "Member 'AgoraManager_MediaMute::TeamID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MediaMute, Uid) == 0x000020, "Member 'AgoraManager_MediaMute::Uid' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.MuteLocalAudioStream
// 0x0030 (0x0030 - 0x0000)
struct AgoraManager_MuteLocalAudioStream final
{
public:
	bool                                          bMute;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoomID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUID;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_MuteLocalAudioStream) == 0x000008, "Wrong alignment on AgoraManager_MuteLocalAudioStream");
static_assert(sizeof(AgoraManager_MuteLocalAudioStream) == 0x000030, "Wrong size on AgoraManager_MuteLocalAudioStream");
static_assert(offsetof(AgoraManager_MuteLocalAudioStream, bMute) == 0x000000, "Member 'AgoraManager_MuteLocalAudioStream::bMute' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteLocalAudioStream, RoomID) == 0x000008, "Member 'AgoraManager_MuteLocalAudioStream::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteLocalAudioStream, TeamID) == 0x000018, "Member 'AgoraManager_MuteLocalAudioStream::TeamID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteLocalAudioStream, LocalUID) == 0x000028, "Member 'AgoraManager_MuteLocalAudioStream::LocalUID' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.MuteRemoteAudioStream
// 0x0020 (0x0020 - 0x0000)
struct AgoraManager_MuteRemoteAudioStream final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MuteRoomID;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalUID;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_MuteRemoteAudioStream) == 0x000008, "Wrong alignment on AgoraManager_MuteRemoteAudioStream");
static_assert(sizeof(AgoraManager_MuteRemoteAudioStream) == 0x000020, "Wrong size on AgoraManager_MuteRemoteAudioStream");
static_assert(offsetof(AgoraManager_MuteRemoteAudioStream, TargetUID) == 0x000000, "Member 'AgoraManager_MuteRemoteAudioStream::TargetUID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteRemoteAudioStream, MuteRoomID) == 0x000008, "Member 'AgoraManager_MuteRemoteAudioStream::MuteRoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteRemoteAudioStream, bMute) == 0x000018, "Member 'AgoraManager_MuteRemoteAudioStream::bMute' has a wrong offset!");
static_assert(offsetof(AgoraManager_MuteRemoteAudioStream, LocalUID) == 0x00001C, "Member 'AgoraManager_MuteRemoteAudioStream::LocalUID' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.SelectMic
// 0x0010 (0x0010 - 0x0000)
struct AgoraManager_SelectMic final
{
public:
	class FString                                 InDeviceID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_SelectMic) == 0x000008, "Wrong alignment on AgoraManager_SelectMic");
static_assert(sizeof(AgoraManager_SelectMic) == 0x000010, "Wrong size on AgoraManager_SelectMic");
static_assert(offsetof(AgoraManager_SelectMic, InDeviceID) == 0x000000, "Member 'AgoraManager_SelectMic::InDeviceID' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.SelectSpeak
// 0x0010 (0x0010 - 0x0000)
struct AgoraManager_SelectSpeak final
{
public:
	class FString                                 InDeviceID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_SelectSpeak) == 0x000008, "Wrong alignment on AgoraManager_SelectSpeak");
static_assert(sizeof(AgoraManager_SelectSpeak) == 0x000010, "Wrong size on AgoraManager_SelectSpeak");
static_assert(offsetof(AgoraManager_SelectSpeak, InDeviceID) == 0x000000, "Member 'AgoraManager_SelectSpeak::InDeviceID' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.SetChannelPublishSubscribeOption
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_SetChannelPublishSubscribeOption final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAgoraGamePublishOption                       SelectedPublishOption;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAgoraGameSubscribeOption                     SelectedSubscribeOption;                           // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Uid;                                               // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgoraManager_SetChannelPublishSubscribeOption) == 0x000008, "Wrong alignment on AgoraManager_SetChannelPublishSubscribeOption");
static_assert(sizeof(AgoraManager_SetChannelPublishSubscribeOption) == 0x000028, "Wrong size on AgoraManager_SetChannelPublishSubscribeOption");
static_assert(offsetof(AgoraManager_SetChannelPublishSubscribeOption, RoomID) == 0x000000, "Member 'AgoraManager_SetChannelPublishSubscribeOption::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetChannelPublishSubscribeOption, TeamID) == 0x000010, "Member 'AgoraManager_SetChannelPublishSubscribeOption::TeamID' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetChannelPublishSubscribeOption, SelectedPublishOption) == 0x000020, "Member 'AgoraManager_SetChannelPublishSubscribeOption::SelectedPublishOption' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetChannelPublishSubscribeOption, SelectedSubscribeOption) == 0x000021, "Member 'AgoraManager_SetChannelPublishSubscribeOption::SelectedSubscribeOption' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetChannelPublishSubscribeOption, Uid) == 0x000024, "Member 'AgoraManager_SetChannelPublishSubscribeOption::Uid' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.SetSubscribeAudioBlocklist
// 0x0038 (0x0038 - 0x0000)
struct AgoraManager_SetSubscribeAudioBlocklist final
{
public:
	TArray<int32>                                 OpenIDList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_SetSubscribeAudioBlocklist) == 0x000008, "Wrong alignment on AgoraManager_SetSubscribeAudioBlocklist");
static_assert(sizeof(AgoraManager_SetSubscribeAudioBlocklist) == 0x000038, "Wrong size on AgoraManager_SetSubscribeAudioBlocklist");
static_assert(offsetof(AgoraManager_SetSubscribeAudioBlocklist, OpenIDList) == 0x000000, "Member 'AgoraManager_SetSubscribeAudioBlocklist::OpenIDList' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetSubscribeAudioBlocklist, RoomID) == 0x000010, "Member 'AgoraManager_SetSubscribeAudioBlocklist::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetSubscribeAudioBlocklist, TeamID) == 0x000020, "Member 'AgoraManager_SetSubscribeAudioBlocklist::TeamID' has a wrong offset!");
static_assert(offsetof(AgoraManager_SetSubscribeAudioBlocklist, Uid) == 0x000030, "Member 'AgoraManager_SetSubscribeAudioBlocklist::Uid' has a wrong offset!");

// Function LimNativeWidget.AgoraManager.SwitchRoom
// 0x0028 (0x0028 - 0x0000)
struct AgoraManager_SwitchRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AgoraManager_SwitchRoom) == 0x000008, "Wrong alignment on AgoraManager_SwitchRoom");
static_assert(sizeof(AgoraManager_SwitchRoom) == 0x000028, "Wrong size on AgoraManager_SwitchRoom");
static_assert(offsetof(AgoraManager_SwitchRoom, RoomID) == 0x000000, "Member 'AgoraManager_SwitchRoom::RoomID' has a wrong offset!");
static_assert(offsetof(AgoraManager_SwitchRoom, AppToken) == 0x000010, "Member 'AgoraManager_SwitchRoom::AppToken' has a wrong offset!");
static_assert(offsetof(AgoraManager_SwitchRoom, Uid) == 0x000020, "Member 'AgoraManager_SwitchRoom::Uid' has a wrong offset!");

// Function LimNativeWidget.AudioPermissionHelperProxy.CheckAndroidAudioPermission
// 0x0001 (0x0001 - 0x0000)
struct AudioPermissionHelperProxy_CheckAndroidAudioPermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioPermissionHelperProxy_CheckAndroidAudioPermission) == 0x000001, "Wrong alignment on AudioPermissionHelperProxy_CheckAndroidAudioPermission");
static_assert(sizeof(AudioPermissionHelperProxy_CheckAndroidAudioPermission) == 0x000001, "Wrong size on AudioPermissionHelperProxy_CheckAndroidAudioPermission");
static_assert(offsetof(AudioPermissionHelperProxy_CheckAndroidAudioPermission, ReturnValue) == 0x000000, "Member 'AudioPermissionHelperProxy_CheckAndroidAudioPermission::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AudioPermissionHelperProxy.CheckIOSAudioPermission
// 0x0001 (0x0001 - 0x0000)
struct AudioPermissionHelperProxy_CheckIOSAudioPermission final
{
public:
	EIOSAudioPermissionState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioPermissionHelperProxy_CheckIOSAudioPermission) == 0x000001, "Wrong alignment on AudioPermissionHelperProxy_CheckIOSAudioPermission");
static_assert(sizeof(AudioPermissionHelperProxy_CheckIOSAudioPermission) == 0x000001, "Wrong size on AudioPermissionHelperProxy_CheckIOSAudioPermission");
static_assert(offsetof(AudioPermissionHelperProxy_CheckIOSAudioPermission, ReturnValue) == 0x000000, "Member 'AudioPermissionHelperProxy_CheckIOSAudioPermission::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.AudioPermissionHelperProxy.OnAndroidPermissionResult
// 0x0020 (0x0020 - 0x0000)
struct AudioPermissionHelperProxy_OnAndroidPermissionResult final
{
public:
	TArray<class FString>                         Permissions;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Results;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioPermissionHelperProxy_OnAndroidPermissionResult) == 0x000008, "Wrong alignment on AudioPermissionHelperProxy_OnAndroidPermissionResult");
static_assert(sizeof(AudioPermissionHelperProxy_OnAndroidPermissionResult) == 0x000020, "Wrong size on AudioPermissionHelperProxy_OnAndroidPermissionResult");
static_assert(offsetof(AudioPermissionHelperProxy_OnAndroidPermissionResult, Permissions) == 0x000000, "Member 'AudioPermissionHelperProxy_OnAndroidPermissionResult::Permissions' has a wrong offset!");
static_assert(offsetof(AudioPermissionHelperProxy_OnAndroidPermissionResult, Results) == 0x000010, "Member 'AudioPermissionHelperProxy_OnAndroidPermissionResult::Results' has a wrong offset!");

// Function LimNativeWidget.LimNativeWidgetSettings.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LimNativeWidgetSettings_GetInstance final
{
public:
	class ULimNativeWidgetSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimNativeWidgetSettings_GetInstance) == 0x000008, "Wrong alignment on LimNativeWidgetSettings_GetInstance");
static_assert(sizeof(LimNativeWidgetSettings_GetInstance) == 0x000008, "Wrong size on LimNativeWidgetSettings_GetInstance");
static_assert(offsetof(LimNativeWidgetSettings_GetInstance, ReturnValue) == 0x000000, "Member 'LimNativeWidgetSettings_GetInstance::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NertcManager_GetInstance final
{
public:
	class UNertcManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GetInstance) == 0x000008, "Wrong alignment on NertcManager_GetInstance");
static_assert(sizeof(NertcManager_GetInstance) == 0x000008, "Wrong size on NertcManager_GetInstance");
static_assert(offsetof(NertcManager_GetInstance, ReturnValue) == 0x000000, "Member 'NertcManager_GetInstance::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetRecordingLocalFilePath
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_GetRecordingLocalFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GetRecordingLocalFilePath) == 0x000008, "Wrong alignment on NertcManager_GetRecordingLocalFilePath");
static_assert(sizeof(NertcManager_GetRecordingLocalFilePath) == 0x000010, "Wrong size on NertcManager_GetRecordingLocalFilePath");
static_assert(offsetof(NertcManager_GetRecordingLocalFilePath, ReturnValue) == 0x000000, "Member 'NertcManager_GetRecordingLocalFilePath::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_IsInitialized) == 0x000001, "Wrong alignment on NertcManager_IsInitialized");
static_assert(sizeof(NertcManager_IsInitialized) == 0x000001, "Wrong size on NertcManager_IsInitialized");
static_assert(offsetof(NertcManager_IsInitialized, ReturnValue) == 0x000000, "Member 'NertcManager_IsInitialized::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.ApplyNertcAuth
// 0x0018 (0x0018 - 0x0000)
struct NertcManager_ApplyNertcAuth final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Token;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_ApplyNertcAuth) == 0x000008, "Wrong alignment on NertcManager_ApplyNertcAuth");
static_assert(sizeof(NertcManager_ApplyNertcAuth) == 0x000018, "Wrong size on NertcManager_ApplyNertcAuth");
static_assert(offsetof(NertcManager_ApplyNertcAuth, Uid) == 0x000000, "Member 'NertcManager_ApplyNertcAuth::Uid' has a wrong offset!");
static_assert(offsetof(NertcManager_ApplyNertcAuth, Token) == 0x000008, "Member 'NertcManager_ApplyNertcAuth::Token' has a wrong offset!");

// Function LimNativeWidget.NertcManager.CheckPlatformMicPermission
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_CheckPlatformMicPermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_CheckPlatformMicPermission) == 0x000001, "Wrong alignment on NertcManager_CheckPlatformMicPermission");
static_assert(sizeof(NertcManager_CheckPlatformMicPermission) == 0x000001, "Wrong size on NertcManager_CheckPlatformMicPermission");
static_assert(offsetof(NertcManager_CheckPlatformMicPermission, ReturnValue) == 0x000000, "Member 'NertcManager_CheckPlatformMicPermission::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.DownloadRecordedFile
// 0x0020 (0x0020 - 0x0000)
struct NertcManager_DownloadRecordedFile final
{
public:
	class FString                                 FileID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_DownloadRecordedFile) == 0x000008, "Wrong alignment on NertcManager_DownloadRecordedFile");
static_assert(sizeof(NertcManager_DownloadRecordedFile) == 0x000020, "Wrong size on NertcManager_DownloadRecordedFile");
static_assert(offsetof(NertcManager_DownloadRecordedFile, FileID) == 0x000000, "Member 'NertcManager_DownloadRecordedFile::FileID' has a wrong offset!");
static_assert(offsetof(NertcManager_DownloadRecordedFile, FilePath) == 0x000010, "Member 'NertcManager_DownloadRecordedFile::FilePath' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnableAudioIndication
// 0x000C (0x000C - 0x0000)
struct NertcManager_EnableAudioIndication final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Millions;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLocal;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_EnableAudioIndication) == 0x000004, "Wrong alignment on NertcManager_EnableAudioIndication");
static_assert(sizeof(NertcManager_EnableAudioIndication) == 0x00000C, "Wrong size on NertcManager_EnableAudioIndication");
static_assert(offsetof(NertcManager_EnableAudioIndication, InEnable) == 0x000000, "Member 'NertcManager_EnableAudioIndication::InEnable' has a wrong offset!");
static_assert(offsetof(NertcManager_EnableAudioIndication, Millions) == 0x000004, "Member 'NertcManager_EnableAudioIndication::Millions' has a wrong offset!");
static_assert(offsetof(NertcManager_EnableAudioIndication, bEnableLocal) == 0x000008, "Member 'NertcManager_EnableAudioIndication::bEnableLocal' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnableMic
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_EnableMic final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_EnableMic) == 0x000001, "Wrong alignment on NertcManager_EnableMic");
static_assert(sizeof(NertcManager_EnableMic) == 0x000001, "Wrong size on NertcManager_EnableMic");
static_assert(offsetof(NertcManager_EnableMic, InEnable) == 0x000000, "Member 'NertcManager_EnableMic::InEnable' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnableMicNoiseReduction
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_EnableMicNoiseReduction final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_EnableMicNoiseReduction) == 0x000001, "Wrong alignment on NertcManager_EnableMicNoiseReduction");
static_assert(sizeof(NertcManager_EnableMicNoiseReduction) == 0x000001, "Wrong size on NertcManager_EnableMicNoiseReduction");
static_assert(offsetof(NertcManager_EnableMicNoiseReduction, bEnable) == 0x000000, "Member 'NertcManager_EnableMicNoiseReduction::bEnable' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnableRangeVoice
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_EnableRangeVoice final
{
public:
	bool                                          bEnbale;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_EnableRangeVoice) == 0x000001, "Wrong alignment on NertcManager_EnableRangeVoice");
static_assert(sizeof(NertcManager_EnableRangeVoice) == 0x000001, "Wrong size on NertcManager_EnableRangeVoice");
static_assert(offsetof(NertcManager_EnableRangeVoice, bEnbale) == 0x000000, "Member 'NertcManager_EnableRangeVoice::bEnbale' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnableSpeaker
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_EnableSpeaker final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_EnableSpeaker) == 0x000001, "Wrong alignment on NertcManager_EnableSpeaker");
static_assert(sizeof(NertcManager_EnableSpeaker) == 0x000001, "Wrong size on NertcManager_EnableSpeaker");
static_assert(offsetof(NertcManager_EnableSpeaker, InEnable) == 0x000000, "Member 'NertcManager_EnableSpeaker::InEnable' has a wrong offset!");

// Function LimNativeWidget.NertcManager.EnterRoom
// 0x0028 (0x0028 - 0x0000)
struct NertcManager_EnterRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_EnterRoom) == 0x000008, "Wrong alignment on NertcManager_EnterRoom");
static_assert(sizeof(NertcManager_EnterRoom) == 0x000028, "Wrong size on NertcManager_EnterRoom");
static_assert(offsetof(NertcManager_EnterRoom, RoomID) == 0x000000, "Member 'NertcManager_EnterRoom::RoomID' has a wrong offset!");
static_assert(offsetof(NertcManager_EnterRoom, AppToken) == 0x000010, "Member 'NertcManager_EnterRoom::AppToken' has a wrong offset!");
static_assert(offsetof(NertcManager_EnterRoom, Uid) == 0x000020, "Member 'NertcManager_EnterRoom::Uid' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetFileSize
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_GetFileSize final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GetFileSize) == 0x000008, "Wrong alignment on NertcManager_GetFileSize");
static_assert(sizeof(NertcManager_GetFileSize) == 0x000010, "Wrong size on NertcManager_GetFileSize");
static_assert(offsetof(NertcManager_GetFileSize, FilePath) == 0x000000, "Member 'NertcManager_GetFileSize::FilePath' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetMicList
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_GetMicList final
{
public:
	TArray<struct FRTCDeviceInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GetMicList) == 0x000008, "Wrong alignment on NertcManager_GetMicList");
static_assert(sizeof(NertcManager_GetMicList) == 0x000010, "Wrong size on NertcManager_GetMicList");
static_assert(offsetof(NertcManager_GetMicList, ReturnValue) == 0x000000, "Member 'NertcManager_GetMicList::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetSpeakerList
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_GetSpeakerList final
{
public:
	TArray<struct FRTCDeviceInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GetSpeakerList) == 0x000008, "Wrong alignment on NertcManager_GetSpeakerList");
static_assert(sizeof(NertcManager_GetSpeakerList) == 0x000010, "Wrong size on NertcManager_GetSpeakerList");
static_assert(offsetof(NertcManager_GetSpeakerList, ReturnValue) == 0x000000, "Member 'NertcManager_GetSpeakerList::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GetVoiceFileDuration
// 0x0018 (0x0018 - 0x0000)
struct NertcManager_GetVoiceFileDuration final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_GetVoiceFileDuration) == 0x000008, "Wrong alignment on NertcManager_GetVoiceFileDuration");
static_assert(sizeof(NertcManager_GetVoiceFileDuration) == 0x000018, "Wrong size on NertcManager_GetVoiceFileDuration");
static_assert(offsetof(NertcManager_GetVoiceFileDuration, FilePath) == 0x000000, "Member 'NertcManager_GetVoiceFileDuration::FilePath' has a wrong offset!");
static_assert(offsetof(NertcManager_GetVoiceFileDuration, ReturnValue) == 0x000010, "Member 'NertcManager_GetVoiceFileDuration::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.Init
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_Init final
{
public:
	bool                                          bEnableLog;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_Init) == 0x000001, "Wrong alignment on NertcManager_Init");
static_assert(sizeof(NertcManager_Init) == 0x000001, "Wrong size on NertcManager_Init");
static_assert(offsetof(NertcManager_Init, bEnableLog) == 0x000000, "Member 'NertcManager_Init::bEnableLog' has a wrong offset!");

// Function LimNativeWidget.NertcManager.InnerEnableMic
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_InnerEnableMic final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_InnerEnableMic) == 0x000001, "Wrong alignment on NertcManager_InnerEnableMic");
static_assert(sizeof(NertcManager_InnerEnableMic) == 0x000001, "Wrong size on NertcManager_InnerEnableMic");
static_assert(offsetof(NertcManager_InnerEnableMic, InEnable) == 0x000000, "Member 'NertcManager_InnerEnableMic::InEnable' has a wrong offset!");

// Function LimNativeWidget.NertcManager.InnerEnterRoom
// 0x0028 (0x0028 - 0x0000)
struct NertcManager_InnerEnterRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_InnerEnterRoom) == 0x000008, "Wrong alignment on NertcManager_InnerEnterRoom");
static_assert(sizeof(NertcManager_InnerEnterRoom) == 0x000028, "Wrong size on NertcManager_InnerEnterRoom");
static_assert(offsetof(NertcManager_InnerEnterRoom, RoomID) == 0x000000, "Member 'NertcManager_InnerEnterRoom::RoomID' has a wrong offset!");
static_assert(offsetof(NertcManager_InnerEnterRoom, AppToken) == 0x000010, "Member 'NertcManager_InnerEnterRoom::AppToken' has a wrong offset!");
static_assert(offsetof(NertcManager_InnerEnterRoom, Uid) == 0x000020, "Member 'NertcManager_InnerEnterRoom::Uid' has a wrong offset!");

// Function LimNativeWidget.NertcManager.IsInRtcRoom
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_IsInRtcRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_IsInRtcRoom) == 0x000001, "Wrong alignment on NertcManager_IsInRtcRoom");
static_assert(sizeof(NertcManager_IsInRtcRoom) == 0x000001, "Wrong size on NertcManager_IsInRtcRoom");
static_assert(offsetof(NertcManager_IsInRtcRoom, ReturnValue) == 0x000000, "Member 'NertcManager_IsInRtcRoom::ReturnValue' has a wrong offset!");

// Function LimNativeWidget.NertcManager.MediaMute
// 0x0008 (0x0008 - 0x0000)
struct NertcManager_MediaMute final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_MediaMute) == 0x000004, "Wrong alignment on NertcManager_MediaMute");
static_assert(sizeof(NertcManager_MediaMute) == 0x000008, "Wrong size on NertcManager_MediaMute");
static_assert(offsetof(NertcManager_MediaMute, Uid) == 0x000000, "Member 'NertcManager_MediaMute::Uid' has a wrong offset!");
static_assert(offsetof(NertcManager_MediaMute, bMute) == 0x000004, "Member 'NertcManager_MediaMute::bMute' has a wrong offset!");

// Function LimNativeWidget.NertcManager.PlayRecordedFile
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_PlayRecordedFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_PlayRecordedFile) == 0x000008, "Wrong alignment on NertcManager_PlayRecordedFile");
static_assert(sizeof(NertcManager_PlayRecordedFile) == 0x000010, "Wrong size on NertcManager_PlayRecordedFile");
static_assert(offsetof(NertcManager_PlayRecordedFile, FilePath) == 0x000000, "Member 'NertcManager_PlayRecordedFile::FilePath' has a wrong offset!");

// Function LimNativeWidget.NertcManager.PreInit
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_PreInit final
{
public:
	class FString                                 Appkey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_PreInit) == 0x000008, "Wrong alignment on NertcManager_PreInit");
static_assert(sizeof(NertcManager_PreInit) == 0x000010, "Wrong size on NertcManager_PreInit");
static_assert(offsetof(NertcManager_PreInit, Appkey) == 0x000000, "Member 'NertcManager_PreInit::Appkey' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SelectMic
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_SelectMic final
{
public:
	class FString                                 InDeviceID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SelectMic) == 0x000008, "Wrong alignment on NertcManager_SelectMic");
static_assert(sizeof(NertcManager_SelectMic) == 0x000010, "Wrong size on NertcManager_SelectMic");
static_assert(offsetof(NertcManager_SelectMic, InDeviceID) == 0x000000, "Member 'NertcManager_SelectMic::InDeviceID' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SelectSpeak
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_SelectSpeak final
{
public:
	class FString                                 InDeviceID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SelectSpeak) == 0x000008, "Wrong alignment on NertcManager_SelectSpeak");
static_assert(sizeof(NertcManager_SelectSpeak) == 0x000010, "Wrong size on NertcManager_SelectSpeak");
static_assert(offsetof(NertcManager_SelectSpeak, InDeviceID) == 0x000000, "Member 'NertcManager_SelectSpeak::InDeviceID' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetAudioSendAndRecvRules
// 0x0030 (0x0030 - 0x0000)
struct NertcManager_SetAudioSendAndRecvRules final
{
public:
	ERTCAudioRouteSendType                        InSendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InSendOpenIDList;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTCAudioRouteRecvType                        InRecvType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InRecvOpenIDList;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetAudioSendAndRecvRules) == 0x000008, "Wrong alignment on NertcManager_SetAudioSendAndRecvRules");
static_assert(sizeof(NertcManager_SetAudioSendAndRecvRules) == 0x000030, "Wrong size on NertcManager_SetAudioSendAndRecvRules");
static_assert(offsetof(NertcManager_SetAudioSendAndRecvRules, InSendType) == 0x000000, "Member 'NertcManager_SetAudioSendAndRecvRules::InSendType' has a wrong offset!");
static_assert(offsetof(NertcManager_SetAudioSendAndRecvRules, InSendOpenIDList) == 0x000008, "Member 'NertcManager_SetAudioSendAndRecvRules::InSendOpenIDList' has a wrong offset!");
static_assert(offsetof(NertcManager_SetAudioSendAndRecvRules, InRecvType) == 0x000018, "Member 'NertcManager_SetAudioSendAndRecvRules::InRecvType' has a wrong offset!");
static_assert(offsetof(NertcManager_SetAudioSendAndRecvRules, InRecvOpenIDList) == 0x000020, "Member 'NertcManager_SetAudioSendAndRecvRules::InRecvOpenIDList' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetMaxMessageLength
// 0x0004 (0x0004 - 0x0000)
struct NertcManager_SetMaxMessageLength final
{
public:
	int32                                         MsTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetMaxMessageLength) == 0x000004, "Wrong alignment on NertcManager_SetMaxMessageLength");
static_assert(sizeof(NertcManager_SetMaxMessageLength) == 0x000004, "Wrong size on NertcManager_SetMaxMessageLength");
static_assert(offsetof(NertcManager_SetMaxMessageLength, MsTime) == 0x000000, "Member 'NertcManager_SetMaxMessageLength::MsTime' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetRangeAudioMode
// 0x0001 (0x0001 - 0x0000)
struct NertcManager_SetRangeAudioMode final
{
public:
	ERTCRangeAudioMode                            InAudioMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetRangeAudioMode) == 0x000001, "Wrong alignment on NertcManager_SetRangeAudioMode");
static_assert(sizeof(NertcManager_SetRangeAudioMode) == 0x000001, "Wrong size on NertcManager_SetRangeAudioMode");
static_assert(offsetof(NertcManager_SetRangeAudioMode, InAudioMode) == 0x000000, "Member 'NertcManager_SetRangeAudioMode::InAudioMode' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetRangeAudioTeamID
// 0x0004 (0x0004 - 0x0000)
struct NertcManager_SetRangeAudioTeamID final
{
public:
	int32                                         TeamID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetRangeAudioTeamID) == 0x000004, "Wrong alignment on NertcManager_SetRangeAudioTeamID");
static_assert(sizeof(NertcManager_SetRangeAudioTeamID) == 0x000004, "Wrong size on NertcManager_SetRangeAudioTeamID");
static_assert(offsetof(NertcManager_SetRangeAudioTeamID, TeamID) == 0x000000, "Member 'NertcManager_SetRangeAudioTeamID::TeamID' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetSubscribeAudioAllowlist
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_SetSubscribeAudioAllowlist final
{
public:
	TArray<int32>                                 OpenIDList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetSubscribeAudioAllowlist) == 0x000008, "Wrong alignment on NertcManager_SetSubscribeAudioAllowlist");
static_assert(sizeof(NertcManager_SetSubscribeAudioAllowlist) == 0x000010, "Wrong size on NertcManager_SetSubscribeAudioAllowlist");
static_assert(offsetof(NertcManager_SetSubscribeAudioAllowlist, OpenIDList) == 0x000000, "Member 'NertcManager_SetSubscribeAudioAllowlist::OpenIDList' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetSubscribeAudioBlocklist
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_SetSubscribeAudioBlocklist final
{
public:
	TArray<int32>                                 OpenIDList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetSubscribeAudioBlocklist) == 0x000008, "Wrong alignment on NertcManager_SetSubscribeAudioBlocklist");
static_assert(sizeof(NertcManager_SetSubscribeAudioBlocklist) == 0x000010, "Wrong size on NertcManager_SetSubscribeAudioBlocklist");
static_assert(offsetof(NertcManager_SetSubscribeAudioBlocklist, OpenIDList) == 0x000000, "Member 'NertcManager_SetSubscribeAudioBlocklist::OpenIDList' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SetSubscribeAudioOnlyBy
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_SetSubscribeAudioOnlyBy final
{
public:
	TArray<int32>                                 OpenIDList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_SetSubscribeAudioOnlyBy) == 0x000008, "Wrong alignment on NertcManager_SetSubscribeAudioOnlyBy");
static_assert(sizeof(NertcManager_SetSubscribeAudioOnlyBy) == 0x000010, "Wrong size on NertcManager_SetSubscribeAudioOnlyBy");
static_assert(offsetof(NertcManager_SetSubscribeAudioOnlyBy, OpenIDList) == 0x000000, "Member 'NertcManager_SetSubscribeAudioOnlyBy::OpenIDList' has a wrong offset!");

// Function LimNativeWidget.NertcManager.StartRecording
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_StartRecording final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_StartRecording) == 0x000008, "Wrong alignment on NertcManager_StartRecording");
static_assert(sizeof(NertcManager_StartRecording) == 0x000010, "Wrong size on NertcManager_StartRecording");
static_assert(offsetof(NertcManager_StartRecording, FilePath) == 0x000000, "Member 'NertcManager_StartRecording::FilePath' has a wrong offset!");

// Function LimNativeWidget.NertcManager.SwitchRoom
// 0x0030 (0x0030 - 0x0000)
struct NertcManager_SwitchRoom final
{
public:
	class FString                                 RoomID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioDistance;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NertcManager_SwitchRoom) == 0x000008, "Wrong alignment on NertcManager_SwitchRoom");
static_assert(sizeof(NertcManager_SwitchRoom) == 0x000030, "Wrong size on NertcManager_SwitchRoom");
static_assert(offsetof(NertcManager_SwitchRoom, RoomID) == 0x000000, "Member 'NertcManager_SwitchRoom::RoomID' has a wrong offset!");
static_assert(offsetof(NertcManager_SwitchRoom, AppToken) == 0x000010, "Member 'NertcManager_SwitchRoom::AppToken' has a wrong offset!");
static_assert(offsetof(NertcManager_SwitchRoom, Uid) == 0x000020, "Member 'NertcManager_SwitchRoom::Uid' has a wrong offset!");
static_assert(offsetof(NertcManager_SwitchRoom, TeamID) == 0x000024, "Member 'NertcManager_SwitchRoom::TeamID' has a wrong offset!");
static_assert(offsetof(NertcManager_SwitchRoom, AudioDistance) == 0x000028, "Member 'NertcManager_SwitchRoom::AudioDistance' has a wrong offset!");

// Function LimNativeWidget.NertcManager.UpdateAudioRecvRange
// 0x0004 (0x0004 - 0x0000)
struct NertcManager_UpdateAudioRecvRange final
{
public:
	int32                                         InRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_UpdateAudioRecvRange) == 0x000004, "Wrong alignment on NertcManager_UpdateAudioRecvRange");
static_assert(sizeof(NertcManager_UpdateAudioRecvRange) == 0x000004, "Wrong size on NertcManager_UpdateAudioRecvRange");
static_assert(offsetof(NertcManager_UpdateAudioRecvRange, InRange) == 0x000000, "Member 'NertcManager_UpdateAudioRecvRange::InRange' has a wrong offset!");

// Function LimNativeWidget.NertcManager.UpdateSelfPosition
// 0x0018 (0x0018 - 0x0000)
struct NertcManager_UpdateSelfPosition final
{
public:
	struct FVector                                InSelfPosition;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSelfRotator;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_UpdateSelfPosition) == 0x000004, "Wrong alignment on NertcManager_UpdateSelfPosition");
static_assert(sizeof(NertcManager_UpdateSelfPosition) == 0x000018, "Wrong size on NertcManager_UpdateSelfPosition");
static_assert(offsetof(NertcManager_UpdateSelfPosition, InSelfPosition) == 0x000000, "Member 'NertcManager_UpdateSelfPosition::InSelfPosition' has a wrong offset!");
static_assert(offsetof(NertcManager_UpdateSelfPosition, InSelfRotator) == 0x00000C, "Member 'NertcManager_UpdateSelfPosition::InSelfRotator' has a wrong offset!");

// Function LimNativeWidget.NertcManager.UploadRecordedFile
// 0x0010 (0x0010 - 0x0000)
struct NertcManager_UploadRecordedFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_UploadRecordedFile) == 0x000008, "Wrong alignment on NertcManager_UploadRecordedFile");
static_assert(sizeof(NertcManager_UploadRecordedFile) == 0x000010, "Wrong size on NertcManager_UploadRecordedFile");
static_assert(offsetof(NertcManager_UploadRecordedFile, FilePath) == 0x000000, "Member 'NertcManager_UploadRecordedFile::FilePath' has a wrong offset!");

// Function LimNativeWidget.NertcManager.GameSetSpeakerVolumeByUid
// 0x000C (0x000C - 0x0000)
struct NertcManager_GameSetSpeakerVolumeByUid final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Volume;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NertcManager_GameSetSpeakerVolumeByUid) == 0x000004, "Wrong alignment on NertcManager_GameSetSpeakerVolumeByUid");
static_assert(sizeof(NertcManager_GameSetSpeakerVolumeByUid) == 0x00000C, "Wrong size on NertcManager_GameSetSpeakerVolumeByUid");
static_assert(offsetof(NertcManager_GameSetSpeakerVolumeByUid, Uid) == 0x000000, "Member 'NertcManager_GameSetSpeakerVolumeByUid::Uid' has a wrong offset!");
static_assert(offsetof(NertcManager_GameSetSpeakerVolumeByUid, Volume) == 0x000004, "Member 'NertcManager_GameSetSpeakerVolumeByUid::Volume' has a wrong offset!");
static_assert(offsetof(NertcManager_GameSetSpeakerVolumeByUid, ReturnValue) == 0x000008, "Member 'NertcManager_GameSetSpeakerVolumeByUid::ReturnValue' has a wrong offset!");

}

