#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicRepresentation

#include "Basic.hpp"

#include "DynamicRepresentation_classes.hpp"
#include "DynamicRepresentation_parameters.hpp"


namespace SDK
{

// Function DynamicRepresentation.DynamicRepresentationInterface.BeginRelevance
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDynamicRepresentationDefinition*InDefinition                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpatialLODLevel                        LOD                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InCustomData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDynamicRepresentationInterface::BeginRelevance(const struct FActorId& ActorId, const class UDynamicRepresentationDefinition* InDefinition, ESpatialLODLevel LOD, class UObject* InCustomData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationInterface", "BeginRelevance");

	Params::DynamicRepresentationInterface_BeginRelevance Parms{};

	Parms.ActorId = std::move(ActorId);
	Parms.InDefinition = InDefinition;
	Parms.LOD = LOD;
	Parms.InCustomData = InCustomData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationInterface.EndRelevance
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDynamicRepresentationDefinition*InDefinition                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InCustomData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDynamicRepresentationInterface::EndRelevance(const struct FActorId& ActorId, const class UDynamicRepresentationDefinition* InDefinition, class UObject* InCustomData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationInterface", "EndRelevance");

	Params::DynamicRepresentationInterface_EndRelevance Parms{};

	Parms.ActorId = std::move(ActorId);
	Parms.InDefinition = InDefinition;
	Parms.InCustomData = InCustomData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationInterface.LodChanged
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDynamicRepresentationDefinition*InDefinition                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpatialLODLevel                        OldLOD                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpatialLODLevel                        NewLOD                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InCustomData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDynamicRepresentationInterface::LodChanged(const struct FActorId& ActorId, const class UDynamicRepresentationDefinition* InDefinition, ESpatialLODLevel OldLOD, ESpatialLODLevel NewLOD, class UObject* InCustomData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationInterface", "LodChanged");

	Params::DynamicRepresentationInterface_LodChanged Parms{};

	Parms.ActorId = std::move(ActorId);
	Parms.InDefinition = InDefinition;
	Parms.OldLOD = OldLOD;
	Parms.NewLOD = NewLOD;
	Parms.InCustomData = InCustomData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationInterface.PlayRepresentationAnimation
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      Animation                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDynamicRepresentationInterface::PlayRepresentationAnimation(const struct FActorId& ActorId, const class FName& Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationInterface", "PlayRepresentationAnimation");

	Params::DynamicRepresentationInterface_PlayRepresentationAnimation Parms{};

	Parms.ActorId = std::move(ActorId);
	Parms.Animation = Animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationInterface.StopRepresentationAnimation
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDynamicRepresentationInterface::StopRepresentationAnimation(const struct FActorId& ActorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationInterface", "StopRepresentationAnimation");

	Params::DynamicRepresentationInterface_StopRepresentationAnimation Parms{};

	Parms.ActorId = std::move(ActorId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationFunctionLibrary.DynamicRepresentationSpawnActor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDynamicRepresentationDefinition*Definition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicRepresentationFunctionLibrary::DynamicRepresentationSpawnActor(class UObject* WorldContextObject, const class UDynamicRepresentationDefinition* Definition, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicRepresentationFunctionLibrary", "DynamicRepresentationSpawnActor");

	Params::DynamicRepresentationFunctionLibrary_DynamicRepresentationSpawnActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Definition = Definition;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicRepresentation.DynamicRepresentationAnimationState.GetState
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FActorId&                  ActorId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IDynamicRepresentationAnimationState::GetState(const struct FActorId& ActorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DynamicRepresentationAnimationState", "GetState");

	Params::DynamicRepresentationAnimationState_GetState Parms{};

	Parms.ActorId = std::move(ActorId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicRepresentation.DynamicRepresentationSceneComponent.GetVisualizationActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UDynamicRepresentationSceneComponent::GetVisualizationActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicRepresentationSceneComponent", "GetVisualizationActor");

	Params::DynamicRepresentationSceneComponent_GetVisualizationActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicRepresentation.DynamicRepresentationSceneComponent.PlayAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Animation                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicRepresentationSceneComponent::PlayAnimation(const class FName& Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicRepresentationSceneComponent", "PlayAnimation");

	Params::DynamicRepresentationSceneComponent_PlayAnimation Parms{};

	Parms.Animation = Animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicRepresentation.DynamicRepresentationSceneComponent.StopAnimation
// (Final, Native, Public, BlueprintCallable)

void UDynamicRepresentationSceneComponent::StopAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicRepresentationSceneComponent", "StopAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

