#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller_Framework

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Controller_Framework.BP_Controller_Framework_C.MeerkatTriggerReport
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_Framework_C_MeerkatTriggerReport final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_MeerkatTriggerReport) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_MeerkatTriggerReport");
static_assert(sizeof(BP_Controller_Framework_C_MeerkatTriggerReport) == 0x000010, "Wrong size on BP_Controller_Framework_C_MeerkatTriggerReport");
static_assert(offsetof(BP_Controller_Framework_C_MeerkatTriggerReport, Value) == 0x000000, "Member 'BP_Controller_Framework_C_MeerkatTriggerReport::Value' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.UpdateAiPalRate
// 0x0004 (0x0004 - 0x0000)
struct BP_Controller_Framework_C_UpdateAiPalRate final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_UpdateAiPalRate) == 0x000004, "Wrong alignment on BP_Controller_Framework_C_UpdateAiPalRate");
static_assert(sizeof(BP_Controller_Framework_C_UpdateAiPalRate) == 0x000004, "Wrong size on BP_Controller_Framework_C_UpdateAiPalRate");
static_assert(offsetof(BP_Controller_Framework_C_UpdateAiPalRate, Rate) == 0x000000, "Member 'BP_Controller_Framework_C_UpdateAiPalRate::Rate' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.OnNotifyLockPlayer
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_Framework_C_OnNotifyLockPlayer final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_OnNotifyLockPlayer) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_OnNotifyLockPlayer");
static_assert(sizeof(BP_Controller_Framework_C_OnNotifyLockPlayer) == 0x000010, "Wrong size on BP_Controller_Framework_C_OnNotifyLockPlayer");
static_assert(offsetof(BP_Controller_Framework_C_OnNotifyLockPlayer, Name_0) == 0x000000, "Member 'BP_Controller_Framework_C_OnNotifyLockPlayer::Name_0' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.RequestNotifyLockPlayer
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_Framework_C_RequestNotifyLockPlayer final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_RequestNotifyLockPlayer) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_RequestNotifyLockPlayer");
static_assert(sizeof(BP_Controller_Framework_C_RequestNotifyLockPlayer) == 0x000010, "Wrong size on BP_Controller_Framework_C_RequestNotifyLockPlayer");
static_assert(offsetof(BP_Controller_Framework_C_RequestNotifyLockPlayer, Name_0) == 0x000000, "Member 'BP_Controller_Framework_C_RequestNotifyLockPlayer::Name_0' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.ClientNotifyLockPlayer
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_Framework_C_ClientNotifyLockPlayer final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_ClientNotifyLockPlayer) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_ClientNotifyLockPlayer");
static_assert(sizeof(BP_Controller_Framework_C_ClientNotifyLockPlayer) == 0x000010, "Wrong size on BP_Controller_Framework_C_ClientNotifyLockPlayer");
static_assert(offsetof(BP_Controller_Framework_C_ClientNotifyLockPlayer, Name_0) == 0x000000, "Member 'BP_Controller_Framework_C_ClientNotifyLockPlayer::Name_0' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.RpcClientRepAceStatusToServer
// 0x0010 (0x0010 - 0x0000)
struct BP_Controller_Framework_C_RpcClientRepAceStatusToServer final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_RpcClientRepAceStatusToServer) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_RpcClientRepAceStatusToServer");
static_assert(sizeof(BP_Controller_Framework_C_RpcClientRepAceStatusToServer) == 0x000010, "Wrong size on BP_Controller_Framework_C_RpcClientRepAceStatusToServer");
static_assert(offsetof(BP_Controller_Framework_C_RpcClientRepAceStatusToServer, Value) == 0x000000, "Member 'BP_Controller_Framework_C_RpcClientRepAceStatusToServer::Value' has a wrong offset!");

// Function BP_Controller_Framework.BP_Controller_Framework_C.ExecuteUbergraph_BP_Controller_Framework
// 0x0028 (0x0028 - 0x0000)
struct BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Value;                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_Name;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework) == 0x000008, "Wrong alignment on BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework");
static_assert(sizeof(BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework) == 0x000028, "Wrong size on BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework");
static_assert(offsetof(BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework, EntryPoint) == 0x000000, "Member 'BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework, K2Node_CustomEvent_Value) == 0x000008, "Member 'BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework, K2Node_CustomEvent_Name) == 0x000018, "Member 'BP_Controller_Framework_C_ExecuteUbergraph_BP_Controller_Framework::K2Node_CustomEvent_Name' has a wrong offset!");

}

