#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HeroPick_HeroListSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Solarland_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.ExecuteUbergraph_WBP_HeroPick_HeroListSlot
// 0x02A0 (0x02A0 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	EHeroCellSelectedType                         Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	EHeroCellSelectedType                         Temp_byte_Variable_4;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_SetTimerForNextTick_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_5;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_6;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_7;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_8;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_6;                             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           K2Node_Event_CharacterOwnerType;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         K2Node_Event_SelectedType;                         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0084(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x00C0(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0130(0x0070)(ConstParm)
	class FString                                 K2Node_Event_Name;                                 // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              K2Node_Event_IconPath;                             // 0x01B0(0x0028)(ConstParm, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform;                // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform_1;              // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform_2;              // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EB[0x1];                                      // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x01EC(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_4;                           // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_5;                           // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result;    // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue; // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_SpecificPlayerSelect;                 // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsSelected;                           // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Confirm;                              // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HasTitle;                             // 0x027B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_MyTurn;                               // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27F[0x1];                                      // 0x027F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x0290(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot) == 0x0002A0, "Wrong size on WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, EntryPoint) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable) == 0x000014, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_1) == 0x000015, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_2) == 0x000016, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_3) == 0x000017, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_4) == 0x000028, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_SetTimerForNextTick_ReturnValue) == 0x000030, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_SetTimerForNextTick_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_object_Variable) == 0x000038, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_5) == 0x000040, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_object_Variable_1) == 0x000048, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_6) == 0x000050, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable) == 0x000054, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_1) == 0x000058, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_2) == 0x00005C, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_7) == 0x000060, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_3) == 0x000064, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_4) == 0x000068, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_5) == 0x00006C, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_byte_Variable_8) == 0x000070, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_6) == 0x000074, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_7) == 0x000078, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_float_Variable_8) == 0x00007C, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_CharacterOwnerType) == 0x000080, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_CharacterOwnerType' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_SelectedType) == 0x000081, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_SelectedType' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_MyGeometry) == 0x000084, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_MouseEvent_1) == 0x0000C0, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_MouseEvent) == 0x000130, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_Name) == 0x0001A0, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_IconPath) == 0x0001B0, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_IconPath' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_PlayAnimationForward_ReturnValue) == 0x0001D8, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_PlayAnimationReverse_ReturnValue) == 0x0001E0, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_IsPCPlatform_IsPCPlatform) == 0x0001E8, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_IsPCPlatform_IsPCPlatform' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_IsPCPlatform_IsPCPlatform_1) == 0x0001E9, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_IsPCPlatform_IsPCPlatform_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_IsPCPlatform_IsPCPlatform_2) == 0x0001EA, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_IsPCPlatform_IsPCPlatform_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001EC, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default) == 0x0001FC, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default_1) == 0x000200, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default_2) == 0x000204, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_object_Variable_2) == 0x000208, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_DynamicCast_AsMaterial_Interface) == 0x000210, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_DynamicCast_bSuccess) == 0x000218, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_IsDesignTime) == 0x000219, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000220, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CustomEvent_Loaded) == 0x000228, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default_3) == 0x000230, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default_4) == 0x000238, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000240, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, Temp_object_Variable_3) == 0x000248, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_DynamicCast_AsTexture_2D) == 0x000250, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_DynamicCast_bSuccess_1) == 0x000258, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Select_Default_5) == 0x000260, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_CreatePlayAnimationProxyObject_Result) == 0x000268, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_CreatePlayAnimationProxyObject_Result' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_CreatePlayAnimationProxyObject_ReturnValue) == 0x000270, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_CreatePlayAnimationProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_SpecificPlayerSelect) == 0x000278, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_SpecificPlayerSelect' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_IsSelected) == 0x000279, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_IsSelected' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_Confirm) == 0x00027A, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_Confirm' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_HasTitle) == 0x00027B, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_HasTitle' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_Event_MyTurn) == 0x00027C, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_Event_MyTurn' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_IsValid_ReturnValue) == 0x00027D, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00027E, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000280, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CustomEvent_Loaded_1) == 0x000288, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot, K2Node_CreateDelegate_OutputDelegate_3) == 0x000290, "Member 'WBP_HeroPick_HeroListSlot_C_ExecuteUbergraph_WBP_HeroPick_HeroListSlot::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdatePlayerSelectStage
// 0x0005 (0x0005 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage final
{
public:
	bool                                          SpecificPlayerSelect;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSelected;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Confirm;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasTitle;                                          // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MyTurn;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage) == 0x000005, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage, SpecificPlayerSelect) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage::SpecificPlayerSelect' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage, IsSelected) == 0x000001, "Member 'WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage::IsSelected' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage, Confirm) == 0x000002, "Member 'WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage::Confirm' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage, HasTitle) == 0x000003, "Member 'WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage::HasTitle' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage, MyTurn) == 0x000004, "Member 'WBP_HeroPick_HeroListSlot_C_UpdatePlayerSelectStage::MyTurn' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_PreConstruct");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_PreConstruct) == 0x000001, "Wrong size on WBP_HeroPick_HeroListSlot_C_PreConstruct");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdateHeroIconAndName
// 0x0038 (0x0038 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              IconPath;                                          // 0x0010(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName) == 0x000038, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName, Name_0) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName::Name_0' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName, IconPath) == 0x000010, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateHeroIconAndName::IconPath' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_OnMouseLeave) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_OnMouseLeave");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_OnMouseLeave) == 0x000070, "Wrong size on WBP_HeroPick_HeroListSlot_C_OnMouseLeave");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_OnMouseEnter) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_OnMouseEnter");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_OnMouseEnter) == 0x0000A8, "Wrong size on WBP_HeroPick_HeroListSlot_C_OnMouseEnter");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WBP_HeroPick_HeroListSlot_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdateSelectState
// 0x0001 (0x0001 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdateSelectState final
{
public:
	EHeroCellSelectedType                         SelectedType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdateSelectState) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdateSelectState");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdateSelectState) == 0x000001, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdateSelectState");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateSelectState, SelectedType) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateSelectState::SelectedType' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.SetCharacterOwnerType
// 0x0001 (0x0001 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType final
{
public:
	ECharacterOwnerType                           CharacterOwnerType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType) == 0x000001, "Wrong size on WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType, CharacterOwnerType) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_SetCharacterOwnerType::CharacterOwnerType' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781
// 0x0008 (0x0008 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781) == 0x000008, "Wrong size on WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781, Loaded) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_OnLoaded_F0BEBBAE4B19DBB73C90CFA37E6F6781::Loaded' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE
// 0x0008 (0x0008 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE) == 0x000008, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE) == 0x000008, "Wrong size on WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE, Loaded) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_OnLoaded_05782E4241ACBB4A0309EAA19D8A4EAE::Loaded' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdateUI
// 0x0130 (0x0130 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdateUI final
{
public:
	ECharacterOwnerType                           OwnerType_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         UISelectedType_0;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Local_UIState;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_11;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_12;                             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_15;                             // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_16;                             // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_17;                             // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_18;                             // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_19;                             // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_20;                             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_21;                             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_22;                             // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_23;                             // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_24;                             // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_25;                             // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_26;                             // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_27;                             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_28;                             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_29;                             // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_30;                             // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_31;                             // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_32;                             // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_33;                             // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_34;                             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_35;                             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_36;                             // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_37;                             // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_38;                             // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_7;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_8;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_39;                             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_8;                           // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_40;                             // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_9;                           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_41;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_10;                          // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_42;                             // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroCellSelectedType                         Temp_byte_Variable_43;                             // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_11;                          // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_44;                             // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_45;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_46;                             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_47;                             // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_48;                             // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_49;                             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Temp_byte_Variable_50;                             // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_12;                          // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_13;                          // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdateUI) == 0x000004, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdateUI");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdateUI) == 0x000130, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdateUI");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, OwnerType_0) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::OwnerType_0' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, UISelectedType_0) == 0x000001, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::UISelectedType_0' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Local_UIState) == 0x000002, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Local_UIState' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable) == 0x000003, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_1) == 0x000004, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_2) == 0x000005, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_3) == 0x000006, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_4) == 0x000007, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_5) == 0x000008, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_6) == 0x000009, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_7) == 0x00000A, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_8) == 0x00000B, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_9) == 0x00000C, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default) == 0x00000D, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_10) == 0x00000E, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_11) == 0x00000F, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable) == 0x000014, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_1) == 0x000024, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_2) == 0x000034, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_3) == 0x000044, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_4) == 0x000054, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_5) == 0x000064, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_12) == 0x000074, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_2) == 0x000078, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_13) == 0x000088, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_14) == 0x000089, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_15) == 0x00008A, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_16) == 0x00008B, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_3) == 0x00008C, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_17) == 0x00008D, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_18) == 0x00008E, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_19) == 0x00008F, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_20) == 0x000090, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_21) == 0x000091, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_22) == 0x000092, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_23) == 0x000093, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_4) == 0x000094, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_24) == 0x000095, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_25) == 0x000096, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_26) == 0x000097, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_27) == 0x000098, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_28) == 0x000099, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_28' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_29) == 0x00009A, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_29' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_30) == 0x00009B, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_30' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_5) == 0x00009C, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_31) == 0x00009D, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_31' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_32) == 0x00009E, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_32' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_33) == 0x00009F, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_33' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_34) == 0x0000A0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_34' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_35) == 0x0000A1, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_35' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_36) == 0x0000A2, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_36' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_37) == 0x0000A3, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_37' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_6) == 0x0000A4, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable) == 0x0000A8, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable_1) == 0x0000AC, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable_2) == 0x0000B0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable_3) == 0x0000B4, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable_4) == 0x0000B8, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_int_Variable_5) == 0x0000BC, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_38) == 0x0000C0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_38' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_7) == 0x0000C4, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_6) == 0x0000C8, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_7) == 0x0000D0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_8) == 0x0000D8, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_39) == 0x0000E0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_39' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_8) == 0x0000E4, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_float_Variable) == 0x0000EC, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_float_Variable_1) == 0x0000F0, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_float_Variable_2) == 0x0000F4, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_40) == 0x0000F8, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_40' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_9) == 0x0000FC, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_struct_Variable_9) == 0x000100, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_41) == 0x000110, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_41' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_10) == 0x000114, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_42) == 0x000124, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_42' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_43) == 0x000125, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_43' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_11) == 0x000126, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_44) == 0x000127, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_44' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_45) == 0x000128, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_45' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_46) == 0x000129, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_46' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_47) == 0x00012A, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_47' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_48) == 0x00012B, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_48' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_49) == 0x00012C, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_49' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, Temp_byte_Variable_50) == 0x00012D, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::Temp_byte_Variable_50' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_12) == 0x00012E, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateUI, K2Node_Select_Default_13) == 0x00012F, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateUI::K2Node_Select_Default_13' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.SetOwneType
// 0x0002 (0x0002 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_SetOwneType final
{
public:
	ECharacterOwnerType                           Owner_Type;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterOwnerType                           Local_UIState;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_SetOwneType) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_SetOwneType");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_SetOwneType) == 0x000002, "Wrong size on WBP_HeroPick_HeroListSlot_C_SetOwneType");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetOwneType, Owner_Type) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_SetOwneType::Owner_Type' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetOwneType, Local_UIState) == 0x000001, "Member 'WBP_HeroPick_HeroListSlot_C_SetOwneType::Local_UIState' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdateMask
// 0x0003 (0x0003 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdateMask final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdateMask) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdateMask");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdateMask) == 0x000003, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdateMask");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateMask, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateMask::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateMask, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateMask::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateMask, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateMask::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.UpdateBGColor
// 0x002C (0x002C - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_UpdateBGColor final
{
public:
	ECharacterOwnerType                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor) == 0x000004, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_UpdateBGColor");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor) == 0x00002C, "Wrong size on WBP_HeroPick_HeroListSlot_C_UpdateBGColor");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, Temp_byte_Variable) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, Temp_struct_Variable) == 0x000004, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, K2Node_Select_Default) == 0x000014, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_UpdateBGColor, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'WBP_HeroPick_HeroListSlot_C_UpdateBGColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_HeroPick_HeroListSlot.WBP_HeroPick_HeroListSlot_C.SetConstruction
// 0x0005 (0x0005 - 0x0000)
struct WBP_HeroPick_HeroListSlot_C_SetConstruction final
{
public:
	bool                                          IsConstruction_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HeroPick_HeroListSlot_C_SetConstruction) == 0x000001, "Wrong alignment on WBP_HeroPick_HeroListSlot_C_SetConstruction");
static_assert(sizeof(WBP_HeroPick_HeroListSlot_C_SetConstruction) == 0x000005, "Wrong size on WBP_HeroPick_HeroListSlot_C_SetConstruction");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetConstruction, IsConstruction_0) == 0x000000, "Member 'WBP_HeroPick_HeroListSlot_C_SetConstruction::IsConstruction_0' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetConstruction, Temp_bool_Variable) == 0x000001, "Member 'WBP_HeroPick_HeroListSlot_C_SetConstruction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetConstruction, Temp_byte_Variable) == 0x000002, "Member 'WBP_HeroPick_HeroListSlot_C_SetConstruction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetConstruction, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_HeroPick_HeroListSlot_C_SetConstruction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HeroPick_HeroListSlot_C_SetConstruction, K2Node_Select_Default) == 0x000004, "Member 'WBP_HeroPick_HeroListSlot_C_SetConstruction::K2Node_Select_Default' has a wrong offset!");

}

