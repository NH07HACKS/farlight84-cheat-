#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LunarMariaArea

#include "Basic.hpp"

#include "LunarMariaArea_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class LunarMariaArea.LM_AreaTileData
// 0x0050 (0x0080 - 0x0030)
class ULM_AreaTileData final : public UDataAsset
{
public:
	TMap<class FName, struct FAreaTileLayerData>  LayerTileData;                                     // 0x0030(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LM_AreaTileData">();
	}
	static class ULM_AreaTileData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULM_AreaTileData>();
	}
};
static_assert(alignof(ULM_AreaTileData) == 0x000008, "Wrong alignment on ULM_AreaTileData");
static_assert(sizeof(ULM_AreaTileData) == 0x000080, "Wrong size on ULM_AreaTileData");
static_assert(offsetof(ULM_AreaTileData, LayerTileData) == 0x000030, "Member 'ULM_AreaTileData::LayerTileData' has a wrong offset!");

// Class LunarMariaArea.LM_AreaData_Base
// 0x0020 (0x0050 - 0x0030)
class ULM_AreaData_Base : public UDataAsset
{
public:
	int32                                         ComponentSizeQuads;                                // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumSubsections;                           // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AreaDataID;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LM_AreaData_Base">();
	}
	static class ULM_AreaData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULM_AreaData_Base>();
	}
};
static_assert(alignof(ULM_AreaData_Base) == 0x000008, "Wrong alignment on ULM_AreaData_Base");
static_assert(sizeof(ULM_AreaData_Base) == 0x000050, "Wrong size on ULM_AreaData_Base");
static_assert(offsetof(ULM_AreaData_Base, ComponentSizeQuads) == 0x000030, "Member 'ULM_AreaData_Base::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ULM_AreaData_Base, SubsectionSizeQuads) == 0x000034, "Member 'ULM_AreaData_Base::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULM_AreaData_Base, ComponentNumSubsections) == 0x000038, "Member 'ULM_AreaData_Base::ComponentNumSubsections' has a wrong offset!");
static_assert(offsetof(ULM_AreaData_Base, AreaDataID) == 0x000040, "Member 'ULM_AreaData_Base::AreaDataID' has a wrong offset!");

// Class LunarMariaArea.LM_AreaData
// 0x01C0 (0x0210 - 0x0050)
class ULM_AreaData final : public ULM_AreaData_Base
{
public:
	bool                                          bDataTableDirty;                                   // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULandscapeInfo*                         LandscapeInfo;                                     // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsProcessArea;                                     // 0x0060(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FIntPoint, class ULM_AreaTileData*> AreaTileData;                                    // 0x0068(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAreaLayerData>      LayerTextures;                                     // 0x00B8(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAreaGroupSet>       GroupSettings;                                     // 0x0108(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        DecalDisplayColorSettings;                         // 0x0158(0x0050)(Edit, NativeAccessSpecifierPublic)
	class UScriptStruct*                          AreaAttributeStruct;                               // 0x01A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FinalAreaAttributeDataTable;                       // 0x01B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x58];                                     // 0x01B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LM_AreaData">();
	}
	static class ULM_AreaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULM_AreaData>();
	}
};
static_assert(alignof(ULM_AreaData) == 0x000008, "Wrong alignment on ULM_AreaData");
static_assert(sizeof(ULM_AreaData) == 0x000210, "Wrong size on ULM_AreaData");
static_assert(offsetof(ULM_AreaData, bDataTableDirty) == 0x000050, "Member 'ULM_AreaData::bDataTableDirty' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, LandscapeInfo) == 0x000058, "Member 'ULM_AreaData::LandscapeInfo' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, IsProcessArea) == 0x000060, "Member 'ULM_AreaData::IsProcessArea' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, AreaTileData) == 0x000068, "Member 'ULM_AreaData::AreaTileData' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, LayerTextures) == 0x0000B8, "Member 'ULM_AreaData::LayerTextures' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, GroupSettings) == 0x000108, "Member 'ULM_AreaData::GroupSettings' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, DecalDisplayColorSettings) == 0x000158, "Member 'ULM_AreaData::DecalDisplayColorSettings' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, AreaAttributeStruct) == 0x0001A8, "Member 'ULM_AreaData::AreaAttributeStruct' has a wrong offset!");
static_assert(offsetof(ULM_AreaData, FinalAreaAttributeDataTable) == 0x0001B0, "Member 'ULM_AreaData::FinalAreaAttributeDataTable' has a wrong offset!");

}

