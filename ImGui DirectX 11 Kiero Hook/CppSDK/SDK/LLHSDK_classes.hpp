#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LLHSDK

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "LLHSDK_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LLHSDK.LLHSDKAppUtils
// 0x0010 (0x0038 - 0x0028)
class ULLHSDKAppUtils final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& SteamId, bool IsFriend, bool Online, const class FString& FriendName)> OnSteamUserStatesUpdate; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void BindOnlineSubsystemSteamPresence();
	static void DestoryInstance();
	static void DismissSteamVirtualKeyboard();
	static bool DoesDistributeForDomestic();
	static class FString GetAppID();
	static class FString GetAppIDRaw();
	static class FString GetAppName();
	static class FString GetBiosUUID();
	static class FString GetChannelID();
	static class FString GetCommunityEnvId(bool bIsDebug);
	static class FString GetDeviceUUID();
	static EDistributionChannel GetDistributionChannel();
	static class FString GetEnvId();
	static class FString GetGameID();
	static int64 GetGameTime();
	static class ULLHSDKAppUtils* GetInstance();
	static class FString GetOperatingSystemId();
	static class FString GetPSPAppID();
	static class FString GetRunningProcessName();
	static class FString GetSDKAppId();
	static class FString GetSDKVersionCode();
	static class FString GetSDKVersionName();
	static int32 GetSteamFriendCount();
	static TArray<class FString> GetSteamFriendIDList();
	static class FString GetSteamFriendName(const class FString& SteamId);
	static TArray<class FString> GetSteamFriendsNameList();
	static TArray<bool> GetSteamFriendsOnlineList();
	static class FString GetSteamID();
	static class FString GetVersionCode();
	static class FString GetVersionName();
	static bool InviteSteamUserToGame(const class FString& SteamId);
	static bool IsEarlyRelease();
	static bool IsGrayRelease();
	static bool IsNewCheckoutCounter();
	static bool IsPackageInstalled(const class FString& InPackageName);
	static bool IsPlatformSteamDeck();
	static bool IsSimulator();
	static bool IsSteamFriendOnline(const class FString& SteamId);
	static bool SDKConfigIsDebug();
	static bool SDKConfigIsMultiDetect();
	static bool ShowSteamVirtualKeyboard();
	static bool SupportBothArmAndX86();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKAppUtils">();
	}
	static class ULLHSDKAppUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKAppUtils>();
	}
};
static_assert(alignof(ULLHSDKAppUtils) == 0x000008, "Wrong alignment on ULLHSDKAppUtils");
static_assert(sizeof(ULLHSDKAppUtils) == 0x000038, "Wrong size on ULLHSDKAppUtils");
static_assert(offsetof(ULLHSDKAppUtils, OnSteamUserStatesUpdate) == 0x000028, "Member 'ULLHSDKAppUtils::OnSteamUserStatesUpdate' has a wrong offset!");

// Class LLHSDK.LLHSDKCommunity
// 0x00B0 (0x00D8 - 0x0028)
class ULLHSDKCommunity final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& ResultStr)> OnInitCommunity;                  // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ResultStr)> OnExitCommunity;                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ResultStr)> OnGetCommunityRedhint;            // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ResultStr)> OnClearCommunityRedhint;          // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess)> OnImageDownload;                                   // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnForumClosed;                                     // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnForumOpen;                                       // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNeedBindAccount;                                 // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRedPointShow;                                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRedPointDismiss;                                 // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& JsonStr)> OnReceiveNotification;              // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void ClearCommunityRedHint(const class FString& URL, const class FString& ReqMethod, const class FString& ExtraHttpParams);
	static void CommunitySendBindResult();
	static void DestoryInstance();
	static void DownloadImage(const class FString& URL, const class FString& FilePath);
	static void ExitCommunity(const class FString& URL, const class FString& ReqMethod, const class FString& ExtraHttpParams);
	static void GetCommunityRedHint(const class FString& URL, const class FString& ReqMethod, const class FString& ExtraHttpParams);
	static class ULLHSDKCommunity* GetInstance();
	static void HideCommunity();
	static void InitCommunityConfig(const class FString& UrlInfo, const class FString& ReqMethod, const class FString& ExtraHttpParams);
	static void LoginCommunity(const class FString& InLoginParamsJsonStr);
	static void ShowCommunity(const class FString& InUrl, const class FString& InExtraInfo, const ELLHForumSDKOrientationMode InOrientationMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKCommunity">();
	}
	static class ULLHSDKCommunity* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKCommunity>();
	}
};
static_assert(alignof(ULLHSDKCommunity) == 0x000008, "Wrong alignment on ULLHSDKCommunity");
static_assert(sizeof(ULLHSDKCommunity) == 0x0000D8, "Wrong size on ULLHSDKCommunity");
static_assert(offsetof(ULLHSDKCommunity, OnInitCommunity) == 0x000028, "Member 'ULLHSDKCommunity::OnInitCommunity' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnExitCommunity) == 0x000038, "Member 'ULLHSDKCommunity::OnExitCommunity' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnGetCommunityRedhint) == 0x000048, "Member 'ULLHSDKCommunity::OnGetCommunityRedhint' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnClearCommunityRedhint) == 0x000058, "Member 'ULLHSDKCommunity::OnClearCommunityRedhint' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnImageDownload) == 0x000068, "Member 'ULLHSDKCommunity::OnImageDownload' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnForumClosed) == 0x000078, "Member 'ULLHSDKCommunity::OnForumClosed' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnForumOpen) == 0x000088, "Member 'ULLHSDKCommunity::OnForumOpen' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnNeedBindAccount) == 0x000098, "Member 'ULLHSDKCommunity::OnNeedBindAccount' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnRedPointShow) == 0x0000A8, "Member 'ULLHSDKCommunity::OnRedPointShow' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnRedPointDismiss) == 0x0000B8, "Member 'ULLHSDKCommunity::OnRedPointDismiss' has a wrong offset!");
static_assert(offsetof(ULLHSDKCommunity, OnReceiveNotification) == 0x0000C8, "Member 'ULLHSDKCommunity::OnReceiveNotification' has a wrong offset!");

// Class LLHSDK.LLHSDKCustomerService
// 0x0058 (0x0080 - 0x0028)
class ULLHSDKCustomerService final : public UObject
{
public:
	TMulticastInlineDelegate<void(int32 NotificationType)> OnReceiveNotification;                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& CallbackData)> OnPSPConfig;                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& CallbackData)> OnPSPUrlGet;                   // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& CallbackData)> OnPSPBadgeGet;                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& CallbackData)> OnPSPAccountCloseUrlGet;       // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void DestoryInstance();
	static class ULLHSDKCustomerService* GetInstance();
	static void PSPAccountCloseUrlGet();
	static void PSPBadgeGet();
	static void PSPBadgeGuestGet();
	static void PSPConfig(const class FString& Params_0);
	static void PSPUrlGet();
	static void PSPUrlGuestGet();
	static void SetCustomerServiceDebug(const bool bIsPspDebug);
	static void ShowCustomerServicePage(const class FString& ExtInfoStr);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKCustomerService">();
	}
	static class ULLHSDKCustomerService* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKCustomerService>();
	}
};
static_assert(alignof(ULLHSDKCustomerService) == 0x000008, "Wrong alignment on ULLHSDKCustomerService");
static_assert(sizeof(ULLHSDKCustomerService) == 0x000080, "Wrong size on ULLHSDKCustomerService");
static_assert(offsetof(ULLHSDKCustomerService, OnReceiveNotification) == 0x000028, "Member 'ULLHSDKCustomerService::OnReceiveNotification' has a wrong offset!");
static_assert(offsetof(ULLHSDKCustomerService, OnPSPConfig) == 0x000040, "Member 'ULLHSDKCustomerService::OnPSPConfig' has a wrong offset!");
static_assert(offsetof(ULLHSDKCustomerService, OnPSPUrlGet) == 0x000050, "Member 'ULLHSDKCustomerService::OnPSPUrlGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKCustomerService, OnPSPBadgeGet) == 0x000060, "Member 'ULLHSDKCustomerService::OnPSPBadgeGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKCustomerService, OnPSPAccountCloseUrlGet) == 0x000070, "Member 'ULLHSDKCustomerService::OnPSPAccountCloseUrlGet' has a wrong offset!");

// Class LLHSDK.LLHSDKDeviceUtils
// 0x0020 (0x0048 - 0x0028)
class ULLHSDKDeviceUtils final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& GoogleAdID)> OnGoogleAdID;                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 DeviceScore)> OnDeviceScore;                                 // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	static void DestoryInstance();
	static class FString GetAdID();
	static class FString GetAndroidID();
	static class FString GetAvailableRAM();
	static class FString GetCPUHardWareName();
	static class FString GetCPUModel();
	static class FString GetDeviceAbi();
	static class FString GetDeviceBrand();
	static class FString GetDeviceCarrier();
	static class FString GetDeviceID();
	static class FString GetDeviceModel();
	static void GetDeviceScore();
	static class FString GetDeviceType();
	static TArray<float> GetDisplayCutout();
	static TArray<float> GetDisplayMetrics();
	static void GetGoogleAdID();
	static class FString GetIDFA();
	static class FString GetIMSI();
	static class ULLHSDKDeviceUtils* GetInstance();
	static class FString GetLogicalPackageName();
	static class FString GetMacAddress();
	static class FString GetNetworkType();
	static ELLHSDKNetworkType GetNetworkTypeEnum();
	static class FString GetOSVersion();
	static class FString GetSerialNumber();
	static class FString GetTimezoneName();
	static class FString GetTotalMemorySize();
	static class FString GetTotalRAM();
	static bool IsEmulator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKDeviceUtils">();
	}
	static class ULLHSDKDeviceUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKDeviceUtils>();
	}
};
static_assert(alignof(ULLHSDKDeviceUtils) == 0x000008, "Wrong alignment on ULLHSDKDeviceUtils");
static_assert(sizeof(ULLHSDKDeviceUtils) == 0x000048, "Wrong size on ULLHSDKDeviceUtils");
static_assert(offsetof(ULLHSDKDeviceUtils, OnGoogleAdID) == 0x000028, "Member 'ULLHSDKDeviceUtils::OnGoogleAdID' has a wrong offset!");
static_assert(offsetof(ULLHSDKDeviceUtils, OnDeviceScore) == 0x000038, "Member 'ULLHSDKDeviceUtils::OnDeviceScore' has a wrong offset!");

// Class LLHSDK.LLHSDKLocalization
// 0x0000 (0x0028 - 0x0028)
class ULLHSDKLocalization final : public UObject
{
public:
	static void DestoryInstance();
	static class ULLHSDKLocalization* GetInstance();
	static ELLHSDKSupportedLanguage GetLocaleEnum();
	static struct FLLHSDKLocaleInfo GetLocaleInfo();
	static class FString GetLocaleName();
	static void SetLocale(ELLHSDKSupportedLanguage InLocale);
	static void SetLocaleName(const class FString& InLocale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKLocalization">();
	}
	static class ULLHSDKLocalization* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKLocalization>();
	}
};
static_assert(alignof(ULLHSDKLocalization) == 0x000008, "Wrong alignment on ULLHSDKLocalization");
static_assert(sizeof(ULLHSDKLocalization) == 0x000028, "Wrong size on ULLHSDKLocalization");

// Class LLHSDK.LLHSDKLogin
// 0x0240 (0x0268 - 0x0028)
class ULLHSDKLogin final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode)> OnInitFinish;                     // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& AppUid, const class FString& AppToken, ELLHSDKLoginType LoginType)> OnLoginFinish; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELLHSDKLoginType LoginType, int32 Errorcode)> OnLoginFailed;       // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bSuccess, const class FString& AppUid, const class FString& AppToken, ELLHSDKLoginType LoginType)> OnBindFinish; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& AppUid, const class FString& AppToken, ELLHSDKLoginType LoginType)> OnSwitchAccountFinish; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELLHSDKLoginType LoginType, int32 Errorcode)> OnSwitchAccountFailed; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimSteamSDKInited;                  // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamAutoLogin;                     // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamRegister;                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnGetSteamRegisterUrl;                // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnGetThirdPartyLoginResult;           // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGetVerifyAccountResults;                         // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamBindUrlGet;                    // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamLoginResultSet;                // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamGetAccountInfo;                // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamBindFinish;                    // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamEulaChanged;                   // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamEulaUrlGet;                    // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamEulaConfirm;                   // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamRealNameCheck;                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamRealNameUrlGet;                // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamRealNameResultSet;             // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamAntiAddHeartbeatCheck;         // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSteamAntiAddHeartbeat;              // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnNSSDKInited;                        // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnNSLoginStart;                       // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnNSAccountInfoGet;                   // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKInited;                     // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKEventCallback;              // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKLogin;                      // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKLogout;                     // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKOpenAccountPage;            // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKOpenSwitchAccountPage;      // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKLanguageChange;             // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKGetUserInfo;                // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bConfirmed)> OnProtocolClick;                                 // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void CancelSteamCallBack();
	static bool CanContinueLogin();
	static int32 ChangeLIMPCLanguage(const class FString& Params_0);
	static bool ClearAutoLogin();
	static void DestoryInstance();
	static bool DoSteamBind(const class FString& URL);
	static void FreeLimPCSDK();
	static class ULLHSDKLogin* GetInstance();
	static int32 GetLimPCUserInfo(const class FString& Params_0);
	static bool GetSteamRegisterUrl(const class FString& Params_0);
	static class FString GetSteamToken();
	static int32 InitLimPCSDK(const class FString& Params_0);
	static bool InitLimSteamSDK(const class FString& Params_0);
	static bool InitNSSDK(const class FString& Params_0);
	static bool IsCurrentUserNewReg();
	static bool IsInitFinish();
	static void Login();
	static int32 LoginLimPCSDK(const class FString& Params_0);
	static class FString LoginUser_ToString(const struct FLLHSDKLoginUser& InUser);
	static class FString LoginUserInfo_ToString(const struct FLLHSDKLoginUserInfo& InUserInfo);
	static void LogOut();
	static int32 LogoutLimPCSDK();
	static void MobileSDKInit();
	static bool NSAccountInfoGet(const class FString& Params_0);
	static void NSFinalize();
	static bool NSLoginStart(const class FString& Params_0);
	static void NSLogout();
	static int32 OpenLIMPCAccountPage(const class FString& Params_0);
	static int32 OpenLIMPCSwitchAccPage();
	static bool OpenSteamBindPage(const class FString& URL);
	static struct FLLHSDKLoginUser QueryCurrentUser();
	static struct FLLHSDKLoginUserInfo QueryCurrentUserInfo();
	static int32 SetLimPCSDKEventHandler();
	static int32 SetLimPCSDKLogHandler();
	static void SetShowCustomDialog(const bool bEnable);
	static void ShowProtocolViewV2Confirm();
	static void ShowProtocolViewV2Ok();
	static void ShowSwitchView();
	static void ShowSystemToast(const class FString& Content, const int32 Duration, const float Alpha);
	static void StartBindPhone();
	static void SteamAntiAddHeartbeat();
	static void SteamAntiAddHeartbeatCheck();
	static bool SteamAutoLogin(const class FString& Params_0);
	static bool SteamBindUrlGet(const class FString& Params_0);
	static void SteamEULACheck();
	static void SteamEulaConfirm(const class FString& Params_0);
	static void SteamEULAUrlGet();
	static void SteamFree();
	static bool SteamGetAccountInfo(const class FString& Params_0);
	static bool SteamLoginResultSet(const class FString& Params_0);
	static void SteamRealNameCheck();
	static void SteamRealNameResultSet(const class FString& Params_0);
	static void SteamRealNameUrlGet();
	static bool SteamRegister(const class FString& Params_0);
	static void SwitchOrLinkAccount();
	static void UpdateSteamCallBack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKLogin">();
	}
	static class ULLHSDKLogin* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKLogin>();
	}
};
static_assert(alignof(ULLHSDKLogin) == 0x000008, "Wrong alignment on ULLHSDKLogin");
static_assert(sizeof(ULLHSDKLogin) == 0x000268, "Wrong size on ULLHSDKLogin");
static_assert(offsetof(ULLHSDKLogin, OnInitFinish) == 0x000028, "Member 'ULLHSDKLogin::OnInitFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLoginFinish) == 0x000038, "Member 'ULLHSDKLogin::OnLoginFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLoginFailed) == 0x000048, "Member 'ULLHSDKLogin::OnLoginFailed' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnBindFinish) == 0x000058, "Member 'ULLHSDKLogin::OnBindFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSwitchAccountFinish) == 0x000068, "Member 'ULLHSDKLogin::OnSwitchAccountFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSwitchAccountFailed) == 0x000078, "Member 'ULLHSDKLogin::OnSwitchAccountFailed' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimSteamSDKInited) == 0x000088, "Member 'ULLHSDKLogin::OnLimSteamSDKInited' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamAutoLogin) == 0x000098, "Member 'ULLHSDKLogin::OnSteamAutoLogin' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamRegister) == 0x0000A8, "Member 'ULLHSDKLogin::OnSteamRegister' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnGetSteamRegisterUrl) == 0x0000B8, "Member 'ULLHSDKLogin::OnGetSteamRegisterUrl' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnGetThirdPartyLoginResult) == 0x0000C8, "Member 'ULLHSDKLogin::OnGetThirdPartyLoginResult' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnGetVerifyAccountResults) == 0x0000D8, "Member 'ULLHSDKLogin::OnGetVerifyAccountResults' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamBindUrlGet) == 0x0000E8, "Member 'ULLHSDKLogin::OnSteamBindUrlGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamLoginResultSet) == 0x0000F8, "Member 'ULLHSDKLogin::OnSteamLoginResultSet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamGetAccountInfo) == 0x000108, "Member 'ULLHSDKLogin::OnSteamGetAccountInfo' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamBindFinish) == 0x000118, "Member 'ULLHSDKLogin::OnSteamBindFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamEulaChanged) == 0x000128, "Member 'ULLHSDKLogin::OnSteamEulaChanged' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamEulaUrlGet) == 0x000138, "Member 'ULLHSDKLogin::OnSteamEulaUrlGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamEulaConfirm) == 0x000148, "Member 'ULLHSDKLogin::OnSteamEulaConfirm' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamRealNameCheck) == 0x000158, "Member 'ULLHSDKLogin::OnSteamRealNameCheck' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamRealNameUrlGet) == 0x000168, "Member 'ULLHSDKLogin::OnSteamRealNameUrlGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamRealNameResultSet) == 0x000178, "Member 'ULLHSDKLogin::OnSteamRealNameResultSet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamAntiAddHeartbeatCheck) == 0x000188, "Member 'ULLHSDKLogin::OnSteamAntiAddHeartbeatCheck' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnSteamAntiAddHeartbeat) == 0x000198, "Member 'ULLHSDKLogin::OnSteamAntiAddHeartbeat' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnNSSDKInited) == 0x0001A8, "Member 'ULLHSDKLogin::OnNSSDKInited' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnNSLoginStart) == 0x0001B8, "Member 'ULLHSDKLogin::OnNSLoginStart' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnNSAccountInfoGet) == 0x0001C8, "Member 'ULLHSDKLogin::OnNSAccountInfoGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKInited) == 0x0001D8, "Member 'ULLHSDKLogin::OnLimPCSDKInited' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKEventCallback) == 0x0001E8, "Member 'ULLHSDKLogin::OnLimPCSDKEventCallback' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKLogin) == 0x0001F8, "Member 'ULLHSDKLogin::OnLimPCSDKLogin' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKLogout) == 0x000208, "Member 'ULLHSDKLogin::OnLimPCSDKLogout' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKOpenAccountPage) == 0x000218, "Member 'ULLHSDKLogin::OnLimPCSDKOpenAccountPage' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKOpenSwitchAccountPage) == 0x000228, "Member 'ULLHSDKLogin::OnLimPCSDKOpenSwitchAccountPage' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKLanguageChange) == 0x000238, "Member 'ULLHSDKLogin::OnLimPCSDKLanguageChange' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnLimPCSDKGetUserInfo) == 0x000248, "Member 'ULLHSDKLogin::OnLimPCSDKGetUserInfo' has a wrong offset!");
static_assert(offsetof(ULLHSDKLogin, OnProtocolClick) == 0x000258, "Member 'ULLHSDKLogin::OnProtocolClick' has a wrong offset!");

// Class LLHSDK.LLHSDKMisc
// 0x0218 (0x0240 - 0x0028)
class ULLHSDKMisc final : public UObject
{
public:
	TMulticastInlineDelegate<void()>              OnBrowserClosed;                                   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnInternalBrowserOpen;                             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& FullPath)> OnScreenshotCaptured;              // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& FilePath, bool bSuccess)> OnFacebookPhotoShared; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bSuccess)> OnSystemShared;                                    // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Result, const class FString& Token, const class FString& ApplicationId, const class FString& UserId, const class FString& GraphDomain)> OnGetFacebookToken; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Success, int32 Errorcode, const TArray<struct FSDKSocialUserInfo>& SocialUserInfoList)> OnQueryThirdPartyUserInfo; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& FirebaseToken)> OnRefreshFirebaseToken;       // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& JiguangToken)> OnRefreshJiguangToken;         // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& Type, const class FString& Ret)> OnHttpDiagnosisCallBack; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Type, const class FString& Ret)> OnPingDiagnosisCallBack; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Type, const class FString& Ret)> OnTcpPingDiagnosisCallBack; // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Type, const class FString& Ret)> OnMtrDiagnosisCallBack; // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Type, const class FString& Ret)> OnDnsDiagnosisCallBack; // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCOpenWebview;                  // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCCloseWebview;                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnDeepLinkResolved;                  // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PickFilePath, int32 Errorcode)> OnPickFileFromAlbumCallBack; // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCNetworkDiagnosisInited;       // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCNetworkDiagnosisExecute;      // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCNetworkDiagnosisExtensionUpdate; // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnabled)> OnWifiStateChanged;                                // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 TotalSize, int32 DownloadedSize)> OnApkDownloading;          // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnApkDownloadFinish;                               // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& ErrorInfo)> OnApkDownloadError;               // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode)> OnDomesticShareFinish;            // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode)> OnThirdPartyShareFinish;          // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, const class FString& Msg, const class FString& ExtraMsg)> OnAccountVerificationFinish; // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode)> OnCollegeVerificationFinish;      // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Params)> OnLimPCOpenPage;                     // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void BrocastApkDownloadErrorEventOnGameThread(const class FString& Error);
	static void BrocastApkDownloadFinishEventOnGameThread();
	static void BrocastApkDownloadingEventOnGameThread(int32 TotalSize, int32 DownloadedSize);
	static void BrocastWifiStateChangedEventOnGameThread(bool bWifiEnabled);
	static bool CheckGyroSensorSupport();
	static void ClearDeepLinkParams();
	static void CloseLimPCWebPageAll();
	static void DestoryInstance();
	static void DnsDetect(const class FString& InServer, const class FString& InDomain);
	static void ExecuteLimPCNetworkDiagnosis(const class FString& Params_0);
	static void FacebookShareLink(const class FString& InLinkURL, const class FString& InPreviewURL, const class FString& InTitle, const class FString& InDesc);
	static void FacebookSharePhoto();
	static void FacebookSharePhotoByPath(const class FString& InFilePath);
	static void FacebookSharePhotoWithFileAndDescription(const class FString& Description, const class FString& FilePath);
	static void FreeLimPCNetworkDiagnosis();
	static int32 GetAndroidAPILevel();
	static class FString GetChannelIdOfThirdPartyChannel();
	static class FString GetChannelName();
	static class FString GetDapInfo();
	static class FString GetDeepLinkParams();
	static void GetFacebookToken();
	static class FString GetFirebaseMessagingToken();
	static class FString GetForceUpdateUrl(const class FString& Version);
	static class ULLHSDKMisc* GetInstance();
	static class FString GetJiguangMessagingToken();
	static class FString GetLimPCPluginsDir();
	static class FString GetNetworkDiagnosisDeviceID();
	static int32 GetTypeOfThirdPartyChannel();
	static class FString GetUniSDKVersionOfThirdPartyChannel();
	static void HttpDetect(const class FString& InUrl);
	static void InitLimPCNetworkDiagnosis(const class FString& Params_0);
	static void InitNetworkDiagnosis(const class FString& InProject, const class FString& InSecretKey, const class FString& InEndPoint, const class FString& InAccessKeyId, const class FString& InAccessKeySecret, const class FString& InUid, const class FString& InChannel);
	static void InitWeibo();
	static bool IsAndroidNotificationEnabled();
	static bool IsAppRooted();
	static bool IsEnableIPAPCSDK();
	static bool IsFacebookShareable();
	static bool IsInstallSocialApp(const ELLHSDKSocialPlatform SocialPlatform);
	static bool IsUsedPCSDK();
	static bool IsUsedSteamSDK();
	static void JumpToAppStore(const class FString& AppStoreUrl);
	static void JumpToMarket(const class FString& InAppPkg, const class FString& InMarketPkg);
	static void MtrDetect(const class FString& InDomain);
	static void OpenAppSettingPage();
	static void OpenLimPCPage(const class FString& Params_0);
	static void OpenLimPCWebPage(const class FString& Params_0);
	static void OpenSteamPayWebPage(const class FString& URL);
	static void PickFileFromAlbum();
	static void PingDetect(const class FString& InDomain);
	static void QQShareDefault(const class FString& TargetUrl, const class FString& Title, const class FString& Summary, const class FString& ImageUrl, const class FString& BackAppName, int32 ExtInt);
	static void QQSharePhoto(const class FString& LocalUrl, const class FString& BackAppName, int32 ExtInt);
	static void QueryThirdPartUserInfo();
	static void RefreshAndroidMediaScanner(const class FString& InFullFilePath);
	static void RefreshFirebaseMessagingToken();
	static void RefreshJiguangMessagingToken();
	static void RequestReviewInApp();
	static void RestartApplication(const class FString& IntentString);
	static void SetNetworkDiagnosisDeviceID(const class FString& InDeviceID);
	static void SetNetworkMultipleDetect(bool InEnable);
	static void SetNetworkPolicyDomain(const class FString& InDomain);
	static void ShowAccountVerification(const ELLHSDKAccountVerificationType InAccountVerificationType, const class FString& InAccountVerificationParams);
	static void ShowCollegeVerification();
	static void ShowCommonWebView(const class FString& InJsonParamsStr);
	static void ShowPersonalInfo(const TArray<class FString>& InParams);
	static void ShowThirdShareInfo();
	static void StartBrowser(const class FString& URL, const class FString& Title);
	static void StartBrowserWithOrientation(const class FString& URL, const class FString& Title, ELLHSDKScreenOrientation Orientation);
	static void StartDownloadApk(const class FString& URL, const class FString& ApkName, const class FString& ApkMD5, bool bAutoInstall, bool bSupportBreakDownload);
	static void StartIOSFarlightBrowserWithOrientation(const class FString& URL, const class FString& Title, ELLHSDKScreenOrientation Orientation);
	static void StartMiniProgram(const class FString& InMiniProgramId, const class FString& InMiniProgramPath, const class FString& InExt, const class FString& InVersion);
	static void StartReceiveWifiStateChangeEvent();
	static void SystemShare(const int32& ShareType, const class FString& Description, const class FString& FilePath);
	static void TcpPingDetect(const class FString& InDomain, int32 Port);
	static void ThirdPartyShare(const ELLHSDKThirdPartyShareScene InShareScene, const ELLHSDKThirdPartyShareType InShareType, const TArray<class FString>& InShareParams);
	static void TryToEnableAndroidNotification();
	static void TwitterSharePhoto(const class FString& InText, const class FString& InFilePath);
	static void TwitterShareText(const class FString& InText);
	static void UpdateLimPCNetworkDiagnosisExtension(const class FString& Params_0);
	static void UpdateNetworkExtensions(const class FString& InPlayerID, const class FString& InDeviceID);
	static void WechatSharePhoto(int32 ShareType, const class FString& LocalUrl);
	static void WechatShareVideo(int32 ShareType, const class FString& Title, const class FString& Desc, const class FString& VideoUrl);
	static void WeiboSharePhoto(const class FString& ImageUrl);
	static void WeiboShareWithText(const class FString& Desc, const class FString& ImageUrl, const class FString& VideoUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKMisc">();
	}
	static class ULLHSDKMisc* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKMisc>();
	}
};
static_assert(alignof(ULLHSDKMisc) == 0x000008, "Wrong alignment on ULLHSDKMisc");
static_assert(sizeof(ULLHSDKMisc) == 0x000240, "Wrong size on ULLHSDKMisc");
static_assert(offsetof(ULLHSDKMisc, OnBrowserClosed) == 0x000028, "Member 'ULLHSDKMisc::OnBrowserClosed' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnInternalBrowserOpen) == 0x000038, "Member 'ULLHSDKMisc::OnInternalBrowserOpen' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnScreenshotCaptured) == 0x000048, "Member 'ULLHSDKMisc::OnScreenshotCaptured' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnFacebookPhotoShared) == 0x000060, "Member 'ULLHSDKMisc::OnFacebookPhotoShared' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnSystemShared) == 0x000078, "Member 'ULLHSDKMisc::OnSystemShared' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnGetFacebookToken) == 0x000090, "Member 'ULLHSDKMisc::OnGetFacebookToken' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnQueryThirdPartyUserInfo) == 0x0000A8, "Member 'ULLHSDKMisc::OnQueryThirdPartyUserInfo' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnRefreshFirebaseToken) == 0x0000C0, "Member 'ULLHSDKMisc::OnRefreshFirebaseToken' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnRefreshJiguangToken) == 0x0000D8, "Member 'ULLHSDKMisc::OnRefreshJiguangToken' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnHttpDiagnosisCallBack) == 0x0000F0, "Member 'ULLHSDKMisc::OnHttpDiagnosisCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnPingDiagnosisCallBack) == 0x000100, "Member 'ULLHSDKMisc::OnPingDiagnosisCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnTcpPingDiagnosisCallBack) == 0x000110, "Member 'ULLHSDKMisc::OnTcpPingDiagnosisCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnMtrDiagnosisCallBack) == 0x000120, "Member 'ULLHSDKMisc::OnMtrDiagnosisCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnDnsDiagnosisCallBack) == 0x000130, "Member 'ULLHSDKMisc::OnDnsDiagnosisCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCOpenWebview) == 0x000140, "Member 'ULLHSDKMisc::OnLimPCOpenWebview' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCCloseWebview) == 0x000150, "Member 'ULLHSDKMisc::OnLimPCCloseWebview' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnDeepLinkResolved) == 0x000160, "Member 'ULLHSDKMisc::OnDeepLinkResolved' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnPickFileFromAlbumCallBack) == 0x000170, "Member 'ULLHSDKMisc::OnPickFileFromAlbumCallBack' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCNetworkDiagnosisInited) == 0x000180, "Member 'ULLHSDKMisc::OnLimPCNetworkDiagnosisInited' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCNetworkDiagnosisExecute) == 0x000190, "Member 'ULLHSDKMisc::OnLimPCNetworkDiagnosisExecute' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCNetworkDiagnosisExtensionUpdate) == 0x0001A0, "Member 'ULLHSDKMisc::OnLimPCNetworkDiagnosisExtensionUpdate' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnWifiStateChanged) == 0x0001B0, "Member 'ULLHSDKMisc::OnWifiStateChanged' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnApkDownloading) == 0x0001C0, "Member 'ULLHSDKMisc::OnApkDownloading' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnApkDownloadFinish) == 0x0001D0, "Member 'ULLHSDKMisc::OnApkDownloadFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnApkDownloadError) == 0x0001E0, "Member 'ULLHSDKMisc::OnApkDownloadError' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnDomesticShareFinish) == 0x0001F0, "Member 'ULLHSDKMisc::OnDomesticShareFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnThirdPartyShareFinish) == 0x000200, "Member 'ULLHSDKMisc::OnThirdPartyShareFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnAccountVerificationFinish) == 0x000210, "Member 'ULLHSDKMisc::OnAccountVerificationFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnCollegeVerificationFinish) == 0x000220, "Member 'ULLHSDKMisc::OnCollegeVerificationFinish' has a wrong offset!");
static_assert(offsetof(ULLHSDKMisc, OnLimPCOpenPage) == 0x000230, "Member 'ULLHSDKMisc::OnLimPCOpenPage' has a wrong offset!");

// Class LLHSDK.LLHSDKPay
// 0x0168 (0x0190 - 0x0028)
class ULLHSDKPay final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, int32 Price, const class FString& ItemID, ELLHSDKPayType PayType)> OnGooglePayFinished; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, const class FString& ItemsDetailListJsonString)> OnGoogleQuerySkuItemDetails; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, const class FString& ItemsDetailListJsonString)> OnGoogleQuerySkuItemDetailsSubscription; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class FString>& Skus)> OnGetGoogleConsumeGoods;       // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class FString>& Skus)> OnGetGoogleConsumePointsGoods; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLLHSDKGenericSkuItemsDetailList& ItemsDetailList, const TArray<class FString>& InvalidProductIDs)> OnIOSQuerySkus; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, const class FString& ErrorMsg, int32 PayValue, const class FString& ProductID, ELLHSDKPayType PayType)> OnIOSLLHPayFinished; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& AppUid, const class FString& ProductID)> OnGetIOSPurchaseExtNull; // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, int32 Errorcode, int32 Price, const class FString& ItemID, ELLHSDKPayType PayType)> OnAndroidDomesticPayFinished; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLSteamQuerySkus;                    // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLSteamSDKPayApplied;                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCQueryPriceLadder;              // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCQueryPriceLadderWithRegion;    // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCPayApplied;                    // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCThirdPartyCheckoutCounterItemsGet; // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCThirdPartyCheckoutCounterItemsPay; // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSwitchSDKPayGetConsumables;         // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSwitchSDKPayGetConsumableItems;     // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSwitchSDKPayEShopOpen;              // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSwitchSDKPayOrdersCheck;            // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnSwitchSDKPayOrdersConsume;          // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x18];                                     // 0x0178(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AndroidDomestic_StartPay(const int32 PayValue, const class FString& PayName, const class FString& PayDesc, const class FString& PayContext);
	static void DestoryInstance();
	static class ULLHSDKPay* GetInstance();
	static void Google_ConsumeGoods(const TArray<class FString>& Skus, const TArray<class FString>& Contexts);
	static TArray<class FString> Google_GetConsumeGoods();
	static TArray<class FString> Google_GetConsumePointsGoods();
	static bool Google_HasConsumeGoods();
	static bool Google_HasConsumePointsGoods();
	static void Google_QuerySkuItemDetails(const TArray<class FString>& Items);
	static void Google_QuerySkuItemDetailsSubscription(const TArray<class FString>& Items);
	static void Google_StartPay(const class FString& PayItemID, const class FString& PayContext);
	static void Google_StartPaySubscription(const class FString& PayItemID, const class FString& PayContext);
	static bool IOS_GetAutoPayExt();
	static void IOS_LLHPay(const class FString& ProductID, const class FString& PayExt);
	static void IOS_QuerySkus(const TArray<class FString>& ProductIDs);
	static void IOS_SetAutoPayExt(bool bEnabled);
	static void IOS_SetUserPayExt(const class FString& PayExt);
	static void IOS_SetUserPayExtInCallback(const class FString& ProductID, const class FString& PayExt);
	static void LimPCQueryPriceLadder();
	static void LimPCQueryPriceLadderV2(const class FString& Params_0);
	static void LimPCQueryPriceLadderWithRegion(const class FString& Params_0);
	static void LimPCStartPay(const class FString& Params_0);
	static void LimPCThirdPartyCheckoutCounterItemsGet(const class FString& Params_0);
	static void LimPCThirdPartyCheckoutCounterItemsPay(const class FString& Params_0);
	static void SetPayNotifyUrl(const class FString& InNotifyUrl);
	static void Steam_StartPay(const class FString& SteamPayInfo);
	static void SteamQuerySkus(const class FString& Params_0);
	static void SteamQuerySkusV2(const class FString& Params_0);
	static void SteamStartPayV2(const class FString& SteamPayInfo);
	static void Switch_EShopOpen(const class FString& Params_0);
	static void Switch_GetConsumableItems(const class FString& Params_0);
	static void Switch_GetConsumables(const class FString& Params_0);
	static void Switch_OrdersCheck(const class FString& Params_0);
	static void Switch_OrdersConsume(const class FString& Params_0);
	static class FString Test_Google_SkuItemDetailsToString(const struct FLLHSDKGenericSkuItemsDetailList& InDetails);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKPay">();
	}
	static class ULLHSDKPay* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKPay>();
	}
};
static_assert(alignof(ULLHSDKPay) == 0x000008, "Wrong alignment on ULLHSDKPay");
static_assert(sizeof(ULLHSDKPay) == 0x000190, "Wrong size on ULLHSDKPay");
static_assert(offsetof(ULLHSDKPay, OnGooglePayFinished) == 0x000028, "Member 'ULLHSDKPay::OnGooglePayFinished' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnGoogleQuerySkuItemDetails) == 0x000038, "Member 'ULLHSDKPay::OnGoogleQuerySkuItemDetails' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnGoogleQuerySkuItemDetailsSubscription) == 0x000048, "Member 'ULLHSDKPay::OnGoogleQuerySkuItemDetailsSubscription' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnGetGoogleConsumeGoods) == 0x000058, "Member 'ULLHSDKPay::OnGetGoogleConsumeGoods' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnGetGoogleConsumePointsGoods) == 0x000068, "Member 'ULLHSDKPay::OnGetGoogleConsumePointsGoods' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnIOSQuerySkus) == 0x000078, "Member 'ULLHSDKPay::OnIOSQuerySkus' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnIOSLLHPayFinished) == 0x000088, "Member 'ULLHSDKPay::OnIOSLLHPayFinished' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnGetIOSPurchaseExtNull) == 0x000098, "Member 'ULLHSDKPay::OnGetIOSPurchaseExtNull' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnAndroidDomesticPayFinished) == 0x0000A8, "Member 'ULLHSDKPay::OnAndroidDomesticPayFinished' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLSteamQuerySkus) == 0x0000B8, "Member 'ULLHSDKPay::OnLSteamQuerySkus' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLSteamSDKPayApplied) == 0x0000C8, "Member 'ULLHSDKPay::OnLSteamSDKPayApplied' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLimPCQueryPriceLadder) == 0x0000D8, "Member 'ULLHSDKPay::OnLimPCQueryPriceLadder' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLimPCQueryPriceLadderWithRegion) == 0x0000E8, "Member 'ULLHSDKPay::OnLimPCQueryPriceLadderWithRegion' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLimPCPayApplied) == 0x0000F8, "Member 'ULLHSDKPay::OnLimPCPayApplied' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLimPCThirdPartyCheckoutCounterItemsGet) == 0x000108, "Member 'ULLHSDKPay::OnLimPCThirdPartyCheckoutCounterItemsGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnLimPCThirdPartyCheckoutCounterItemsPay) == 0x000118, "Member 'ULLHSDKPay::OnLimPCThirdPartyCheckoutCounterItemsPay' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnSwitchSDKPayGetConsumables) == 0x000128, "Member 'ULLHSDKPay::OnSwitchSDKPayGetConsumables' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnSwitchSDKPayGetConsumableItems) == 0x000138, "Member 'ULLHSDKPay::OnSwitchSDKPayGetConsumableItems' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnSwitchSDKPayEShopOpen) == 0x000148, "Member 'ULLHSDKPay::OnSwitchSDKPayEShopOpen' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnSwitchSDKPayOrdersCheck) == 0x000158, "Member 'ULLHSDKPay::OnSwitchSDKPayOrdersCheck' has a wrong offset!");
static_assert(offsetof(ULLHSDKPay, OnSwitchSDKPayOrdersConsume) == 0x000168, "Member 'ULLHSDKPay::OnSwitchSDKPayOrdersConsume' has a wrong offset!");

// Class LLHSDK.LLHSDKReport
// 0x0090 (0x00B8 - 0x0028)
class ULLHSDKReport final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& Datas)> OnDAPLogAdd;                          // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKCommonReportPoint;          // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLSLSConfig;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLSLSFieldsGet;                      // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLSLSLogAdd;                         // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKAlilogConfigSet;            // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCSDKAlilogFieldsGet;            // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLIMPCAlilogAdd;                     // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Datas)> OnLimPCGameActionOptionsReport;       // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static int32 AddLIMPCAlilog(const class FString& Params_0);
	static void AddLSLSLog(const class FString& Params_0);
	static int32 CommonReportLimPCPoint(const class FString& Params_0);
	static void DAPLogAdd(const class FString& Params_0);
	static void DestoryInstance();
	static void EnableLogReport(const bool bEnable);
	static class ULLHSDKReport* GetInstance();
	static int32 GetLimPCAlilogFields();
	static void GetSLSFields();
	static int32 LimPCGameActionOptionsReport(const class FString& Params_0);
	static void ReportCustomEventForDomesticChannel(const class FString& EventName, const class FString& JsonParamsStr);
	static void ReportGameInfoForDomesticChannel(const class FString& EventName, const class FString& JsonParamsStr);
	static bool ReportJsonToLilithImmediate(const class FString& EventName, const class FString& JsonContentStr);
	static bool ReportRevenueToThirdParty(const class FString& EventName, ELLHSDKReportCurrencyType Currency, const class FString& Revenue, const TArray<class FString>& Parameters);
	static void ReportRoleInfo(const class FString& JsonParamsStr);
	static bool ReportToThirdParty(const class FString& EventName, const TArray<class FString>& Parameters);
	static int32 SetLIMPCAlilogConfig(const class FString& Params_0);
	static void SetLSLSConfig(const class FString& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKReport">();
	}
	static class ULLHSDKReport* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKReport>();
	}
};
static_assert(alignof(ULLHSDKReport) == 0x000008, "Wrong alignment on ULLHSDKReport");
static_assert(sizeof(ULLHSDKReport) == 0x0000B8, "Wrong size on ULLHSDKReport");
static_assert(offsetof(ULLHSDKReport, OnDAPLogAdd) == 0x000028, "Member 'ULLHSDKReport::OnDAPLogAdd' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLimPCSDKCommonReportPoint) == 0x000038, "Member 'ULLHSDKReport::OnLimPCSDKCommonReportPoint' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLSLSConfig) == 0x000048, "Member 'ULLHSDKReport::OnLSLSConfig' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLSLSFieldsGet) == 0x000058, "Member 'ULLHSDKReport::OnLSLSFieldsGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLSLSLogAdd) == 0x000068, "Member 'ULLHSDKReport::OnLSLSLogAdd' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLimPCSDKAlilogConfigSet) == 0x000078, "Member 'ULLHSDKReport::OnLimPCSDKAlilogConfigSet' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLimPCSDKAlilogFieldsGet) == 0x000088, "Member 'ULLHSDKReport::OnLimPCSDKAlilogFieldsGet' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLIMPCAlilogAdd) == 0x000098, "Member 'ULLHSDKReport::OnLIMPCAlilogAdd' has a wrong offset!");
static_assert(offsetof(ULLHSDKReport, OnLimPCGameActionOptionsReport) == 0x0000A8, "Member 'ULLHSDKReport::OnLimPCGameActionOptionsReport' has a wrong offset!");

// Class LLHSDK.LLHSDKSettings
// 0x0488 (0x04C0 - 0x0038)
class ULLHSDKSettings final : public UDeveloperSettings
{
public:
	EDistributionRegion                           DistributionRegion;                                // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionChannel                          DistributionChannel;                               // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReleaseType                                  ReleaseType;                                       // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSDKDebuggable;                                  // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGrayRelease;                                    // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SDKGroupName;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKFeatureName;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKVersion;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFacebook;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTiktok;                                        // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFirebaseMessaging;                             // 0x0072(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasJiGuangPush;                                   // 0x0073(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SDKAppIdForGrayRelease;                            // 0x0078(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKGameIdForGrayRelease;                           // 0x0088(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PspAppIdForGrayRelease;                            // 0x0098(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDebugParkwayEnvIdForGrayRelease;            // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidReleaseParkwayEnvIdForGrayRelease;          // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamDebugParkwayEnvIdForGrayRelease;              // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamReleaseParkwayEnvIdForGrayRelease;            // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookAppIDForGrayRelease;                       // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookContentProviderForGrayRelease;             // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKAppId;                                          // 0x0108(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKGameId;                                         // 0x0118(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookContentProvider;                           // 0x0128(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookAppID;                                     // 0x0138(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSFacebookContentProvider;                        // 0x0148(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSFacebookAppID;                                  // 0x0158(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PspAppId;                                          // 0x0168(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDebugParkwayEnvId;                          // 0x0178(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidReleaseParkwayEnvId;                        // 0x0188(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSDebugParkwayEnvId;                              // 0x0198(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSReleaseParkwayEnvId;                            // 0x01A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamDebugParkwayEnvId;                            // 0x01B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamReleaseParkwayEnvId;                          // 0x01C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinDebugParkwayEnvId;                      // 0x01D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinReleaseParkwayEnvId;                    // 0x01E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EpicDebugParkwayEnvId;                             // 0x01F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EpicReleaseParkwayEnvId;                           // 0x0208(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeGameDebugParkwayEnvId;                           // 0x0218(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeGameReleaseParkwayEnvId;                         // 0x0228(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKAppIdForDomesticRelease;                        // 0x0238(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKGameIdForDomesticRelease;                       // 0x0248(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDebugParkwayEnvIdForDomesticRelease;        // 0x0258(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidReleaseParkwayEnvIdForDomesticRelease;      // 0x0268(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSDebugParkwayEnvIdForDomesticRelease;            // 0x0278(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSReleaseParkwayEnvIdForDomesticRelease;          // 0x0288(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PspAppIdForDomesticRelease;                        // 0x0298(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinDebugParkwayEnvIdForDomesticRelease;    // 0x02A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinReleaseParkwayEnvIdForDomesticRelease;  // 0x02B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformLauncherOfficialWinDebugParkwayEnvIdForDomesticRelease; // 0x02C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformLauncherOfficialWinReleaseParkwayEnvIdForDomesticRelease; // 0x02D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamDebugParkwayEnvIdForDomesticRelease;          // 0x02E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamReleaseParkwayEnvIdForDomesticRelease;        // 0x02F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DouYinAssociatedOperationDebugParkwayEnvId;        // 0x0308(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DouYinAssociatedOperationReleaseParkwayEnvId;      // 0x0318(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DouYinBiPassDebugParkwayEnvId;                     // 0x0328(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DouYinBiPassReleaseParkwayEnvId;                   // 0x0338(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidCommunitySDKVersion;                        // 0x0348(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommunityDebugEnvIdForInternationalRelease;        // 0x0358(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommunityReleaseEnvIdForInternationalRelease;      // 0x0368(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommunityDebugEnvIdForDomesticRelease;             // 0x0378(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommunityReleaseEnvIdForDomesticRelease;           // 0x0388(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKAppIdForDomesticEarlyRelease;                   // 0x0398(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinDebugParkwayEnvIdForDomesticEarlyRelease; // 0x03A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfficialWinReleaseParkwayEnvIdForDomesticEarlyRelease; // 0x03B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamDebugParkwayEnvIdForDomesticEarlyRelease;     // 0x03C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamReleaseParkwayEnvIdForDomesticEarlyRelease;   // 0x03D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDebugParkwayEnvIdForDomesticEarlyRelease;   // 0x03E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidReleaseParkwayEnvIdForDomesticEarlyRelease; // 0x03F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCheckoutCounter;                               // 0x0408(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAndroidXEnabled;                                  // 0x0409(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiDexEnabled;                                  // 0x040A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseOverridedConfig;                         // 0x040B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FirebaseCoreVersion;                               // 0x0410(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirebaseMessagingVersion;                          // 0x0420(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoogleServicesVersion;                             // 0x0430(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayServicesBasementVersion;                       // 0x0440(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKGravity                                PlayPhoneGravity;                                  // 0x0450(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAndroidScreenshotListener;                  // 0x0451(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAndroidMultipleDetect;                      // 0x0452(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLogo;                                         // 0x0453(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKLoginUIStyle                           LoginUIStyle;                                      // 0x0454(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIOSShouldUseOverridedConfig;                      // 0x0455(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIOSShowTermsByServer;                             // 0x0456(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_457[0x1];                                      // 0x0457(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FacebookDisplayName;                               // 0x0458(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QQAppID;                                           // 0x0468(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WechatAppID;                                       // 0x0478(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoogleReversedClientID;                            // 0x0488(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TwitterAPIKey;                                     // 0x0498(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultNSUserTrackingUsageDescription;             // 0x04A8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseYiDunPackTool;                                 // 0x04B8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLHSDKSettings">();
	}
	static class ULLHSDKSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLHSDKSettings>();
	}
};
static_assert(alignof(ULLHSDKSettings) == 0x000008, "Wrong alignment on ULLHSDKSettings");
static_assert(sizeof(ULLHSDKSettings) == 0x0004C0, "Wrong size on ULLHSDKSettings");
static_assert(offsetof(ULLHSDKSettings, DistributionRegion) == 0x000038, "Member 'ULLHSDKSettings::DistributionRegion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DistributionChannel) == 0x000039, "Member 'ULLHSDKSettings::DistributionChannel' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, ReleaseType) == 0x00003A, "Member 'ULLHSDKSettings::ReleaseType' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bIsSDKDebuggable) == 0x00003B, "Member 'ULLHSDKSettings::bIsSDKDebuggable' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bIsGrayRelease) == 0x00003C, "Member 'ULLHSDKSettings::bIsGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKGroupName) == 0x000040, "Member 'ULLHSDKSettings::SDKGroupName' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKFeatureName) == 0x000050, "Member 'ULLHSDKSettings::SDKFeatureName' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKVersion) == 0x000060, "Member 'ULLHSDKSettings::SDKVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bHasFacebook) == 0x000070, "Member 'ULLHSDKSettings::bHasFacebook' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bHasTiktok) == 0x000071, "Member 'ULLHSDKSettings::bHasTiktok' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bHasFirebaseMessaging) == 0x000072, "Member 'ULLHSDKSettings::bHasFirebaseMessaging' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bHasJiGuangPush) == 0x000073, "Member 'ULLHSDKSettings::bHasJiGuangPush' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKAppIdForGrayRelease) == 0x000078, "Member 'ULLHSDKSettings::SDKAppIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKGameIdForGrayRelease) == 0x000088, "Member 'ULLHSDKSettings::SDKGameIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PspAppIdForGrayRelease) == 0x000098, "Member 'ULLHSDKSettings::PspAppIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidDebugParkwayEnvIdForGrayRelease) == 0x0000A8, "Member 'ULLHSDKSettings::AndroidDebugParkwayEnvIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidReleaseParkwayEnvIdForGrayRelease) == 0x0000B8, "Member 'ULLHSDKSettings::AndroidReleaseParkwayEnvIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamDebugParkwayEnvIdForGrayRelease) == 0x0000C8, "Member 'ULLHSDKSettings::SteamDebugParkwayEnvIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamReleaseParkwayEnvIdForGrayRelease) == 0x0000D8, "Member 'ULLHSDKSettings::SteamReleaseParkwayEnvIdForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FacebookAppIDForGrayRelease) == 0x0000E8, "Member 'ULLHSDKSettings::FacebookAppIDForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FacebookContentProviderForGrayRelease) == 0x0000F8, "Member 'ULLHSDKSettings::FacebookContentProviderForGrayRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKAppId) == 0x000108, "Member 'ULLHSDKSettings::SDKAppId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKGameId) == 0x000118, "Member 'ULLHSDKSettings::SDKGameId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FacebookContentProvider) == 0x000128, "Member 'ULLHSDKSettings::FacebookContentProvider' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FacebookAppID) == 0x000138, "Member 'ULLHSDKSettings::FacebookAppID' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSFacebookContentProvider) == 0x000148, "Member 'ULLHSDKSettings::IOSFacebookContentProvider' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSFacebookAppID) == 0x000158, "Member 'ULLHSDKSettings::IOSFacebookAppID' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PspAppId) == 0x000168, "Member 'ULLHSDKSettings::PspAppId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidDebugParkwayEnvId) == 0x000178, "Member 'ULLHSDKSettings::AndroidDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidReleaseParkwayEnvId) == 0x000188, "Member 'ULLHSDKSettings::AndroidReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSDebugParkwayEnvId) == 0x000198, "Member 'ULLHSDKSettings::IOSDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSReleaseParkwayEnvId) == 0x0001A8, "Member 'ULLHSDKSettings::IOSReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamDebugParkwayEnvId) == 0x0001B8, "Member 'ULLHSDKSettings::SteamDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamReleaseParkwayEnvId) == 0x0001C8, "Member 'ULLHSDKSettings::SteamReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinDebugParkwayEnvId) == 0x0001D8, "Member 'ULLHSDKSettings::OfficialWinDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinReleaseParkwayEnvId) == 0x0001E8, "Member 'ULLHSDKSettings::OfficialWinReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, EpicDebugParkwayEnvId) == 0x0001F8, "Member 'ULLHSDKSettings::EpicDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, EpicReleaseParkwayEnvId) == 0x000208, "Member 'ULLHSDKSettings::EpicReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, WeGameDebugParkwayEnvId) == 0x000218, "Member 'ULLHSDKSettings::WeGameDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, WeGameReleaseParkwayEnvId) == 0x000228, "Member 'ULLHSDKSettings::WeGameReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKAppIdForDomesticRelease) == 0x000238, "Member 'ULLHSDKSettings::SDKAppIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKGameIdForDomesticRelease) == 0x000248, "Member 'ULLHSDKSettings::SDKGameIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidDebugParkwayEnvIdForDomesticRelease) == 0x000258, "Member 'ULLHSDKSettings::AndroidDebugParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidReleaseParkwayEnvIdForDomesticRelease) == 0x000268, "Member 'ULLHSDKSettings::AndroidReleaseParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSDebugParkwayEnvIdForDomesticRelease) == 0x000278, "Member 'ULLHSDKSettings::IOSDebugParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, IOSReleaseParkwayEnvIdForDomesticRelease) == 0x000288, "Member 'ULLHSDKSettings::IOSReleaseParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PspAppIdForDomesticRelease) == 0x000298, "Member 'ULLHSDKSettings::PspAppIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinDebugParkwayEnvIdForDomesticRelease) == 0x0002A8, "Member 'ULLHSDKSettings::OfficialWinDebugParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinReleaseParkwayEnvIdForDomesticRelease) == 0x0002B8, "Member 'ULLHSDKSettings::OfficialWinReleaseParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PlatformLauncherOfficialWinDebugParkwayEnvIdForDomesticRelease) == 0x0002C8, "Member 'ULLHSDKSettings::PlatformLauncherOfficialWinDebugParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PlatformLauncherOfficialWinReleaseParkwayEnvIdForDomesticRelease) == 0x0002D8, "Member 'ULLHSDKSettings::PlatformLauncherOfficialWinReleaseParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamDebugParkwayEnvIdForDomesticRelease) == 0x0002E8, "Member 'ULLHSDKSettings::SteamDebugParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamReleaseParkwayEnvIdForDomesticRelease) == 0x0002F8, "Member 'ULLHSDKSettings::SteamReleaseParkwayEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DouYinAssociatedOperationDebugParkwayEnvId) == 0x000308, "Member 'ULLHSDKSettings::DouYinAssociatedOperationDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DouYinAssociatedOperationReleaseParkwayEnvId) == 0x000318, "Member 'ULLHSDKSettings::DouYinAssociatedOperationReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DouYinBiPassDebugParkwayEnvId) == 0x000328, "Member 'ULLHSDKSettings::DouYinBiPassDebugParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DouYinBiPassReleaseParkwayEnvId) == 0x000338, "Member 'ULLHSDKSettings::DouYinBiPassReleaseParkwayEnvId' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidCommunitySDKVersion) == 0x000348, "Member 'ULLHSDKSettings::AndroidCommunitySDKVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, CommunityDebugEnvIdForInternationalRelease) == 0x000358, "Member 'ULLHSDKSettings::CommunityDebugEnvIdForInternationalRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, CommunityReleaseEnvIdForInternationalRelease) == 0x000368, "Member 'ULLHSDKSettings::CommunityReleaseEnvIdForInternationalRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, CommunityDebugEnvIdForDomesticRelease) == 0x000378, "Member 'ULLHSDKSettings::CommunityDebugEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, CommunityReleaseEnvIdForDomesticRelease) == 0x000388, "Member 'ULLHSDKSettings::CommunityReleaseEnvIdForDomesticRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SDKAppIdForDomesticEarlyRelease) == 0x000398, "Member 'ULLHSDKSettings::SDKAppIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinDebugParkwayEnvIdForDomesticEarlyRelease) == 0x0003A8, "Member 'ULLHSDKSettings::OfficialWinDebugParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, OfficialWinReleaseParkwayEnvIdForDomesticEarlyRelease) == 0x0003B8, "Member 'ULLHSDKSettings::OfficialWinReleaseParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamDebugParkwayEnvIdForDomesticEarlyRelease) == 0x0003C8, "Member 'ULLHSDKSettings::SteamDebugParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, SteamReleaseParkwayEnvIdForDomesticEarlyRelease) == 0x0003D8, "Member 'ULLHSDKSettings::SteamReleaseParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidDebugParkwayEnvIdForDomesticEarlyRelease) == 0x0003E8, "Member 'ULLHSDKSettings::AndroidDebugParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, AndroidReleaseParkwayEnvIdForDomesticEarlyRelease) == 0x0003F8, "Member 'ULLHSDKSettings::AndroidReleaseParkwayEnvIdForDomesticEarlyRelease' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bNewCheckoutCounter) == 0x000408, "Member 'ULLHSDKSettings::bNewCheckoutCounter' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bAndroidXEnabled) == 0x000409, "Member 'ULLHSDKSettings::bAndroidXEnabled' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bMultiDexEnabled) == 0x00040A, "Member 'ULLHSDKSettings::bMultiDexEnabled' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bShouldUseOverridedConfig) == 0x00040B, "Member 'ULLHSDKSettings::bShouldUseOverridedConfig' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FirebaseCoreVersion) == 0x000410, "Member 'ULLHSDKSettings::FirebaseCoreVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FirebaseMessagingVersion) == 0x000420, "Member 'ULLHSDKSettings::FirebaseMessagingVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, GoogleServicesVersion) == 0x000430, "Member 'ULLHSDKSettings::GoogleServicesVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PlayServicesBasementVersion) == 0x000440, "Member 'ULLHSDKSettings::PlayServicesBasementVersion' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, PlayPhoneGravity) == 0x000450, "Member 'ULLHSDKSettings::PlayPhoneGravity' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bEnableAndroidScreenshotListener) == 0x000451, "Member 'ULLHSDKSettings::bEnableAndroidScreenshotListener' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bEnableAndroidMultipleDetect) == 0x000452, "Member 'ULLHSDKSettings::bEnableAndroidMultipleDetect' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bShowLogo) == 0x000453, "Member 'ULLHSDKSettings::bShowLogo' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, LoginUIStyle) == 0x000454, "Member 'ULLHSDKSettings::LoginUIStyle' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bIOSShouldUseOverridedConfig) == 0x000455, "Member 'ULLHSDKSettings::bIOSShouldUseOverridedConfig' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bIOSShowTermsByServer) == 0x000456, "Member 'ULLHSDKSettings::bIOSShowTermsByServer' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, FacebookDisplayName) == 0x000458, "Member 'ULLHSDKSettings::FacebookDisplayName' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, QQAppID) == 0x000468, "Member 'ULLHSDKSettings::QQAppID' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, WechatAppID) == 0x000478, "Member 'ULLHSDKSettings::WechatAppID' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, GoogleReversedClientID) == 0x000488, "Member 'ULLHSDKSettings::GoogleReversedClientID' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, TwitterAPIKey) == 0x000498, "Member 'ULLHSDKSettings::TwitterAPIKey' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, DefaultNSUserTrackingUsageDescription) == 0x0004A8, "Member 'ULLHSDKSettings::DefaultNSUserTrackingUsageDescription' has a wrong offset!");
static_assert(offsetof(ULLHSDKSettings, bUseYiDunPackTool) == 0x0004B8, "Member 'ULLHSDKSettings::bUseYiDunPackTool' has a wrong offset!");

}

