#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInfoComponent

#include "Basic.hpp"

#include "BP_MapInfoComponent_classes.hpp"
#include "BP_MapInfoComponent_parameters.hpp"


namespace SDK
{

// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Calculate Required Parameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>&                          RadiusArr                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  MaxOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  GoToTheCentreRadius                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::Calculate_Required_Parameters(TArray<float>& RadiusArr, int32 Index_0, float* Radius, float* MaxOffset, float* GoToTheCentreRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Calculate Required Parameters");

	Params::BP_MapInfoComponent_C_Calculate_Required_Parameters Parms{};

	Parms.RadiusArr = std::move(RadiusArr);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	RadiusArr = std::move(Parms.RadiusArr);

	if (Radius != nullptr)
		*Radius = Parms.Radius;

	if (MaxOffset != nullptr)
		*MaxOffset = Parms.MaxOffset;

	if (GoToTheCentreRadius != nullptr)
		*GoToTheCentreRadius = Parms.GoToTheCentreRadius;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Random Get Fake Bomb Point
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32&                            Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MapInfoComponent_C::Random_Get_Fake_Bomb_Point(const int32& Key, struct FVector* Pos, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Random Get Fake Bomb Point");

	Params::BP_MapInfoComponent_C_Random_Get_Fake_Bomb_Point Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetFakeBombPointRangeArrr
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<int32, struct FVector2D>&    FakeBombPointRangeArr_0                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_MapInfoComponent_C::SetFakeBombPointRangeArrr(const TMap<int32, struct FVector2D>& FakeBombPointRangeArr_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "SetFakeBombPointRangeArrr");

	Params::BP_MapInfoComponent_C_SetFakeBombPointRangeArrr Parms{};

	Parms.FakeBombPointRangeArr_0 = std::move(FakeBombPointRangeArr_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetFakePointRnageArr
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<int32, struct FVector2D>&    FakePointRnageArr                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_MapInfoComponent_C::SetFakePointRnageArr(const TMap<int32, struct FVector2D>& FakePointRnageArr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "SetFakePointRnageArr");

	Params::BP_MapInfoComponent_C_SetFakePointRnageArr Parms{};

	Parms.FakePointRnageArr = std::move(FakePointRnageArr);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Get Safe Area Centers Len
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Len                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::Get_Safe_Area_Centers_Len(int32* Len)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Get Safe Area Centers Len");

	Params::BP_MapInfoComponent_C_Get_Safe_Area_Centers_Len Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Len != nullptr)
		*Len = Parms.Len;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.CalculateFakePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Centre                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallRadiu                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LargeRadiu                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::CalculateFakePoint(const struct FVector& Centre, float SmallRadiu, float LargeRadiu, int32 Index_0, struct FVector* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "CalculateFakePoint");

	Params::BP_MapInfoComponent_C_CalculateFakePoint Parms{};

	Parms.Centre = std::move(Centre);
	Parms.SmallRadiu = SmallRadiu;
	Parms.LargeRadiu = LargeRadiu;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Join Next
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxOffset                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>&                 TargetArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// float                                   GoToTheCentreRadius                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::Join_Next(float Radius, float MaxOffset, int32 LastIndex, TArray<struct FVector>& TargetArray, float GoToTheCentreRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Join Next");

	Params::BP_MapInfoComponent_C_Join_Next Parms{};

	Parms.Radius = Radius;
	Parms.MaxOffset = MaxOffset;
	Parms.LastIndex = LastIndex;
	Parms.TargetArray = std::move(TargetArray);
	Parms.GoToTheCentreRadius = GoToTheCentreRadius;

	UObject::ProcessEvent(Func, &Parms);

	TargetArray = std::move(Parms.TargetArray);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Random Selection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TargetDisMax                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>&                 TargetArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    NeedCheckBoundary                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   Add                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MapInfoComponent_C::Random_Selection(float TargetDisMax, float Radius, TArray<struct FVector>& TargetArray, bool NeedCheckBoundary, bool* Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Random Selection");

	Params::BP_MapInfoComponent_C_Random_Selection Parms{};

	Parms.TargetDisMax = TargetDisMax;
	Parms.Radius = Radius;
	Parms.TargetArray = std::move(TargetArray);
	Parms.NeedCheckBoundary = NeedCheckBoundary;

	UObject::ProcessEvent(Func, &Parms);

	TargetArray = std::move(Parms.TargetArray);

	if (Add != nullptr)
		*Add = Parms.Add;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.JudgeBoundary
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   DontInBoundary                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MapInfoComponent_C::JudgeBoundary(const struct FVector& Pos, float Radius, bool* DontInBoundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "JudgeBoundary");

	Params::BP_MapInfoComponent_C_JudgeBoundary Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (DontInBoundary != nullptr)
		*DontInBoundary = Parms.DontInBoundary;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Calculate Poison Circle Point Array
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>&                          RadiusArr                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::Calculate_Poison_Circle_Point_Array(TArray<float>& RadiusArr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Calculate Poison Circle Point Array");

	Params::BP_MapInfoComponent_C_Calculate_Poison_Circle_Point_Array Parms{};

	Parms.RadiusArr = std::move(RadiusArr);

	UObject::ProcessEvent(Func, &Parms);

	RadiusArr = std::move(Parms.RadiusArr);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.Get Safe Area Center
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::Get_Safe_Area_Center(int32 Index_0, struct FVector* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "Get Safe Area Center");

	Params::BP_MapInfoComponent_C_Get_Safe_Area_Center Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.GetAirline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FAirlineData*                    Airline                                                (Parm, OutParm, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_MapInfoComponent_C::GetAirline(struct FAirlineData* Airline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "GetAirline");

	Params::BP_MapInfoComponent_C_GetAirline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Airline != nullptr)
		*Airline = std::move(Parms.Airline);

	return Parms.ReturnValue;
}


// Function BP_MapInfoComponent.BP_MapInfoComponent_C.SetStaticSafeArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 SafeAreaCenters_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// const struct FInt32Range&               OverrideIndexRange                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MapInfoComponent_C::SetStaticSafeArea(TArray<struct FVector>& SafeAreaCenters_0, const struct FInt32Range& OverrideIndexRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoComponent_C", "SetStaticSafeArea");

	Params::BP_MapInfoComponent_C_SetStaticSafeArea Parms{};

	Parms.SafeAreaCenters_0 = std::move(SafeAreaCenters_0);
	Parms.OverrideIndexRange = std::move(OverrideIndexRange);

	UObject::ProcessEvent(Func, &Parms);

	SafeAreaCenters_0 = std::move(Parms.SafeAreaCenters_0);
}

}

