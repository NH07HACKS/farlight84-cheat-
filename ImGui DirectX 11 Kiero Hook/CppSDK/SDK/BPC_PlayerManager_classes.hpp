#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_PlayerListType_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerManager.BPC_PlayerManager_C
// 0x0090 (0x0150 - 0x00C0)
class UBPC_PlayerManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ASCMPlayerState*>                AliveRealPlayers;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                AliveAiPlayers;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UBPC_Death_Framework_C*                 DeathComponent;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                RealPlayers;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FString, int32>                    TeamRealPlayerCount;                               // 0x0100(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	TArray<class ASCMPlayerState*> GetPlayerList(E_PlayerListType Type);
	void ReceiveBeginPlay();
	void OnPlayerDie(class ASCMPlayerState* Player);
	void OnPlayerResurrect(class ASCMPlayerState* Player);
	void BattleStart();
	void PlayerOut(class ASCMPlayerState* Player);
	void OnPlayerJoin(class ASCMPlayerState* NewPlayer, bool bIsAi);
	void ExecuteUbergraph_BPC_PlayerManager(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerManager_C">();
	}
	static class UBPC_PlayerManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerManager_C>();
	}
};
static_assert(alignof(UBPC_PlayerManager_C) == 0x000008, "Wrong alignment on UBPC_PlayerManager_C");
static_assert(sizeof(UBPC_PlayerManager_C) == 0x000150, "Wrong size on UBPC_PlayerManager_C");
static_assert(offsetof(UBPC_PlayerManager_C, UberGraphFrame) == 0x0000C0, "Member 'UBPC_PlayerManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerManager_C, AliveRealPlayers) == 0x0000C8, "Member 'UBPC_PlayerManager_C::AliveRealPlayers' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerManager_C, AliveAiPlayers) == 0x0000D8, "Member 'UBPC_PlayerManager_C::AliveAiPlayers' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerManager_C, DeathComponent) == 0x0000E8, "Member 'UBPC_PlayerManager_C::DeathComponent' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerManager_C, RealPlayers) == 0x0000F0, "Member 'UBPC_PlayerManager_C::RealPlayers' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerManager_C, TeamRealPlayerCount) == 0x000100, "Member 'UBPC_PlayerManager_C::TeamRealPlayerCount' has a wrong offset!");

}

