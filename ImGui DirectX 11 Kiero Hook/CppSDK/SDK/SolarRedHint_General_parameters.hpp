#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarRedHint_General

#include "Basic.hpp"

#include "E_Type_RedHint_structs.hpp"
#include "UMG_structs.hpp"
#include "E_RedHintPath_New_structs.hpp"
#include "Solarland_structs.hpp"
#include "SolarUI_structs.hpp"


namespace SDK::Params
{

// Function SolarRedHint_General.SolarRedHint_General_C.SetStyle
// 0x0009 (0x0009 - 0x0000)
struct SolarRedHint_General_C_SetStyle final
{
public:
	E_Type_RedHint                                Type_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_RedHint                                Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_RedHint                                Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarRedHint_General_C_SetStyle) == 0x000001, "Wrong alignment on SolarRedHint_General_C_SetStyle");
static_assert(sizeof(SolarRedHint_General_C_SetStyle) == 0x000009, "Wrong size on SolarRedHint_General_C_SetStyle");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Type_0) == 0x000000, "Member 'SolarRedHint_General_C_SetStyle::Type_0' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable) == 0x000001, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable_1) == 0x000002, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable_2) == 0x000003, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable_3) == 0x000004, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable_4) == 0x000005, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, Temp_byte_Variable_5) == 0x000006, "Member 'SolarRedHint_General_C_SetStyle::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, K2Node_Select_Default) == 0x000007, "Member 'SolarRedHint_General_C_SetStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetStyle, K2Node_Select_Default_1) == 0x000008, "Member 'SolarRedHint_General_C_SetStyle::K2Node_Select_Default_1' has a wrong offset!");

// Function SolarRedHint_General.SolarRedHint_General_C.SetHintData
// 0x0010 (0x0010 - 0x0000)
struct SolarRedHint_General_C_SetHintData final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERedHintPath                                  Path;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoRefresh;                                      // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_RedHint                                Type_0;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewHintPath;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_RedHintPath_New                             NewPath;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarRedHint_General_C_SetHintData) == 0x000008, "Wrong alignment on SolarRedHint_General_C_SetHintData");
static_assert(sizeof(SolarRedHint_General_C_SetHintData) == 0x000010, "Wrong size on SolarRedHint_General_C_SetHintData");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, Key) == 0x000000, "Member 'SolarRedHint_General_C_SetHintData::Key' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, Path) == 0x000008, "Member 'SolarRedHint_General_C_SetHintData::Path' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, bAutoRefresh) == 0x000009, "Member 'SolarRedHint_General_C_SetHintData::bAutoRefresh' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, Type_0) == 0x00000A, "Member 'SolarRedHint_General_C_SetHintData::Type_0' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, bNewHintPath) == 0x00000B, "Member 'SolarRedHint_General_C_SetHintData::bNewHintPath' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_SetHintData, NewPath) == 0x00000C, "Member 'SolarRedHint_General_C_SetHintData::NewPath' has a wrong offset!");

// Function SolarRedHint_General.SolarRedHint_General_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct SolarRedHint_General_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SolarRedHint_General_C_PreConstruct) == 0x000001, "Wrong alignment on SolarRedHint_General_C_PreConstruct");
static_assert(sizeof(SolarRedHint_General_C_PreConstruct) == 0x000001, "Wrong size on SolarRedHint_General_C_PreConstruct");
static_assert(offsetof(SolarRedHint_General_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'SolarRedHint_General_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function SolarRedHint_General.SolarRedHint_General_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct SolarRedHint_General_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SolarRedHint_General_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on SolarRedHint_General_C_ReceivePlatformLayout");
static_assert(sizeof(SolarRedHint_General_C_ReceivePlatformLayout) == 0x000001, "Wrong size on SolarRedHint_General_C_ReceivePlatformLayout");
static_assert(offsetof(SolarRedHint_General_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'SolarRedHint_General_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function SolarRedHint_General.SolarRedHint_General_C.ExecuteUbergraph_SolarRedHint_General
// 0x000C (0x000C - 0x0000)
struct SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUSolarWidgetLayoutType                       Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General) == 0x000004, "Wrong alignment on SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General");
static_assert(sizeof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General) == 0x00000C, "Wrong size on SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, EntryPoint) == 0x000000, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::EntryPoint' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, K2Node_Event_InLayoutType) == 0x000004, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, Temp_byte_Variable) == 0x000005, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, Temp_bool_Variable) == 0x000006, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, Temp_bool_Variable_1) == 0x000007, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, K2Node_Event_IsDesignTime) == 0x000008, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General, K2Node_Select_Default) == 0x000009, "Member 'SolarRedHint_General_C_ExecuteUbergraph_SolarRedHint_General::K2Node_Select_Default' has a wrong offset!");

// Function SolarRedHint_General.SolarRedHint_General_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct SolarRedHint_General_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(SolarRedHint_General_C_GetModuleName) == 0x000008, "Wrong alignment on SolarRedHint_General_C_GetModuleName");
static_assert(sizeof(SolarRedHint_General_C_GetModuleName) == 0x000010, "Wrong size on SolarRedHint_General_C_GetModuleName");
static_assert(offsetof(SolarRedHint_General_C_GetModuleName, ReturnValue) == 0x000000, "Member 'SolarRedHint_General_C_GetModuleName::ReturnValue' has a wrong offset!");

}

