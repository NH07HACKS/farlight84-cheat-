#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solar2D

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Solar2D.ESolarSpriteAtlasPadding
// NumValues: 0x0003
enum class ESolarSpriteAtlasPadding : uint8
{
	DilateBorder                             = 0,
	PadWithZero                              = 1,
	ESolarSpriteAtlasPadding_MAX             = 2,
};

// Enum Solar2D.ESolarSpritePivotMode
// NumValues: 0x000B
enum class ESolarSpritePivotMode : uint8
{
	Top_Left                                 = 0,
	Top_Center                               = 1,
	Top_Right                                = 2,
	Center_Left                              = 3,
	Center_Center                            = 4,
	Center_Right                             = 5,
	Bottom_Left                              = 6,
	Bottom_Center                            = 7,
	Bottom_Right                             = 8,
	Custom                                   = 9,
	ESolarSpritePivotMode_MAX                = 10,
};

// Enum Solar2D.ESolarSpritePolygonMode
// NumValues: 0x0006
enum class ESolarSpritePolygonMode : uint8
{
	SourceBoundingBox                        = 0,
	TightBoundingBox                         = 1,
	ShrinkWrapped                            = 2,
	FullyCustom                              = 3,
	Diced                                    = 4,
	ESolarSpritePolygonMode_MAX              = 5,
};

// Enum Solar2D.ESolarSpriteShapeType
// NumValues: 0x0004
enum class ESolarSpriteShapeType : uint8
{
	Box                                      = 0,
	Circle                                   = 1,
	Polygon                                  = 2,
	ESolarSpriteShapeType_MAX                = 3,
};

// Enum Solar2D.ESolarSpriteCollisionMode
// NumValues: 0x0004
enum class ESolarSpriteCollisionMode : uint8
{
	None                                     = 0,
	Use2DPhysics                             = 1,
	Use3DPhysics                             = 2,
	ESolarSpriteCollisionMode_MAX            = 3,
};

// ScriptStruct Solar2D.SolarSpriteSocket
// 0x0040 (0x0040 - 0x0000)
struct FSolarSpriteSocket final
{
public:
	struct FTransform                             LocalTransform;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteSocket) == 0x000010, "Wrong alignment on FSolarSpriteSocket");
static_assert(sizeof(FSolarSpriteSocket) == 0x000040, "Wrong size on FSolarSpriteSocket");
static_assert(offsetof(FSolarSpriteSocket, LocalTransform) == 0x000000, "Member 'FSolarSpriteSocket::LocalTransform' has a wrong offset!");
static_assert(offsetof(FSolarSpriteSocket, SocketName) == 0x000030, "Member 'FSolarSpriteSocket::SocketName' has a wrong offset!");

// ScriptStruct Solar2D.SolarSpriteAtlasSlot
// 0x0040 (0x0040 - 0x0000)
struct FSolarSpriteAtlasSlot final
{
public:
	TSoftObjectPtr<class USolarSprite>            SpriteRef;                                         // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtlasIndex;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteAtlasSlot) == 0x000008, "Wrong alignment on FSolarSpriteAtlasSlot");
static_assert(sizeof(FSolarSpriteAtlasSlot) == 0x000040, "Wrong size on FSolarSpriteAtlasSlot");
static_assert(offsetof(FSolarSpriteAtlasSlot, SpriteRef) == 0x000000, "Member 'FSolarSpriteAtlasSlot::SpriteRef' has a wrong offset!");
static_assert(offsetof(FSolarSpriteAtlasSlot, AtlasIndex) == 0x000028, "Member 'FSolarSpriteAtlasSlot::AtlasIndex' has a wrong offset!");
static_assert(offsetof(FSolarSpriteAtlasSlot, X) == 0x00002C, "Member 'FSolarSpriteAtlasSlot::X' has a wrong offset!");
static_assert(offsetof(FSolarSpriteAtlasSlot, Y) == 0x000030, "Member 'FSolarSpriteAtlasSlot::Y' has a wrong offset!");
static_assert(offsetof(FSolarSpriteAtlasSlot, Width) == 0x000034, "Member 'FSolarSpriteAtlasSlot::Width' has a wrong offset!");
static_assert(offsetof(FSolarSpriteAtlasSlot, Height) == 0x000038, "Member 'FSolarSpriteAtlasSlot::Height' has a wrong offset!");

// ScriptStruct Solar2D.AssetMoveSerializeInfoEx
// 0x0028 (0x0028 - 0x0000)
struct FAssetMoveSerializeInfoEx final
{
public:
	class FString                                 OldAssetPath;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAssetPath;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             RefTexture;                                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetMoveSerializeInfoEx) == 0x000008, "Wrong alignment on FAssetMoveSerializeInfoEx");
static_assert(sizeof(FAssetMoveSerializeInfoEx) == 0x000028, "Wrong size on FAssetMoveSerializeInfoEx");
static_assert(offsetof(FAssetMoveSerializeInfoEx, OldAssetPath) == 0x000000, "Member 'FAssetMoveSerializeInfoEx::OldAssetPath' has a wrong offset!");
static_assert(offsetof(FAssetMoveSerializeInfoEx, NewAssetPath) == 0x000010, "Member 'FAssetMoveSerializeInfoEx::NewAssetPath' has a wrong offset!");
static_assert(offsetof(FAssetMoveSerializeInfoEx, RefTexture) == 0x000020, "Member 'FAssetMoveSerializeInfoEx::RefTexture' has a wrong offset!");

// ScriptStruct Solar2D.SolarSpriteDrawCallRecord
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FSolarSpriteDrawCallRecord final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BaseTexture;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x30];                                      // 0x0018(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color;                                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x84];                                      // 0x004C(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteDrawCallRecord) == 0x000010, "Wrong alignment on FSolarSpriteDrawCallRecord");
static_assert(sizeof(FSolarSpriteDrawCallRecord) == 0x0000D0, "Wrong size on FSolarSpriteDrawCallRecord");
static_assert(offsetof(FSolarSpriteDrawCallRecord, Destination) == 0x000000, "Member 'FSolarSpriteDrawCallRecord::Destination' has a wrong offset!");
static_assert(offsetof(FSolarSpriteDrawCallRecord, BaseTexture) == 0x000010, "Member 'FSolarSpriteDrawCallRecord::BaseTexture' has a wrong offset!");
static_assert(offsetof(FSolarSpriteDrawCallRecord, Color) == 0x000048, "Member 'FSolarSpriteDrawCallRecord::Color' has a wrong offset!");

// ScriptStruct Solar2D.SolarSpriteAssetInitParameters
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSolarSpriteAssetInitParameters final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteAssetInitParameters) == 0x000008, "Wrong alignment on FSolarSpriteAssetInitParameters");
static_assert(sizeof(FSolarSpriteAssetInitParameters) == 0x000040, "Wrong size on FSolarSpriteAssetInitParameters");

// ScriptStruct Solar2D.SolarSpriteGeometryShape
// 0x0030 (0x0030 - 0x0000)
struct FSolarSpriteGeometryShape final
{
public:
	ESolarSpriteShapeType                         ShapeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Vertices;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BoxSize;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BoxPosition;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeWinding;                                  // 0x002C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteGeometryShape) == 0x000008, "Wrong alignment on FSolarSpriteGeometryShape");
static_assert(sizeof(FSolarSpriteGeometryShape) == 0x000030, "Wrong size on FSolarSpriteGeometryShape");
static_assert(offsetof(FSolarSpriteGeometryShape, ShapeType) == 0x000000, "Member 'FSolarSpriteGeometryShape::ShapeType' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryShape, Vertices) == 0x000008, "Member 'FSolarSpriteGeometryShape::Vertices' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryShape, BoxSize) == 0x000018, "Member 'FSolarSpriteGeometryShape::BoxSize' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryShape, BoxPosition) == 0x000020, "Member 'FSolarSpriteGeometryShape::BoxPosition' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryShape, Rotation) == 0x000028, "Member 'FSolarSpriteGeometryShape::Rotation' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryShape, bNegativeWinding) == 0x00002C, "Member 'FSolarSpriteGeometryShape::bNegativeWinding' has a wrong offset!");

// ScriptStruct Solar2D.SolarSpriteGeometryCollection
// 0x0030 (0x0030 - 0x0000)
struct FSolarSpriteGeometryCollection final
{
public:
	TArray<struct FSolarSpriteGeometryShape>      Shapes;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolarSpritePolygonMode                       GeometryType;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PixelsPerSubdivisionX;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelsPerSubdivisionY;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidVertexMerging;                               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaThreshold;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailAmount;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimplifyEpsilon;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarSpriteGeometryCollection) == 0x000008, "Wrong alignment on FSolarSpriteGeometryCollection");
static_assert(sizeof(FSolarSpriteGeometryCollection) == 0x000030, "Wrong size on FSolarSpriteGeometryCollection");
static_assert(offsetof(FSolarSpriteGeometryCollection, Shapes) == 0x000000, "Member 'FSolarSpriteGeometryCollection::Shapes' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, GeometryType) == 0x000010, "Member 'FSolarSpriteGeometryCollection::GeometryType' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, PixelsPerSubdivisionX) == 0x000014, "Member 'FSolarSpriteGeometryCollection::PixelsPerSubdivisionX' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, PixelsPerSubdivisionY) == 0x000018, "Member 'FSolarSpriteGeometryCollection::PixelsPerSubdivisionY' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, bAvoidVertexMerging) == 0x00001C, "Member 'FSolarSpriteGeometryCollection::bAvoidVertexMerging' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, AlphaThreshold) == 0x000020, "Member 'FSolarSpriteGeometryCollection::AlphaThreshold' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, DetailAmount) == 0x000024, "Member 'FSolarSpriteGeometryCollection::DetailAmount' has a wrong offset!");
static_assert(offsetof(FSolarSpriteGeometryCollection, SimplifyEpsilon) == 0x000028, "Member 'FSolarSpriteGeometryCollection::SimplifyEpsilon' has a wrong offset!");

}

