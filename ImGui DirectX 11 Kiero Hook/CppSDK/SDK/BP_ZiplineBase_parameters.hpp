#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplineBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ZiplineBase.BP_ZiplineBase_C.GroundDistanceCheck
// 0x0198 (0x0198 - 0x0000)
struct BP_ZiplineBase_C_GroundDistanceCheck final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         fDistance;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0050(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0088(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplineBase_C_GroundDistanceCheck) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_GroundDistanceCheck");
static_assert(sizeof(BP_ZiplineBase_C_GroundDistanceCheck) == 0x000198, "Wrong size on BP_ZiplineBase_C_GroundDistanceCheck");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, MaxDistance) == 0x000000, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::MaxDistance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Location) == 0x000004, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Location' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, IsValid) == 0x000010, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::IsValid' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Distance) == 0x000014, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Distance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, fDistance) == 0x000018, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::fDistance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Temp_bool_Variable) == 0x00001C, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x000020, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Temp_struct_Variable) == 0x00002C, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Temp_struct_Variable_1) == 0x00003C, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, Temp_object_Variable) == 0x000050, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, K2Node_Select_Default) == 0x000064, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000088, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000110, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x000111, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x000112, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_Time) == 0x000114, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_Distance) == 0x000118, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_Location) == 0x00011C, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x000128, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_Normal) == 0x000134, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x000140, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_PhysMat) == 0x000150, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_HitActor) == 0x000158, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_HitComponent) == 0x000160, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000168, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_HitItem) == 0x000170, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_FaceIndex) == 0x000174, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_TraceStart) == 0x000178, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_BreakHitResult_TraceEnd) == 0x000184, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GroundDistanceCheck, CallFunc_Vector_Distance_ReturnValue) == 0x000190, "Member 'BP_ZiplineBase_C_GroundDistanceCheck::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.GetValidCollisionDistanceOffset
// 0x01A0 (0x01A0 - 0x0000)
struct BP_ZiplineBase_C_GetValidCollisionDistanceOffset final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x008C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_GetValidCollisionDistanceOffset");
static_assert(sizeof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset) == 0x0001A0, "Wrong size on BP_ZiplineBase_C_GetValidCollisionDistanceOffset");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, Direction) == 0x000000, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::Direction' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, Start) == 0x00000C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::Start' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, Distance) == 0x000018, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::Distance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, ReturnValue) == 0x00001C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, Temp_object_Variable) == 0x000028, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000060, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, K2Node_MakeArray_Array) == 0x000070, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000080, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_LineTraceSingleForObjects_OutHit) == 0x00008C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000114, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_bBlockingHit) == 0x000115, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_bInitialOverlap) == 0x000116, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_Time) == 0x000118, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_Distance) == 0x00011C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_Location) == 0x000120, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_ImpactPoint) == 0x00012C, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_Normal) == 0x000138, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_ImpactNormal) == 0x000144, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_PhysMat) == 0x000150, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_HitActor) == 0x000158, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_HitComponent) == 0x000160, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_HitBoneName) == 0x000168, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_HitItem) == 0x000170, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_FaceIndex) == 0x000174, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_TraceStart) == 0x000178, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_BreakHitResult_TraceEnd) == 0x000184, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetValidCollisionDistanceOffset, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000190, "Member 'BP_ZiplineBase_C_GetValidCollisionDistanceOffset::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.GetCompareHeight
// 0x0058 (0x0058 - 0x0000)
struct BP_ZiplineBase_C_GetCompareHeight final
{
public:
	class USceneComponent*                        A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        B;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Heigher;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lower;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplineBase_C_GetCompareHeight) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_GetCompareHeight");
static_assert(sizeof(BP_ZiplineBase_C_GetCompareHeight) == 0x000058, "Wrong size on BP_ZiplineBase_C_GetCompareHeight");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, A) == 0x000000, "Member 'BP_ZiplineBase_C_GetCompareHeight::A' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, B) == 0x000008, "Member 'BP_ZiplineBase_C_GetCompareHeight::B' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, Heigher) == 0x000010, "Member 'BP_ZiplineBase_C_GetCompareHeight::Heigher' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, Lower) == 0x000018, "Member 'BP_ZiplineBase_C_GetCompareHeight::Lower' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_X) == 0x00002C, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_Z) == 0x000034, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000038, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_X_1) == 0x000044, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_Y_1) == 0x000048, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_BreakVector_Z_1) == 0x00004C, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetCompareHeight, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_ZiplineBase_C_GetCompareHeight::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.GetAnchorComponents
// 0x0050 (0x0050 - 0x0000)
struct BP_ZiplineBase_C_GetAnchorComponents final
{
public:
	class USceneComponent*                        PointA;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StartA;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EndA;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxA;                                              // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LandA;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PointB;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StartB;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EndB;                                              // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxB;                                              // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LandB;                                             // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplineBase_C_GetAnchorComponents) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_GetAnchorComponents");
static_assert(sizeof(BP_ZiplineBase_C_GetAnchorComponents) == 0x000050, "Wrong size on BP_ZiplineBase_C_GetAnchorComponents");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, PointA) == 0x000000, "Member 'BP_ZiplineBase_C_GetAnchorComponents::PointA' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, StartA) == 0x000008, "Member 'BP_ZiplineBase_C_GetAnchorComponents::StartA' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, EndA) == 0x000010, "Member 'BP_ZiplineBase_C_GetAnchorComponents::EndA' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, BoxA) == 0x000018, "Member 'BP_ZiplineBase_C_GetAnchorComponents::BoxA' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, LandA) == 0x000020, "Member 'BP_ZiplineBase_C_GetAnchorComponents::LandA' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, PointB) == 0x000028, "Member 'BP_ZiplineBase_C_GetAnchorComponents::PointB' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, StartB) == 0x000030, "Member 'BP_ZiplineBase_C_GetAnchorComponents::StartB' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, EndB) == 0x000038, "Member 'BP_ZiplineBase_C_GetAnchorComponents::EndB' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, BoxB) == 0x000040, "Member 'BP_ZiplineBase_C_GetAnchorComponents::BoxB' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_GetAnchorComponents, LandB) == 0x000048, "Member 'BP_ZiplineBase_C_GetAnchorComponents::LandB' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.Get Point Location
// 0x00B4 (0x00B4 - 0x0000)
struct BP_ZiplineBase_C_Get_Point_Location final
{
public:
	struct FVector                                PillarLoc;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectedLoc;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZiplineType                                  Zipline_Type;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HorzDir;                                           // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue_1;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplineBase_C_Get_Point_Location) == 0x000004, "Wrong alignment on BP_ZiplineBase_C_Get_Point_Location");
static_assert(sizeof(BP_ZiplineBase_C_Get_Point_Location) == 0x0000B4, "Wrong size on BP_ZiplineBase_C_Get_Point_Location");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, PillarLoc) == 0x000000, "Member 'BP_ZiplineBase_C_Get_Point_Location::PillarLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CorrectedLoc) == 0x00000C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CorrectedLoc' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, Zipline_Type) == 0x000018, "Member 'BP_ZiplineBase_C_Get_Point_Location::Zipline_Type' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, HorzDir) == 0x00001C, "Member 'BP_ZiplineBase_C_Get_Point_Location::HorzDir' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, Temp_bool_Variable) == 0x000028, "Member 'BP_ZiplineBase_C_Get_Point_Location::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, Temp_bool_Variable_1) == 0x000029, "Member 'BP_ZiplineBase_C_Get_Point_Location::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000038, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000050, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_VSizeXY_ReturnValue) == 0x00005C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Multiply_VectorInt_ReturnValue) == 0x000060, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00006C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_VSizeXY_ReturnValue_1) == 0x000078, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_VSizeXY_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x00007C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, K2Node_Select_Default) == 0x00008C, "Member 'BP_ZiplineBase_C_Get_Point_Location::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000098, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, CallFunc_Vector_Normal2D_ReturnValue) == 0x00009C, "Member 'BP_ZiplineBase_C_Get_Point_Location::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_Get_Point_Location, K2Node_Select_Default_1) == 0x0000A8, "Member 'BP_ZiplineBase_C_Get_Point_Location::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.CreatePillar
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ZiplineBase_C_CreatePillar final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ZiplinePillar_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ZiplinePillar_C*                    CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplineBase_C_CreatePillar) == 0x000010, "Wrong alignment on BP_ZiplineBase_C_CreatePillar");
static_assert(sizeof(BP_ZiplineBase_C_CreatePillar) == 0x0000C0, "Wrong size on BP_ZiplineBase_C_CreatePillar");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x00000C, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000024, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_MakeTransform_ReturnValue_1) == 0x000060, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000090, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000098, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000A0, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0000A8, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_Array_AddUnique_ReturnValue) == 0x0000B0, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, CallFunc_Array_Add_ReturnValue) == 0x0000B4, "Member 'BP_ZiplineBase_C_CreatePillar::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CreatePillar, K2Node_SwitchEnum_CmpSuccess) == 0x0000B8, "Member 'BP_ZiplineBase_C_CreatePillar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.FixZipLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_ZiplineBase_C_FixZipLocation final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ZiplinePillar_C*                    K2Node_DynamicCast_AsBP_Zipline_Pillar;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPillarTransform_bSuccess;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplineBase_C_FixZipLocation) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_FixZipLocation");
static_assert(sizeof(BP_ZiplineBase_C_FixZipLocation) == 0x000030, "Wrong size on BP_ZiplineBase_C_FixZipLocation");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ZiplineBase_C_FixZipLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ZiplineBase_C_FixZipLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ZiplineBase_C_FixZipLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_ZiplineBase_C_FixZipLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_ZiplineBase_C_FixZipLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_ZiplineBase_C_FixZipLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, K2Node_DynamicCast_AsBP_Zipline_Pillar) == 0x000020, "Member 'BP_ZiplineBase_C_FixZipLocation::K2Node_DynamicCast_AsBP_Zipline_Pillar' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ZiplineBase_C_FixZipLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_FixZipLocation, CallFunc_SetPillarTransform_bSuccess) == 0x000029, "Member 'BP_ZiplineBase_C_FixZipLocation::CallFunc_SetPillarTransform_bSuccess' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.CalcSideRotation
// 0x0048 (0x0048 - 0x0000)
struct BP_ZiplineBase_C_CalcSideRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ZiplineBase_C_CalcSideRotation) == 0x000004, "Wrong alignment on BP_ZiplineBase_C_CalcSideRotation");
static_assert(sizeof(BP_ZiplineBase_C_CalcSideRotation) == 0x000048, "Wrong size on BP_ZiplineBase_C_CalcSideRotation");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, Rotation) == 0x000000, "Member 'BP_ZiplineBase_C_CalcSideRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_ZiplineBase_C_CalcSideRotation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000018, "Member 'BP_ZiplineBase_C_CalcSideRotation::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'BP_ZiplineBase_C_CalcSideRotation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, CallFunc_Vector_Normal2D_ReturnValue) == 0x000030, "Member 'BP_ZiplineBase_C_CalcSideRotation::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZiplineBase_C_CalcSideRotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00003C, "Member 'BP_ZiplineBase_C_CalcSideRotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");

// Function BP_ZiplineBase.BP_ZiplineBase_C.GetPillars
// 0x0010 (0x0010 - 0x0000)
struct BP_ZiplineBase_C_GetPillars final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZiplineBase_C_GetPillars) == 0x000008, "Wrong alignment on BP_ZiplineBase_C_GetPillars");
static_assert(sizeof(BP_ZiplineBase_C_GetPillars) == 0x000010, "Wrong size on BP_ZiplineBase_C_GetPillars");
static_assert(offsetof(BP_ZiplineBase_C_GetPillars, ReturnValue) == 0x000000, "Member 'BP_ZiplineBase_C_GetPillars::ReturnValue' has a wrong offset!");

}

