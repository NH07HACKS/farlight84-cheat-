#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarFramework

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "SolarFramework_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SolarFramework.SolarContainer
// 0x0000 (0x0028 - 0x0028)
class USolarContainer : public UObject
{
public:
	void ReceiveDeinitialize();
	void ReceiveInitialize();

	bool IsWorldTearingDown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarContainer">();
	}
	static class USolarContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarContainer>();
	}
};
static_assert(alignof(USolarContainer) == 0x000008, "Wrong alignment on USolarContainer");
static_assert(sizeof(USolarContainer) == 0x000028, "Wrong size on USolarContainer");

// Class SolarFramework.SolarAbstractManager
// 0x0000 (0x0028 - 0x0028)
class USolarAbstractManager : public USolarContainer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarAbstractManager">();
	}
	static class USolarAbstractManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarAbstractManager>();
	}
};
static_assert(alignof(USolarAbstractManager) == 0x000008, "Wrong alignment on USolarAbstractManager");
static_assert(sizeof(USolarAbstractManager) == 0x000028, "Wrong size on USolarAbstractManager");

// Class SolarFramework.SolarFrameworkSettings
// 0x0020 (0x0058 - 0x0038)
class USolarFrameworkSettings final : public UDeveloperSettings
{
public:
	TArray<struct FSolarConfigEntry>              ManagerConfigs;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolarConfigEntry>              ModelConfigs;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarFrameworkSettings">();
	}
	static class USolarFrameworkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarFrameworkSettings>();
	}
};
static_assert(alignof(USolarFrameworkSettings) == 0x000008, "Wrong alignment on USolarFrameworkSettings");
static_assert(sizeof(USolarFrameworkSettings) == 0x000058, "Wrong size on USolarFrameworkSettings");
static_assert(offsetof(USolarFrameworkSettings, ManagerConfigs) == 0x000038, "Member 'USolarFrameworkSettings::ManagerConfigs' has a wrong offset!");
static_assert(offsetof(USolarFrameworkSettings, ModelConfigs) == 0x000048, "Member 'USolarFrameworkSettings::ModelConfigs' has a wrong offset!");

// Class SolarFramework.SolarArchitecture
// 0x01A8 (0x0348 - 0x01A0)
class USolarArchitecture : public UGameInstance
{
public:
	TMulticastInlineDelegate<void(EScope InLastScope, EScope InCurScope)> OnOnScopeChangeDelegate;   // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x198];                                    // 0x01B0(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnScopeChanged(EScope InLastScope, EScope InCurScope);

	EScope GetCurScope() const;
	class USolarAbstractManager* GetManager(const TSubclassOf<class USolarAbstractManager>& ManagerClass) const;
	class USolarAbstractModel* GetModel(const TSubclassOf<class USolarAbstractModel>& ModelClass) const;
	bool IsInScope(EScope InScopeMask) const;
	bool IsLastScopeLogin() const;
	bool IsLatScopeLobby() const;
	bool IsScopeBattle() const;
	bool IsScopeLobby() const;
	bool IsScopeLogin() const;
	bool IsScopeSettlement() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarArchitecture">();
	}
	static class USolarArchitecture* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarArchitecture>();
	}
};
static_assert(alignof(USolarArchitecture) == 0x000008, "Wrong alignment on USolarArchitecture");
static_assert(sizeof(USolarArchitecture) == 0x000348, "Wrong size on USolarArchitecture");
static_assert(offsetof(USolarArchitecture, OnOnScopeChangeDelegate) == 0x0001A0, "Member 'USolarArchitecture::OnOnScopeChangeDelegate' has a wrong offset!");

// Class SolarFramework.SolarAbstractModel
// 0x0000 (0x0028 - 0x0028)
class USolarAbstractModel : public USolarContainer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarAbstractModel">();
	}
	static class USolarAbstractModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarAbstractModel>();
	}
};
static_assert(alignof(USolarAbstractModel) == 0x000008, "Wrong alignment on USolarAbstractModel");
static_assert(sizeof(USolarAbstractModel) == 0x000028, "Wrong size on USolarAbstractModel");

}

