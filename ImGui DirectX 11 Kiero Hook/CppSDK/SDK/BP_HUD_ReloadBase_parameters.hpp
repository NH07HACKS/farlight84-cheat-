#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_ReloadBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.ExecuteUbergraph_BP_HUD_ReloadBase
// 0x0068 (0x0068 - 0x0000)
struct BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbQuitState;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bReloadSpeedup;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            K2Node_Event_InActiveCrosshair;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbQuitState_1;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InbReloadSuccess;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InReloadAmmo_1;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReservedAmmo_1;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo_2;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InAmmoProgress_1;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReservedAmmo;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo_1;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InAmmoProgress;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbFirst;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InbCharging;                          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InChargeMode;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InChargeProgress;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InReloadProgress_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InOverloadProgress;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InOverloadWarningRate;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbOverloadState;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InReloadProgress;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReloadAmmo;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_InColor;                              // 0x0058(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase) == 0x000008, "Wrong alignment on BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase");
static_assert(sizeof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase) == 0x000068, "Wrong size on BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, EntryPoint) == 0x000000, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbQuitState) == 0x000004, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbQuitState' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_bReloadSpeedup) == 0x000005, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_bReloadSpeedup' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InActiveCrosshair) == 0x000008, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InActiveCrosshair' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbQuitState_1) == 0x000010, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbQuitState_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbReloadSuccess) == 0x000011, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbReloadSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReloadAmmo_1) == 0x000014, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReloadAmmo_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReservedAmmo_1) == 0x000018, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReservedAmmo_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InMaxAmmo_2) == 0x00001C, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InMaxAmmo_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InAmmoProgress_1) == 0x000020, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InAmmoProgress_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReservedAmmo) == 0x000024, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReservedAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InMaxAmmo_1) == 0x000028, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InMaxAmmo_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InAmmoProgress) == 0x00002C, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InAmmoProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbFirst) == 0x000030, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbFirst' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbCharging) == 0x000031, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbCharging' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InChargeMode) == 0x000034, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InChargeMode' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InChargeProgress) == 0x000038, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InChargeProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReloadProgress_1) == 0x00003C, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReloadProgress_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InOverloadProgress) == 0x000040, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InOverloadProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InOverloadWarningRate) == 0x000044, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InOverloadWarningRate' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InbOverloadState) == 0x000048, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InbOverloadState' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReloadProgress) == 0x00004C, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReloadProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InReloadAmmo) == 0x000050, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InReloadAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InMaxAmmo) == 0x000054, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InMaxAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase, K2Node_Event_InColor) == 0x000058, "Member 'BP_HUD_ReloadBase_C_ExecuteUbergraph_BP_HUD_ReloadBase::K2Node_Event_InColor' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnChangeReloadState
// 0x0002 (0x0002 - 0x0000)
struct BP_HUD_ReloadBase_C_OnChangeReloadState final
{
public:
	bool                                          InbQuitState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReloadSpeedup;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnChangeReloadState) == 0x000001, "Wrong alignment on BP_HUD_ReloadBase_C_OnChangeReloadState");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnChangeReloadState) == 0x000002, "Wrong size on BP_HUD_ReloadBase_C_OnChangeReloadState");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnChangeReloadState, InbQuitState) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnChangeReloadState::InbQuitState' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnChangeReloadState, bReloadSpeedup) == 0x000001, "Member 'BP_HUD_ReloadBase_C_OnChangeReloadState::bReloadSpeedup' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.SetAmmoColor
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_ReloadBase_C_SetAmmoColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_SetAmmoColor) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_SetAmmoColor");
static_assert(sizeof(BP_HUD_ReloadBase_C_SetAmmoColor) == 0x000010, "Wrong size on BP_HUD_ReloadBase_C_SetAmmoColor");
static_assert(offsetof(BP_HUD_ReloadBase_C_SetAmmoColor, InColor) == 0x000000, "Member 'BP_HUD_ReloadBase_C_SetAmmoColor::InColor' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnUpdateReload
// 0x000C (0x000C - 0x0000)
struct BP_HUD_ReloadBase_C_OnUpdateReload final
{
public:
	float                                         InReloadProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InReloadAmmo;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnUpdateReload) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnUpdateReload");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnUpdateReload) == 0x00000C, "Wrong size on BP_HUD_ReloadBase_C_OnUpdateReload");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateReload, InReloadProgress) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnUpdateReload::InReloadProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateReload, InReloadAmmo) == 0x000004, "Member 'BP_HUD_ReloadBase_C_OnUpdateReload::InReloadAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateReload, InMaxAmmo) == 0x000008, "Member 'BP_HUD_ReloadBase_C_OnUpdateReload::InMaxAmmo' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnUpdateOverload
// 0x000C (0x000C - 0x0000)
struct BP_HUD_ReloadBase_C_OnUpdateOverload final
{
public:
	float                                         InOverloadProgress;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InOverloadWarningRate;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InbOverloadState;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnUpdateOverload) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnUpdateOverload");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnUpdateOverload) == 0x00000C, "Wrong size on BP_HUD_ReloadBase_C_OnUpdateOverload");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateOverload, InOverloadProgress) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnUpdateOverload::InOverloadProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateOverload, InOverloadWarningRate) == 0x000004, "Member 'BP_HUD_ReloadBase_C_OnUpdateOverload::InOverloadWarningRate' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateOverload, InbOverloadState) == 0x000008, "Member 'BP_HUD_ReloadBase_C_OnUpdateOverload::InbOverloadState' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnUpdateCoolDown
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_ReloadBase_C_OnUpdateCoolDown final
{
public:
	float                                         InReloadProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnUpdateCoolDown) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnUpdateCoolDown");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnUpdateCoolDown) == 0x000004, "Wrong size on BP_HUD_ReloadBase_C_OnUpdateCoolDown");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateCoolDown, InReloadProgress) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnUpdateCoolDown::InReloadProgress' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnUpdateCharge
// 0x000C (0x000C - 0x0000)
struct BP_HUD_ReloadBase_C_OnUpdateCharge final
{
public:
	bool                                          InbCharging;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InChargeMode;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InChargeProgress;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnUpdateCharge) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnUpdateCharge");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnUpdateCharge) == 0x00000C, "Wrong size on BP_HUD_ReloadBase_C_OnUpdateCharge");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateCharge, InbCharging) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnUpdateCharge::InbCharging' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateCharge, InChargeMode) == 0x000004, "Member 'BP_HUD_ReloadBase_C_OnUpdateCharge::InChargeMode' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateCharge, InChargeProgress) == 0x000008, "Member 'BP_HUD_ReloadBase_C_OnUpdateCharge::InChargeProgress' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnUpdateAmmo
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_ReloadBase_C_OnUpdateAmmo final
{
public:
	int32                                         InReservedAmmo;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAmmoProgress;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InbFirst;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnUpdateAmmo) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnUpdateAmmo");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnUpdateAmmo) == 0x000010, "Wrong size on BP_HUD_ReloadBase_C_OnUpdateAmmo");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateAmmo, InReservedAmmo) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnUpdateAmmo::InReservedAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateAmmo, InMaxAmmo) == 0x000004, "Member 'BP_HUD_ReloadBase_C_OnUpdateAmmo::InMaxAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateAmmo, InAmmoProgress) == 0x000008, "Member 'BP_HUD_ReloadBase_C_OnUpdateAmmo::InAmmoProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnUpdateAmmo, InbFirst) == 0x00000C, "Member 'BP_HUD_ReloadBase_C_OnUpdateAmmo::InbFirst' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnReloadFinish
// 0x0014 (0x0014 - 0x0000)
struct BP_HUD_ReloadBase_C_OnReloadFinish final
{
public:
	bool                                          InbReloadSuccess;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InReloadAmmo;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InReservedAmmo;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAmmoProgress;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnReloadFinish) == 0x000004, "Wrong alignment on BP_HUD_ReloadBase_C_OnReloadFinish");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnReloadFinish) == 0x000014, "Wrong size on BP_HUD_ReloadBase_C_OnReloadFinish");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnReloadFinish, InbReloadSuccess) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnReloadFinish::InbReloadSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnReloadFinish, InReloadAmmo) == 0x000004, "Member 'BP_HUD_ReloadBase_C_OnReloadFinish::InReloadAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnReloadFinish, InReservedAmmo) == 0x000008, "Member 'BP_HUD_ReloadBase_C_OnReloadFinish::InReservedAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnReloadFinish, InMaxAmmo) == 0x00000C, "Member 'BP_HUD_ReloadBase_C_OnReloadFinish::InMaxAmmo' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnReloadFinish, InAmmoProgress) == 0x000010, "Member 'BP_HUD_ReloadBase_C_OnReloadFinish::InAmmoProgress' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnChangeOverloadState
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_ReloadBase_C_OnChangeOverloadState final
{
public:
	bool                                          InbQuitState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnChangeOverloadState) == 0x000001, "Wrong alignment on BP_HUD_ReloadBase_C_OnChangeOverloadState");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnChangeOverloadState) == 0x000001, "Wrong size on BP_HUD_ReloadBase_C_OnChangeOverloadState");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnChangeOverloadState, InbQuitState) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnChangeOverloadState::InbQuitState' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.OnActiveCrosshair
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_ReloadBase_C_OnActiveCrosshair final
{
public:
	class UUserWidget*                            InActiveCrosshair;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_OnActiveCrosshair) == 0x000008, "Wrong alignment on BP_HUD_ReloadBase_C_OnActiveCrosshair");
static_assert(sizeof(BP_HUD_ReloadBase_C_OnActiveCrosshair) == 0x000008, "Wrong size on BP_HUD_ReloadBase_C_OnActiveCrosshair");
static_assert(offsetof(BP_HUD_ReloadBase_C_OnActiveCrosshair, InActiveCrosshair) == 0x000000, "Member 'BP_HUD_ReloadBase_C_OnActiveCrosshair::InActiveCrosshair' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.PlayReloadAnimation
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_ReloadBase_C_PlayReloadAnimation final
{
public:
	bool                                          HaveBuff;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       CallFunc_GetReloadAnimation_OutReloadAnimation;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_PlayReloadAnimation) == 0x000008, "Wrong alignment on BP_HUD_ReloadBase_C_PlayReloadAnimation");
static_assert(sizeof(BP_HUD_ReloadBase_C_PlayReloadAnimation) == 0x000020, "Wrong size on BP_HUD_ReloadBase_C_PlayReloadAnimation");
static_assert(offsetof(BP_HUD_ReloadBase_C_PlayReloadAnimation, HaveBuff) == 0x000000, "Member 'BP_HUD_ReloadBase_C_PlayReloadAnimation::HaveBuff' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_PlayReloadAnimation, CallFunc_GetReloadAnimation_OutReloadAnimation) == 0x000008, "Member 'BP_HUD_ReloadBase_C_PlayReloadAnimation::CallFunc_GetReloadAnimation_OutReloadAnimation' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_PlayReloadAnimation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_HUD_ReloadBase_C_PlayReloadAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_PlayReloadAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_ReloadBase_C_PlayReloadAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.GetReloadAnimation
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_ReloadBase_C_GetReloadAnimation final
{
public:
	bool                                          HaveBuff;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       OutReloadAnimation;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_ReloadBase_C_GetReloadAnimation) == 0x000008, "Wrong alignment on BP_HUD_ReloadBase_C_GetReloadAnimation");
static_assert(sizeof(BP_HUD_ReloadBase_C_GetReloadAnimation) == 0x000010, "Wrong size on BP_HUD_ReloadBase_C_GetReloadAnimation");
static_assert(offsetof(BP_HUD_ReloadBase_C_GetReloadAnimation, HaveBuff) == 0x000000, "Member 'BP_HUD_ReloadBase_C_GetReloadAnimation::HaveBuff' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_GetReloadAnimation, OutReloadAnimation) == 0x000008, "Member 'BP_HUD_ReloadBase_C_GetReloadAnimation::OutReloadAnimation' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.StopReloadAnimation
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_ReloadBase_C_StopReloadAnimation final
{
public:
	class UWidgetAnimation*                       CallFunc_GetReloadAnimation_OutReloadAnimation;    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_StopReloadAnimation) == 0x000008, "Wrong alignment on BP_HUD_ReloadBase_C_StopReloadAnimation");
static_assert(sizeof(BP_HUD_ReloadBase_C_StopReloadAnimation) == 0x000010, "Wrong size on BP_HUD_ReloadBase_C_StopReloadAnimation");
static_assert(offsetof(BP_HUD_ReloadBase_C_StopReloadAnimation, CallFunc_GetReloadAnimation_OutReloadAnimation) == 0x000000, "Member 'BP_HUD_ReloadBase_C_StopReloadAnimation::CallFunc_GetReloadAnimation_OutReloadAnimation' has a wrong offset!");
static_assert(offsetof(BP_HUD_ReloadBase_C_StopReloadAnimation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_HUD_ReloadBase_C_StopReloadAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_HUD_ReloadBase.BP_HUD_ReloadBase_C.SetSpeedUpBuff
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_ReloadBase_C_SetSpeedUpBuff final
{
public:
	bool                                          bHaveBuff;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_ReloadBase_C_SetSpeedUpBuff) == 0x000001, "Wrong alignment on BP_HUD_ReloadBase_C_SetSpeedUpBuff");
static_assert(sizeof(BP_HUD_ReloadBase_C_SetSpeedUpBuff) == 0x000001, "Wrong size on BP_HUD_ReloadBase_C_SetSpeedUpBuff");
static_assert(offsetof(BP_HUD_ReloadBase_C_SetSpeedUpBuff, bHaveBuff) == 0x000000, "Member 'BP_HUD_ReloadBase_C_SetSpeedUpBuff::bHaveBuff' has a wrong offset!");

}

