#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnLua

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "InputCore_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UnLua.UnLuaInterface
// 0x0000 (0x0000 - 0x0000)
class IUnLuaInterface final
{
public:
	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnLuaInterface">();
	}
	static class IUnLuaInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUnLuaInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IUnLuaInterface) == 0x000001, "Wrong alignment on IUnLuaInterface");
static_assert(sizeof(IUnLuaInterface) == 0x000001, "Wrong size on IUnLuaInterface");

// Class UnLua.UnLuaManager
// 0x0590 (0x05B8 - 0x0028)
class UUnLuaManager final : public UObject
{
public:
	uint8                                         Pad_28[0x590];                                     // 0x0028(0x0590)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InputAction(const struct FKey& Key);
	void InputAxis(float AxisValue);
	void InputGesture(float Value);
	void InputTouch(ETouchIndex FingerIndex, const struct FVector& Location);
	void InputVectorAxis(const struct FVector& AxisValue);
	void OnActorDestroyed(class AActor* Actor);
	void OnLatentActionCompleted(int32 LinkID);
	void TriggerAnimNotify();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnLuaManager">();
	}
	static class UUnLuaManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnLuaManager>();
	}
};
static_assert(alignof(UUnLuaManager) == 0x000008, "Wrong alignment on UUnLuaManager");
static_assert(sizeof(UUnLuaManager) == 0x0005B8, "Wrong size on UUnLuaManager");

// Class UnLua.UnLuaPerformanceTestProxy
// 0x0060 (0x0338 - 0x02D8)
class AUnLuaPerformanceTestProxy final : public AActor
{
public:
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeshId;                                            // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MeshName;                                          // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                COM;                                               // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Indices;                                           // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        Positions;                                         // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        PredictedPositions;                                // 0x0328(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void NOP();
	void Simulate(float DeltaTime);
	void UpdateIndices(const TArray<int32>& NewIndices);
	int32 UpdateMeshID(int32 NewID);
	class FString UpdateMeshName(const class FString& NewName);
	void UpdatePositions(const TArray<struct FVector>& NewPositions);

	const struct FVector GetCOM() const;
	void GetIndices(TArray<int32>* OutIndices) const;
	int32 GetMeshID() const;
	bool GetMeshInfo(int32* OutMeshID, class FString* OutMeshName, struct FVector* OutCOM, TArray<int32>* OutIndices, TArray<struct FVector>* OutPositions, TArray<struct FVector>* OutPredictedPositions) const;
	class FString GetMeshName() const;
	void GetPositions(TArray<struct FVector>* OutPositions) const;
	const TArray<struct FVector> GetPredictedPositions() const;
	bool Raycast(const struct FVector& Origin, const struct FVector& Direction) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnLuaPerformanceTestProxy">();
	}
	static class AUnLuaPerformanceTestProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnLuaPerformanceTestProxy>();
	}
};
static_assert(alignof(AUnLuaPerformanceTestProxy) == 0x000008, "Wrong alignment on AUnLuaPerformanceTestProxy");
static_assert(sizeof(AUnLuaPerformanceTestProxy) == 0x000338, "Wrong size on AUnLuaPerformanceTestProxy");
static_assert(offsetof(AUnLuaPerformanceTestProxy, MeshId) == 0x0002E0, "Member 'AUnLuaPerformanceTestProxy::MeshId' has a wrong offset!");
static_assert(offsetof(AUnLuaPerformanceTestProxy, MeshName) == 0x0002E8, "Member 'AUnLuaPerformanceTestProxy::MeshName' has a wrong offset!");
static_assert(offsetof(AUnLuaPerformanceTestProxy, COM) == 0x0002F8, "Member 'AUnLuaPerformanceTestProxy::COM' has a wrong offset!");
static_assert(offsetof(AUnLuaPerformanceTestProxy, Indices) == 0x000308, "Member 'AUnLuaPerformanceTestProxy::Indices' has a wrong offset!");
static_assert(offsetof(AUnLuaPerformanceTestProxy, Positions) == 0x000318, "Member 'AUnLuaPerformanceTestProxy::Positions' has a wrong offset!");
static_assert(offsetof(AUnLuaPerformanceTestProxy, PredictedPositions) == 0x000328, "Member 'AUnLuaPerformanceTestProxy::PredictedPositions' has a wrong offset!");

}

