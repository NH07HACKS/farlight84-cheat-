#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_FppEmoji

#include "Basic.hpp"

#include "SolarUI_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_Component_FppEmoji_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_FppEmoji_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_Component_FppEmoji_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_Component_FppEmoji_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_Component_FppEmoji_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_FppEmoji_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_Component_FppEmoji_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_Component_FppEmoji_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_Component_FppEmoji_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_FppEmoji_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_FppEmoji_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_Component_FppEmoji_C_OnListItemObjectSet");
static_assert(sizeof(UI_Component_FppEmoji_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_Component_FppEmoji_C_OnListItemObjectSet");
static_assert(offsetof(UI_Component_FppEmoji_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_Component_FppEmoji_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_FppEmoji_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_PreConstruct");
static_assert(sizeof(UI_Component_FppEmoji_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_PreConstruct");
static_assert(offsetof(UI_Component_FppEmoji_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_FppEmoji_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_FppEmoji_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_ReceivePlatformLayout");
static_assert(sizeof(UI_Component_FppEmoji_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_ReceivePlatformLayout");
static_assert(offsetof(UI_Component_FppEmoji_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_Component_FppEmoji_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.OnSetEmojiType
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_FppEmoji_C_OnSetEmojiType final
{
public:
	EFPPEmojiHUDType                              InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_FppEmoji_C_OnSetEmojiType) == 0x000001, "Wrong alignment on UI_Component_FppEmoji_C_OnSetEmojiType");
static_assert(sizeof(UI_Component_FppEmoji_C_OnSetEmojiType) == 0x000001, "Wrong size on UI_Component_FppEmoji_C_OnSetEmojiType");
static_assert(offsetof(UI_Component_FppEmoji_C_OnSetEmojiType, InType) == 0x000000, "Member 'UI_Component_FppEmoji_C_OnSetEmojiType::InType' has a wrong offset!");

// Function UI_Component_FppEmoji.UI_Component_FppEmoji_C.ExecuteUbergraph_UI_Component_FppEmoji
// 0x0028 (0x0028 - 0x0000)
struct UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFPPEmojiHUDType                              K2Node_Event_InType;                               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji) == 0x000008, "Wrong alignment on UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji");
static_assert(sizeof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji) == 0x000028, "Wrong size on UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, EntryPoint) == 0x000000, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000008, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_bIsExpanded) == 0x000011, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_bIsSelected) == 0x000012, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_ListItemObject) == 0x000018, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_IsDesignTime) == 0x000020, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_InLayoutType) == 0x000021, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_Event_InType) == 0x000022, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_Event_InType' has a wrong offset!");
static_assert(offsetof(UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji, K2Node_SwitchEnum_CmpSuccess) == 0x000023, "Member 'UI_Component_FppEmoji_C_ExecuteUbergraph_UI_Component_FppEmoji::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

