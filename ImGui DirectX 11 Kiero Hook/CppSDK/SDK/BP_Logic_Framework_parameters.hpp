#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Logic_Framework

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_Logic_Framework.BP_Logic_Framework_C.ExecuteUbergraph_BP_Logic_Framework
// 0x0120 (0x0120 - 0x0000)
struct BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_Player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             K2Node_Event_OutType;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_OfflineTimeoutPlayer_1;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_OfflineTimeoutPlayer;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_CustomEvent_Player;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             K2Node_CustomEvent_OutType;                        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_Player_2;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             K2Node_Event_OutType_1;                            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_LevelName;                            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_OfflinePlayer;                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_NewPlayer;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAI;                                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc__S_PlayInEditor_bIsEditor;                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_Framework_C*              K2Node_DynamicCast_AsBP_Game_State_Framework;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_Framework_C*              K2Node_DynamicCast_AsBP_Game_State_Framework_1;    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_CheatPlayer_1;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_Player_1;                             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_CheatPlayer;                          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RPCId;                                // 0x0118(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework");
static_assert(sizeof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework) == 0x000120, "Wrong size on BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, EntryPoint) == 0x000000, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_Player) == 0x000008, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_OutType) == 0x000010, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_OutType' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, Temp_bool_Has_Been_Initd_Variable) == 0x000011, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, Temp_bool_IsClosed_Variable) == 0x000012, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_OfflineTimeoutPlayer_1) == 0x000018, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_OfflineTimeoutPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_OfflineTimeoutPlayer) == 0x000020, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_OfflineTimeoutPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000038, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000048, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000058, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_CustomEvent_Player) == 0x000068, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_CustomEvent_OutType) == 0x000070, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_CustomEvent_OutType' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_Player_2) == 0x000078, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_Player_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_OutType_1) == 0x000080, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_OutType_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_LevelName) == 0x000088, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_LevelName' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_OfflinePlayer) == 0x000098, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_OfflinePlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000A0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000B0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_NewPlayer) == 0x0000C0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_IsAI) == 0x0000C8, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_IsAI' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc__S_PlayInEditor_bIsEditor) == 0x0000C9, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc__S_PlayInEditor_bIsEditor' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_GetGameState_ReturnValue) == 0x0000D0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_DynamicCast_AsBP_Game_State_Framework) == 0x0000D8, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_DynamicCast_AsBP_Game_State_Framework' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, CallFunc_GetGameState_ReturnValue_1) == 0x0000E8, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_DynamicCast_AsBP_Game_State_Framework_1) == 0x0000F0, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_DynamicCast_AsBP_Game_State_Framework_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_DynamicCast_bSuccess_1) == 0x0000F8, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_CheatPlayer_1) == 0x000100, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_CheatPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_Player_1) == 0x000108, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_Player_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_CheatPlayer) == 0x000110, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_CheatPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_Event_RPCId) == 0x000118, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_Event_RPCId' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework, K2Node_SwitchInteger_CmpSuccess) == 0x00011C, "Member 'BP_Logic_Framework_C_ExecuteUbergraph_BP_Logic_Framework::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.Custom Room Start
// 0x0050 (0x0050 - 0x0000)
struct BP_Logic_Framework_C_Custom_Room_Start final
{
public:
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0000(0x0050)(ConstParm)
};
static_assert(alignof(BP_Logic_Framework_C_Custom_Room_Start) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_Custom_Room_Start");
static_assert(sizeof(BP_Logic_Framework_C_Custom_Room_Start) == 0x000050, "Wrong size on BP_Logic_Framework_C_Custom_Room_Start");
static_assert(offsetof(BP_Logic_Framework_C_Custom_Room_Start, K2Node_MakeMap_Map) == 0x000000, "Member 'BP_Logic_Framework_C_Custom_Room_Start::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerQuit
// 0x0018 (0x0018 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerQuit final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACustomRoomManager*                     CallFunc_GetCustomRoomManager_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCustomRoomMode_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRoomOwner_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInPreparation_ReturnValue;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerQuit) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerQuit");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerQuit) == 0x000018, "Wrong size on BP_Logic_Framework_C_OnPlayerQuit");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, Player) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerQuit::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_GetCustomRoomManager_ReturnValue) == 0x000008, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_GetCustomRoomManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_IsCustomRoomMode_ReturnValue) == 0x000010, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_IsCustomRoomMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_IsRoomOwner_ReturnValue) == 0x000011, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_IsRoomOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_IsInPreparation_ReturnValue) == 0x000012, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_IsInPreparation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerQuit, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'BP_Logic_Framework_C_OnPlayerQuit::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.PresettleAll
// 0x0068 (0x0068 - 0x0000)
struct BP_Logic_Framework_C_PresettleAll final
{
public:
	TArray<class FString>                         Temp_string_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0010(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESCMPlayerState>                       Temp_byte_Variable_1;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_Framework_C_PresettleAll) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_PresettleAll");
static_assert(sizeof(BP_Logic_Framework_C_PresettleAll) == 0x000068, "Wrong size on BP_Logic_Framework_C_PresettleAll");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, Temp_string_Variable) == 0x000000, "Member 'BP_Logic_Framework_C_PresettleAll::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, Temp_byte_Variable) == 0x000010, "Member 'BP_Logic_Framework_C_PresettleAll::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_Logic_Framework_C_PresettleAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_Logic_Framework_C_PresettleAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, Temp_byte_Variable_1) == 0x000030, "Member 'BP_Logic_Framework_C_PresettleAll::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_FindPlayers_ReturnValue) == 0x000040, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PresettleAll, CallFunc_BooleanOR_ReturnValue) == 0x000062, "Member 'BP_Logic_Framework_C_PresettleAll::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.Get Current Player Count
// 0x0070 (0x0070 - 0x0000)
struct BP_Logic_Framework_C_Get_Current_Player_Count final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_string_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<ESCMPlayerState>                       K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_Get_Current_Player_Count) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_Get_Current_Player_Count");
static_assert(sizeof(BP_Logic_Framework_C_Get_Current_Player_Count) == 0x000070, "Wrong size on BP_Logic_Framework_C_Get_Current_Player_Count");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, Result) == 0x000000, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, Temp_string_Variable) == 0x000008, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, Temp_byte_Variable) == 0x000018, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, CallFunc_FindPlayers_ReturnValue) == 0x000038, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, CallFunc_Conv_IntToString_ReturnValue) == 0x000050, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_Get_Current_Player_Count, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_Logic_Framework_C_Get_Current_Player_Count::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerOfflineTimeOut
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerOfflineTimeOut final
{
public:
	class ASCMPlayerState*                        OfflineTimeoutPlayer;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerOfflineTimeOut) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerOfflineTimeOut");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerOfflineTimeOut) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerOfflineTimeOut");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerOfflineTimeOut, OfflineTimeoutPlayer) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerOfflineTimeOut::OfflineTimeoutPlayer' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerGiveUp
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerGiveUp final
{
public:
	class ASCMPlayerState*                        OfflineTimeoutPlayer;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerGiveUp) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerGiveUp");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerGiveUp) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerGiveUp");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerGiveUp, OfflineTimeoutPlayer) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerGiveUp::OfflineTimeoutPlayer' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.PreSettle
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_Framework_C_PreSettle final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_PreSettle) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_PreSettle");
static_assert(sizeof(BP_Logic_Framework_C_PreSettle) == 0x000010, "Wrong size on BP_Logic_Framework_C_PreSettle");
static_assert(offsetof(BP_Logic_Framework_C_PreSettle, Player) == 0x000000, "Member 'BP_Logic_Framework_C_PreSettle::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_PreSettle, OutType) == 0x000008, "Member 'BP_Logic_Framework_C_PreSettle::OutType' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceivePlayerBattleEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_Framework_C_ReceivePlayerBattleEnd final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_ReceivePlayerBattleEnd) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_ReceivePlayerBattleEnd");
static_assert(sizeof(BP_Logic_Framework_C_ReceivePlayerBattleEnd) == 0x000010, "Wrong size on BP_Logic_Framework_C_ReceivePlayerBattleEnd");
static_assert(offsetof(BP_Logic_Framework_C_ReceivePlayerBattleEnd, Player) == 0x000000, "Member 'BP_Logic_Framework_C_ReceivePlayerBattleEnd::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ReceivePlayerBattleEnd, OutType) == 0x000008, "Member 'BP_Logic_Framework_C_ReceivePlayerBattleEnd::OutType' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveServerLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_Framework_C_ReceiveServerLevelLoaded final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_ReceiveServerLevelLoaded) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_ReceiveServerLevelLoaded");
static_assert(sizeof(BP_Logic_Framework_C_ReceiveServerLevelLoaded) == 0x000010, "Wrong size on BP_Logic_Framework_C_ReceiveServerLevelLoaded");
static_assert(offsetof(BP_Logic_Framework_C_ReceiveServerLevelLoaded, LevelName) == 0x000000, "Member 'BP_Logic_Framework_C_ReceiveServerLevelLoaded::LevelName' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerDisconnect
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerDisconnect final
{
public:
	class ASCMPlayerState*                        OfflinePlayer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerDisconnect) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerDisconnect");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerDisconnect) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerDisconnect");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerDisconnect, OfflinePlayer) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerDisconnect::OfflinePlayer' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceivePlayerJoinBattle
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_Framework_C_ReceivePlayerJoinBattle final
{
public:
	class ASCMPlayerState*                        NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAI;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_Framework_C_ReceivePlayerJoinBattle) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_ReceivePlayerJoinBattle");
static_assert(sizeof(BP_Logic_Framework_C_ReceivePlayerJoinBattle) == 0x000010, "Wrong size on BP_Logic_Framework_C_ReceivePlayerJoinBattle");
static_assert(offsetof(BP_Logic_Framework_C_ReceivePlayerJoinBattle, NewPlayer) == 0x000000, "Member 'BP_Logic_Framework_C_ReceivePlayerJoinBattle::NewPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ReceivePlayerJoinBattle, IsAI) == 0x000008, "Member 'BP_Logic_Framework_C_ReceivePlayerJoinBattle::IsAI' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerCheat
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerCheat final
{
public:
	class ASCMPlayerState*                        CheatPlayer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerCheat) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerCheat");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerCheat) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerCheat");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerCheat, CheatPlayer) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerCheat::CheatPlayer' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerReconnect
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerReconnect final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerReconnect) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerReconnect");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerReconnect) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerReconnect");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerReconnect, Player) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerReconnect::Player' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnPlayerAbnormal
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_Framework_C_OnPlayerAbnormal final
{
public:
	class ASCMPlayerState*                        CheatPlayer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnPlayerAbnormal) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_OnPlayerAbnormal");
static_assert(sizeof(BP_Logic_Framework_C_OnPlayerAbnormal) == 0x000008, "Wrong size on BP_Logic_Framework_C_OnPlayerAbnormal");
static_assert(offsetof(BP_Logic_Framework_C_OnPlayerAbnormal, CheatPlayer) == 0x000000, "Member 'BP_Logic_Framework_C_OnPlayerAbnormal::CheatPlayer' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.OnMatchingClosed
// 0x0004 (0x0004 - 0x0000)
struct BP_Logic_Framework_C_OnMatchingClosed final
{
public:
	int32                                         RPCId;                                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_OnMatchingClosed) == 0x000004, "Wrong alignment on BP_Logic_Framework_C_OnMatchingClosed");
static_assert(sizeof(BP_Logic_Framework_C_OnMatchingClosed) == 0x000004, "Wrong size on BP_Logic_Framework_C_OnMatchingClosed");
static_assert(offsetof(BP_Logic_Framework_C_OnMatchingClosed, RPCId) == 0x000000, "Member 'BP_Logic_Framework_C_OnMatchingClosed::RPCId' has a wrong offset!");

// Function BP_Logic_Framework.BP_Logic_Framework_C.ReceiveTargetPlayerBattleEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd) == 0x000008, "Wrong alignment on BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd");
static_assert(sizeof(BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd) == 0x000010, "Wrong size on BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd");
static_assert(offsetof(BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd, Player) == 0x000000, "Member 'BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd, OutType) == 0x000008, "Member 'BP_Logic_Framework_C_ReceiveTargetPlayerBattleEnd::OutType' has a wrong offset!");

}

