#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TutorialSequence_2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LevelSequence_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TutorialSequence_2.SequenceDirector_C
// 0x0008 (0x0040 - 0x0038)
class TutorialSequence_2::USequenceDirector_C final : public ULevelSequenceDirector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, DuplicateTransient)

public:
	void ExecuteUbergraph_SequenceDirector(int32 EntryPoint);
	void InitMoveAndAttackActor(class ABP_BotAISpawnerInGuide_Sequence_C* Spawner);
	void Duck_Roll(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck, int32 StepID);
	void CineCameraActor_seq_2_Event_0(class ACineCameraActor* CineCameraActor_seq_2);
	void Duck_Move_2(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck, int32 StepID);
	void Duck_StopRoll(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck, int32 StepID);
	void Lover_Move(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Ducksyde_Move(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck, int32 StepID);
	void Lover_ReadyToFight(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Lover_Move_3(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Lover_BombActivate(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Ducksyde_Move_2(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Lover_ReleaseBomb(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR, int32 StepID);
	void Duck_ReadyToFight(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck, int32 StepID);
	void SequenceEvent__ENTRYPOINTSequenceDirector_0(class ACineCameraActor* CineCameraActor_seq_2);
	void SequenceEvent__ENTRYPOINTSequenceDirector_1(class ABP_BotAISpawnerInGuide_Sequence_C* Spawner);
	void SequenceEvent__ENTRYPOINTSequenceDirector_2(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_3(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_4(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_5(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_6(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_7(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_LR);
	void SequenceEvent__ENTRYPOINTSequenceDirector_8(class ABP_BotAISpawnerInGuide_Sequence_C* Spawner);
	void SequenceEvent__ENTRYPOINTSequenceDirector_9(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck);
	void SequenceEvent__ENTRYPOINTSequenceDirector_10(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck);
	void SequenceEvent__ENTRYPOINTSequenceDirector_11(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck);
	void SequenceEvent__ENTRYPOINTSequenceDirector_12(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck);
	void SequenceEvent__ENTRYPOINTSequenceDirector_13(class ABP_BotAISpawnerInGuide_Sequence_C* BP_BotAISpawnerInSequence_Duck);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueprintGeneratedClass TutorialSequence_2.SequenceDirector_C", true, "SequenceDirector_C">();
	}
	static class TutorialSequence_2::USequenceDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<TutorialSequence_2::USequenceDirector_C>();
	}
};
static_assert(alignof(TutorialSequence_2::USequenceDirector_C) == 0x000008, "Wrong alignment on TutorialSequence_2::USequenceDirector_C");
static_assert(sizeof(TutorialSequence_2::USequenceDirector_C) == 0x000040, "Wrong size on TutorialSequence_2::USequenceDirector_C");
static_assert(offsetof(TutorialSequence_2::USequenceDirector_C, UberGraphFrame) == 0x000038, "Member 'TutorialSequence_2::USequenceDirector_C::UberGraphFrame' has a wrong offset!");

}

