#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarUI

#include "Basic.hpp"

#include "SolarUI_classes.hpp"
#include "SolarUI_parameters.hpp"


namespace SDK
{

// Function SolarUI.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetParameters
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FWidgetOverrideParam>&Params_0                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISolarAdapterSlotInterface::OnChangeAdapterSlotWidgetParameters(const TArray<struct FWidgetOverrideParam>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SolarAdapterSlotInterface", "OnChangeAdapterSlotWidgetParameters");

	Params::SolarAdapterSlotInterface_OnChangeAdapterSlotWidgetParameters Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterSlotInterface.OnLoadAdapterSlotWidgetFinished
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISolarAdapterSlotInterface::OnLoadAdapterSlotWidgetFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SolarAdapterSlotInterface", "OnLoadAdapterSlotWidgetFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetAutoWrapText
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAutoWrapText                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetAutoWrapText(bool bInAutoWrapText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetAutoWrapText");

	Params::SolarScrollTextBase_SetAutoWrapText Parms{};

	Parms.bInAutoWrapText = bInAutoWrapText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetDisplayTime
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDisplayTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetDisplayTime(float InDisplayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetDisplayTime");

	Params::SolarScrollTextBase_SetDisplayTime Parms{};

	Parms.InDisplayTime = InDisplayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetInterval
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFixedInterval                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetInterval(float InFixedInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetInterval");

	Params::SolarScrollTextBase_SetInterval Parms{};

	Parms.InFixedInterval = InFixedInterval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetJustification
// (Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            InJustification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetJustification(ETextJustify InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetJustification");

	Params::SolarScrollTextBase_SetJustification Parms{};

	Parms.InJustification = InJustification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetLineHeightPercentage
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLineHeightPercentage                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetLineHeightPercentage(float InLineHeightPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetLineHeightPercentage");

	Params::SolarScrollTextBase_SetLineHeightPercentage Parms{};

	Parms.InLineHeightPercentage = InLineHeightPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetMargin
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   InMargin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetMargin(const struct FMargin& InMargin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetMargin");

	Params::SolarScrollTextBase_SetMargin Parms{};

	Parms.InMargin = std::move(InMargin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetMinDesiredWidth
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinDesiredWidth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetMinDesiredWidth(float InMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetMinDesiredWidth");

	Params::SolarScrollTextBase_SetMinDesiredWidth Parms{};

	Parms.InMinDesiredWidth = InMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetOverrideTextLayoutSize
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInOverrideTextLayoutSize                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetOverrideTextLayoutSize(bool bInOverrideTextLayoutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetOverrideTextLayoutSize");

	Params::SolarScrollTextBase_SetOverrideTextLayoutSize Parms{};

	Parms.bInOverrideTextLayoutSize = bInOverrideTextLayoutSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetPosition
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InStartPosition                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEndPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetPosition(float InStartPosition, float InEndPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetPosition");

	Params::SolarScrollTextBase_SetPosition Parms{};

	Parms.InStartPosition = InStartPosition;
	Parms.InEndPosition = InEndPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetScrollDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// ESolarScrollTextDirection               InScrollDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetScrollDirection(ESolarScrollTextDirection InScrollDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetScrollDirection");

	Params::SolarScrollTextBase_SetScrollDirection Parms{};

	Parms.InScrollDirection = InScrollDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetScrollSpeed
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InScrollSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetScrollSpeed(float InScrollSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetScrollSpeed");

	Params::SolarScrollTextBase_SetScrollSpeed Parms{};

	Parms.InScrollSpeed = InScrollSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetScrollType
// (Native, Public, BlueprintCallable)
// Parameters:
// ESolarScrollTextType                    InScrollType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetScrollType(ESolarScrollTextType InScrollType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetScrollType");

	Params::SolarScrollTextBase_SetScrollType Parms{};

	Parms.InScrollType = InScrollType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (Parm, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetText");

	Params::SolarScrollTextBase_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetTextBlockStyle
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FTextBlockStyle&           InTextStyle                                            (Parm, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetTextBlockStyle(const struct FTextBlockStyle& InTextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetTextBlockStyle");

	Params::SolarScrollTextBase_SetTextBlockStyle Parms{};

	Parms.InTextStyle = std::move(InTextStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetTextLayoutSize
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 InTextLayoutSize                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetTextLayoutSize(const struct FVector2D& InTextLayoutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetTextLayoutSize");

	Params::SolarScrollTextBase_SetTextLayoutSize Parms{};

	Parms.InTextLayoutSize = std::move(InTextLayoutSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetWaitingType
// (Native, Public, BlueprintCallable)
// Parameters:
// ESolarScrollTextWaitingType             InWaitingType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetWaitingType(ESolarScrollTextWaitingType InWaitingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetWaitingType");

	Params::SolarScrollTextBase_SetWaitingType Parms{};

	Parms.InWaitingType = InWaitingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarScrollTextBase.SetWrapTextAt
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapTextAt                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarScrollTextBase::SetWrapTextAt(float InWrapTextAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarScrollTextBase", "SetWrapTextAt");

	Params::SolarScrollTextBase_SetWrapTextAt Parms{};

	Parms.InWrapTextAt = InWrapTextAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.LoadUserWidgetAsync
// (Final, Native, Public, BlueprintCallable)

void USolarAdapterWidgetBase::LoadUserWidgetAsync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "LoadUserWidgetAsync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.LoadUserWidgetResource
// (Final, Native, Public, BlueprintCallable)

void USolarAdapterWidgetBase::LoadUserWidgetResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "LoadUserWidgetResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.RefreshUIByOverrideParams
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FWidgetOverrideParam>&WidgetOverrideParams                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarAdapterWidgetBase::RefreshUIByOverrideParams(const TArray<struct FWidgetOverrideParam>& WidgetOverrideParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "RefreshUIByOverrideParams");

	Params::SolarAdapterWidgetBase_RefreshUIByOverrideParams Parms{};

	Parms.WidgetOverrideParams = std::move(WidgetOverrideParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.SetAdapterMargin
// (Final, Native, Public)
// Parameters:
// const struct FMargin&                   InMargin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USolarAdapterWidgetBase::SetAdapterMargin(const struct FMargin& InMargin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "SetAdapterMargin");

	Params::SolarAdapterWidgetBase_SetAdapterMargin Parms{};

	Parms.InMargin = std::move(InMargin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.SetNeedExecuteWidgetOpened
// (Final, Native, Public)
// Parameters:
// bool                                    bInNeedExecuteWidgetOpened                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarAdapterWidgetBase::SetNeedExecuteWidgetOpened(bool bInNeedExecuteWidgetOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "SetNeedExecuteWidgetOpened");

	Params::SolarAdapterWidgetBase_SetNeedExecuteWidgetOpened Parms{};

	Parms.bInNeedExecuteWidgetOpened = bInNeedExecuteWidgetOpened;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.SetUseDesktopWidgetType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUseDesktopWidgetType                   InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarAdapterWidgetBase::SetUseDesktopWidgetType(EUseDesktopWidgetType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "SetUseDesktopWidgetType");

	Params::SolarAdapterWidgetBase_SetUseDesktopWidgetType Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarAdapterWidgetBase.GetAdapteeWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* USolarAdapterWidgetBase::GetAdapteeWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "GetAdapteeWidget");

	Params::SolarAdapterWidgetBase_GetAdapteeWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.GetChildAdapterWidgetFromName_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InWidgetName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USolarAdapterWidgetBase*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USolarAdapterWidgetBase* USolarAdapterWidgetBase::GetChildAdapterWidgetFromName_BP(const class FString& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "GetChildAdapterWidgetFromName_BP");

	Params::SolarAdapterWidgetBase_GetChildAdapterWidgetFromName_BP Parms{};

	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.GetChildUserWidgetFromName_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InWidgetName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USolarUserWidgetBase*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USolarUserWidgetBase* USolarAdapterWidgetBase::GetChildUserWidgetFromName_BP(const class FString& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "GetChildUserWidgetFromName_BP");

	Params::SolarAdapterWidgetBase_GetChildUserWidgetFromName_BP Parms{};

	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.GetChildWidgetFromName_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InWidgetName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USolarAdapterWidgetBase::GetChildWidgetFromName_BP(const class FString& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "GetChildWidgetFromName_BP");

	Params::SolarAdapterWidgetBase_GetChildWidgetFromName_BP Parms{};

	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.GetNeedAdapter
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// struct FMargin*                         OutMargin                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarAdapterWidgetBase::GetNeedAdapter(struct FMargin* OutMargin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "GetNeedAdapter");

	Params::SolarAdapterWidgetBase_GetNeedAdapter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMargin != nullptr)
		*OutMargin = std::move(Parms.OutMargin);

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.IsLoadedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarAdapterWidgetBase::IsLoadedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "IsLoadedWidget");

	Params::SolarAdapterWidgetBase_IsLoadedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarAdapterWidgetBase.IsNeedExecuteWidgetOpened
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarAdapterWidgetBase::IsNeedExecuteWidgetOpened() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarAdapterWidgetBase", "IsNeedExecuteWidgetOpened");

	Params::SolarAdapterWidgetBase_IsNeedExecuteWidgetOpened Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.OnExclusivelyAnimationFinished
// (Final, Native, Protected)

void USolarUserWidgetBase::OnExclusivelyAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "OnExclusivelyAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarUserWidgetBase.OnSynchronizeProperties
// (Event, Public, BlueprintEvent)

void USolarUserWidgetBase::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SolarUI.SolarUserWidgetBase.PlayAnimationByExclusively
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartAtTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumLoopsToPlay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRestoreState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarUserWidgetBase::PlayAnimationByExclusively(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "PlayAnimationByExclusively");

	Params::SolarUserWidgetBase_PlayAnimationByExclusively Parms{};

	Parms.InAnimation = InAnimation;
	Parms.StartAtTime = StartAtTime;
	Parms.NumLoopsToPlay = NumLoopsToPlay;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;
	Parms.bRestoreState = bRestoreState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarUserWidgetBase.PlayAnimationByName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FName&                      AnimationName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartAtTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumLoopsToPlay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarUserWidgetBase::PlayAnimationByName(const class FName& AnimationName, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "PlayAnimationByName");

	Params::SolarUserWidgetBase_PlayAnimationByName Parms{};

	Parms.AnimationName = AnimationName;
	Parms.StartAtTime = StartAtTime;
	Parms.NumLoopsToPlay = NumLoopsToPlay;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.ReceivePlatformLayout
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// EUSolarWidgetLayoutType                 InLayoutType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarUserWidgetBase::ReceivePlatformLayout(EUSolarWidgetLayoutType InLayoutType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "ReceivePlatformLayout");

	Params::SolarUserWidgetBase_ReceivePlatformLayout Parms{};

	Parms.InLayoutType = InLayoutType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SolarUI.SolarUserWidgetBase.SetBlockInputForOneTick
// (Final, Native, Public)

void USolarUserWidgetBase::SetBlockInputForOneTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "SetBlockInputForOneTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarUserWidgetBase.GetAnimationByName
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FName&                      AnimationName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* USolarUserWidgetBase::GetAnimationByName(const class FName& AnimationName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "GetAnimationByName");

	Params::SolarUserWidgetBase_GetAnimationByName Parms{};

	Parms.AnimationName = AnimationName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.GetChildAdapterWidgetFromName_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InWidgetName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USolarAdapterWidgetBase*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USolarAdapterWidgetBase* USolarUserWidgetBase::GetChildAdapterWidgetFromName_BP(const class FString& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "GetChildAdapterWidgetFromName_BP");

	Params::SolarUserWidgetBase_GetChildAdapterWidgetFromName_BP Parms{};

	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.GetChildUserWidgetFromName_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InWidgetName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USolarUserWidgetBase*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USolarUserWidgetBase* USolarUserWidgetBase::GetChildUserWidgetFromName_BP(const class FString& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "GetChildUserWidgetFromName_BP");

	Params::SolarUserWidgetBase_GetChildUserWidgetFromName_BP Parms{};

	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.GetChildWidgetFromName_BP
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      InWidgetName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USolarUserWidgetBase::GetChildWidgetFromName_BP(const class FName& InWidgetName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "GetChildWidgetFromName_BP");

	Params::SolarUserWidgetBase_GetChildWidgetFromName_BP Parms{};

	Parms.InWidgetName = InWidgetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarUserWidgetBase.IsPlatformDesktop
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarUserWidgetBase::IsPlatformDesktop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarUserWidgetBase", "IsPlatformDesktop");

	Params::SolarUserWidgetBase_IsPlatformDesktop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarNavigableWidgetBase.AcceptNavigate
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply USolarNavigableWidgetBase::AcceptNavigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableWidgetBase", "AcceptNavigate");

	Params::SolarNavigableWidgetBase_AcceptNavigate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarNavigableWidgetBase.BeginNavigate
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableWidgetBase::BeginNavigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableWidgetBase", "BeginNavigate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableWidgetBase.EndNavigate
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableWidgetBase::EndNavigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableWidgetBase", "EndNavigate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.HandleClickEvent
// (Final, Native, Protected)

void USolarNavigableButtonWidget::HandleClickEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "HandleClickEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.HandleHoveredEvent
// (Final, Native, Protected)

void USolarNavigableButtonWidget::HandleHoveredEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "HandleHoveredEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.HandlePressedEvent
// (Final, Native, Protected)

void USolarNavigableButtonWidget::HandlePressedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "HandlePressedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.HandleReleasedEvent
// (Final, Native, Protected)

void USolarNavigableButtonWidget::HandleReleasedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "HandleReleasedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.HandleUnhoveredEvent
// (Final, Native, Protected)

void USolarNavigableButtonWidget::HandleUnhoveredEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "HandleUnhoveredEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.OnClickedEvent
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableButtonWidget::OnClickedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "OnClickedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.OnHoveredEvent
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableButtonWidget::OnHoveredEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "OnHoveredEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.OnPressedEvent
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableButtonWidget::OnPressedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "OnPressedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.OnReleasedEvent
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableButtonWidget::OnReleasedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "OnReleasedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarNavigableButtonWidget.OnUnhoveredEvent
// (Native, Event, Protected, BlueprintEvent)

void USolarNavigableButtonWidget::OnUnhoveredEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarNavigableButtonWidget", "OnUnhoveredEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarSpline.AddSplineCurve
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBezierSplineCurve&              InCurve                                                (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USolarSpline::AddSplineCurve(struct FBezierSplineCurve& InCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarSpline", "AddSplineCurve");

	Params::SolarSpline_AddSplineCurve Parms{};

	Parms.InCurve = std::move(InCurve);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InCurve = std::move(Parms.InCurve);
}


// Function SolarUI.SolarSpline.ClearSplineCurve
// (Final, Native, Public, BlueprintCallable)

void USolarSpline::ClearSplineCurve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarSpline", "ClearSplineCurve");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarSpline.SetDrawClosingMask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldDraw                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarSpline::SetDrawClosingMask(bool bShouldDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarSpline", "SetDrawClosingMask");

	Params::SolarSpline_SetDrawClosingMask Parms{};

	Parms.bShouldDraw = bShouldDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarWidgetLibrary.BreakSlateBrushAtlasAdapter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrushAtlasAdapter&   InAtlasAdapter                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName*                            OutSpriteName                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject**                         OutResourceObject                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarWidgetLibrary::BreakSlateBrushAtlasAdapter(const struct FSlateBrushAtlasAdapter& InAtlasAdapter, class FName* OutSpriteName, class UObject** OutResourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SolarWidgetLibrary", "BreakSlateBrushAtlasAdapter");

	Params::SolarWidgetLibrary_BreakSlateBrushAtlasAdapter Parms{};

	Parms.InAtlasAdapter = std::move(InAtlasAdapter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSpriteName != nullptr)
		*OutSpriteName = Parms.OutSpriteName;

	if (OutResourceObject != nullptr)
		*OutResourceObject = Parms.OutResourceObject;
}


// Function SolarUI.SolarWidgetLibrary.GetCustomLayoutJsonString
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    InWidgetBlueprintJsonPath                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USolarWidgetLibrary::GetCustomLayoutJsonString(const class FString& InWidgetBlueprintJsonPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SolarWidgetLibrary", "GetCustomLayoutJsonString");

	Params::SolarWidgetLibrary_GetCustomLayoutJsonString Parms{};

	Parms.InWidgetBlueprintJsonPath = std::move(InWidgetBlueprintJsonPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarWidgetLibrary.NavigateTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          WidgetToNavigate                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarWidgetLibrary::NavigateTo(class UWidget* WidgetToNavigate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SolarWidgetLibrary", "NavigateTo");

	Params::SolarWidgetLibrary_NavigateTo Parms{};

	Parms.WidgetToNavigate = WidgetToNavigate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarWidgetLibrary.NavigateToWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarWidgetLibrary::NavigateToWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SolarWidgetLibrary", "NavigateToWidget");

	Params::SolarWidgetLibrary_NavigateToWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarWidgetLibrary.SetListViewItemFocus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UListView*                        ListView                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarWidgetLibrary::SetListViewItemFocus(class UListView* ListView, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SolarWidgetLibrary", "SetListViewItemFocus");

	Params::SolarWidgetLibrary_SetListViewItemFocus Parms{};

	Parms.ListView = ListView;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarUI.SolarCurveVector.GetVectorValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 USolarCurveVector::GetVectorValue(float InTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarCurveVector", "GetVectorValue");

	Params::SolarCurveVector_GetVectorValue Parms{};

	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SolarUI.SolarByteChannel.GetByteValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OldTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReversePlayback                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarByteChannel::GetByteValue(float OldTime, float NewTime, bool bReversePlayback, uint8* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarByteChannel", "GetByteValue");

	Params::SolarByteChannel_GetByteValue Parms{};

	Parms.OldTime = OldTime;
	Parms.NewTime = NewTime;
	Parms.bReversePlayback = bReversePlayback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}

}

