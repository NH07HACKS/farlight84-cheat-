#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_OverLoad

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function HUD_OverLoad.HUD_Overload_C.ExecuteUbergraph_HUD_Overload
// 0x00E8 (0x00E8 - 0x0000)
struct HUD_Overload_C_ExecuteUbergraph_HUD_Overload final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UClass*                           Temp_class_Variable;                               // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UClass*                           Temp_class_Variable_1;                             // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UClass*                           Temp_class_Variable_2;                             // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UClass*                           Temp_class_Variable_3;                             // 0x0038(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbQuitState_1;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bReloadSpeedup;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InbReloadSuccess;                     // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InReloadAmmo_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReservedAmmo_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo_2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InAmmoProgress_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReservedAmmo;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo_1;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InAmmoProgress;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbFirst;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InbCharging;                          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InChargeMode;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InChargeProgress;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InReloadProgress_1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InReloadProgress;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InReloadAmmo;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxAmmo;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_InColor;                              // 0x007C(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InOverloadProgress;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InOverloadWarningRate;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbOverloadState;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InbQuitState;                         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_Event_InActiveCrosshair;                    // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleWeaponCrossHairWidget*          K2Node_DynamicCast_AsVehicle_Weapon_Cross_Hair_Widget; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x00D4(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload) == 0x000008, "Wrong alignment on HUD_Overload_C_ExecuteUbergraph_HUD_Overload");
static_assert(sizeof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload) == 0x0000E8, "Wrong size on HUD_Overload_C_ExecuteUbergraph_HUD_Overload");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, EntryPoint) == 0x000000, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_class_Variable) == 0x000008, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_struct_Variable) == 0x000010, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_class_Variable_1) == 0x000018, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_struct_Variable_1) == 0x000020, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_class_Variable_2) == 0x000028, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_struct_Variable_2) == 0x000030, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_class_Variable_3) == 0x000038, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbQuitState_1) == 0x000040, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbQuitState_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_bReloadSpeedup) == 0x000041, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_bReloadSpeedup' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbReloadSuccess) == 0x000042, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbReloadSuccess' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReloadAmmo_1) == 0x000044, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReloadAmmo_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReservedAmmo_1) == 0x000048, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReservedAmmo_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InMaxAmmo_2) == 0x00004C, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InMaxAmmo_2' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InAmmoProgress_1) == 0x000050, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InAmmoProgress_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReservedAmmo) == 0x000054, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReservedAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InMaxAmmo_1) == 0x000058, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InMaxAmmo_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InAmmoProgress) == 0x00005C, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InAmmoProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbFirst) == 0x000060, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbFirst' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbCharging) == 0x000061, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbCharging' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InChargeMode) == 0x000064, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InChargeMode' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InChargeProgress) == 0x000068, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InChargeProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReloadProgress_1) == 0x00006C, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReloadProgress_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReloadProgress) == 0x000070, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReloadProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InReloadAmmo) == 0x000074, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InReloadAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InMaxAmmo) == 0x000078, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InMaxAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InColor) == 0x00007C, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InColor' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_IsDesignTime) == 0x00008C, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InOverloadProgress) == 0x000090, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InOverloadProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InOverloadWarningRate) == 0x000094, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InOverloadWarningRate' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbOverloadState) == 0x000098, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbOverloadState' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InbQuitState) == 0x000099, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InbQuitState' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_GetVisibility_ReturnValue) == 0x00009A, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00009B, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000A0, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_Event_InActiveCrosshair) == 0x0000A8, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_Event_InActiveCrosshair' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_DynamicCast_AsVehicle_Weapon_Cross_Hair_Widget) == 0x0000B0, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_DynamicCast_AsVehicle_Weapon_Cross_Hair_Widget' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_GetObjectClass_ReturnValue) == 0x0000C0, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_Map_Find_Value) == 0x0000C8, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_Map_Find_ReturnValue) == 0x0000D0, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, Temp_struct_Variable_3) == 0x0000D4, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_ExecuteUbergraph_HUD_Overload, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x0000E0, "Member 'HUD_Overload_C_ExecuteUbergraph_HUD_Overload::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnActiveCrosshair
// 0x0008 (0x0008 - 0x0000)
struct HUD_Overload_C_OnActiveCrosshair final
{
public:
	class UUserWidget*                            InActiveCrosshair;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_OnActiveCrosshair) == 0x000008, "Wrong alignment on HUD_Overload_C_OnActiveCrosshair");
static_assert(sizeof(HUD_Overload_C_OnActiveCrosshair) == 0x000008, "Wrong size on HUD_Overload_C_OnActiveCrosshair");
static_assert(offsetof(HUD_Overload_C_OnActiveCrosshair, InActiveCrosshair) == 0x000000, "Member 'HUD_Overload_C_OnActiveCrosshair::InActiveCrosshair' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnChangeOverloadState
// 0x0001 (0x0001 - 0x0000)
struct HUD_Overload_C_OnChangeOverloadState final
{
public:
	bool                                          InbQuitState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Overload_C_OnChangeOverloadState) == 0x000001, "Wrong alignment on HUD_Overload_C_OnChangeOverloadState");
static_assert(sizeof(HUD_Overload_C_OnChangeOverloadState) == 0x000001, "Wrong size on HUD_Overload_C_OnChangeOverloadState");
static_assert(offsetof(HUD_Overload_C_OnChangeOverloadState, InbQuitState) == 0x000000, "Member 'HUD_Overload_C_OnChangeOverloadState::InbQuitState' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnUpdateOverload
// 0x000C (0x000C - 0x0000)
struct HUD_Overload_C_OnUpdateOverload final
{
public:
	float                                         InOverloadProgress;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InOverloadWarningRate;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InbOverloadState;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Overload_C_OnUpdateOverload) == 0x000004, "Wrong alignment on HUD_Overload_C_OnUpdateOverload");
static_assert(sizeof(HUD_Overload_C_OnUpdateOverload) == 0x00000C, "Wrong size on HUD_Overload_C_OnUpdateOverload");
static_assert(offsetof(HUD_Overload_C_OnUpdateOverload, InOverloadProgress) == 0x000000, "Member 'HUD_Overload_C_OnUpdateOverload::InOverloadProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateOverload, InOverloadWarningRate) == 0x000004, "Member 'HUD_Overload_C_OnUpdateOverload::InOverloadWarningRate' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateOverload, InbOverloadState) == 0x000008, "Member 'HUD_Overload_C_OnUpdateOverload::InbOverloadState' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_Overload_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Overload_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_Overload_C_PreConstruct");
static_assert(sizeof(HUD_Overload_C_PreConstruct) == 0x000001, "Wrong size on HUD_Overload_C_PreConstruct");
static_assert(offsetof(HUD_Overload_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_Overload_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.SetAmmoColor
// 0x0010 (0x0010 - 0x0000)
struct HUD_Overload_C_SetAmmoColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_SetAmmoColor) == 0x000004, "Wrong alignment on HUD_Overload_C_SetAmmoColor");
static_assert(sizeof(HUD_Overload_C_SetAmmoColor) == 0x000010, "Wrong size on HUD_Overload_C_SetAmmoColor");
static_assert(offsetof(HUD_Overload_C_SetAmmoColor, InColor) == 0x000000, "Member 'HUD_Overload_C_SetAmmoColor::InColor' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnUpdateReload
// 0x000C (0x000C - 0x0000)
struct HUD_Overload_C_OnUpdateReload final
{
public:
	float                                         InReloadProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InReloadAmmo;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_OnUpdateReload) == 0x000004, "Wrong alignment on HUD_Overload_C_OnUpdateReload");
static_assert(sizeof(HUD_Overload_C_OnUpdateReload) == 0x00000C, "Wrong size on HUD_Overload_C_OnUpdateReload");
static_assert(offsetof(HUD_Overload_C_OnUpdateReload, InReloadProgress) == 0x000000, "Member 'HUD_Overload_C_OnUpdateReload::InReloadProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateReload, InReloadAmmo) == 0x000004, "Member 'HUD_Overload_C_OnUpdateReload::InReloadAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateReload, InMaxAmmo) == 0x000008, "Member 'HUD_Overload_C_OnUpdateReload::InMaxAmmo' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnUpdateCoolDown
// 0x0004 (0x0004 - 0x0000)
struct HUD_Overload_C_OnUpdateCoolDown final
{
public:
	float                                         InReloadProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_OnUpdateCoolDown) == 0x000004, "Wrong alignment on HUD_Overload_C_OnUpdateCoolDown");
static_assert(sizeof(HUD_Overload_C_OnUpdateCoolDown) == 0x000004, "Wrong size on HUD_Overload_C_OnUpdateCoolDown");
static_assert(offsetof(HUD_Overload_C_OnUpdateCoolDown, InReloadProgress) == 0x000000, "Member 'HUD_Overload_C_OnUpdateCoolDown::InReloadProgress' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnUpdateCharge
// 0x000C (0x000C - 0x0000)
struct HUD_Overload_C_OnUpdateCharge final
{
public:
	bool                                          InbCharging;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InChargeMode;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InChargeProgress;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_OnUpdateCharge) == 0x000004, "Wrong alignment on HUD_Overload_C_OnUpdateCharge");
static_assert(sizeof(HUD_Overload_C_OnUpdateCharge) == 0x00000C, "Wrong size on HUD_Overload_C_OnUpdateCharge");
static_assert(offsetof(HUD_Overload_C_OnUpdateCharge, InbCharging) == 0x000000, "Member 'HUD_Overload_C_OnUpdateCharge::InbCharging' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateCharge, InChargeMode) == 0x000004, "Member 'HUD_Overload_C_OnUpdateCharge::InChargeMode' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateCharge, InChargeProgress) == 0x000008, "Member 'HUD_Overload_C_OnUpdateCharge::InChargeProgress' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnUpdateAmmo
// 0x0010 (0x0010 - 0x0000)
struct HUD_Overload_C_OnUpdateAmmo final
{
public:
	int32                                         InReservedAmmo;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAmmoProgress;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InbFirst;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Overload_C_OnUpdateAmmo) == 0x000004, "Wrong alignment on HUD_Overload_C_OnUpdateAmmo");
static_assert(sizeof(HUD_Overload_C_OnUpdateAmmo) == 0x000010, "Wrong size on HUD_Overload_C_OnUpdateAmmo");
static_assert(offsetof(HUD_Overload_C_OnUpdateAmmo, InReservedAmmo) == 0x000000, "Member 'HUD_Overload_C_OnUpdateAmmo::InReservedAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateAmmo, InMaxAmmo) == 0x000004, "Member 'HUD_Overload_C_OnUpdateAmmo::InMaxAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateAmmo, InAmmoProgress) == 0x000008, "Member 'HUD_Overload_C_OnUpdateAmmo::InAmmoProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnUpdateAmmo, InbFirst) == 0x00000C, "Member 'HUD_Overload_C_OnUpdateAmmo::InbFirst' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnReloadFinish
// 0x0014 (0x0014 - 0x0000)
struct HUD_Overload_C_OnReloadFinish final
{
public:
	bool                                          InbReloadSuccess;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InReloadAmmo;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InReservedAmmo;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxAmmo;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAmmoProgress;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_OnReloadFinish) == 0x000004, "Wrong alignment on HUD_Overload_C_OnReloadFinish");
static_assert(sizeof(HUD_Overload_C_OnReloadFinish) == 0x000014, "Wrong size on HUD_Overload_C_OnReloadFinish");
static_assert(offsetof(HUD_Overload_C_OnReloadFinish, InbReloadSuccess) == 0x000000, "Member 'HUD_Overload_C_OnReloadFinish::InbReloadSuccess' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnReloadFinish, InReloadAmmo) == 0x000004, "Member 'HUD_Overload_C_OnReloadFinish::InReloadAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnReloadFinish, InReservedAmmo) == 0x000008, "Member 'HUD_Overload_C_OnReloadFinish::InReservedAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnReloadFinish, InMaxAmmo) == 0x00000C, "Member 'HUD_Overload_C_OnReloadFinish::InMaxAmmo' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnReloadFinish, InAmmoProgress) == 0x000010, "Member 'HUD_Overload_C_OnReloadFinish::InAmmoProgress' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.OnChangeReloadState
// 0x0002 (0x0002 - 0x0000)
struct HUD_Overload_C_OnChangeReloadState final
{
public:
	bool                                          InbQuitState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReloadSpeedup;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Overload_C_OnChangeReloadState) == 0x000001, "Wrong alignment on HUD_Overload_C_OnChangeReloadState");
static_assert(sizeof(HUD_Overload_C_OnChangeReloadState) == 0x000002, "Wrong size on HUD_Overload_C_OnChangeReloadState");
static_assert(offsetof(HUD_Overload_C_OnChangeReloadState, InbQuitState) == 0x000000, "Member 'HUD_Overload_C_OnChangeReloadState::InbQuitState' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_OnChangeReloadState, bReloadSpeedup) == 0x000001, "Member 'HUD_Overload_C_OnChangeReloadState::bReloadSpeedup' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.SetOverLoadImageSize
// 0x0058 (0x0058 - 0x0000)
struct HUD_Overload_C_SetOverLoadImageSize final
{
public:
	float                                         InProgress;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakColor_R;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_SetOverLoadImageSize) == 0x000008, "Wrong alignment on HUD_Overload_C_SetOverLoadImageSize");
static_assert(sizeof(HUD_Overload_C_SetOverLoadImageSize) == 0x000058, "Wrong size on HUD_Overload_C_SetOverLoadImageSize");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, InProgress) == 0x000000, "Member 'HUD_Overload_C_SetOverLoadImageSize::InProgress' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, Temp_bool_Variable) == 0x000004, "Member 'HUD_Overload_C_SetOverLoadImageSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, Temp_byte_Variable) == 0x000006, "Member 'HUD_Overload_C_SetOverLoadImageSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, Temp_byte_Variable_1) == 0x000007, "Member 'HUD_Overload_C_SetOverLoadImageSize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_BooleanOR_ReturnValue) == 0x000010, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000014, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, K2Node_Select_Default) == 0x000024, "Member 'HUD_Overload_C_SetOverLoadImageSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_BreakColor_R) == 0x000028, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_BreakColor_G) == 0x00002C, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_BreakColor_B) == 0x000030, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_BreakColor_A) == 0x000034, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, K2Node_MakeStruct_LinearColor) == 0x000038, "Member 'HUD_Overload_C_SetOverLoadImageSize::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetOverLoadImageSize, CallFunc_GetLinearColorValue_ReturnValue) == 0x000048, "Member 'HUD_Overload_C_SetOverLoadImageSize::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.SetCoolDownProgress
// 0x0038 (0x0038 - 0x0000)
struct HUD_Overload_C_SetCoolDownProgress final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_SetCoolDownProgress) == 0x000008, "Wrong alignment on HUD_Overload_C_SetCoolDownProgress");
static_assert(sizeof(HUD_Overload_C_SetCoolDownProgress) == 0x000038, "Wrong size on HUD_Overload_C_SetCoolDownProgress");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000008, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_BreakColor_R) == 0x000018, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_BreakColor_G) == 0x00001C, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_BreakColor_B) == 0x000020, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, CallFunc_BreakColor_A) == 0x000024, "Member 'HUD_Overload_C_SetCoolDownProgress::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_SetCoolDownProgress, K2Node_MakeStruct_LinearColor) == 0x000028, "Member 'HUD_Overload_C_SetCoolDownProgress::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function HUD_OverLoad.HUD_Overload_C.PlayOverloadAnima
// 0x0020 (0x0020 - 0x0000)
struct HUD_Overload_C_PlayOverloadAnima final
{
public:
	bool                                          InOverload;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Overload_C_PlayOverloadAnima) == 0x000008, "Wrong alignment on HUD_Overload_C_PlayOverloadAnima");
static_assert(sizeof(HUD_Overload_C_PlayOverloadAnima) == 0x000020, "Wrong size on HUD_Overload_C_PlayOverloadAnima");
static_assert(offsetof(HUD_Overload_C_PlayOverloadAnima, InOverload) == 0x000000, "Member 'HUD_Overload_C_PlayOverloadAnima::InOverload' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_PlayOverloadAnima, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000004, "Member 'HUD_Overload_C_PlayOverloadAnima::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_PlayOverloadAnima, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'HUD_Overload_C_PlayOverloadAnima::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Overload_C_PlayOverloadAnima, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'HUD_Overload_C_PlayOverloadAnima::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

