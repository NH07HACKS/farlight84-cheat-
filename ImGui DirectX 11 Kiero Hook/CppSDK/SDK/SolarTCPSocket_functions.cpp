#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarTCPSocket

#include "Basic.hpp"

#include "SolarTCPSocket_classes.hpp"
#include "SolarTCPSocket_parameters.hpp"


namespace SDK
{

// Function SolarTCPSocket.SolarTCPSocketClient.Connect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    IP                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ConnectionId, bool bConnected)>&OnConnected                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ConnectionId, bool bDisconnected)>&OnDisconnected                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ConnectionId, const TArray<uint8>& Message)>&OnMessageReceived                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  ConnectionId                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarTCPSocketClient::Connect(const class FString& IP, int32 Port, const TDelegate<void(int32 ConnectionId, bool bConnected)>& OnConnected, const TDelegate<void(int32 ConnectionId, bool bDisconnected)>& OnDisconnected, const TDelegate<void(int32 ConnectionId, const TArray<uint8>& Message)>& OnMessageReceived, int32* ConnectionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarTCPSocketClient", "Connect");

	Params::SolarTCPSocketClient_Connect Parms{};

	Parms.IP = std::move(IP);
	Parms.Port = Port;
	Parms.OnConnected = OnConnected;
	Parms.OnDisconnected = OnDisconnected;
	Parms.OnMessageReceived = OnMessageReceived;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ConnectionId != nullptr)
		*ConnectionId = Parms.ConnectionId;
}


// Function SolarTCPSocket.SolarTCPSocketClient.Disconnect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolarTCPSocketClient::Disconnect(int32 ConnectionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarTCPSocketClient", "Disconnect");

	Params::SolarTCPSocketClient_Disconnect Parms{};

	Parms.ConnectionId = ConnectionId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SolarTCPSocket.SolarTCPSocketClient.SendData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ConnectionId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USolarTCPSocketClient::SendData(int32 ConnectionId, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SolarTCPSocketClient", "SendData");

	Params::SolarTCPSocketClient_SendData Parms{};

	Parms.ConnectionId = ConnectionId;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

