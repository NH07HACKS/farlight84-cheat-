#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD_Notice_Revive

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_HUD_Notice_Revive.UI_HUD_Notice_Revive_C
// 0x0038 (0x0628 - 0x05F0)
class UUI_HUD_Notice_Revive_C final : public UHUDNoticeRevive
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Enter;                                        // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class USolarRichTextBlock*                    Txt_CD;                                            // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         ReviveWaitTime;                                    // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        Player;                                            // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HandleEnterAnimEnd;                                // 0x0618(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDuringTime;                                    // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Visible_and_Invisible_Protection(bool* Exec);
	void AddInputFlag();
	void RemoveInputFlag();
	void TryClopseByPlayer(class ASCMPlayerState* OldPlayer);
	void EndEvent();
	void BeginCountDown();
	void UIEvent_Show(int32 ReviveWaitTime_0);
	void ResurrectCountDown(int32 InResurrectTime, int32 InConfigResurrectTime);
	void CloseUI(bool WithoutDelay);
	void ShowUI(int32 Time, class ASCMPlayerState* Player_0);
	void ExecuteUbergraph_UI_HUD_Notice_Revive(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_HUD_Notice_Revive_C">();
	}
	static class UUI_HUD_Notice_Revive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_HUD_Notice_Revive_C>();
	}
};
static_assert(alignof(UUI_HUD_Notice_Revive_C) == 0x000008, "Wrong alignment on UUI_HUD_Notice_Revive_C");
static_assert(sizeof(UUI_HUD_Notice_Revive_C) == 0x000628, "Wrong size on UUI_HUD_Notice_Revive_C");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, UberGraphFrame) == 0x0005F0, "Member 'UUI_HUD_Notice_Revive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, Anim_Enter) == 0x0005F8, "Member 'UUI_HUD_Notice_Revive_C::Anim_Enter' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, Txt_CD) == 0x000600, "Member 'UUI_HUD_Notice_Revive_C::Txt_CD' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, ReviveWaitTime) == 0x000608, "Member 'UUI_HUD_Notice_Revive_C::ReviveWaitTime' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, Player) == 0x000610, "Member 'UUI_HUD_Notice_Revive_C::Player' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, HandleEnterAnimEnd) == 0x000618, "Member 'UUI_HUD_Notice_Revive_C::HandleEnterAnimEnd' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_Revive_C, FadeDuringTime) == 0x000620, "Member 'UUI_HUD_Notice_Revive_C::FadeDuringTime' has a wrong offset!");

}

