#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Vehicle_Skill

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function UI_Vehicle_Skill.UI_Vehicle_Skill_C.ExecuteUbergraph_UI_Vehicle_Skill
// 0x0060 (0x0060 - 0x0000)
struct UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Temp_int64_Variable;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0010(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0028(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Select_Default;                             // 0x0048(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill) == 0x000008, "Wrong alignment on UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill");
static_assert(sizeof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill) == 0x000060, "Wrong size on UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, EntryPoint) == 0x000000, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, Temp_int64_Variable) == 0x000008, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::Temp_int64_Variable' has a wrong offset!");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, Temp_struct_Variable) == 0x000010, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, Temp_struct_Variable_1) == 0x000028, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, K2Node_Event_IsDesignTime) == 0x000040, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill, K2Node_Select_Default) == 0x000048, "Member 'UI_Vehicle_Skill_C_ExecuteUbergraph_UI_Vehicle_Skill::K2Node_Select_Default' has a wrong offset!");

// Function UI_Vehicle_Skill.UI_Vehicle_Skill_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Vehicle_Skill_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Vehicle_Skill_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Vehicle_Skill_C_PreConstruct");
static_assert(sizeof(UI_Vehicle_Skill_C_PreConstruct) == 0x000001, "Wrong size on UI_Vehicle_Skill_C_PreConstruct");
static_assert(offsetof(UI_Vehicle_Skill_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Vehicle_Skill_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

