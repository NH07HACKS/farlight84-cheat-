#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Chat_QuickVoice

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.ExecuteUbergraph_UI_Chat_QuickVoice
// 0x0018 (0x0018 - 0x0000)
struct UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsPreviewMode;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice");
static_assert(sizeof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice) == 0x000018, "Wrong size on UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice");
static_assert(offsetof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice, EntryPoint) == 0x000000, "Member 'UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice, K2Node_Event_bIsExpanded) == 0x000004, "Member 'UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice, K2Node_Event_bIsSelected) == 0x000005, "Member 'UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice, K2Node_Event_ListItemObject) == 0x000008, "Member 'UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice, K2Node_Event_bIsPreviewMode) == 0x000010, "Member 'UI_Chat_QuickVoice_C_ExecuteUbergraph_UI_Chat_QuickVoice::K2Node_Event_bIsPreviewMode' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.OnSwitchChatMode
// 0x0001 (0x0001 - 0x0000)
struct UI_Chat_QuickVoice_C_OnSwitchChatMode final
{
public:
	bool                                          bIsPreviewMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Chat_QuickVoice_C_OnSwitchChatMode) == 0x000001, "Wrong alignment on UI_Chat_QuickVoice_C_OnSwitchChatMode");
static_assert(sizeof(UI_Chat_QuickVoice_C_OnSwitchChatMode) == 0x000001, "Wrong size on UI_Chat_QuickVoice_C_OnSwitchChatMode");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnSwitchChatMode, bIsPreviewMode) == 0x000000, "Member 'UI_Chat_QuickVoice_C_OnSwitchChatMode::bIsPreviewMode' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_Chat_QuickVoice_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Chat_QuickVoice_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_OnListItemObjectSet");
static_assert(sizeof(UI_Chat_QuickVoice_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_Chat_QuickVoice_C_OnListItemObjectSet");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_Chat_QuickVoice_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_Chat_QuickVoice_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_Chat_QuickVoice_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_Chat_QuickVoice_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.OnWorldMarkDataSwitchResponse
// 0x00C0 (0x00C0 - 0x0000)
struct UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse final
{
public:
	struct FWorldMarkData                         UpdatedWorldMarkData;                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsCancel;                                         // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse");
static_assert(sizeof(UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse) == 0x0000C0, "Wrong size on UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse, UpdatedWorldMarkData) == 0x000000, "Member 'UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse::UpdatedWorldMarkData' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse, bIsCancel) == 0x0000B8, "Member 'UI_Chat_QuickVoice_C_OnWorldMarkDataSwitchResponse::bIsCancel' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.OnResponseByPlayer
// 0x0028 (0x0028 - 0x0000)
struct UI_Chat_QuickVoice_C_OnResponseByPlayer final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerID;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayVoiceType                            VoiceType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecialBehaviorUID;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Chat_QuickVoice_C_OnResponseByPlayer) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_OnResponseByPlayer");
static_assert(sizeof(UI_Chat_QuickVoice_C_OnResponseByPlayer) == 0x000028, "Wrong size on UI_Chat_QuickVoice_C_OnResponseByPlayer");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnResponseByPlayer, UniqueId) == 0x000000, "Member 'UI_Chat_QuickVoice_C_OnResponseByPlayer::UniqueId' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnResponseByPlayer, InPlayerID) == 0x000010, "Member 'UI_Chat_QuickVoice_C_OnResponseByPlayer::InPlayerID' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnResponseByPlayer, VoiceType) == 0x000020, "Member 'UI_Chat_QuickVoice_C_OnResponseByPlayer::VoiceType' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnResponseByPlayer, SpecialBehaviorUID) == 0x000024, "Member 'UI_Chat_QuickVoice_C_OnResponseByPlayer::SpecialBehaviorUID' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.OnItemWorldMarkDataUpdated
// 0x00B8 (0x00B8 - 0x0000)
struct UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated final
{
public:
	struct FWorldMarkData                         UpdatedWorldMarkData;                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated");
static_assert(sizeof(UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated) == 0x0000B8, "Wrong size on UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated");
static_assert(offsetof(UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated, UpdatedWorldMarkData) == 0x000000, "Member 'UI_Chat_QuickVoice_C_OnItemWorldMarkDataUpdated::UpdatedWorldMarkData' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.GetQuickVoiceUniqueID
// 0x0018 (0x0018 - 0x0000)
struct UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID final
{
public:
	class UObject*                                ItemObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID");
static_assert(sizeof(UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID) == 0x000018, "Wrong size on UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID");
static_assert(offsetof(UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID, ItemObject) == 0x000000, "Member 'UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID::ItemObject' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID, ReturnValue) == 0x000008, "Member 'UI_Chat_QuickVoice_C_GetQuickVoiceUniqueID::ReturnValue' has a wrong offset!");

// Function UI_Chat_QuickVoice.UI_Chat_QuickVoice_C.AddQuickchatContent
// 0x0118 (0x0118 - 0x0000)
struct UI_Chat_QuickVoice_C_AddQuickchatContent final
{
public:
	struct FInteractiveQuickChatData              InData;                                            // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FQuickCommunicationInteractionData     InQuickChatResponseData;                           // 0x0058(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Chat_QuickVoice_C_AddQuickchatContent) == 0x000008, "Wrong alignment on UI_Chat_QuickVoice_C_AddQuickchatContent");
static_assert(sizeof(UI_Chat_QuickVoice_C_AddQuickchatContent) == 0x000118, "Wrong size on UI_Chat_QuickVoice_C_AddQuickchatContent");
static_assert(offsetof(UI_Chat_QuickVoice_C_AddQuickchatContent, InData) == 0x000000, "Member 'UI_Chat_QuickVoice_C_AddQuickchatContent::InData' has a wrong offset!");
static_assert(offsetof(UI_Chat_QuickVoice_C_AddQuickchatContent, InQuickChatResponseData) == 0x000058, "Member 'UI_Chat_QuickVoice_C_AddQuickchatContent::InQuickChatResponseData' has a wrong offset!");

}

