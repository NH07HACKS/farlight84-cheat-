#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_SolarDriveControll

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.ExecuteUbergraph_WB_SolarDriveControll
// 0x0018 (0x0018 - 0x0000)
struct WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDriveState                                   K2Node_Event_InDriveState;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDriveState                                   Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll) == 0x000008, "Wrong alignment on WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll");
static_assert(sizeof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll) == 0x000018, "Wrong size on WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, EntryPoint) == 0x000000, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, K2Node_Event_InDriveState) == 0x000004, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::K2Node_Event_InDriveState' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, Temp_byte_Variable) == 0x000005, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, CallFunc_IsPCPlatform_IsPCPlatform) == 0x000006, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::CallFunc_IsPCPlatform_IsPCPlatform' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, K2Node_Select_Default) == 0x000008, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WB_SolarDriveControll_C_ExecuteUbergraph_WB_SolarDriveControll::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.BP_ApplyVehicleUI
// 0x0001 (0x0001 - 0x0000)
struct WB_SolarDriveControll_C_BP_ApplyVehicleUI final
{
public:
	EDriveState                                   InDriveState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_SolarDriveControll_C_BP_ApplyVehicleUI) == 0x000001, "Wrong alignment on WB_SolarDriveControll_C_BP_ApplyVehicleUI");
static_assert(sizeof(WB_SolarDriveControll_C_BP_ApplyVehicleUI) == 0x000001, "Wrong size on WB_SolarDriveControll_C_BP_ApplyVehicleUI");
static_assert(offsetof(WB_SolarDriveControll_C_BP_ApplyVehicleUI, InDriveState) == 0x000000, "Member 'WB_SolarDriveControll_C_BP_ApplyVehicleUI::InDriveState' has a wrong offset!");

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.GetVehicleSkillWidgets
// 0x0058 (0x0058 - 0x0000)
struct WB_SolarDriveControll_C_GetVehicleSkillWidgets final
{
public:
	TArray<class UUserWidget*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetAdapteeWidget_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Vehicle_Skill_Mobile_C*             K2Node_DynamicCast_AsUI_Vehicle_Skill_Mobile;      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlatformDesktop_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    K2Node_MakeArray_Array_2;                          // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(WB_SolarDriveControll_C_GetVehicleSkillWidgets) == 0x000008, "Wrong alignment on WB_SolarDriveControll_C_GetVehicleSkillWidgets");
static_assert(sizeof(WB_SolarDriveControll_C_GetVehicleSkillWidgets) == 0x000058, "Wrong size on WB_SolarDriveControll_C_GetVehicleSkillWidgets");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, ReturnValue) == 0x000000, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, CallFunc_GetAdapteeWidget_ReturnValue) == 0x000020, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::CallFunc_GetAdapteeWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, K2Node_DynamicCast_AsUI_Vehicle_Skill_Mobile) == 0x000028, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::K2Node_DynamicCast_AsUI_Vehicle_Skill_Mobile' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, CallFunc_IsPlatformDesktop_ReturnValue) == 0x000031, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::CallFunc_IsPlatformDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, K2Node_MakeArray_Array_1) == 0x000038, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_GetVehicleSkillWidgets, K2Node_MakeArray_Array_2) == 0x000048, "Member 'WB_SolarDriveControll_C_GetVehicleSkillWidgets::K2Node_MakeArray_Array_2' has a wrong offset!");

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.ApplyCustomizeLayoutEx
// 0x0008 (0x0008 - 0x0000)
struct WB_SolarDriveControll_C_ApplyCustomizeLayoutEx final
{
public:
	int32                                         LayoutType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleControlUIType                         VehicleControlUIType;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WB_SolarDriveControll_C_ApplyCustomizeLayoutEx) == 0x000004, "Wrong alignment on WB_SolarDriveControll_C_ApplyCustomizeLayoutEx");
static_assert(sizeof(WB_SolarDriveControll_C_ApplyCustomizeLayoutEx) == 0x000008, "Wrong size on WB_SolarDriveControll_C_ApplyCustomizeLayoutEx");
static_assert(offsetof(WB_SolarDriveControll_C_ApplyCustomizeLayoutEx, LayoutType) == 0x000000, "Member 'WB_SolarDriveControll_C_ApplyCustomizeLayoutEx::LayoutType' has a wrong offset!");
static_assert(offsetof(WB_SolarDriveControll_C_ApplyCustomizeLayoutEx, VehicleControlUIType) == 0x000004, "Member 'WB_SolarDriveControll_C_ApplyCustomizeLayoutEx::VehicleControlUIType' has a wrong offset!");

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.ApplyVehicleUI
// 0x0001 (0x0001 - 0x0000)
struct WB_SolarDriveControll_C_ApplyVehicleUI final
{
public:
	EDriveState                                   InDriveState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WB_SolarDriveControll_C_ApplyVehicleUI) == 0x000001, "Wrong alignment on WB_SolarDriveControll_C_ApplyVehicleUI");
static_assert(sizeof(WB_SolarDriveControll_C_ApplyVehicleUI) == 0x000001, "Wrong size on WB_SolarDriveControll_C_ApplyVehicleUI");
static_assert(offsetof(WB_SolarDriveControll_C_ApplyVehicleUI, InDriveState) == 0x000000, "Member 'WB_SolarDriveControll_C_ApplyVehicleUI::InDriveState' has a wrong offset!");

// Function WB_SolarDriveControll.WB_SolarDriveControll_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct WB_SolarDriveControll_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WB_SolarDriveControll_C_GetModuleName) == 0x000008, "Wrong alignment on WB_SolarDriveControll_C_GetModuleName");
static_assert(sizeof(WB_SolarDriveControll_C_GetModuleName) == 0x000010, "Wrong size on WB_SolarDriveControll_C_GetModuleName");
static_assert(offsetof(WB_SolarDriveControll_C_GetModuleName, ReturnValue) == 0x000000, "Member 'WB_SolarDriveControll_C_GetModuleName::ReturnValue' has a wrong offset!");

}

