#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MLAI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK
{

// Enum MLAI.EMLAIGameMode
// NumValues: 0x0003
enum class EMLAIGameMode : uint8
{
	None                                     = 0,
	BattleRoyale                             = 1,
	EMLAIGameMode_MAX                        = 2,
};

// Enum MLAI.EMLAIType
// NumValues: 0x0004
enum class EMLAIType : uint8
{
	None                                     = 0,
	CCS                                      = 1,
	NG                                       = 2,
	EMLAIType_MAX                            = 3,
};

// ScriptStruct MLAI.FrequencyChecker
// 0x000C (0x000C - 0x0000)
struct FFrequencyChecker final
{
public:
	float                                         LastTime;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFrequencyChecker) == 0x000004, "Wrong alignment on FFrequencyChecker");
static_assert(sizeof(FFrequencyChecker) == 0x00000C, "Wrong size on FFrequencyChecker");
static_assert(offsetof(FFrequencyChecker, LastTime) == 0x000000, "Member 'FFrequencyChecker::LastTime' has a wrong offset!");
static_assert(offsetof(FFrequencyChecker, StartTime) == 0x000004, "Member 'FFrequencyChecker::StartTime' has a wrong offset!");
static_assert(offsetof(FFrequencyChecker, Interval) == 0x000008, "Member 'FFrequencyChecker::Interval' has a wrong offset!");

// ScriptStruct MLAI.ItemSource
// 0x0030 (0x0030 - 0x0000)
struct FItemSource final
{
public:
	int64                                         ItemID;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ItemThisID;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ItemLocation;                                      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ItemBox;                                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickedUp;                                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EItemType                                     ItemType;                                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSource) == 0x000008, "Wrong alignment on FItemSource");
static_assert(sizeof(FItemSource) == 0x000030, "Wrong size on FItemSource");
static_assert(offsetof(FItemSource, ItemID) == 0x000000, "Member 'FItemSource::ItemID' has a wrong offset!");
static_assert(offsetof(FItemSource, ItemThisID) == 0x000008, "Member 'FItemSource::ItemThisID' has a wrong offset!");
static_assert(offsetof(FItemSource, ItemLocation) == 0x000010, "Member 'FItemSource::ItemLocation' has a wrong offset!");
static_assert(offsetof(FItemSource, ItemBox) == 0x000020, "Member 'FItemSource::ItemBox' has a wrong offset!");
static_assert(offsetof(FItemSource, bPickedUp) == 0x000028, "Member 'FItemSource::bPickedUp' has a wrong offset!");
static_assert(offsetof(FItemSource, ItemType) == 0x00002C, "Member 'FItemSource::ItemType' has a wrong offset!");

// ScriptStruct MLAI.SenseActorList
// 0x00B0 (0x00B0 - 0x0000)
struct FSenseActorList final
{
public:
	TArray<int32>                                 DoorList;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ZiplineList;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemSource>                    ItemList;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BoxList;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RespawnDevices;                                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SkywardDiveLaunchers;                              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ShieldUpgradeItemShops;                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AirDropTreasureBoxes;                              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TacticalTreasureBoxes;                             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SummonTowers;                                      // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosestExpSpring;                                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractItem;                                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSenseActorList) == 0x000008, "Wrong alignment on FSenseActorList");
static_assert(sizeof(FSenseActorList) == 0x0000B0, "Wrong size on FSenseActorList");
static_assert(offsetof(FSenseActorList, DoorList) == 0x000000, "Member 'FSenseActorList::DoorList' has a wrong offset!");
static_assert(offsetof(FSenseActorList, ZiplineList) == 0x000010, "Member 'FSenseActorList::ZiplineList' has a wrong offset!");
static_assert(offsetof(FSenseActorList, ItemList) == 0x000020, "Member 'FSenseActorList::ItemList' has a wrong offset!");
static_assert(offsetof(FSenseActorList, BoxList) == 0x000030, "Member 'FSenseActorList::BoxList' has a wrong offset!");
static_assert(offsetof(FSenseActorList, RespawnDevices) == 0x000040, "Member 'FSenseActorList::RespawnDevices' has a wrong offset!");
static_assert(offsetof(FSenseActorList, SkywardDiveLaunchers) == 0x000050, "Member 'FSenseActorList::SkywardDiveLaunchers' has a wrong offset!");
static_assert(offsetof(FSenseActorList, ShieldUpgradeItemShops) == 0x000060, "Member 'FSenseActorList::ShieldUpgradeItemShops' has a wrong offset!");
static_assert(offsetof(FSenseActorList, AirDropTreasureBoxes) == 0x000070, "Member 'FSenseActorList::AirDropTreasureBoxes' has a wrong offset!");
static_assert(offsetof(FSenseActorList, TacticalTreasureBoxes) == 0x000080, "Member 'FSenseActorList::TacticalTreasureBoxes' has a wrong offset!");
static_assert(offsetof(FSenseActorList, SummonTowers) == 0x000090, "Member 'FSenseActorList::SummonTowers' has a wrong offset!");
static_assert(offsetof(FSenseActorList, ClosestExpSpring) == 0x0000A0, "Member 'FSenseActorList::ClosestExpSpring' has a wrong offset!");
static_assert(offsetof(FSenseActorList, InteractItem) == 0x0000A4, "Member 'FSenseActorList::InteractItem' has a wrong offset!");

// ScriptStruct MLAI.MLAIInfo
// 0x0020 (0x0020 - 0x0000)
struct FMLAIInfo final
{
public:
	EMLAIType                                     AIType;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MLAIIP;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MLAIPort;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMLAIInfo) == 0x000008, "Wrong alignment on FMLAIInfo");
static_assert(sizeof(FMLAIInfo) == 0x000020, "Wrong size on FMLAIInfo");
static_assert(offsetof(FMLAIInfo, AIType) == 0x000000, "Member 'FMLAIInfo::AIType' has a wrong offset!");
static_assert(offsetof(FMLAIInfo, MLAIIP) == 0x000008, "Member 'FMLAIInfo::MLAIIP' has a wrong offset!");
static_assert(offsetof(FMLAIInfo, MLAIPort) == 0x000018, "Member 'FMLAIInfo::MLAIPort' has a wrong offset!");

}

