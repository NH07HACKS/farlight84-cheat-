#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecABP_Skill_DuckRolling

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// DynamicClass SpecABP_Skill_DuckRolling.SpecABP_Skill_DuckRolling_C
// 0x0830 (0x0BA0 - 0x0370)
class USpecABP_Skill_DuckRolling_C final : public USolarSpecABP_Skill
{
public:
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0370(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x03A0(0x0078)(NativeAccessSpecifierPublic)
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0418(0x00C0)(NativeAccessSpecifierPublic)
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x04D8(0x0078)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0550(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0578(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x05A0(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05C8(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05F0(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0618(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0640(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0668(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0690(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x06B8(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x06E0(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0708(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0730(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x07B8(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x07E8(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0870(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x08A0(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0928(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0958(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0988(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x09B8(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A40(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0A70(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0A98(0x00B0)(NativeAccessSpecifierPublic)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0B48(0x0030)(NativeAccessSpecifierPublic)
	float                                         GenderSpeedScale;                                  // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlreadyBall;                                       // 0x0B7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7D[0x3];                                      // 0x0B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0B80(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B84[0x4];                                      // 0x0B84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x0B88(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0B90(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecAnimInstType                             K2Node_Event_InSpecSkillType;                      // 0x0B91(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B92[0xE];                                      // 0x0B92(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimGraph(struct FPoseLink* bpp__AnimGraph__pf);
	void AnimNotify_OnEnterKeep();
	void AnimNotify_SixDirRunB();
	void AnimNotify_SixDirRunF();
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_2DD0EC47429DDDF5D524E28C7BEB6FDC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_96F233354994DB5F3C981599684676E4();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_9FCA55B94080F9C91D3C72977C6B27F2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_C1B0DD464C5E6E75F0B17A979FA04050();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_C4A03A7C427E91A12468F180AE12DDDC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_C69D967D4703D78E458E4A9CC34113FF();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_DF9C726A46619D9F6336ED8C76B85A28();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_E3863C5B4EEF760666D2C09BC8FABD28();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_FC3FC7BB409137CE70CB53B23ABDAA5B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SpecABP_Skill_DuckRolling_AnimGraphNode_TransitionResult_FF208C6E45D6EF58A2170793D868D7F6();
	void K2_OnSkillBegin(ESpecAnimInstType bpp__InSpecSkillType__pf);
	void SkillAnimationLayer(const struct FPoseLink& bpp__BasePose__pf, struct FPoseLink* bpp__SkillAnimationLayer__pf);
	void UpdateBlendOutTIme();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecABP_Skill_DuckRolling_C">();
	}
	static class USpecABP_Skill_DuckRolling_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecABP_Skill_DuckRolling_C>();
	}
};
static_assert(alignof(USpecABP_Skill_DuckRolling_C) == 0x000010, "Wrong alignment on USpecABP_Skill_DuckRolling_C");
static_assert(sizeof(USpecABP_Skill_DuckRolling_C) == 0x000BA0, "Wrong size on USpecABP_Skill_DuckRolling_C");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_Root_1) == 0x000370, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_LinkedInputPose_1) == 0x0003A0, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_SaveCachedPose) == 0x000418, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_LinkedInputPose) == 0x0004D8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_12) == 0x000550, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_11) == 0x000578, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_10) == 0x0005A0, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_9) == 0x0005C8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_8) == 0x0005F0, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_7) == 0x000618, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_6) == 0x000640, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_5) == 0x000668, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_4) == 0x000690, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_3) == 0x0006B8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_2) == 0x0006E0, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult_1) == 0x000708, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_SequencePlayer_3) == 0x000730, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult_5) == 0x0007B8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_SequencePlayer_2) == 0x0007E8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult_4) == 0x000870, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_SequencePlayer_1) == 0x0008A0, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult_3) == 0x000928, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult_2) == 0x000958, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult_1) == 0x000988, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_SequencePlayer) == 0x0009B8, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateResult) == 0x000A40, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_TransitionResult) == 0x000A70, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_StateMachine) == 0x000A98, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AnimGraphNode_Root) == 0x000B48, "Member 'USpecABP_Skill_DuckRolling_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, GenderSpeedScale) == 0x000B78, "Member 'USpecABP_Skill_DuckRolling_C::GenderSpeedScale' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, AlreadyBall) == 0x000B7C, "Member 'USpecABP_Skill_DuckRolling_C::AlreadyBall' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, K2Node_Event_DeltaTimeX) == 0x000B80, "Member 'USpecABP_Skill_DuckRolling_C::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, K2Node_DynamicCast_AsSolar_Character) == 0x000B88, "Member 'USpecABP_Skill_DuckRolling_C::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, K2Node_DynamicCast_bSuccess) == 0x000B90, "Member 'USpecABP_Skill_DuckRolling_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(USpecABP_Skill_DuckRolling_C, K2Node_Event_InSpecSkillType) == 0x000B91, "Member 'USpecABP_Skill_DuckRolling_C::K2Node_Event_InSpecSkillType' has a wrong offset!");

}

