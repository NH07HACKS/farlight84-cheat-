#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BackPack_ChoiceSlot_Desktop

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.SetSelect
// 0x0060 (0x0060 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_SetSelect final
{
public:
	bool                                          Select;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hover_0;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect) == 0x000004, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_SetSelect");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect) == 0x000060, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_SetSelect");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Select) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Select' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Hover_0) == 0x000001, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Hover_0' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_bool_Variable) == 0x000002, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_struct_Variable) == 0x000004, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_struct_Variable_1) == 0x000014, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_bool_Variable_1) == 0x000024, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, K2Node_Select_Default) == 0x000028, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_byte_Variable) == 0x000038, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_byte_Variable_1) == 0x000039, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_bool_Variable_2) == 0x00003A, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, Temp_struct_Variable_2) == 0x00003C, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, K2Node_Select_Default_1) == 0x00004C, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_SetSelect, K2Node_Select_Default_2) == 0x000050, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_SetSelect::K2Node_Select_Default_2' has a wrong offset!");

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct) == 0x000001, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct) == 0x000001, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter) == 0x000008, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter) == 0x0000A8, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave) == 0x000008, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave) == 0x000070, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop
// 0x0130 (0x0130 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0040(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00B0(0x0070)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop) == 0x000008, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop) == 0x000130, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, EntryPoint) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, K2Node_Event_MyGeometry) == 0x000008, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, K2Node_Event_MouseEvent_1) == 0x000040, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, K2Node_Event_MouseEvent) == 0x0000B0, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, CallFunc_PlayAnimationForward_ReturnValue) == 0x000120, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000128, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_ExecuteUbergraph_UI_BackPack_ChoiceSlot_Desktop::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function UI_BackPack_ChoiceSlot_Desktop.UI_BackPack_ChoiceSlot_Desktop_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName) == 0x000008, "Wrong alignment on UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName");
static_assert(sizeof(UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName) == 0x000010, "Wrong size on UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName");
static_assert(offsetof(UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_BackPack_ChoiceSlot_Desktop_C_GetModuleName::ReturnValue' has a wrong offset!");

}

