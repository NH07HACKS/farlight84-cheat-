#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_WheelItem

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_WheelItem.UI_WheelItem_C.ExecuteUbergraph_UI_WheelItem
// 0x0008 (0x0008 - 0x0000)
struct UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem) == 0x000004, "Wrong alignment on UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem");
static_assert(sizeof(UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem) == 0x000008, "Wrong size on UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem");
static_assert(offsetof(UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem, EntryPoint) == 0x000000, "Member 'UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_WheelItem_C_ExecuteUbergraph_UI_WheelItem::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_WheelItem_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_PreConstruct) == 0x000001, "Wrong alignment on UI_WheelItem_C_PreConstruct");
static_assert(sizeof(UI_WheelItem_C_PreConstruct) == 0x000001, "Wrong size on UI_WheelItem_C_PreConstruct");
static_assert(offsetof(UI_WheelItem_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_WheelItem_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetSelection
// 0x0148 (0x0148 - 0x0000)
struct UI_WheelItem_C_SetSelection final
{
public:
	bool                                          Selected_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFontOutlineSettings                   K2Node_MakeStruct_FontOutlineSettings;             // 0x0058(0x0030)(NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0088(0x0028)()
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x00B0(0x0068)(HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColor_ReturnValue;                     // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_4;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WheelItem_C_SetSelection) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetSelection");
static_assert(sizeof(UI_WheelItem_C_SetSelection) == 0x000148, "Wrong size on UI_WheelItem_C_SetSelection");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Selected_0) == 0x000000, "Member 'UI_WheelItem_C_SetSelection::Selected_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_bool_Variable) == 0x000001, "Member 'UI_WheelItem_C_SetSelection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_byte_Variable) == 0x000002, "Member 'UI_WheelItem_C_SetSelection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_byte_Variable_1) == 0x000003, "Member 'UI_WheelItem_C_SetSelection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_bool_Variable_1) == 0x000004, "Member 'UI_WheelItem_C_SetSelection::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_struct_Variable) == 0x000008, "Member 'UI_WheelItem_C_SetSelection::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_struct_Variable_1) == 0x000018, "Member 'UI_WheelItem_C_SetSelection::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_bool_Variable_2) == 0x000028, "Member 'UI_WheelItem_C_SetSelection::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_bool_Variable_3) == 0x000029, "Member 'UI_WheelItem_C_SetSelection::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_Select_Default) == 0x00002A, "Member 'UI_WheelItem_C_SetSelection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_struct_Variable_2) == 0x00002C, "Member 'UI_WheelItem_C_SetSelection::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, Temp_bool_Variable_4) == 0x000034, "Member 'UI_WheelItem_C_SetSelection::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_Select_Default_1) == 0x000038, "Member 'UI_WheelItem_C_SetSelection::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_Select_Default_2) == 0x000048, "Member 'UI_WheelItem_C_SetSelection::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_MakeStruct_FontOutlineSettings) == 0x000058, "Member 'UI_WheelItem_C_SetSelection::K2Node_MakeStruct_FontOutlineSettings' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_MakeStruct_SlateColor) == 0x000088, "Member 'UI_WheelItem_C_SetSelection::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_MakeStruct_SlateFontInfo) == 0x0000B0, "Member 'UI_WheelItem_C_SetSelection::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, CallFunc_GetColor_ReturnValue) == 0x000118, "Member 'UI_WheelItem_C_SetSelection::CallFunc_GetColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000128, "Member 'UI_WheelItem_C_SetSelection::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_Select_Default_3) == 0x000130, "Member 'UI_WheelItem_C_SetSelection::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000138, "Member 'UI_WheelItem_C_SetSelection::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSelection, K2Node_Select_Default_4) == 0x000140, "Member 'UI_WheelItem_C_SetSelection::K2Node_Select_Default_4' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetIcon
// 0x0120 (0x0120 - 0x0000)
struct UI_WheelItem_C_SetIcon final
{
public:
	class UObject*                                Icon_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0010(0x0110)()
};
static_assert(alignof(UI_WheelItem_C_SetIcon) == 0x000010, "Wrong alignment on UI_WheelItem_C_SetIcon");
static_assert(sizeof(UI_WheelItem_C_SetIcon) == 0x000120, "Wrong size on UI_WheelItem_C_SetIcon");
static_assert(offsetof(UI_WheelItem_C_SetIcon, Icon_0) == 0x000000, "Member 'UI_WheelItem_C_SetIcon::Icon_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetIcon, K2Node_MakeStruct_SlateBrush) == 0x000010, "Member 'UI_WheelItem_C_SetIcon::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetSize
// 0x0018 (0x0018 - 0x0000)
struct UI_WheelItem_C_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_SetSize) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetSize");
static_assert(sizeof(UI_WheelItem_C_SetSize) == 0x000018, "Wrong size on UI_WheelItem_C_SetSize");
static_assert(offsetof(UI_WheelItem_C_SetSize, InSize) == 0x000000, "Member 'UI_WheelItem_C_SetSize::InSize' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'UI_WheelItem_C_SetSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetSize, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'UI_WheelItem_C_SetSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetAngle
// 0x0010 (0x0010 - 0x0000)
struct UI_WheelItem_C_SetAngle final
{
public:
	float                                         Angle_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SelectionOffset;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPositionOfCircle_Position;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WheelItem_C_SetAngle) == 0x000004, "Wrong alignment on UI_WheelItem_C_SetAngle");
static_assert(sizeof(UI_WheelItem_C_SetAngle) == 0x000010, "Wrong size on UI_WheelItem_C_SetAngle");
static_assert(offsetof(UI_WheelItem_C_SetAngle, Angle_0) == 0x000000, "Member 'UI_WheelItem_C_SetAngle::Angle_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetAngle, SelectionOffset) == 0x000004, "Member 'UI_WheelItem_C_SetAngle::SelectionOffset' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetAngle, CallFunc_GetPositionOfCircle_Position) == 0x000008, "Member 'UI_WheelItem_C_SetAngle::CallFunc_GetPositionOfCircle_Position' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetStyle
// 0x001E (0x001E - 0x0000)
struct UI_WheelItem_C_SetStyle final
{
public:
	EActionWheelCommandType                       Style_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionWheelCommandType                       Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EActionWheelCommandType                       Temp_byte_Variable_5;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_SetStyle) == 0x000001, "Wrong alignment on UI_WheelItem_C_SetStyle");
static_assert(sizeof(UI_WheelItem_C_SetStyle) == 0x00001E, "Wrong size on UI_WheelItem_C_SetStyle");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Style_0) == 0x000000, "Member 'UI_WheelItem_C_SetStyle::Style_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable) == 0x000001, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable) == 0x000002, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable_1) == 0x000003, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable_2) == 0x000004, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_1) == 0x000005, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_2) == 0x000006, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_3) == 0x000007, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_4) == 0x000008, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_5) == 0x000009, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_6) == 0x00000A, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_7) == 0x00000B, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_8) == 0x00000C, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_9) == 0x00000D, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable_3) == 0x00000E, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable_4) == 0x00000F, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_byte_Variable_5) == 0x000010, "Member 'UI_WheelItem_C_SetStyle::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_10) == 0x000011, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_11) == 0x000012, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_12) == 0x000013, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_13) == 0x000014, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_14) == 0x000015, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_15) == 0x000016, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_16) == 0x000017, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, Temp_bool_Variable_17) == 0x000018, "Member 'UI_WheelItem_C_SetStyle::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, K2Node_Select_Default) == 0x000019, "Member 'UI_WheelItem_C_SetStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, K2Node_Select_Default_1) == 0x00001A, "Member 'UI_WheelItem_C_SetStyle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, K2Node_Select_Default_2) == 0x00001B, "Member 'UI_WheelItem_C_SetStyle::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, K2Node_Select_Default_3) == 0x00001C, "Member 'UI_WheelItem_C_SetStyle::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetStyle, CallFunc_IsValid_ReturnValue) == 0x00001D, "Member 'UI_WheelItem_C_SetStyle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetEnabled
// 0x0040 (0x0040 - 0x0000)
struct UI_WheelItem_C_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetColor_ReturnValue;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
};
static_assert(alignof(UI_WheelItem_C_SetEnabled) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetEnabled");
static_assert(sizeof(UI_WheelItem_C_SetEnabled) == 0x000040, "Wrong size on UI_WheelItem_C_SetEnabled");
static_assert(offsetof(UI_WheelItem_C_SetEnabled, Enabled) == 0x000000, "Member 'UI_WheelItem_C_SetEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetEnabled, CallFunc_GetColor_ReturnValue) == 0x000004, "Member 'UI_WheelItem_C_SetEnabled::CallFunc_GetColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetEnabled, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'UI_WheelItem_C_SetEnabled::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.GetColor
// 0x0068 (0x0068 - 0x0000)
struct UI_WheelItem_C_GetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WheelItem_C_GetColor) == 0x000004, "Wrong alignment on UI_WheelItem_C_GetColor");
static_assert(sizeof(UI_WheelItem_C_GetColor) == 0x000068, "Wrong size on UI_WheelItem_C_GetColor");
static_assert(offsetof(UI_WheelItem_C_GetColor, ReturnValue) == 0x000000, "Member 'UI_WheelItem_C_GetColor::ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, Temp_bool_Variable) == 0x000010, "Member 'UI_WheelItem_C_GetColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, Temp_struct_Variable) == 0x000014, "Member 'UI_WheelItem_C_GetColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, Temp_bool_Variable_1) == 0x000024, "Member 'UI_WheelItem_C_GetColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, Temp_struct_Variable_1) == 0x000028, "Member 'UI_WheelItem_C_GetColor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, Temp_struct_Variable_2) == 0x000038, "Member 'UI_WheelItem_C_GetColor::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, K2Node_Select_Default) == 0x000048, "Member 'UI_WheelItem_C_GetColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_GetColor, K2Node_Select_Default_1) == 0x000058, "Member 'UI_WheelItem_C_GetColor::K2Node_Select_Default_1' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetCount
// 0x0018 (0x0018 - 0x0000)
struct UI_WheelItem_C_SetCount final
{
public:
	class FText                                   Count;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(UI_WheelItem_C_SetCount) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetCount");
static_assert(sizeof(UI_WheelItem_C_SetCount) == 0x000018, "Wrong size on UI_WheelItem_C_SetCount");
static_assert(offsetof(UI_WheelItem_C_SetCount, Count) == 0x000000, "Member 'UI_WheelItem_C_SetCount::Count' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetIndex
// 0x0028 (0x0028 - 0x0000)
struct UI_WheelItem_C_SetIndex final
{
public:
	int32                                         Param_Index_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_SetIndex) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetIndex");
static_assert(sizeof(UI_WheelItem_C_SetIndex) == 0x000028, "Wrong size on UI_WheelItem_C_SetIndex");
static_assert(offsetof(UI_WheelItem_C_SetIndex, Param_Index_0) == 0x000000, "Member 'UI_WheelItem_C_SetIndex::Param_Index_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetIndex, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'UI_WheelItem_C_SetIndex::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetIndex, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'UI_WheelItem_C_SetIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.InitData
// 0x00B0 (0x00B0 - 0x0000)
struct UI_WheelItem_C_InitData final
{
public:
	int32                                         Param_Index_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle_0;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActionWheelCommand                    ActionData_0;                                      // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FActionWheelStyle                      ActionWheelStyle;                                  // 0x0038(0x0074)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_InitData) == 0x000008, "Wrong alignment on UI_WheelItem_C_InitData");
static_assert(sizeof(UI_WheelItem_C_InitData) == 0x0000B0, "Wrong size on UI_WheelItem_C_InitData");
static_assert(offsetof(UI_WheelItem_C_InitData, Param_Index_0) == 0x000000, "Member 'UI_WheelItem_C_InitData::Param_Index_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_InitData, Angle_0) == 0x000004, "Member 'UI_WheelItem_C_InitData::Angle_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_InitData, ActionData_0) == 0x000008, "Member 'UI_WheelItem_C_InitData::ActionData_0' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_InitData, ActionWheelStyle) == 0x000038, "Member 'UI_WheelItem_C_InitData::ActionWheelStyle' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.UpdateItemCount
// 0x0148 (0x0148 - 0x0000)
struct UI_WheelItem_C_UpdateItemCount final
{
public:
	class ASolarCharacter*                        CallFunc__C_GetLocalCharacter_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSolarItemData                         CallFunc_GetBackpackItemDataByID_ItemData;         // 0x0008(0x0120)()
	bool                                          CallFunc_GetBackpackItemDataByID_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0130(0x0018)()
};
static_assert(alignof(UI_WheelItem_C_UpdateItemCount) == 0x000008, "Wrong alignment on UI_WheelItem_C_UpdateItemCount");
static_assert(sizeof(UI_WheelItem_C_UpdateItemCount) == 0x000148, "Wrong size on UI_WheelItem_C_UpdateItemCount");
static_assert(offsetof(UI_WheelItem_C_UpdateItemCount, CallFunc__C_GetLocalCharacter_ReturnValue) == 0x000000, "Member 'UI_WheelItem_C_UpdateItemCount::CallFunc__C_GetLocalCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_UpdateItemCount, CallFunc_GetBackpackItemDataByID_ItemData) == 0x000008, "Member 'UI_WheelItem_C_UpdateItemCount::CallFunc_GetBackpackItemDataByID_ItemData' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_UpdateItemCount, CallFunc_GetBackpackItemDataByID_ReturnValue) == 0x000128, "Member 'UI_WheelItem_C_UpdateItemCount::CallFunc_GetBackpackItemDataByID_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_UpdateItemCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000130, "Member 'UI_WheelItem_C_UpdateItemCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.GetWheelItemData
// 0x0030 (0x0030 - 0x0000)
struct UI_WheelItem_C_GetWheelItemData final
{
public:
	struct FActionWheelCommand                    ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(UI_WheelItem_C_GetWheelItemData) == 0x000008, "Wrong alignment on UI_WheelItem_C_GetWheelItemData");
static_assert(sizeof(UI_WheelItem_C_GetWheelItemData) == 0x000030, "Wrong size on UI_WheelItem_C_GetWheelItemData");
static_assert(offsetof(UI_WheelItem_C_GetWheelItemData, ReturnValue) == 0x000000, "Member 'UI_WheelItem_C_GetWheelItemData::ReturnValue' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetLongCDImg
// 0x0008 (0x0008 - 0x0000)
struct UI_WheelItem_C_SetLongCDImg final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WheelItem_C_SetLongCDImg) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetLongCDImg");
static_assert(sizeof(UI_WheelItem_C_SetLongCDImg) == 0x000008, "Wrong size on UI_WheelItem_C_SetLongCDImg");
static_assert(offsetof(UI_WheelItem_C_SetLongCDImg, Object) == 0x000000, "Member 'UI_WheelItem_C_SetLongCDImg::Object' has a wrong offset!");

// Function UI_WheelItem.UI_WheelItem_C.SetBuddyCount
// 0x0058 (0x0058 - 0x0000)
struct UI_WheelItem_C_SetBuddyCount final
{
public:
	struct FActionWheelCommand                    InData;                                            // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         CallFunc_GetItemNumById_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0038(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WheelItem_C_SetBuddyCount) == 0x000008, "Wrong alignment on UI_WheelItem_C_SetBuddyCount");
static_assert(sizeof(UI_WheelItem_C_SetBuddyCount) == 0x000058, "Wrong size on UI_WheelItem_C_SetBuddyCount");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, InData) == 0x000000, "Member 'UI_WheelItem_C_SetBuddyCount::InData' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_GetItemNumById_ReturnValue) == 0x000030, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_GetItemNumById_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000034, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000035, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000038, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000050, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WheelItem_C_SetBuddyCount, CallFunc_BooleanAND_ReturnValue_1) == 0x000052, "Member 'UI_WheelItem_C_SetBuddyCount::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

