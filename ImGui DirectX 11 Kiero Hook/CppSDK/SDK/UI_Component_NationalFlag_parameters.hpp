#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_NationalFlag

#include "Basic.hpp"

#include "E_FlagType_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.ExecuteUbergraph_UI_Component_NationalFlag
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag) == 0x000004, "Wrong alignment on UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag");
static_assert(sizeof(UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag) == 0x000008, "Wrong size on UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag");
static_assert(offsetof(UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag, EntryPoint) == 0x000000, "Member 'UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_Component_NationalFlag_C_ExecuteUbergraph_UI_Component_NationalFlag::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_NationalFlag_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_NationalFlag_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_NationalFlag_C_PreConstruct");
static_assert(sizeof(UI_Component_NationalFlag_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_NationalFlag_C_PreConstruct");
static_assert(offsetof(UI_Component_NationalFlag_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_NationalFlag_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.Set UI State
// 0x0014 (0x0014 - 0x0000)
struct UI_Component_NationalFlag_C_Set_UI_State final
{
public:
	E_FlagType                                    Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FlagType                                    Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_NationalFlag_C_Set_UI_State) == 0x000004, "Wrong alignment on UI_Component_NationalFlag_C_Set_UI_State");
static_assert(sizeof(UI_Component_NationalFlag_C_Set_UI_State) == 0x000014, "Wrong size on UI_Component_NationalFlag_C_Set_UI_State");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, Temp_byte_Variable) == 0x000000, "Member 'UI_Component_NationalFlag_C_Set_UI_State::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, Temp_byte_Variable_1) == 0x000001, "Member 'UI_Component_NationalFlag_C_Set_UI_State::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000004, "Member 'UI_Component_NationalFlag_C_Set_UI_State::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, K2Node_Select_Default) == 0x000008, "Member 'UI_Component_NationalFlag_C_Set_UI_State::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'UI_Component_NationalFlag_C_Set_UI_State::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_Set_UI_State, K2Node_Select_Default_1) == 0x000010, "Member 'UI_Component_NationalFlag_C_Set_UI_State::K2Node_Select_Default_1' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.SetFlagType
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_NationalFlag_C_SetFlagType final
{
public:
	E_FlagType                                    FlagType_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_NationalFlag_C_SetFlagType) == 0x000004, "Wrong alignment on UI_Component_NationalFlag_C_SetFlagType");
static_assert(sizeof(UI_Component_NationalFlag_C_SetFlagType) == 0x000008, "Wrong size on UI_Component_NationalFlag_C_SetFlagType");
static_assert(offsetof(UI_Component_NationalFlag_C_SetFlagType, FlagType_0) == 0x000000, "Member 'UI_Component_NationalFlag_C_SetFlagType::FlagType_0' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_SetFlagType, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'UI_Component_NationalFlag_C_SetFlagType::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.IsBroadCastMode
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_NationalFlag_C_IsBroadCastMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Component_NationalFlag_C_IsBroadCastMode) == 0x000001, "Wrong alignment on UI_Component_NationalFlag_C_IsBroadCastMode");
static_assert(sizeof(UI_Component_NationalFlag_C_IsBroadCastMode) == 0x000001, "Wrong size on UI_Component_NationalFlag_C_IsBroadCastMode");
static_assert(offsetof(UI_Component_NationalFlag_C_IsBroadCastMode, ReturnValue) == 0x000000, "Member 'UI_Component_NationalFlag_C_IsBroadCastMode::ReturnValue' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_NationalFlag_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_NationalFlag_C_GetModuleName) == 0x000008, "Wrong alignment on UI_Component_NationalFlag_C_GetModuleName");
static_assert(sizeof(UI_Component_NationalFlag_C_GetModuleName) == 0x000010, "Wrong size on UI_Component_NationalFlag_C_GetModuleName");
static_assert(offsetof(UI_Component_NationalFlag_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_Component_NationalFlag_C_GetModuleName::ReturnValue' has a wrong offset!");

// Function UI_Component_NationalFlag.UI_Component_NationalFlag_C.IsExclusiveFlagId
// 0x0008 (0x0008 - 0x0000)
struct UI_Component_NationalFlag_C_IsExclusiveFlagId final
{
public:
	int32                                         InFlagID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Component_NationalFlag_C_IsExclusiveFlagId) == 0x000004, "Wrong alignment on UI_Component_NationalFlag_C_IsExclusiveFlagId");
static_assert(sizeof(UI_Component_NationalFlag_C_IsExclusiveFlagId) == 0x000008, "Wrong size on UI_Component_NationalFlag_C_IsExclusiveFlagId");
static_assert(offsetof(UI_Component_NationalFlag_C_IsExclusiveFlagId, InFlagID) == 0x000000, "Member 'UI_Component_NationalFlag_C_IsExclusiveFlagId::InFlagID' has a wrong offset!");
static_assert(offsetof(UI_Component_NationalFlag_C_IsExclusiveFlagId, ReturnValue) == 0x000004, "Member 'UI_Component_NationalFlag_C_IsExclusiveFlagId::ReturnValue' has a wrong offset!");

}

