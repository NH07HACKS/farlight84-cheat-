#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LLHSDK

#include "Basic.hpp"

#include "LLHSDK_structs.hpp"


namespace SDK::Params
{

// Function LLHSDK.LLHSDKAppUtils.DoesDistributeForDomestic
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_DoesDistributeForDomestic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_DoesDistributeForDomestic) == 0x000001, "Wrong alignment on LLHSDKAppUtils_DoesDistributeForDomestic");
static_assert(sizeof(LLHSDKAppUtils_DoesDistributeForDomestic) == 0x000001, "Wrong size on LLHSDKAppUtils_DoesDistributeForDomestic");
static_assert(offsetof(LLHSDKAppUtils_DoesDistributeForDomestic, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_DoesDistributeForDomestic::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetAppID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetAppID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetAppID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetAppID");
static_assert(sizeof(LLHSDKAppUtils_GetAppID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetAppID");
static_assert(offsetof(LLHSDKAppUtils_GetAppID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetAppID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetAppIDRaw
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetAppIDRaw final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetAppIDRaw) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetAppIDRaw");
static_assert(sizeof(LLHSDKAppUtils_GetAppIDRaw) == 0x000010, "Wrong size on LLHSDKAppUtils_GetAppIDRaw");
static_assert(offsetof(LLHSDKAppUtils_GetAppIDRaw, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetAppIDRaw::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetAppName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetAppName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetAppName) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetAppName");
static_assert(sizeof(LLHSDKAppUtils_GetAppName) == 0x000010, "Wrong size on LLHSDKAppUtils_GetAppName");
static_assert(offsetof(LLHSDKAppUtils_GetAppName, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetAppName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetBiosUUID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetBiosUUID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetBiosUUID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetBiosUUID");
static_assert(sizeof(LLHSDKAppUtils_GetBiosUUID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetBiosUUID");
static_assert(offsetof(LLHSDKAppUtils_GetBiosUUID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetBiosUUID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetChannelID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetChannelID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetChannelID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetChannelID");
static_assert(sizeof(LLHSDKAppUtils_GetChannelID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetChannelID");
static_assert(offsetof(LLHSDKAppUtils_GetChannelID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetChannelID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetCommunityEnvId
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKAppUtils_GetCommunityEnvId final
{
public:
	bool                                          bIsDebug;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetCommunityEnvId) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetCommunityEnvId");
static_assert(sizeof(LLHSDKAppUtils_GetCommunityEnvId) == 0x000018, "Wrong size on LLHSDKAppUtils_GetCommunityEnvId");
static_assert(offsetof(LLHSDKAppUtils_GetCommunityEnvId, bIsDebug) == 0x000000, "Member 'LLHSDKAppUtils_GetCommunityEnvId::bIsDebug' has a wrong offset!");
static_assert(offsetof(LLHSDKAppUtils_GetCommunityEnvId, ReturnValue) == 0x000008, "Member 'LLHSDKAppUtils_GetCommunityEnvId::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetDeviceUUID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetDeviceUUID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetDeviceUUID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetDeviceUUID");
static_assert(sizeof(LLHSDKAppUtils_GetDeviceUUID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetDeviceUUID");
static_assert(offsetof(LLHSDKAppUtils_GetDeviceUUID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetDeviceUUID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetDistributionChannel
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_GetDistributionChannel final
{
public:
	EDistributionChannel                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetDistributionChannel) == 0x000001, "Wrong alignment on LLHSDKAppUtils_GetDistributionChannel");
static_assert(sizeof(LLHSDKAppUtils_GetDistributionChannel) == 0x000001, "Wrong size on LLHSDKAppUtils_GetDistributionChannel");
static_assert(offsetof(LLHSDKAppUtils_GetDistributionChannel, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetDistributionChannel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetEnvId
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetEnvId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetEnvId) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetEnvId");
static_assert(sizeof(LLHSDKAppUtils_GetEnvId) == 0x000010, "Wrong size on LLHSDKAppUtils_GetEnvId");
static_assert(offsetof(LLHSDKAppUtils_GetEnvId, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetEnvId::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetGameID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetGameID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetGameID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetGameID");
static_assert(sizeof(LLHSDKAppUtils_GetGameID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetGameID");
static_assert(offsetof(LLHSDKAppUtils_GetGameID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetGameID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetGameTime
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKAppUtils_GetGameTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetGameTime) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetGameTime");
static_assert(sizeof(LLHSDKAppUtils_GetGameTime) == 0x000008, "Wrong size on LLHSDKAppUtils_GetGameTime");
static_assert(offsetof(LLHSDKAppUtils_GetGameTime, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetGameTime::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKAppUtils_GetInstance final
{
public:
	class ULLHSDKAppUtils*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetInstance) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetInstance");
static_assert(sizeof(LLHSDKAppUtils_GetInstance) == 0x000008, "Wrong size on LLHSDKAppUtils_GetInstance");
static_assert(offsetof(LLHSDKAppUtils_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetOperatingSystemId
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetOperatingSystemId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetOperatingSystemId) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetOperatingSystemId");
static_assert(sizeof(LLHSDKAppUtils_GetOperatingSystemId) == 0x000010, "Wrong size on LLHSDKAppUtils_GetOperatingSystemId");
static_assert(offsetof(LLHSDKAppUtils_GetOperatingSystemId, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetOperatingSystemId::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetPSPAppID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetPSPAppID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetPSPAppID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetPSPAppID");
static_assert(sizeof(LLHSDKAppUtils_GetPSPAppID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetPSPAppID");
static_assert(offsetof(LLHSDKAppUtils_GetPSPAppID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetPSPAppID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetRunningProcessName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetRunningProcessName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetRunningProcessName) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetRunningProcessName");
static_assert(sizeof(LLHSDKAppUtils_GetRunningProcessName) == 0x000010, "Wrong size on LLHSDKAppUtils_GetRunningProcessName");
static_assert(offsetof(LLHSDKAppUtils_GetRunningProcessName, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetRunningProcessName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSDKAppId
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSDKAppId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSDKAppId) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSDKAppId");
static_assert(sizeof(LLHSDKAppUtils_GetSDKAppId) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSDKAppId");
static_assert(offsetof(LLHSDKAppUtils_GetSDKAppId, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSDKAppId::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSDKVersionCode
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSDKVersionCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSDKVersionCode) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSDKVersionCode");
static_assert(sizeof(LLHSDKAppUtils_GetSDKVersionCode) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSDKVersionCode");
static_assert(offsetof(LLHSDKAppUtils_GetSDKVersionCode, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSDKVersionCode::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSDKVersionName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSDKVersionName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSDKVersionName) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSDKVersionName");
static_assert(sizeof(LLHSDKAppUtils_GetSDKVersionName) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSDKVersionName");
static_assert(offsetof(LLHSDKAppUtils_GetSDKVersionName, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSDKVersionName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamFriendCount
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKAppUtils_GetSteamFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamFriendCount) == 0x000004, "Wrong alignment on LLHSDKAppUtils_GetSteamFriendCount");
static_assert(sizeof(LLHSDKAppUtils_GetSteamFriendCount) == 0x000004, "Wrong size on LLHSDKAppUtils_GetSteamFriendCount");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendCount, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamFriendCount::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamFriendIDList
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSteamFriendIDList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamFriendIDList) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSteamFriendIDList");
static_assert(sizeof(LLHSDKAppUtils_GetSteamFriendIDList) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSteamFriendIDList");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendIDList, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamFriendIDList::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamFriendName
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKAppUtils_GetSteamFriendName final
{
public:
	class FString                                 SteamId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamFriendName) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSteamFriendName");
static_assert(sizeof(LLHSDKAppUtils_GetSteamFriendName) == 0x000020, "Wrong size on LLHSDKAppUtils_GetSteamFriendName");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendName, SteamId) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamFriendName::SteamId' has a wrong offset!");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendName, ReturnValue) == 0x000010, "Member 'LLHSDKAppUtils_GetSteamFriendName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamFriendsNameList
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSteamFriendsNameList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamFriendsNameList) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSteamFriendsNameList");
static_assert(sizeof(LLHSDKAppUtils_GetSteamFriendsNameList) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSteamFriendsNameList");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendsNameList, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamFriendsNameList::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamFriendsOnlineList
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSteamFriendsOnlineList final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamFriendsOnlineList) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSteamFriendsOnlineList");
static_assert(sizeof(LLHSDKAppUtils_GetSteamFriendsOnlineList) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSteamFriendsOnlineList");
static_assert(offsetof(LLHSDKAppUtils_GetSteamFriendsOnlineList, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamFriendsOnlineList::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetSteamID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetSteamID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetSteamID) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetSteamID");
static_assert(sizeof(LLHSDKAppUtils_GetSteamID) == 0x000010, "Wrong size on LLHSDKAppUtils_GetSteamID");
static_assert(offsetof(LLHSDKAppUtils_GetSteamID, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetSteamID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetVersionCode
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetVersionCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetVersionCode) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetVersionCode");
static_assert(sizeof(LLHSDKAppUtils_GetVersionCode) == 0x000010, "Wrong size on LLHSDKAppUtils_GetVersionCode");
static_assert(offsetof(LLHSDKAppUtils_GetVersionCode, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetVersionCode::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.GetVersionName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKAppUtils_GetVersionName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_GetVersionName) == 0x000008, "Wrong alignment on LLHSDKAppUtils_GetVersionName");
static_assert(sizeof(LLHSDKAppUtils_GetVersionName) == 0x000010, "Wrong size on LLHSDKAppUtils_GetVersionName");
static_assert(offsetof(LLHSDKAppUtils_GetVersionName, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_GetVersionName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.InviteSteamUserToGame
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKAppUtils_InviteSteamUserToGame final
{
public:
	class FString                                 SteamId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKAppUtils_InviteSteamUserToGame) == 0x000008, "Wrong alignment on LLHSDKAppUtils_InviteSteamUserToGame");
static_assert(sizeof(LLHSDKAppUtils_InviteSteamUserToGame) == 0x000018, "Wrong size on LLHSDKAppUtils_InviteSteamUserToGame");
static_assert(offsetof(LLHSDKAppUtils_InviteSteamUserToGame, SteamId) == 0x000000, "Member 'LLHSDKAppUtils_InviteSteamUserToGame::SteamId' has a wrong offset!");
static_assert(offsetof(LLHSDKAppUtils_InviteSteamUserToGame, ReturnValue) == 0x000010, "Member 'LLHSDKAppUtils_InviteSteamUserToGame::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsEarlyRelease
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_IsEarlyRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_IsEarlyRelease) == 0x000001, "Wrong alignment on LLHSDKAppUtils_IsEarlyRelease");
static_assert(sizeof(LLHSDKAppUtils_IsEarlyRelease) == 0x000001, "Wrong size on LLHSDKAppUtils_IsEarlyRelease");
static_assert(offsetof(LLHSDKAppUtils_IsEarlyRelease, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_IsEarlyRelease::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsGrayRelease
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_IsGrayRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_IsGrayRelease) == 0x000001, "Wrong alignment on LLHSDKAppUtils_IsGrayRelease");
static_assert(sizeof(LLHSDKAppUtils_IsGrayRelease) == 0x000001, "Wrong size on LLHSDKAppUtils_IsGrayRelease");
static_assert(offsetof(LLHSDKAppUtils_IsGrayRelease, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_IsGrayRelease::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsNewCheckoutCounter
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_IsNewCheckoutCounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_IsNewCheckoutCounter) == 0x000001, "Wrong alignment on LLHSDKAppUtils_IsNewCheckoutCounter");
static_assert(sizeof(LLHSDKAppUtils_IsNewCheckoutCounter) == 0x000001, "Wrong size on LLHSDKAppUtils_IsNewCheckoutCounter");
static_assert(offsetof(LLHSDKAppUtils_IsNewCheckoutCounter, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_IsNewCheckoutCounter::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsPackageInstalled
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKAppUtils_IsPackageInstalled final
{
public:
	class FString                                 InPackageName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKAppUtils_IsPackageInstalled) == 0x000008, "Wrong alignment on LLHSDKAppUtils_IsPackageInstalled");
static_assert(sizeof(LLHSDKAppUtils_IsPackageInstalled) == 0x000018, "Wrong size on LLHSDKAppUtils_IsPackageInstalled");
static_assert(offsetof(LLHSDKAppUtils_IsPackageInstalled, InPackageName) == 0x000000, "Member 'LLHSDKAppUtils_IsPackageInstalled::InPackageName' has a wrong offset!");
static_assert(offsetof(LLHSDKAppUtils_IsPackageInstalled, ReturnValue) == 0x000010, "Member 'LLHSDKAppUtils_IsPackageInstalled::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsPlatformSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_IsPlatformSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_IsPlatformSteamDeck) == 0x000001, "Wrong alignment on LLHSDKAppUtils_IsPlatformSteamDeck");
static_assert(sizeof(LLHSDKAppUtils_IsPlatformSteamDeck) == 0x000001, "Wrong size on LLHSDKAppUtils_IsPlatformSteamDeck");
static_assert(offsetof(LLHSDKAppUtils_IsPlatformSteamDeck, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_IsPlatformSteamDeck::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsSimulator
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_IsSimulator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_IsSimulator) == 0x000001, "Wrong alignment on LLHSDKAppUtils_IsSimulator");
static_assert(sizeof(LLHSDKAppUtils_IsSimulator) == 0x000001, "Wrong size on LLHSDKAppUtils_IsSimulator");
static_assert(offsetof(LLHSDKAppUtils_IsSimulator, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_IsSimulator::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.IsSteamFriendOnline
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKAppUtils_IsSteamFriendOnline final
{
public:
	class FString                                 SteamId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKAppUtils_IsSteamFriendOnline) == 0x000008, "Wrong alignment on LLHSDKAppUtils_IsSteamFriendOnline");
static_assert(sizeof(LLHSDKAppUtils_IsSteamFriendOnline) == 0x000018, "Wrong size on LLHSDKAppUtils_IsSteamFriendOnline");
static_assert(offsetof(LLHSDKAppUtils_IsSteamFriendOnline, SteamId) == 0x000000, "Member 'LLHSDKAppUtils_IsSteamFriendOnline::SteamId' has a wrong offset!");
static_assert(offsetof(LLHSDKAppUtils_IsSteamFriendOnline, ReturnValue) == 0x000010, "Member 'LLHSDKAppUtils_IsSteamFriendOnline::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.SDKConfigIsDebug
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_SDKConfigIsDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_SDKConfigIsDebug) == 0x000001, "Wrong alignment on LLHSDKAppUtils_SDKConfigIsDebug");
static_assert(sizeof(LLHSDKAppUtils_SDKConfigIsDebug) == 0x000001, "Wrong size on LLHSDKAppUtils_SDKConfigIsDebug");
static_assert(offsetof(LLHSDKAppUtils_SDKConfigIsDebug, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_SDKConfigIsDebug::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.SDKConfigIsMultiDetect
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_SDKConfigIsMultiDetect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_SDKConfigIsMultiDetect) == 0x000001, "Wrong alignment on LLHSDKAppUtils_SDKConfigIsMultiDetect");
static_assert(sizeof(LLHSDKAppUtils_SDKConfigIsMultiDetect) == 0x000001, "Wrong size on LLHSDKAppUtils_SDKConfigIsMultiDetect");
static_assert(offsetof(LLHSDKAppUtils_SDKConfigIsMultiDetect, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_SDKConfigIsMultiDetect::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.ShowSteamVirtualKeyboard
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_ShowSteamVirtualKeyboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_ShowSteamVirtualKeyboard) == 0x000001, "Wrong alignment on LLHSDKAppUtils_ShowSteamVirtualKeyboard");
static_assert(sizeof(LLHSDKAppUtils_ShowSteamVirtualKeyboard) == 0x000001, "Wrong size on LLHSDKAppUtils_ShowSteamVirtualKeyboard");
static_assert(offsetof(LLHSDKAppUtils_ShowSteamVirtualKeyboard, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_ShowSteamVirtualKeyboard::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKAppUtils.SupportBothArmAndX86
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKAppUtils_SupportBothArmAndX86 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKAppUtils_SupportBothArmAndX86) == 0x000001, "Wrong alignment on LLHSDKAppUtils_SupportBothArmAndX86");
static_assert(sizeof(LLHSDKAppUtils_SupportBothArmAndX86) == 0x000001, "Wrong size on LLHSDKAppUtils_SupportBothArmAndX86");
static_assert(offsetof(LLHSDKAppUtils_SupportBothArmAndX86, ReturnValue) == 0x000000, "Member 'LLHSDKAppUtils_SupportBothArmAndX86::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.ClearCommunityRedHint
// 0x0030 (0x0030 - 0x0000)
struct LLHSDKCommunity_ClearCommunityRedHint final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReqMethod;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraHttpParams;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_ClearCommunityRedHint) == 0x000008, "Wrong alignment on LLHSDKCommunity_ClearCommunityRedHint");
static_assert(sizeof(LLHSDKCommunity_ClearCommunityRedHint) == 0x000030, "Wrong size on LLHSDKCommunity_ClearCommunityRedHint");
static_assert(offsetof(LLHSDKCommunity_ClearCommunityRedHint, URL) == 0x000000, "Member 'LLHSDKCommunity_ClearCommunityRedHint::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ClearCommunityRedHint, ReqMethod) == 0x000010, "Member 'LLHSDKCommunity_ClearCommunityRedHint::ReqMethod' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ClearCommunityRedHint, ExtraHttpParams) == 0x000020, "Member 'LLHSDKCommunity_ClearCommunityRedHint::ExtraHttpParams' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.DownloadImage
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKCommunity_DownloadImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_DownloadImage) == 0x000008, "Wrong alignment on LLHSDKCommunity_DownloadImage");
static_assert(sizeof(LLHSDKCommunity_DownloadImage) == 0x000020, "Wrong size on LLHSDKCommunity_DownloadImage");
static_assert(offsetof(LLHSDKCommunity_DownloadImage, URL) == 0x000000, "Member 'LLHSDKCommunity_DownloadImage::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_DownloadImage, FilePath) == 0x000010, "Member 'LLHSDKCommunity_DownloadImage::FilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.ExitCommunity
// 0x0030 (0x0030 - 0x0000)
struct LLHSDKCommunity_ExitCommunity final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReqMethod;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraHttpParams;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_ExitCommunity) == 0x000008, "Wrong alignment on LLHSDKCommunity_ExitCommunity");
static_assert(sizeof(LLHSDKCommunity_ExitCommunity) == 0x000030, "Wrong size on LLHSDKCommunity_ExitCommunity");
static_assert(offsetof(LLHSDKCommunity_ExitCommunity, URL) == 0x000000, "Member 'LLHSDKCommunity_ExitCommunity::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ExitCommunity, ReqMethod) == 0x000010, "Member 'LLHSDKCommunity_ExitCommunity::ReqMethod' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ExitCommunity, ExtraHttpParams) == 0x000020, "Member 'LLHSDKCommunity_ExitCommunity::ExtraHttpParams' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.GetCommunityRedHint
// 0x0030 (0x0030 - 0x0000)
struct LLHSDKCommunity_GetCommunityRedHint final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReqMethod;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraHttpParams;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_GetCommunityRedHint) == 0x000008, "Wrong alignment on LLHSDKCommunity_GetCommunityRedHint");
static_assert(sizeof(LLHSDKCommunity_GetCommunityRedHint) == 0x000030, "Wrong size on LLHSDKCommunity_GetCommunityRedHint");
static_assert(offsetof(LLHSDKCommunity_GetCommunityRedHint, URL) == 0x000000, "Member 'LLHSDKCommunity_GetCommunityRedHint::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_GetCommunityRedHint, ReqMethod) == 0x000010, "Member 'LLHSDKCommunity_GetCommunityRedHint::ReqMethod' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_GetCommunityRedHint, ExtraHttpParams) == 0x000020, "Member 'LLHSDKCommunity_GetCommunityRedHint::ExtraHttpParams' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKCommunity_GetInstance final
{
public:
	class ULLHSDKCommunity*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_GetInstance) == 0x000008, "Wrong alignment on LLHSDKCommunity_GetInstance");
static_assert(sizeof(LLHSDKCommunity_GetInstance) == 0x000008, "Wrong size on LLHSDKCommunity_GetInstance");
static_assert(offsetof(LLHSDKCommunity_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKCommunity_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.InitCommunityConfig
// 0x0030 (0x0030 - 0x0000)
struct LLHSDKCommunity_InitCommunityConfig final
{
public:
	class FString                                 UrlInfo;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReqMethod;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraHttpParams;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_InitCommunityConfig) == 0x000008, "Wrong alignment on LLHSDKCommunity_InitCommunityConfig");
static_assert(sizeof(LLHSDKCommunity_InitCommunityConfig) == 0x000030, "Wrong size on LLHSDKCommunity_InitCommunityConfig");
static_assert(offsetof(LLHSDKCommunity_InitCommunityConfig, UrlInfo) == 0x000000, "Member 'LLHSDKCommunity_InitCommunityConfig::UrlInfo' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_InitCommunityConfig, ReqMethod) == 0x000010, "Member 'LLHSDKCommunity_InitCommunityConfig::ReqMethod' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_InitCommunityConfig, ExtraHttpParams) == 0x000020, "Member 'LLHSDKCommunity_InitCommunityConfig::ExtraHttpParams' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.LoginCommunity
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKCommunity_LoginCommunity final
{
public:
	class FString                                 InLoginParamsJsonStr;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCommunity_LoginCommunity) == 0x000008, "Wrong alignment on LLHSDKCommunity_LoginCommunity");
static_assert(sizeof(LLHSDKCommunity_LoginCommunity) == 0x000010, "Wrong size on LLHSDKCommunity_LoginCommunity");
static_assert(offsetof(LLHSDKCommunity_LoginCommunity, InLoginParamsJsonStr) == 0x000000, "Member 'LLHSDKCommunity_LoginCommunity::InLoginParamsJsonStr' has a wrong offset!");

// Function LLHSDK.LLHSDKCommunity.ShowCommunity
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKCommunity_ShowCommunity final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InExtraInfo;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHForumSDKOrientationMode                   InOrientationMode;                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKCommunity_ShowCommunity) == 0x000008, "Wrong alignment on LLHSDKCommunity_ShowCommunity");
static_assert(sizeof(LLHSDKCommunity_ShowCommunity) == 0x000028, "Wrong size on LLHSDKCommunity_ShowCommunity");
static_assert(offsetof(LLHSDKCommunity_ShowCommunity, InUrl) == 0x000000, "Member 'LLHSDKCommunity_ShowCommunity::InUrl' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ShowCommunity, InExtraInfo) == 0x000010, "Member 'LLHSDKCommunity_ShowCommunity::InExtraInfo' has a wrong offset!");
static_assert(offsetof(LLHSDKCommunity_ShowCommunity, InOrientationMode) == 0x000020, "Member 'LLHSDKCommunity_ShowCommunity::InOrientationMode' has a wrong offset!");

// Function LLHSDK.LLHSDKCustomerService.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKCustomerService_GetInstance final
{
public:
	class ULLHSDKCustomerService*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCustomerService_GetInstance) == 0x000008, "Wrong alignment on LLHSDKCustomerService_GetInstance");
static_assert(sizeof(LLHSDKCustomerService_GetInstance) == 0x000008, "Wrong size on LLHSDKCustomerService_GetInstance");
static_assert(offsetof(LLHSDKCustomerService_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKCustomerService_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKCustomerService.PSPConfig
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKCustomerService_PSPConfig final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCustomerService_PSPConfig) == 0x000008, "Wrong alignment on LLHSDKCustomerService_PSPConfig");
static_assert(sizeof(LLHSDKCustomerService_PSPConfig) == 0x000010, "Wrong size on LLHSDKCustomerService_PSPConfig");
static_assert(offsetof(LLHSDKCustomerService_PSPConfig, Params_0) == 0x000000, "Member 'LLHSDKCustomerService_PSPConfig::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKCustomerService.SetCustomerServiceDebug
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKCustomerService_SetCustomerServiceDebug final
{
public:
	bool                                          bIsPspDebug;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCustomerService_SetCustomerServiceDebug) == 0x000001, "Wrong alignment on LLHSDKCustomerService_SetCustomerServiceDebug");
static_assert(sizeof(LLHSDKCustomerService_SetCustomerServiceDebug) == 0x000001, "Wrong size on LLHSDKCustomerService_SetCustomerServiceDebug");
static_assert(offsetof(LLHSDKCustomerService_SetCustomerServiceDebug, bIsPspDebug) == 0x000000, "Member 'LLHSDKCustomerService_SetCustomerServiceDebug::bIsPspDebug' has a wrong offset!");

// Function LLHSDK.LLHSDKCustomerService.ShowCustomerServicePage
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKCustomerService_ShowCustomerServicePage final
{
public:
	class FString                                 ExtInfoStr;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKCustomerService_ShowCustomerServicePage) == 0x000008, "Wrong alignment on LLHSDKCustomerService_ShowCustomerServicePage");
static_assert(sizeof(LLHSDKCustomerService_ShowCustomerServicePage) == 0x000010, "Wrong size on LLHSDKCustomerService_ShowCustomerServicePage");
static_assert(offsetof(LLHSDKCustomerService_ShowCustomerServicePage, ExtInfoStr) == 0x000000, "Member 'LLHSDKCustomerService_ShowCustomerServicePage::ExtInfoStr' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetAdID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetAdID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetAdID) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetAdID");
static_assert(sizeof(LLHSDKDeviceUtils_GetAdID) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetAdID");
static_assert(offsetof(LLHSDKDeviceUtils_GetAdID, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetAdID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetAndroidID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetAndroidID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetAndroidID) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetAndroidID");
static_assert(sizeof(LLHSDKDeviceUtils_GetAndroidID) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetAndroidID");
static_assert(offsetof(LLHSDKDeviceUtils_GetAndroidID, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetAndroidID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetAvailableRAM
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetAvailableRAM final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetAvailableRAM) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetAvailableRAM");
static_assert(sizeof(LLHSDKDeviceUtils_GetAvailableRAM) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetAvailableRAM");
static_assert(offsetof(LLHSDKDeviceUtils_GetAvailableRAM, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetAvailableRAM::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetCPUHardWareName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetCPUHardWareName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetCPUHardWareName) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetCPUHardWareName");
static_assert(sizeof(LLHSDKDeviceUtils_GetCPUHardWareName) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetCPUHardWareName");
static_assert(offsetof(LLHSDKDeviceUtils_GetCPUHardWareName, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetCPUHardWareName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetCPUModel
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetCPUModel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetCPUModel) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetCPUModel");
static_assert(sizeof(LLHSDKDeviceUtils_GetCPUModel) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetCPUModel");
static_assert(offsetof(LLHSDKDeviceUtils_GetCPUModel, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetCPUModel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceAbi
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceAbi final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceAbi) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceAbi");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceAbi) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceAbi");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceAbi, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceAbi::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceBrand
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceBrand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceBrand) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceBrand");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceBrand) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceBrand");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceBrand, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceBrand::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceCarrier
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceCarrier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceCarrier) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceCarrier");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceCarrier) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceCarrier");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceCarrier, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceCarrier::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceID) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceID");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceID) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceID");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceID, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceModel
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceModel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceModel) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceModel");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceModel) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceModel");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceModel, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceModel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDeviceType
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDeviceType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDeviceType) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDeviceType");
static_assert(sizeof(LLHSDKDeviceUtils_GetDeviceType) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDeviceType");
static_assert(offsetof(LLHSDKDeviceUtils_GetDeviceType, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDeviceType::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDisplayCutout
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDisplayCutout final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDisplayCutout) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDisplayCutout");
static_assert(sizeof(LLHSDKDeviceUtils_GetDisplayCutout) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDisplayCutout");
static_assert(offsetof(LLHSDKDeviceUtils_GetDisplayCutout, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDisplayCutout::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetDisplayMetrics
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetDisplayMetrics final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetDisplayMetrics) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetDisplayMetrics");
static_assert(sizeof(LLHSDKDeviceUtils_GetDisplayMetrics) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetDisplayMetrics");
static_assert(offsetof(LLHSDKDeviceUtils_GetDisplayMetrics, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetDisplayMetrics::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetIDFA
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetIDFA final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetIDFA) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetIDFA");
static_assert(sizeof(LLHSDKDeviceUtils_GetIDFA) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetIDFA");
static_assert(offsetof(LLHSDKDeviceUtils_GetIDFA, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetIDFA::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetIMSI
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetIMSI final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetIMSI) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetIMSI");
static_assert(sizeof(LLHSDKDeviceUtils_GetIMSI) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetIMSI");
static_assert(offsetof(LLHSDKDeviceUtils_GetIMSI, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetIMSI::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKDeviceUtils_GetInstance final
{
public:
	class ULLHSDKDeviceUtils*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetInstance) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetInstance");
static_assert(sizeof(LLHSDKDeviceUtils_GetInstance) == 0x000008, "Wrong size on LLHSDKDeviceUtils_GetInstance");
static_assert(offsetof(LLHSDKDeviceUtils_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetLogicalPackageName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetLogicalPackageName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetLogicalPackageName) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetLogicalPackageName");
static_assert(sizeof(LLHSDKDeviceUtils_GetLogicalPackageName) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetLogicalPackageName");
static_assert(offsetof(LLHSDKDeviceUtils_GetLogicalPackageName, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetLogicalPackageName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetMacAddress
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetMacAddress final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetMacAddress) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetMacAddress");
static_assert(sizeof(LLHSDKDeviceUtils_GetMacAddress) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetMacAddress");
static_assert(offsetof(LLHSDKDeviceUtils_GetMacAddress, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetMacAddress::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetNetworkType
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetNetworkType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetNetworkType) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetNetworkType");
static_assert(sizeof(LLHSDKDeviceUtils_GetNetworkType) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetNetworkType");
static_assert(offsetof(LLHSDKDeviceUtils_GetNetworkType, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetNetworkType::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetNetworkTypeEnum
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKDeviceUtils_GetNetworkTypeEnum final
{
public:
	ELLHSDKNetworkType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetNetworkTypeEnum) == 0x000001, "Wrong alignment on LLHSDKDeviceUtils_GetNetworkTypeEnum");
static_assert(sizeof(LLHSDKDeviceUtils_GetNetworkTypeEnum) == 0x000001, "Wrong size on LLHSDKDeviceUtils_GetNetworkTypeEnum");
static_assert(offsetof(LLHSDKDeviceUtils_GetNetworkTypeEnum, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetNetworkTypeEnum::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetOSVersion
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetOSVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetOSVersion) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetOSVersion");
static_assert(sizeof(LLHSDKDeviceUtils_GetOSVersion) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetOSVersion");
static_assert(offsetof(LLHSDKDeviceUtils_GetOSVersion, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetOSVersion::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetSerialNumber
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetSerialNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetSerialNumber) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetSerialNumber");
static_assert(sizeof(LLHSDKDeviceUtils_GetSerialNumber) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetSerialNumber");
static_assert(offsetof(LLHSDKDeviceUtils_GetSerialNumber, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetSerialNumber::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetTimezoneName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetTimezoneName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetTimezoneName) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetTimezoneName");
static_assert(sizeof(LLHSDKDeviceUtils_GetTimezoneName) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetTimezoneName");
static_assert(offsetof(LLHSDKDeviceUtils_GetTimezoneName, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetTimezoneName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetTotalMemorySize
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetTotalMemorySize final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetTotalMemorySize) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetTotalMemorySize");
static_assert(sizeof(LLHSDKDeviceUtils_GetTotalMemorySize) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetTotalMemorySize");
static_assert(offsetof(LLHSDKDeviceUtils_GetTotalMemorySize, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetTotalMemorySize::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.GetTotalRAM
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKDeviceUtils_GetTotalRAM final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_GetTotalRAM) == 0x000008, "Wrong alignment on LLHSDKDeviceUtils_GetTotalRAM");
static_assert(sizeof(LLHSDKDeviceUtils_GetTotalRAM) == 0x000010, "Wrong size on LLHSDKDeviceUtils_GetTotalRAM");
static_assert(offsetof(LLHSDKDeviceUtils_GetTotalRAM, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_GetTotalRAM::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKDeviceUtils.IsEmulator
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKDeviceUtils_IsEmulator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKDeviceUtils_IsEmulator) == 0x000001, "Wrong alignment on LLHSDKDeviceUtils_IsEmulator");
static_assert(sizeof(LLHSDKDeviceUtils_IsEmulator) == 0x000001, "Wrong size on LLHSDKDeviceUtils_IsEmulator");
static_assert(offsetof(LLHSDKDeviceUtils_IsEmulator, ReturnValue) == 0x000000, "Member 'LLHSDKDeviceUtils_IsEmulator::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKLocalization_GetInstance final
{
public:
	class ULLHSDKLocalization*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_GetInstance) == 0x000008, "Wrong alignment on LLHSDKLocalization_GetInstance");
static_assert(sizeof(LLHSDKLocalization_GetInstance) == 0x000008, "Wrong size on LLHSDKLocalization_GetInstance");
static_assert(offsetof(LLHSDKLocalization_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKLocalization_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.GetLocaleEnum
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLocalization_GetLocaleEnum final
{
public:
	ELLHSDKSupportedLanguage                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_GetLocaleEnum) == 0x000001, "Wrong alignment on LLHSDKLocalization_GetLocaleEnum");
static_assert(sizeof(LLHSDKLocalization_GetLocaleEnum) == 0x000001, "Wrong size on LLHSDKLocalization_GetLocaleEnum");
static_assert(offsetof(LLHSDKLocalization_GetLocaleEnum, ReturnValue) == 0x000000, "Member 'LLHSDKLocalization_GetLocaleEnum::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.GetLocaleInfo
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKLocalization_GetLocaleInfo final
{
public:
	struct FLLHSDKLocaleInfo                      ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_GetLocaleInfo) == 0x000008, "Wrong alignment on LLHSDKLocalization_GetLocaleInfo");
static_assert(sizeof(LLHSDKLocalization_GetLocaleInfo) == 0x000020, "Wrong size on LLHSDKLocalization_GetLocaleInfo");
static_assert(offsetof(LLHSDKLocalization_GetLocaleInfo, ReturnValue) == 0x000000, "Member 'LLHSDKLocalization_GetLocaleInfo::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.GetLocaleName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKLocalization_GetLocaleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_GetLocaleName) == 0x000008, "Wrong alignment on LLHSDKLocalization_GetLocaleName");
static_assert(sizeof(LLHSDKLocalization_GetLocaleName) == 0x000010, "Wrong size on LLHSDKLocalization_GetLocaleName");
static_assert(offsetof(LLHSDKLocalization_GetLocaleName, ReturnValue) == 0x000000, "Member 'LLHSDKLocalization_GetLocaleName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.SetLocale
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLocalization_SetLocale final
{
public:
	ELLHSDKSupportedLanguage                      InLocale;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_SetLocale) == 0x000001, "Wrong alignment on LLHSDKLocalization_SetLocale");
static_assert(sizeof(LLHSDKLocalization_SetLocale) == 0x000001, "Wrong size on LLHSDKLocalization_SetLocale");
static_assert(offsetof(LLHSDKLocalization_SetLocale, InLocale) == 0x000000, "Member 'LLHSDKLocalization_SetLocale::InLocale' has a wrong offset!");

// Function LLHSDK.LLHSDKLocalization.SetLocaleName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKLocalization_SetLocaleName final
{
public:
	class FString                                 InLocale;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLocalization_SetLocaleName) == 0x000008, "Wrong alignment on LLHSDKLocalization_SetLocaleName");
static_assert(sizeof(LLHSDKLocalization_SetLocaleName) == 0x000010, "Wrong size on LLHSDKLocalization_SetLocaleName");
static_assert(offsetof(LLHSDKLocalization_SetLocaleName, InLocale) == 0x000000, "Member 'LLHSDKLocalization_SetLocaleName::InLocale' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.CanContinueLogin
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLogin_CanContinueLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_CanContinueLogin) == 0x000001, "Wrong alignment on LLHSDKLogin_CanContinueLogin");
static_assert(sizeof(LLHSDKLogin_CanContinueLogin) == 0x000001, "Wrong size on LLHSDKLogin_CanContinueLogin");
static_assert(offsetof(LLHSDKLogin_CanContinueLogin, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_CanContinueLogin::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.ChangeLIMPCLanguage
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_ChangeLIMPCLanguage final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_ChangeLIMPCLanguage) == 0x000008, "Wrong alignment on LLHSDKLogin_ChangeLIMPCLanguage");
static_assert(sizeof(LLHSDKLogin_ChangeLIMPCLanguage) == 0x000018, "Wrong size on LLHSDKLogin_ChangeLIMPCLanguage");
static_assert(offsetof(LLHSDKLogin_ChangeLIMPCLanguage, Params_0) == 0x000000, "Member 'LLHSDKLogin_ChangeLIMPCLanguage::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_ChangeLIMPCLanguage, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_ChangeLIMPCLanguage::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.ClearAutoLogin
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLogin_ClearAutoLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_ClearAutoLogin) == 0x000001, "Wrong alignment on LLHSDKLogin_ClearAutoLogin");
static_assert(sizeof(LLHSDKLogin_ClearAutoLogin) == 0x000001, "Wrong size on LLHSDKLogin_ClearAutoLogin");
static_assert(offsetof(LLHSDKLogin_ClearAutoLogin, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_ClearAutoLogin::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.DoSteamBind
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_DoSteamBind final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_DoSteamBind) == 0x000008, "Wrong alignment on LLHSDKLogin_DoSteamBind");
static_assert(sizeof(LLHSDKLogin_DoSteamBind) == 0x000018, "Wrong size on LLHSDKLogin_DoSteamBind");
static_assert(offsetof(LLHSDKLogin_DoSteamBind, URL) == 0x000000, "Member 'LLHSDKLogin_DoSteamBind::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_DoSteamBind, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_DoSteamBind::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKLogin_GetInstance final
{
public:
	class ULLHSDKLogin*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_GetInstance) == 0x000008, "Wrong alignment on LLHSDKLogin_GetInstance");
static_assert(sizeof(LLHSDKLogin_GetInstance) == 0x000008, "Wrong size on LLHSDKLogin_GetInstance");
static_assert(offsetof(LLHSDKLogin_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.GetLimPCUserInfo
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_GetLimPCUserInfo final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_GetLimPCUserInfo) == 0x000008, "Wrong alignment on LLHSDKLogin_GetLimPCUserInfo");
static_assert(sizeof(LLHSDKLogin_GetLimPCUserInfo) == 0x000018, "Wrong size on LLHSDKLogin_GetLimPCUserInfo");
static_assert(offsetof(LLHSDKLogin_GetLimPCUserInfo, Params_0) == 0x000000, "Member 'LLHSDKLogin_GetLimPCUserInfo::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_GetLimPCUserInfo, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_GetLimPCUserInfo::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.GetSteamRegisterUrl
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_GetSteamRegisterUrl final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_GetSteamRegisterUrl) == 0x000008, "Wrong alignment on LLHSDKLogin_GetSteamRegisterUrl");
static_assert(sizeof(LLHSDKLogin_GetSteamRegisterUrl) == 0x000018, "Wrong size on LLHSDKLogin_GetSteamRegisterUrl");
static_assert(offsetof(LLHSDKLogin_GetSteamRegisterUrl, Params_0) == 0x000000, "Member 'LLHSDKLogin_GetSteamRegisterUrl::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_GetSteamRegisterUrl, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_GetSteamRegisterUrl::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.GetSteamToken
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKLogin_GetSteamToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_GetSteamToken) == 0x000008, "Wrong alignment on LLHSDKLogin_GetSteamToken");
static_assert(sizeof(LLHSDKLogin_GetSteamToken) == 0x000010, "Wrong size on LLHSDKLogin_GetSteamToken");
static_assert(offsetof(LLHSDKLogin_GetSteamToken, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_GetSteamToken::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.InitLimPCSDK
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_InitLimPCSDK final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_InitLimPCSDK) == 0x000008, "Wrong alignment on LLHSDKLogin_InitLimPCSDK");
static_assert(sizeof(LLHSDKLogin_InitLimPCSDK) == 0x000018, "Wrong size on LLHSDKLogin_InitLimPCSDK");
static_assert(offsetof(LLHSDKLogin_InitLimPCSDK, Params_0) == 0x000000, "Member 'LLHSDKLogin_InitLimPCSDK::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_InitLimPCSDK, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_InitLimPCSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.InitLimSteamSDK
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_InitLimSteamSDK final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_InitLimSteamSDK) == 0x000008, "Wrong alignment on LLHSDKLogin_InitLimSteamSDK");
static_assert(sizeof(LLHSDKLogin_InitLimSteamSDK) == 0x000018, "Wrong size on LLHSDKLogin_InitLimSteamSDK");
static_assert(offsetof(LLHSDKLogin_InitLimSteamSDK, Params_0) == 0x000000, "Member 'LLHSDKLogin_InitLimSteamSDK::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_InitLimSteamSDK, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_InitLimSteamSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.InitNSSDK
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_InitNSSDK final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_InitNSSDK) == 0x000008, "Wrong alignment on LLHSDKLogin_InitNSSDK");
static_assert(sizeof(LLHSDKLogin_InitNSSDK) == 0x000018, "Wrong size on LLHSDKLogin_InitNSSDK");
static_assert(offsetof(LLHSDKLogin_InitNSSDK, Params_0) == 0x000000, "Member 'LLHSDKLogin_InitNSSDK::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_InitNSSDK, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_InitNSSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.IsCurrentUserNewReg
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLogin_IsCurrentUserNewReg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_IsCurrentUserNewReg) == 0x000001, "Wrong alignment on LLHSDKLogin_IsCurrentUserNewReg");
static_assert(sizeof(LLHSDKLogin_IsCurrentUserNewReg) == 0x000001, "Wrong size on LLHSDKLogin_IsCurrentUserNewReg");
static_assert(offsetof(LLHSDKLogin_IsCurrentUserNewReg, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_IsCurrentUserNewReg::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.IsInitFinish
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLogin_IsInitFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_IsInitFinish) == 0x000001, "Wrong alignment on LLHSDKLogin_IsInitFinish");
static_assert(sizeof(LLHSDKLogin_IsInitFinish) == 0x000001, "Wrong size on LLHSDKLogin_IsInitFinish");
static_assert(offsetof(LLHSDKLogin_IsInitFinish, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_IsInitFinish::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.LoginLimPCSDK
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_LoginLimPCSDK final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_LoginLimPCSDK) == 0x000008, "Wrong alignment on LLHSDKLogin_LoginLimPCSDK");
static_assert(sizeof(LLHSDKLogin_LoginLimPCSDK) == 0x000018, "Wrong size on LLHSDKLogin_LoginLimPCSDK");
static_assert(offsetof(LLHSDKLogin_LoginLimPCSDK, Params_0) == 0x000000, "Member 'LLHSDKLogin_LoginLimPCSDK::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_LoginLimPCSDK, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_LoginLimPCSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.LoginUser_ToString
// 0x0058 (0x0058 - 0x0000)
struct LLHSDKLogin_LoginUser_ToString final
{
public:
	struct FLLHSDKLoginUser                       InUser;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_LoginUser_ToString) == 0x000008, "Wrong alignment on LLHSDKLogin_LoginUser_ToString");
static_assert(sizeof(LLHSDKLogin_LoginUser_ToString) == 0x000058, "Wrong size on LLHSDKLogin_LoginUser_ToString");
static_assert(offsetof(LLHSDKLogin_LoginUser_ToString, InUser) == 0x000000, "Member 'LLHSDKLogin_LoginUser_ToString::InUser' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_LoginUser_ToString, ReturnValue) == 0x000048, "Member 'LLHSDKLogin_LoginUser_ToString::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.LoginUserInfo_ToString
// 0x0158 (0x0158 - 0x0000)
struct LLHSDKLogin_LoginUserInfo_ToString final
{
public:
	struct FLLHSDKLoginUserInfo                   InUserInfo;                                        // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0148(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_LoginUserInfo_ToString) == 0x000008, "Wrong alignment on LLHSDKLogin_LoginUserInfo_ToString");
static_assert(sizeof(LLHSDKLogin_LoginUserInfo_ToString) == 0x000158, "Wrong size on LLHSDKLogin_LoginUserInfo_ToString");
static_assert(offsetof(LLHSDKLogin_LoginUserInfo_ToString, InUserInfo) == 0x000000, "Member 'LLHSDKLogin_LoginUserInfo_ToString::InUserInfo' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_LoginUserInfo_ToString, ReturnValue) == 0x000148, "Member 'LLHSDKLogin_LoginUserInfo_ToString::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.LogoutLimPCSDK
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKLogin_LogoutLimPCSDK final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_LogoutLimPCSDK) == 0x000004, "Wrong alignment on LLHSDKLogin_LogoutLimPCSDK");
static_assert(sizeof(LLHSDKLogin_LogoutLimPCSDK) == 0x000004, "Wrong size on LLHSDKLogin_LogoutLimPCSDK");
static_assert(offsetof(LLHSDKLogin_LogoutLimPCSDK, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_LogoutLimPCSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.NSAccountInfoGet
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_NSAccountInfoGet final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_NSAccountInfoGet) == 0x000008, "Wrong alignment on LLHSDKLogin_NSAccountInfoGet");
static_assert(sizeof(LLHSDKLogin_NSAccountInfoGet) == 0x000018, "Wrong size on LLHSDKLogin_NSAccountInfoGet");
static_assert(offsetof(LLHSDKLogin_NSAccountInfoGet, Params_0) == 0x000000, "Member 'LLHSDKLogin_NSAccountInfoGet::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_NSAccountInfoGet, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_NSAccountInfoGet::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.NSLoginStart
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_NSLoginStart final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_NSLoginStart) == 0x000008, "Wrong alignment on LLHSDKLogin_NSLoginStart");
static_assert(sizeof(LLHSDKLogin_NSLoginStart) == 0x000018, "Wrong size on LLHSDKLogin_NSLoginStart");
static_assert(offsetof(LLHSDKLogin_NSLoginStart, Params_0) == 0x000000, "Member 'LLHSDKLogin_NSLoginStart::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_NSLoginStart, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_NSLoginStart::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.OpenLIMPCAccountPage
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_OpenLIMPCAccountPage final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_OpenLIMPCAccountPage) == 0x000008, "Wrong alignment on LLHSDKLogin_OpenLIMPCAccountPage");
static_assert(sizeof(LLHSDKLogin_OpenLIMPCAccountPage) == 0x000018, "Wrong size on LLHSDKLogin_OpenLIMPCAccountPage");
static_assert(offsetof(LLHSDKLogin_OpenLIMPCAccountPage, Params_0) == 0x000000, "Member 'LLHSDKLogin_OpenLIMPCAccountPage::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_OpenLIMPCAccountPage, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_OpenLIMPCAccountPage::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.OpenLIMPCSwitchAccPage
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKLogin_OpenLIMPCSwitchAccPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_OpenLIMPCSwitchAccPage) == 0x000004, "Wrong alignment on LLHSDKLogin_OpenLIMPCSwitchAccPage");
static_assert(sizeof(LLHSDKLogin_OpenLIMPCSwitchAccPage) == 0x000004, "Wrong size on LLHSDKLogin_OpenLIMPCSwitchAccPage");
static_assert(offsetof(LLHSDKLogin_OpenLIMPCSwitchAccPage, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_OpenLIMPCSwitchAccPage::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.OpenSteamBindPage
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_OpenSteamBindPage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_OpenSteamBindPage) == 0x000008, "Wrong alignment on LLHSDKLogin_OpenSteamBindPage");
static_assert(sizeof(LLHSDKLogin_OpenSteamBindPage) == 0x000018, "Wrong size on LLHSDKLogin_OpenSteamBindPage");
static_assert(offsetof(LLHSDKLogin_OpenSteamBindPage, URL) == 0x000000, "Member 'LLHSDKLogin_OpenSteamBindPage::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_OpenSteamBindPage, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_OpenSteamBindPage::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.QueryCurrentUser
// 0x0048 (0x0048 - 0x0000)
struct LLHSDKLogin_QueryCurrentUser final
{
public:
	struct FLLHSDKLoginUser                       ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_QueryCurrentUser) == 0x000008, "Wrong alignment on LLHSDKLogin_QueryCurrentUser");
static_assert(sizeof(LLHSDKLogin_QueryCurrentUser) == 0x000048, "Wrong size on LLHSDKLogin_QueryCurrentUser");
static_assert(offsetof(LLHSDKLogin_QueryCurrentUser, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_QueryCurrentUser::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.QueryCurrentUserInfo
// 0x0148 (0x0148 - 0x0000)
struct LLHSDKLogin_QueryCurrentUserInfo final
{
public:
	struct FLLHSDKLoginUserInfo                   ReturnValue;                                       // 0x0000(0x0148)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_QueryCurrentUserInfo) == 0x000008, "Wrong alignment on LLHSDKLogin_QueryCurrentUserInfo");
static_assert(sizeof(LLHSDKLogin_QueryCurrentUserInfo) == 0x000148, "Wrong size on LLHSDKLogin_QueryCurrentUserInfo");
static_assert(offsetof(LLHSDKLogin_QueryCurrentUserInfo, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_QueryCurrentUserInfo::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SetLimPCSDKEventHandler
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKLogin_SetLimPCSDKEventHandler final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_SetLimPCSDKEventHandler) == 0x000004, "Wrong alignment on LLHSDKLogin_SetLimPCSDKEventHandler");
static_assert(sizeof(LLHSDKLogin_SetLimPCSDKEventHandler) == 0x000004, "Wrong size on LLHSDKLogin_SetLimPCSDKEventHandler");
static_assert(offsetof(LLHSDKLogin_SetLimPCSDKEventHandler, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_SetLimPCSDKEventHandler::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SetLimPCSDKLogHandler
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKLogin_SetLimPCSDKLogHandler final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_SetLimPCSDKLogHandler) == 0x000004, "Wrong alignment on LLHSDKLogin_SetLimPCSDKLogHandler");
static_assert(sizeof(LLHSDKLogin_SetLimPCSDKLogHandler) == 0x000004, "Wrong size on LLHSDKLogin_SetLimPCSDKLogHandler");
static_assert(offsetof(LLHSDKLogin_SetLimPCSDKLogHandler, ReturnValue) == 0x000000, "Member 'LLHSDKLogin_SetLimPCSDKLogHandler::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SetShowCustomDialog
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKLogin_SetShowCustomDialog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_SetShowCustomDialog) == 0x000001, "Wrong alignment on LLHSDKLogin_SetShowCustomDialog");
static_assert(sizeof(LLHSDKLogin_SetShowCustomDialog) == 0x000001, "Wrong size on LLHSDKLogin_SetShowCustomDialog");
static_assert(offsetof(LLHSDKLogin_SetShowCustomDialog, bEnable) == 0x000000, "Member 'LLHSDKLogin_SetShowCustomDialog::bEnable' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.ShowSystemToast
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_ShowSystemToast final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_ShowSystemToast) == 0x000008, "Wrong alignment on LLHSDKLogin_ShowSystemToast");
static_assert(sizeof(LLHSDKLogin_ShowSystemToast) == 0x000018, "Wrong size on LLHSDKLogin_ShowSystemToast");
static_assert(offsetof(LLHSDKLogin_ShowSystemToast, Content) == 0x000000, "Member 'LLHSDKLogin_ShowSystemToast::Content' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_ShowSystemToast, Duration) == 0x000010, "Member 'LLHSDKLogin_ShowSystemToast::Duration' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_ShowSystemToast, Alpha) == 0x000014, "Member 'LLHSDKLogin_ShowSystemToast::Alpha' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamAutoLogin
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_SteamAutoLogin final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_SteamAutoLogin) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamAutoLogin");
static_assert(sizeof(LLHSDKLogin_SteamAutoLogin) == 0x000018, "Wrong size on LLHSDKLogin_SteamAutoLogin");
static_assert(offsetof(LLHSDKLogin_SteamAutoLogin, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamAutoLogin::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_SteamAutoLogin, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_SteamAutoLogin::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamBindUrlGet
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_SteamBindUrlGet final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_SteamBindUrlGet) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamBindUrlGet");
static_assert(sizeof(LLHSDKLogin_SteamBindUrlGet) == 0x000018, "Wrong size on LLHSDKLogin_SteamBindUrlGet");
static_assert(offsetof(LLHSDKLogin_SteamBindUrlGet, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamBindUrlGet::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_SteamBindUrlGet, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_SteamBindUrlGet::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamEulaConfirm
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKLogin_SteamEulaConfirm final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_SteamEulaConfirm) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamEulaConfirm");
static_assert(sizeof(LLHSDKLogin_SteamEulaConfirm) == 0x000010, "Wrong size on LLHSDKLogin_SteamEulaConfirm");
static_assert(offsetof(LLHSDKLogin_SteamEulaConfirm, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamEulaConfirm::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamGetAccountInfo
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_SteamGetAccountInfo final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_SteamGetAccountInfo) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamGetAccountInfo");
static_assert(sizeof(LLHSDKLogin_SteamGetAccountInfo) == 0x000018, "Wrong size on LLHSDKLogin_SteamGetAccountInfo");
static_assert(offsetof(LLHSDKLogin_SteamGetAccountInfo, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamGetAccountInfo::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_SteamGetAccountInfo, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_SteamGetAccountInfo::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamLoginResultSet
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_SteamLoginResultSet final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_SteamLoginResultSet) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamLoginResultSet");
static_assert(sizeof(LLHSDKLogin_SteamLoginResultSet) == 0x000018, "Wrong size on LLHSDKLogin_SteamLoginResultSet");
static_assert(offsetof(LLHSDKLogin_SteamLoginResultSet, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamLoginResultSet::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_SteamLoginResultSet, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_SteamLoginResultSet::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamRealNameResultSet
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKLogin_SteamRealNameResultSet final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKLogin_SteamRealNameResultSet) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamRealNameResultSet");
static_assert(sizeof(LLHSDKLogin_SteamRealNameResultSet) == 0x000010, "Wrong size on LLHSDKLogin_SteamRealNameResultSet");
static_assert(offsetof(LLHSDKLogin_SteamRealNameResultSet, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamRealNameResultSet::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKLogin.SteamRegister
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKLogin_SteamRegister final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKLogin_SteamRegister) == 0x000008, "Wrong alignment on LLHSDKLogin_SteamRegister");
static_assert(sizeof(LLHSDKLogin_SteamRegister) == 0x000018, "Wrong size on LLHSDKLogin_SteamRegister");
static_assert(offsetof(LLHSDKLogin_SteamRegister, Params_0) == 0x000000, "Member 'LLHSDKLogin_SteamRegister::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKLogin_SteamRegister, ReturnValue) == 0x000010, "Member 'LLHSDKLogin_SteamRegister::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.BrocastApkDownloadErrorEventOnGameThread
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread final
{
public:
	class FString                                 Error;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread) == 0x000008, "Wrong alignment on LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread");
static_assert(sizeof(LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread) == 0x000010, "Wrong size on LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread");
static_assert(offsetof(LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread, Error) == 0x000000, "Member 'LLHSDKMisc_BrocastApkDownloadErrorEventOnGameThread::Error' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.BrocastApkDownloadingEventOnGameThread
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKMisc_BrocastApkDownloadingEventOnGameThread final
{
public:
	int32                                         TotalSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownloadedSize;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_BrocastApkDownloadingEventOnGameThread) == 0x000004, "Wrong alignment on LLHSDKMisc_BrocastApkDownloadingEventOnGameThread");
static_assert(sizeof(LLHSDKMisc_BrocastApkDownloadingEventOnGameThread) == 0x000008, "Wrong size on LLHSDKMisc_BrocastApkDownloadingEventOnGameThread");
static_assert(offsetof(LLHSDKMisc_BrocastApkDownloadingEventOnGameThread, TotalSize) == 0x000000, "Member 'LLHSDKMisc_BrocastApkDownloadingEventOnGameThread::TotalSize' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_BrocastApkDownloadingEventOnGameThread, DownloadedSize) == 0x000004, "Member 'LLHSDKMisc_BrocastApkDownloadingEventOnGameThread::DownloadedSize' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.BrocastWifiStateChangedEventOnGameThread
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread final
{
public:
	bool                                          bWifiEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread) == 0x000001, "Wrong alignment on LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread");
static_assert(sizeof(LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread) == 0x000001, "Wrong size on LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread");
static_assert(offsetof(LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread, bWifiEnabled) == 0x000000, "Member 'LLHSDKMisc_BrocastWifiStateChangedEventOnGameThread::bWifiEnabled' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.CheckGyroSensorSupport
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_CheckGyroSensorSupport final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_CheckGyroSensorSupport) == 0x000001, "Wrong alignment on LLHSDKMisc_CheckGyroSensorSupport");
static_assert(sizeof(LLHSDKMisc_CheckGyroSensorSupport) == 0x000001, "Wrong size on LLHSDKMisc_CheckGyroSensorSupport");
static_assert(offsetof(LLHSDKMisc_CheckGyroSensorSupport, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_CheckGyroSensorSupport::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.DnsDetect
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_DnsDetect final
{
public:
	class FString                                 InServer;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDomain;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_DnsDetect) == 0x000008, "Wrong alignment on LLHSDKMisc_DnsDetect");
static_assert(sizeof(LLHSDKMisc_DnsDetect) == 0x000020, "Wrong size on LLHSDKMisc_DnsDetect");
static_assert(offsetof(LLHSDKMisc_DnsDetect, InServer) == 0x000000, "Member 'LLHSDKMisc_DnsDetect::InServer' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_DnsDetect, InDomain) == 0x000010, "Member 'LLHSDKMisc_DnsDetect::InDomain' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.ExecuteLimPCNetworkDiagnosis
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_ExecuteLimPCNetworkDiagnosis final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_ExecuteLimPCNetworkDiagnosis) == 0x000008, "Wrong alignment on LLHSDKMisc_ExecuteLimPCNetworkDiagnosis");
static_assert(sizeof(LLHSDKMisc_ExecuteLimPCNetworkDiagnosis) == 0x000010, "Wrong size on LLHSDKMisc_ExecuteLimPCNetworkDiagnosis");
static_assert(offsetof(LLHSDKMisc_ExecuteLimPCNetworkDiagnosis, Params_0) == 0x000000, "Member 'LLHSDKMisc_ExecuteLimPCNetworkDiagnosis::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.FacebookShareLink
// 0x0040 (0x0040 - 0x0000)
struct LLHSDKMisc_FacebookShareLink final
{
public:
	class FString                                 InLinkURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPreviewURL;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InTitle;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDesc;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_FacebookShareLink) == 0x000008, "Wrong alignment on LLHSDKMisc_FacebookShareLink");
static_assert(sizeof(LLHSDKMisc_FacebookShareLink) == 0x000040, "Wrong size on LLHSDKMisc_FacebookShareLink");
static_assert(offsetof(LLHSDKMisc_FacebookShareLink, InLinkURL) == 0x000000, "Member 'LLHSDKMisc_FacebookShareLink::InLinkURL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_FacebookShareLink, InPreviewURL) == 0x000010, "Member 'LLHSDKMisc_FacebookShareLink::InPreviewURL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_FacebookShareLink, InTitle) == 0x000020, "Member 'LLHSDKMisc_FacebookShareLink::InTitle' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_FacebookShareLink, InDesc) == 0x000030, "Member 'LLHSDKMisc_FacebookShareLink::InDesc' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.FacebookSharePhotoByPath
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_FacebookSharePhotoByPath final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_FacebookSharePhotoByPath) == 0x000008, "Wrong alignment on LLHSDKMisc_FacebookSharePhotoByPath");
static_assert(sizeof(LLHSDKMisc_FacebookSharePhotoByPath) == 0x000010, "Wrong size on LLHSDKMisc_FacebookSharePhotoByPath");
static_assert(offsetof(LLHSDKMisc_FacebookSharePhotoByPath, InFilePath) == 0x000000, "Member 'LLHSDKMisc_FacebookSharePhotoByPath::InFilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.FacebookSharePhotoWithFileAndDescription
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_FacebookSharePhotoWithFileAndDescription final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_FacebookSharePhotoWithFileAndDescription) == 0x000008, "Wrong alignment on LLHSDKMisc_FacebookSharePhotoWithFileAndDescription");
static_assert(sizeof(LLHSDKMisc_FacebookSharePhotoWithFileAndDescription) == 0x000020, "Wrong size on LLHSDKMisc_FacebookSharePhotoWithFileAndDescription");
static_assert(offsetof(LLHSDKMisc_FacebookSharePhotoWithFileAndDescription, Description) == 0x000000, "Member 'LLHSDKMisc_FacebookSharePhotoWithFileAndDescription::Description' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_FacebookSharePhotoWithFileAndDescription, FilePath) == 0x000010, "Member 'LLHSDKMisc_FacebookSharePhotoWithFileAndDescription::FilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetAndroidAPILevel
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKMisc_GetAndroidAPILevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetAndroidAPILevel) == 0x000004, "Wrong alignment on LLHSDKMisc_GetAndroidAPILevel");
static_assert(sizeof(LLHSDKMisc_GetAndroidAPILevel) == 0x000004, "Wrong size on LLHSDKMisc_GetAndroidAPILevel");
static_assert(offsetof(LLHSDKMisc_GetAndroidAPILevel, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetAndroidAPILevel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetChannelIdOfThirdPartyChannel
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetChannelIdOfThirdPartyChannel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetChannelIdOfThirdPartyChannel) == 0x000008, "Wrong alignment on LLHSDKMisc_GetChannelIdOfThirdPartyChannel");
static_assert(sizeof(LLHSDKMisc_GetChannelIdOfThirdPartyChannel) == 0x000010, "Wrong size on LLHSDKMisc_GetChannelIdOfThirdPartyChannel");
static_assert(offsetof(LLHSDKMisc_GetChannelIdOfThirdPartyChannel, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetChannelIdOfThirdPartyChannel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetChannelName
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetChannelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetChannelName) == 0x000008, "Wrong alignment on LLHSDKMisc_GetChannelName");
static_assert(sizeof(LLHSDKMisc_GetChannelName) == 0x000010, "Wrong size on LLHSDKMisc_GetChannelName");
static_assert(offsetof(LLHSDKMisc_GetChannelName, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetChannelName::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetDapInfo
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetDapInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetDapInfo) == 0x000008, "Wrong alignment on LLHSDKMisc_GetDapInfo");
static_assert(sizeof(LLHSDKMisc_GetDapInfo) == 0x000010, "Wrong size on LLHSDKMisc_GetDapInfo");
static_assert(offsetof(LLHSDKMisc_GetDapInfo, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetDapInfo::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetDeepLinkParams
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetDeepLinkParams final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetDeepLinkParams) == 0x000008, "Wrong alignment on LLHSDKMisc_GetDeepLinkParams");
static_assert(sizeof(LLHSDKMisc_GetDeepLinkParams) == 0x000010, "Wrong size on LLHSDKMisc_GetDeepLinkParams");
static_assert(offsetof(LLHSDKMisc_GetDeepLinkParams, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetDeepLinkParams::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetFirebaseMessagingToken
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetFirebaseMessagingToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetFirebaseMessagingToken) == 0x000008, "Wrong alignment on LLHSDKMisc_GetFirebaseMessagingToken");
static_assert(sizeof(LLHSDKMisc_GetFirebaseMessagingToken) == 0x000010, "Wrong size on LLHSDKMisc_GetFirebaseMessagingToken");
static_assert(offsetof(LLHSDKMisc_GetFirebaseMessagingToken, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetFirebaseMessagingToken::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetForceUpdateUrl
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_GetForceUpdateUrl final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetForceUpdateUrl) == 0x000008, "Wrong alignment on LLHSDKMisc_GetForceUpdateUrl");
static_assert(sizeof(LLHSDKMisc_GetForceUpdateUrl) == 0x000020, "Wrong size on LLHSDKMisc_GetForceUpdateUrl");
static_assert(offsetof(LLHSDKMisc_GetForceUpdateUrl, Version) == 0x000000, "Member 'LLHSDKMisc_GetForceUpdateUrl::Version' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_GetForceUpdateUrl, ReturnValue) == 0x000010, "Member 'LLHSDKMisc_GetForceUpdateUrl::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKMisc_GetInstance final
{
public:
	class ULLHSDKMisc*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetInstance) == 0x000008, "Wrong alignment on LLHSDKMisc_GetInstance");
static_assert(sizeof(LLHSDKMisc_GetInstance) == 0x000008, "Wrong size on LLHSDKMisc_GetInstance");
static_assert(offsetof(LLHSDKMisc_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetJiguangMessagingToken
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetJiguangMessagingToken final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetJiguangMessagingToken) == 0x000008, "Wrong alignment on LLHSDKMisc_GetJiguangMessagingToken");
static_assert(sizeof(LLHSDKMisc_GetJiguangMessagingToken) == 0x000010, "Wrong size on LLHSDKMisc_GetJiguangMessagingToken");
static_assert(offsetof(LLHSDKMisc_GetJiguangMessagingToken, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetJiguangMessagingToken::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetLimPCPluginsDir
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetLimPCPluginsDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetLimPCPluginsDir) == 0x000008, "Wrong alignment on LLHSDKMisc_GetLimPCPluginsDir");
static_assert(sizeof(LLHSDKMisc_GetLimPCPluginsDir) == 0x000010, "Wrong size on LLHSDKMisc_GetLimPCPluginsDir");
static_assert(offsetof(LLHSDKMisc_GetLimPCPluginsDir, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetLimPCPluginsDir::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetNetworkDiagnosisDeviceID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetNetworkDiagnosisDeviceID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetNetworkDiagnosisDeviceID) == 0x000008, "Wrong alignment on LLHSDKMisc_GetNetworkDiagnosisDeviceID");
static_assert(sizeof(LLHSDKMisc_GetNetworkDiagnosisDeviceID) == 0x000010, "Wrong size on LLHSDKMisc_GetNetworkDiagnosisDeviceID");
static_assert(offsetof(LLHSDKMisc_GetNetworkDiagnosisDeviceID, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetNetworkDiagnosisDeviceID::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetTypeOfThirdPartyChannel
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKMisc_GetTypeOfThirdPartyChannel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetTypeOfThirdPartyChannel) == 0x000004, "Wrong alignment on LLHSDKMisc_GetTypeOfThirdPartyChannel");
static_assert(sizeof(LLHSDKMisc_GetTypeOfThirdPartyChannel) == 0x000004, "Wrong size on LLHSDKMisc_GetTypeOfThirdPartyChannel");
static_assert(offsetof(LLHSDKMisc_GetTypeOfThirdPartyChannel, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetTypeOfThirdPartyChannel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.GetUniSDKVersionOfThirdPartyChannel
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel) == 0x000008, "Wrong alignment on LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel");
static_assert(sizeof(LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel) == 0x000010, "Wrong size on LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel");
static_assert(offsetof(LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_GetUniSDKVersionOfThirdPartyChannel::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.HttpDetect
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_HttpDetect final
{
public:
	class FString                                 InUrl;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_HttpDetect) == 0x000008, "Wrong alignment on LLHSDKMisc_HttpDetect");
static_assert(sizeof(LLHSDKMisc_HttpDetect) == 0x000010, "Wrong size on LLHSDKMisc_HttpDetect");
static_assert(offsetof(LLHSDKMisc_HttpDetect, InUrl) == 0x000000, "Member 'LLHSDKMisc_HttpDetect::InUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.InitLimPCNetworkDiagnosis
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_InitLimPCNetworkDiagnosis final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_InitLimPCNetworkDiagnosis) == 0x000008, "Wrong alignment on LLHSDKMisc_InitLimPCNetworkDiagnosis");
static_assert(sizeof(LLHSDKMisc_InitLimPCNetworkDiagnosis) == 0x000010, "Wrong size on LLHSDKMisc_InitLimPCNetworkDiagnosis");
static_assert(offsetof(LLHSDKMisc_InitLimPCNetworkDiagnosis, Params_0) == 0x000000, "Member 'LLHSDKMisc_InitLimPCNetworkDiagnosis::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.InitNetworkDiagnosis
// 0x0070 (0x0070 - 0x0000)
struct LLHSDKMisc_InitNetworkDiagnosis final
{
public:
	class FString                                 InProject;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSecretKey;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InEndPoint;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAccessKeyId;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAccessKeySecret;                                 // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUid;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InChannel;                                         // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_InitNetworkDiagnosis) == 0x000008, "Wrong alignment on LLHSDKMisc_InitNetworkDiagnosis");
static_assert(sizeof(LLHSDKMisc_InitNetworkDiagnosis) == 0x000070, "Wrong size on LLHSDKMisc_InitNetworkDiagnosis");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InProject) == 0x000000, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InProject' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InSecretKey) == 0x000010, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InSecretKey' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InEndPoint) == 0x000020, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InEndPoint' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InAccessKeyId) == 0x000030, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InAccessKeyId' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InAccessKeySecret) == 0x000040, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InAccessKeySecret' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InUid) == 0x000050, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InUid' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_InitNetworkDiagnosis, InChannel) == 0x000060, "Member 'LLHSDKMisc_InitNetworkDiagnosis::InChannel' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsAndroidNotificationEnabled
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsAndroidNotificationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsAndroidNotificationEnabled) == 0x000001, "Wrong alignment on LLHSDKMisc_IsAndroidNotificationEnabled");
static_assert(sizeof(LLHSDKMisc_IsAndroidNotificationEnabled) == 0x000001, "Wrong size on LLHSDKMisc_IsAndroidNotificationEnabled");
static_assert(offsetof(LLHSDKMisc_IsAndroidNotificationEnabled, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsAndroidNotificationEnabled::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsAppRooted
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsAppRooted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsAppRooted) == 0x000001, "Wrong alignment on LLHSDKMisc_IsAppRooted");
static_assert(sizeof(LLHSDKMisc_IsAppRooted) == 0x000001, "Wrong size on LLHSDKMisc_IsAppRooted");
static_assert(offsetof(LLHSDKMisc_IsAppRooted, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsAppRooted::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsEnableIPAPCSDK
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsEnableIPAPCSDK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsEnableIPAPCSDK) == 0x000001, "Wrong alignment on LLHSDKMisc_IsEnableIPAPCSDK");
static_assert(sizeof(LLHSDKMisc_IsEnableIPAPCSDK) == 0x000001, "Wrong size on LLHSDKMisc_IsEnableIPAPCSDK");
static_assert(offsetof(LLHSDKMisc_IsEnableIPAPCSDK, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsEnableIPAPCSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsFacebookShareable
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsFacebookShareable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsFacebookShareable) == 0x000001, "Wrong alignment on LLHSDKMisc_IsFacebookShareable");
static_assert(sizeof(LLHSDKMisc_IsFacebookShareable) == 0x000001, "Wrong size on LLHSDKMisc_IsFacebookShareable");
static_assert(offsetof(LLHSDKMisc_IsFacebookShareable, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsFacebookShareable::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsInstallSocialApp
// 0x0002 (0x0002 - 0x0000)
struct LLHSDKMisc_IsInstallSocialApp final
{
public:
	ELLHSDKSocialPlatform                         SocialPlatform;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsInstallSocialApp) == 0x000001, "Wrong alignment on LLHSDKMisc_IsInstallSocialApp");
static_assert(sizeof(LLHSDKMisc_IsInstallSocialApp) == 0x000002, "Wrong size on LLHSDKMisc_IsInstallSocialApp");
static_assert(offsetof(LLHSDKMisc_IsInstallSocialApp, SocialPlatform) == 0x000000, "Member 'LLHSDKMisc_IsInstallSocialApp::SocialPlatform' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_IsInstallSocialApp, ReturnValue) == 0x000001, "Member 'LLHSDKMisc_IsInstallSocialApp::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsUsedPCSDK
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsUsedPCSDK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsUsedPCSDK) == 0x000001, "Wrong alignment on LLHSDKMisc_IsUsedPCSDK");
static_assert(sizeof(LLHSDKMisc_IsUsedPCSDK) == 0x000001, "Wrong size on LLHSDKMisc_IsUsedPCSDK");
static_assert(offsetof(LLHSDKMisc_IsUsedPCSDK, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsUsedPCSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.IsUsedSteamSDK
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_IsUsedSteamSDK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_IsUsedSteamSDK) == 0x000001, "Wrong alignment on LLHSDKMisc_IsUsedSteamSDK");
static_assert(sizeof(LLHSDKMisc_IsUsedSteamSDK) == 0x000001, "Wrong size on LLHSDKMisc_IsUsedSteamSDK");
static_assert(offsetof(LLHSDKMisc_IsUsedSteamSDK, ReturnValue) == 0x000000, "Member 'LLHSDKMisc_IsUsedSteamSDK::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.JumpToAppStore
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_JumpToAppStore final
{
public:
	class FString                                 AppStoreUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_JumpToAppStore) == 0x000008, "Wrong alignment on LLHSDKMisc_JumpToAppStore");
static_assert(sizeof(LLHSDKMisc_JumpToAppStore) == 0x000010, "Wrong size on LLHSDKMisc_JumpToAppStore");
static_assert(offsetof(LLHSDKMisc_JumpToAppStore, AppStoreUrl) == 0x000000, "Member 'LLHSDKMisc_JumpToAppStore::AppStoreUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.JumpToMarket
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_JumpToMarket final
{
public:
	class FString                                 InAppPkg;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMarketPkg;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_JumpToMarket) == 0x000008, "Wrong alignment on LLHSDKMisc_JumpToMarket");
static_assert(sizeof(LLHSDKMisc_JumpToMarket) == 0x000020, "Wrong size on LLHSDKMisc_JumpToMarket");
static_assert(offsetof(LLHSDKMisc_JumpToMarket, InAppPkg) == 0x000000, "Member 'LLHSDKMisc_JumpToMarket::InAppPkg' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_JumpToMarket, InMarketPkg) == 0x000010, "Member 'LLHSDKMisc_JumpToMarket::InMarketPkg' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.MtrDetect
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_MtrDetect final
{
public:
	class FString                                 InDomain;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_MtrDetect) == 0x000008, "Wrong alignment on LLHSDKMisc_MtrDetect");
static_assert(sizeof(LLHSDKMisc_MtrDetect) == 0x000010, "Wrong size on LLHSDKMisc_MtrDetect");
static_assert(offsetof(LLHSDKMisc_MtrDetect, InDomain) == 0x000000, "Member 'LLHSDKMisc_MtrDetect::InDomain' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.OpenLimPCPage
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_OpenLimPCPage final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_OpenLimPCPage) == 0x000008, "Wrong alignment on LLHSDKMisc_OpenLimPCPage");
static_assert(sizeof(LLHSDKMisc_OpenLimPCPage) == 0x000010, "Wrong size on LLHSDKMisc_OpenLimPCPage");
static_assert(offsetof(LLHSDKMisc_OpenLimPCPage, Params_0) == 0x000000, "Member 'LLHSDKMisc_OpenLimPCPage::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.OpenLimPCWebPage
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_OpenLimPCWebPage final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_OpenLimPCWebPage) == 0x000008, "Wrong alignment on LLHSDKMisc_OpenLimPCWebPage");
static_assert(sizeof(LLHSDKMisc_OpenLimPCWebPage) == 0x000010, "Wrong size on LLHSDKMisc_OpenLimPCWebPage");
static_assert(offsetof(LLHSDKMisc_OpenLimPCWebPage, Params_0) == 0x000000, "Member 'LLHSDKMisc_OpenLimPCWebPage::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.OpenSteamPayWebPage
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_OpenSteamPayWebPage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_OpenSteamPayWebPage) == 0x000008, "Wrong alignment on LLHSDKMisc_OpenSteamPayWebPage");
static_assert(sizeof(LLHSDKMisc_OpenSteamPayWebPage) == 0x000010, "Wrong size on LLHSDKMisc_OpenSteamPayWebPage");
static_assert(offsetof(LLHSDKMisc_OpenSteamPayWebPage, URL) == 0x000000, "Member 'LLHSDKMisc_OpenSteamPayWebPage::URL' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.PingDetect
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_PingDetect final
{
public:
	class FString                                 InDomain;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_PingDetect) == 0x000008, "Wrong alignment on LLHSDKMisc_PingDetect");
static_assert(sizeof(LLHSDKMisc_PingDetect) == 0x000010, "Wrong size on LLHSDKMisc_PingDetect");
static_assert(offsetof(LLHSDKMisc_PingDetect, InDomain) == 0x000000, "Member 'LLHSDKMisc_PingDetect::InDomain' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.QQShareDefault
// 0x0058 (0x0058 - 0x0000)
struct LLHSDKMisc_QQShareDefault final
{
public:
	class FString                                 TargetUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackAppName;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtInt;                                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_QQShareDefault) == 0x000008, "Wrong alignment on LLHSDKMisc_QQShareDefault");
static_assert(sizeof(LLHSDKMisc_QQShareDefault) == 0x000058, "Wrong size on LLHSDKMisc_QQShareDefault");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, TargetUrl) == 0x000000, "Member 'LLHSDKMisc_QQShareDefault::TargetUrl' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, Title) == 0x000010, "Member 'LLHSDKMisc_QQShareDefault::Title' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, Summary) == 0x000020, "Member 'LLHSDKMisc_QQShareDefault::Summary' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, ImageUrl) == 0x000030, "Member 'LLHSDKMisc_QQShareDefault::ImageUrl' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, BackAppName) == 0x000040, "Member 'LLHSDKMisc_QQShareDefault::BackAppName' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQShareDefault, ExtInt) == 0x000050, "Member 'LLHSDKMisc_QQShareDefault::ExtInt' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.QQSharePhoto
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKMisc_QQSharePhoto final
{
public:
	class FString                                 LocalUrl;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackAppName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtInt;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_QQSharePhoto) == 0x000008, "Wrong alignment on LLHSDKMisc_QQSharePhoto");
static_assert(sizeof(LLHSDKMisc_QQSharePhoto) == 0x000028, "Wrong size on LLHSDKMisc_QQSharePhoto");
static_assert(offsetof(LLHSDKMisc_QQSharePhoto, LocalUrl) == 0x000000, "Member 'LLHSDKMisc_QQSharePhoto::LocalUrl' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQSharePhoto, BackAppName) == 0x000010, "Member 'LLHSDKMisc_QQSharePhoto::BackAppName' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_QQSharePhoto, ExtInt) == 0x000020, "Member 'LLHSDKMisc_QQSharePhoto::ExtInt' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.RefreshAndroidMediaScanner
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_RefreshAndroidMediaScanner final
{
public:
	class FString                                 InFullFilePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_RefreshAndroidMediaScanner) == 0x000008, "Wrong alignment on LLHSDKMisc_RefreshAndroidMediaScanner");
static_assert(sizeof(LLHSDKMisc_RefreshAndroidMediaScanner) == 0x000010, "Wrong size on LLHSDKMisc_RefreshAndroidMediaScanner");
static_assert(offsetof(LLHSDKMisc_RefreshAndroidMediaScanner, InFullFilePath) == 0x000000, "Member 'LLHSDKMisc_RefreshAndroidMediaScanner::InFullFilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.RestartApplication
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_RestartApplication final
{
public:
	class FString                                 IntentString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_RestartApplication) == 0x000008, "Wrong alignment on LLHSDKMisc_RestartApplication");
static_assert(sizeof(LLHSDKMisc_RestartApplication) == 0x000010, "Wrong size on LLHSDKMisc_RestartApplication");
static_assert(offsetof(LLHSDKMisc_RestartApplication, IntentString) == 0x000000, "Member 'LLHSDKMisc_RestartApplication::IntentString' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.SetNetworkDiagnosisDeviceID
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_SetNetworkDiagnosisDeviceID final
{
public:
	class FString                                 InDeviceID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_SetNetworkDiagnosisDeviceID) == 0x000008, "Wrong alignment on LLHSDKMisc_SetNetworkDiagnosisDeviceID");
static_assert(sizeof(LLHSDKMisc_SetNetworkDiagnosisDeviceID) == 0x000010, "Wrong size on LLHSDKMisc_SetNetworkDiagnosisDeviceID");
static_assert(offsetof(LLHSDKMisc_SetNetworkDiagnosisDeviceID, InDeviceID) == 0x000000, "Member 'LLHSDKMisc_SetNetworkDiagnosisDeviceID::InDeviceID' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.SetNetworkMultipleDetect
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKMisc_SetNetworkMultipleDetect final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_SetNetworkMultipleDetect) == 0x000001, "Wrong alignment on LLHSDKMisc_SetNetworkMultipleDetect");
static_assert(sizeof(LLHSDKMisc_SetNetworkMultipleDetect) == 0x000001, "Wrong size on LLHSDKMisc_SetNetworkMultipleDetect");
static_assert(offsetof(LLHSDKMisc_SetNetworkMultipleDetect, InEnable) == 0x000000, "Member 'LLHSDKMisc_SetNetworkMultipleDetect::InEnable' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.SetNetworkPolicyDomain
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_SetNetworkPolicyDomain final
{
public:
	class FString                                 InDomain;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_SetNetworkPolicyDomain) == 0x000008, "Wrong alignment on LLHSDKMisc_SetNetworkPolicyDomain");
static_assert(sizeof(LLHSDKMisc_SetNetworkPolicyDomain) == 0x000010, "Wrong size on LLHSDKMisc_SetNetworkPolicyDomain");
static_assert(offsetof(LLHSDKMisc_SetNetworkPolicyDomain, InDomain) == 0x000000, "Member 'LLHSDKMisc_SetNetworkPolicyDomain::InDomain' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.ShowAccountVerification
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKMisc_ShowAccountVerification final
{
public:
	ELLHSDKAccountVerificationType                InAccountVerificationType;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InAccountVerificationParams;                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_ShowAccountVerification) == 0x000008, "Wrong alignment on LLHSDKMisc_ShowAccountVerification");
static_assert(sizeof(LLHSDKMisc_ShowAccountVerification) == 0x000018, "Wrong size on LLHSDKMisc_ShowAccountVerification");
static_assert(offsetof(LLHSDKMisc_ShowAccountVerification, InAccountVerificationType) == 0x000000, "Member 'LLHSDKMisc_ShowAccountVerification::InAccountVerificationType' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_ShowAccountVerification, InAccountVerificationParams) == 0x000008, "Member 'LLHSDKMisc_ShowAccountVerification::InAccountVerificationParams' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.ShowCommonWebView
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_ShowCommonWebView final
{
public:
	class FString                                 InJsonParamsStr;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_ShowCommonWebView) == 0x000008, "Wrong alignment on LLHSDKMisc_ShowCommonWebView");
static_assert(sizeof(LLHSDKMisc_ShowCommonWebView) == 0x000010, "Wrong size on LLHSDKMisc_ShowCommonWebView");
static_assert(offsetof(LLHSDKMisc_ShowCommonWebView, InJsonParamsStr) == 0x000000, "Member 'LLHSDKMisc_ShowCommonWebView::InJsonParamsStr' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.ShowPersonalInfo
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_ShowPersonalInfo final
{
public:
	TArray<class FString>                         InParams;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_ShowPersonalInfo) == 0x000008, "Wrong alignment on LLHSDKMisc_ShowPersonalInfo");
static_assert(sizeof(LLHSDKMisc_ShowPersonalInfo) == 0x000010, "Wrong size on LLHSDKMisc_ShowPersonalInfo");
static_assert(offsetof(LLHSDKMisc_ShowPersonalInfo, InParams) == 0x000000, "Member 'LLHSDKMisc_ShowPersonalInfo::InParams' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.StartBrowser
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_StartBrowser final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_StartBrowser) == 0x000008, "Wrong alignment on LLHSDKMisc_StartBrowser");
static_assert(sizeof(LLHSDKMisc_StartBrowser) == 0x000020, "Wrong size on LLHSDKMisc_StartBrowser");
static_assert(offsetof(LLHSDKMisc_StartBrowser, URL) == 0x000000, "Member 'LLHSDKMisc_StartBrowser::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartBrowser, Title) == 0x000010, "Member 'LLHSDKMisc_StartBrowser::Title' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.StartBrowserWithOrientation
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKMisc_StartBrowserWithOrientation final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKScreenOrientation                      Orientation;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_StartBrowserWithOrientation) == 0x000008, "Wrong alignment on LLHSDKMisc_StartBrowserWithOrientation");
static_assert(sizeof(LLHSDKMisc_StartBrowserWithOrientation) == 0x000028, "Wrong size on LLHSDKMisc_StartBrowserWithOrientation");
static_assert(offsetof(LLHSDKMisc_StartBrowserWithOrientation, URL) == 0x000000, "Member 'LLHSDKMisc_StartBrowserWithOrientation::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartBrowserWithOrientation, Title) == 0x000010, "Member 'LLHSDKMisc_StartBrowserWithOrientation::Title' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartBrowserWithOrientation, Orientation) == 0x000020, "Member 'LLHSDKMisc_StartBrowserWithOrientation::Orientation' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.StartDownloadApk
// 0x0038 (0x0038 - 0x0000)
struct LLHSDKMisc_StartDownloadApk final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApkName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApkMD5;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoInstall;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportBreakDownload;                             // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_StartDownloadApk) == 0x000008, "Wrong alignment on LLHSDKMisc_StartDownloadApk");
static_assert(sizeof(LLHSDKMisc_StartDownloadApk) == 0x000038, "Wrong size on LLHSDKMisc_StartDownloadApk");
static_assert(offsetof(LLHSDKMisc_StartDownloadApk, URL) == 0x000000, "Member 'LLHSDKMisc_StartDownloadApk::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartDownloadApk, ApkName) == 0x000010, "Member 'LLHSDKMisc_StartDownloadApk::ApkName' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartDownloadApk, ApkMD5) == 0x000020, "Member 'LLHSDKMisc_StartDownloadApk::ApkMD5' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartDownloadApk, bAutoInstall) == 0x000030, "Member 'LLHSDKMisc_StartDownloadApk::bAutoInstall' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartDownloadApk, bSupportBreakDownload) == 0x000031, "Member 'LLHSDKMisc_StartDownloadApk::bSupportBreakDownload' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.StartIOSFarlightBrowserWithOrientation
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKMisc_StartIOSFarlightBrowserWithOrientation final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKScreenOrientation                      Orientation;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_StartIOSFarlightBrowserWithOrientation) == 0x000008, "Wrong alignment on LLHSDKMisc_StartIOSFarlightBrowserWithOrientation");
static_assert(sizeof(LLHSDKMisc_StartIOSFarlightBrowserWithOrientation) == 0x000028, "Wrong size on LLHSDKMisc_StartIOSFarlightBrowserWithOrientation");
static_assert(offsetof(LLHSDKMisc_StartIOSFarlightBrowserWithOrientation, URL) == 0x000000, "Member 'LLHSDKMisc_StartIOSFarlightBrowserWithOrientation::URL' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartIOSFarlightBrowserWithOrientation, Title) == 0x000010, "Member 'LLHSDKMisc_StartIOSFarlightBrowserWithOrientation::Title' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartIOSFarlightBrowserWithOrientation, Orientation) == 0x000020, "Member 'LLHSDKMisc_StartIOSFarlightBrowserWithOrientation::Orientation' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.StartMiniProgram
// 0x0040 (0x0040 - 0x0000)
struct LLHSDKMisc_StartMiniProgram final
{
public:
	class FString                                 InMiniProgramId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMiniProgramPath;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InExt;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVersion;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_StartMiniProgram) == 0x000008, "Wrong alignment on LLHSDKMisc_StartMiniProgram");
static_assert(sizeof(LLHSDKMisc_StartMiniProgram) == 0x000040, "Wrong size on LLHSDKMisc_StartMiniProgram");
static_assert(offsetof(LLHSDKMisc_StartMiniProgram, InMiniProgramId) == 0x000000, "Member 'LLHSDKMisc_StartMiniProgram::InMiniProgramId' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartMiniProgram, InMiniProgramPath) == 0x000010, "Member 'LLHSDKMisc_StartMiniProgram::InMiniProgramPath' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartMiniProgram, InExt) == 0x000020, "Member 'LLHSDKMisc_StartMiniProgram::InExt' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_StartMiniProgram, InVersion) == 0x000030, "Member 'LLHSDKMisc_StartMiniProgram::InVersion' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.SystemShare
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKMisc_SystemShare final
{
public:
	int32                                         ShareType;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_SystemShare) == 0x000008, "Wrong alignment on LLHSDKMisc_SystemShare");
static_assert(sizeof(LLHSDKMisc_SystemShare) == 0x000028, "Wrong size on LLHSDKMisc_SystemShare");
static_assert(offsetof(LLHSDKMisc_SystemShare, ShareType) == 0x000000, "Member 'LLHSDKMisc_SystemShare::ShareType' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_SystemShare, Description) == 0x000008, "Member 'LLHSDKMisc_SystemShare::Description' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_SystemShare, FilePath) == 0x000018, "Member 'LLHSDKMisc_SystemShare::FilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.TcpPingDetect
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKMisc_TcpPingDetect final
{
public:
	class FString                                 InDomain;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKMisc_TcpPingDetect) == 0x000008, "Wrong alignment on LLHSDKMisc_TcpPingDetect");
static_assert(sizeof(LLHSDKMisc_TcpPingDetect) == 0x000018, "Wrong size on LLHSDKMisc_TcpPingDetect");
static_assert(offsetof(LLHSDKMisc_TcpPingDetect, InDomain) == 0x000000, "Member 'LLHSDKMisc_TcpPingDetect::InDomain' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_TcpPingDetect, Port) == 0x000010, "Member 'LLHSDKMisc_TcpPingDetect::Port' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.ThirdPartyShare
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKMisc_ThirdPartyShare final
{
public:
	ELLHSDKThirdPartyShareScene                   InShareScene;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKThirdPartyShareType                    InShareType;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InShareParams;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_ThirdPartyShare) == 0x000008, "Wrong alignment on LLHSDKMisc_ThirdPartyShare");
static_assert(sizeof(LLHSDKMisc_ThirdPartyShare) == 0x000018, "Wrong size on LLHSDKMisc_ThirdPartyShare");
static_assert(offsetof(LLHSDKMisc_ThirdPartyShare, InShareScene) == 0x000000, "Member 'LLHSDKMisc_ThirdPartyShare::InShareScene' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_ThirdPartyShare, InShareType) == 0x000001, "Member 'LLHSDKMisc_ThirdPartyShare::InShareType' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_ThirdPartyShare, InShareParams) == 0x000008, "Member 'LLHSDKMisc_ThirdPartyShare::InShareParams' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.TwitterSharePhoto
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_TwitterSharePhoto final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFilePath;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_TwitterSharePhoto) == 0x000008, "Wrong alignment on LLHSDKMisc_TwitterSharePhoto");
static_assert(sizeof(LLHSDKMisc_TwitterSharePhoto) == 0x000020, "Wrong size on LLHSDKMisc_TwitterSharePhoto");
static_assert(offsetof(LLHSDKMisc_TwitterSharePhoto, InText) == 0x000000, "Member 'LLHSDKMisc_TwitterSharePhoto::InText' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_TwitterSharePhoto, InFilePath) == 0x000010, "Member 'LLHSDKMisc_TwitterSharePhoto::InFilePath' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.TwitterShareText
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_TwitterShareText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_TwitterShareText) == 0x000008, "Wrong alignment on LLHSDKMisc_TwitterShareText");
static_assert(sizeof(LLHSDKMisc_TwitterShareText) == 0x000010, "Wrong size on LLHSDKMisc_TwitterShareText");
static_assert(offsetof(LLHSDKMisc_TwitterShareText, InText) == 0x000000, "Member 'LLHSDKMisc_TwitterShareText::InText' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.UpdateLimPCNetworkDiagnosisExtension
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension) == 0x000008, "Wrong alignment on LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension");
static_assert(sizeof(LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension) == 0x000010, "Wrong size on LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension");
static_assert(offsetof(LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension, Params_0) == 0x000000, "Member 'LLHSDKMisc_UpdateLimPCNetworkDiagnosisExtension::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.UpdateNetworkExtensions
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKMisc_UpdateNetworkExtensions final
{
public:
	class FString                                 InPlayerID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDeviceID;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_UpdateNetworkExtensions) == 0x000008, "Wrong alignment on LLHSDKMisc_UpdateNetworkExtensions");
static_assert(sizeof(LLHSDKMisc_UpdateNetworkExtensions) == 0x000020, "Wrong size on LLHSDKMisc_UpdateNetworkExtensions");
static_assert(offsetof(LLHSDKMisc_UpdateNetworkExtensions, InPlayerID) == 0x000000, "Member 'LLHSDKMisc_UpdateNetworkExtensions::InPlayerID' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_UpdateNetworkExtensions, InDeviceID) == 0x000010, "Member 'LLHSDKMisc_UpdateNetworkExtensions::InDeviceID' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.WechatSharePhoto
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKMisc_WechatSharePhoto final
{
public:
	int32                                         ShareType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocalUrl;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_WechatSharePhoto) == 0x000008, "Wrong alignment on LLHSDKMisc_WechatSharePhoto");
static_assert(sizeof(LLHSDKMisc_WechatSharePhoto) == 0x000018, "Wrong size on LLHSDKMisc_WechatSharePhoto");
static_assert(offsetof(LLHSDKMisc_WechatSharePhoto, ShareType) == 0x000000, "Member 'LLHSDKMisc_WechatSharePhoto::ShareType' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WechatSharePhoto, LocalUrl) == 0x000008, "Member 'LLHSDKMisc_WechatSharePhoto::LocalUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.WechatShareVideo
// 0x0038 (0x0038 - 0x0000)
struct LLHSDKMisc_WechatShareVideo final
{
public:
	int32                                         ShareType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoUrl;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_WechatShareVideo) == 0x000008, "Wrong alignment on LLHSDKMisc_WechatShareVideo");
static_assert(sizeof(LLHSDKMisc_WechatShareVideo) == 0x000038, "Wrong size on LLHSDKMisc_WechatShareVideo");
static_assert(offsetof(LLHSDKMisc_WechatShareVideo, ShareType) == 0x000000, "Member 'LLHSDKMisc_WechatShareVideo::ShareType' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WechatShareVideo, Title) == 0x000008, "Member 'LLHSDKMisc_WechatShareVideo::Title' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WechatShareVideo, Desc) == 0x000018, "Member 'LLHSDKMisc_WechatShareVideo::Desc' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WechatShareVideo, VideoUrl) == 0x000028, "Member 'LLHSDKMisc_WechatShareVideo::VideoUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.WeiboSharePhoto
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKMisc_WeiboSharePhoto final
{
public:
	class FString                                 ImageUrl;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_WeiboSharePhoto) == 0x000008, "Wrong alignment on LLHSDKMisc_WeiboSharePhoto");
static_assert(sizeof(LLHSDKMisc_WeiboSharePhoto) == 0x000010, "Wrong size on LLHSDKMisc_WeiboSharePhoto");
static_assert(offsetof(LLHSDKMisc_WeiboSharePhoto, ImageUrl) == 0x000000, "Member 'LLHSDKMisc_WeiboSharePhoto::ImageUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKMisc.WeiboShareWithText
// 0x0030 (0x0030 - 0x0000)
struct LLHSDKMisc_WeiboShareWithText final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoUrl;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKMisc_WeiboShareWithText) == 0x000008, "Wrong alignment on LLHSDKMisc_WeiboShareWithText");
static_assert(sizeof(LLHSDKMisc_WeiboShareWithText) == 0x000030, "Wrong size on LLHSDKMisc_WeiboShareWithText");
static_assert(offsetof(LLHSDKMisc_WeiboShareWithText, Desc) == 0x000000, "Member 'LLHSDKMisc_WeiboShareWithText::Desc' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WeiboShareWithText, ImageUrl) == 0x000010, "Member 'LLHSDKMisc_WeiboShareWithText::ImageUrl' has a wrong offset!");
static_assert(offsetof(LLHSDKMisc_WeiboShareWithText, VideoUrl) == 0x000020, "Member 'LLHSDKMisc_WeiboShareWithText::VideoUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.AndroidDomestic_StartPay
// 0x0038 (0x0038 - 0x0000)
struct LLHSDKPay_AndroidDomestic_StartPay final
{
public:
	int32                                         PayValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PayName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayDesc;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayContext;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_AndroidDomestic_StartPay) == 0x000008, "Wrong alignment on LLHSDKPay_AndroidDomestic_StartPay");
static_assert(sizeof(LLHSDKPay_AndroidDomestic_StartPay) == 0x000038, "Wrong size on LLHSDKPay_AndroidDomestic_StartPay");
static_assert(offsetof(LLHSDKPay_AndroidDomestic_StartPay, PayValue) == 0x000000, "Member 'LLHSDKPay_AndroidDomestic_StartPay::PayValue' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_AndroidDomestic_StartPay, PayName) == 0x000008, "Member 'LLHSDKPay_AndroidDomestic_StartPay::PayName' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_AndroidDomestic_StartPay, PayDesc) == 0x000018, "Member 'LLHSDKPay_AndroidDomestic_StartPay::PayDesc' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_AndroidDomestic_StartPay, PayContext) == 0x000028, "Member 'LLHSDKPay_AndroidDomestic_StartPay::PayContext' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKPay_GetInstance final
{
public:
	class ULLHSDKPay*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_GetInstance) == 0x000008, "Wrong alignment on LLHSDKPay_GetInstance");
static_assert(sizeof(LLHSDKPay_GetInstance) == 0x000008, "Wrong size on LLHSDKPay_GetInstance");
static_assert(offsetof(LLHSDKPay_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKPay_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_ConsumeGoods
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_Google_ConsumeGoods final
{
public:
	TArray<class FString>                         Skus;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Contexts;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_ConsumeGoods) == 0x000008, "Wrong alignment on LLHSDKPay_Google_ConsumeGoods");
static_assert(sizeof(LLHSDKPay_Google_ConsumeGoods) == 0x000020, "Wrong size on LLHSDKPay_Google_ConsumeGoods");
static_assert(offsetof(LLHSDKPay_Google_ConsumeGoods, Skus) == 0x000000, "Member 'LLHSDKPay_Google_ConsumeGoods::Skus' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_Google_ConsumeGoods, Contexts) == 0x000010, "Member 'LLHSDKPay_Google_ConsumeGoods::Contexts' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_GetConsumeGoods
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Google_GetConsumeGoods final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_GetConsumeGoods) == 0x000008, "Wrong alignment on LLHSDKPay_Google_GetConsumeGoods");
static_assert(sizeof(LLHSDKPay_Google_GetConsumeGoods) == 0x000010, "Wrong size on LLHSDKPay_Google_GetConsumeGoods");
static_assert(offsetof(LLHSDKPay_Google_GetConsumeGoods, ReturnValue) == 0x000000, "Member 'LLHSDKPay_Google_GetConsumeGoods::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_GetConsumePointsGoods
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Google_GetConsumePointsGoods final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_GetConsumePointsGoods) == 0x000008, "Wrong alignment on LLHSDKPay_Google_GetConsumePointsGoods");
static_assert(sizeof(LLHSDKPay_Google_GetConsumePointsGoods) == 0x000010, "Wrong size on LLHSDKPay_Google_GetConsumePointsGoods");
static_assert(offsetof(LLHSDKPay_Google_GetConsumePointsGoods, ReturnValue) == 0x000000, "Member 'LLHSDKPay_Google_GetConsumePointsGoods::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_HasConsumeGoods
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKPay_Google_HasConsumeGoods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_HasConsumeGoods) == 0x000001, "Wrong alignment on LLHSDKPay_Google_HasConsumeGoods");
static_assert(sizeof(LLHSDKPay_Google_HasConsumeGoods) == 0x000001, "Wrong size on LLHSDKPay_Google_HasConsumeGoods");
static_assert(offsetof(LLHSDKPay_Google_HasConsumeGoods, ReturnValue) == 0x000000, "Member 'LLHSDKPay_Google_HasConsumeGoods::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_HasConsumePointsGoods
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKPay_Google_HasConsumePointsGoods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_HasConsumePointsGoods) == 0x000001, "Wrong alignment on LLHSDKPay_Google_HasConsumePointsGoods");
static_assert(sizeof(LLHSDKPay_Google_HasConsumePointsGoods) == 0x000001, "Wrong size on LLHSDKPay_Google_HasConsumePointsGoods");
static_assert(offsetof(LLHSDKPay_Google_HasConsumePointsGoods, ReturnValue) == 0x000000, "Member 'LLHSDKPay_Google_HasConsumePointsGoods::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_QuerySkuItemDetails
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Google_QuerySkuItemDetails final
{
public:
	TArray<class FString>                         Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_QuerySkuItemDetails) == 0x000008, "Wrong alignment on LLHSDKPay_Google_QuerySkuItemDetails");
static_assert(sizeof(LLHSDKPay_Google_QuerySkuItemDetails) == 0x000010, "Wrong size on LLHSDKPay_Google_QuerySkuItemDetails");
static_assert(offsetof(LLHSDKPay_Google_QuerySkuItemDetails, Items) == 0x000000, "Member 'LLHSDKPay_Google_QuerySkuItemDetails::Items' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_QuerySkuItemDetailsSubscription
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Google_QuerySkuItemDetailsSubscription final
{
public:
	TArray<class FString>                         Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_QuerySkuItemDetailsSubscription) == 0x000008, "Wrong alignment on LLHSDKPay_Google_QuerySkuItemDetailsSubscription");
static_assert(sizeof(LLHSDKPay_Google_QuerySkuItemDetailsSubscription) == 0x000010, "Wrong size on LLHSDKPay_Google_QuerySkuItemDetailsSubscription");
static_assert(offsetof(LLHSDKPay_Google_QuerySkuItemDetailsSubscription, Items) == 0x000000, "Member 'LLHSDKPay_Google_QuerySkuItemDetailsSubscription::Items' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_StartPay
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_Google_StartPay final
{
public:
	class FString                                 PayItemID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayContext;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_StartPay) == 0x000008, "Wrong alignment on LLHSDKPay_Google_StartPay");
static_assert(sizeof(LLHSDKPay_Google_StartPay) == 0x000020, "Wrong size on LLHSDKPay_Google_StartPay");
static_assert(offsetof(LLHSDKPay_Google_StartPay, PayItemID) == 0x000000, "Member 'LLHSDKPay_Google_StartPay::PayItemID' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_Google_StartPay, PayContext) == 0x000010, "Member 'LLHSDKPay_Google_StartPay::PayContext' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Google_StartPaySubscription
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_Google_StartPaySubscription final
{
public:
	class FString                                 PayItemID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayContext;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Google_StartPaySubscription) == 0x000008, "Wrong alignment on LLHSDKPay_Google_StartPaySubscription");
static_assert(sizeof(LLHSDKPay_Google_StartPaySubscription) == 0x000020, "Wrong size on LLHSDKPay_Google_StartPaySubscription");
static_assert(offsetof(LLHSDKPay_Google_StartPaySubscription, PayItemID) == 0x000000, "Member 'LLHSDKPay_Google_StartPaySubscription::PayItemID' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_Google_StartPaySubscription, PayContext) == 0x000010, "Member 'LLHSDKPay_Google_StartPaySubscription::PayContext' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_GetAutoPayExt
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKPay_IOS_GetAutoPayExt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_GetAutoPayExt) == 0x000001, "Wrong alignment on LLHSDKPay_IOS_GetAutoPayExt");
static_assert(sizeof(LLHSDKPay_IOS_GetAutoPayExt) == 0x000001, "Wrong size on LLHSDKPay_IOS_GetAutoPayExt");
static_assert(offsetof(LLHSDKPay_IOS_GetAutoPayExt, ReturnValue) == 0x000000, "Member 'LLHSDKPay_IOS_GetAutoPayExt::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_LLHPay
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_IOS_LLHPay final
{
public:
	class FString                                 ProductID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayExt;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_LLHPay) == 0x000008, "Wrong alignment on LLHSDKPay_IOS_LLHPay");
static_assert(sizeof(LLHSDKPay_IOS_LLHPay) == 0x000020, "Wrong size on LLHSDKPay_IOS_LLHPay");
static_assert(offsetof(LLHSDKPay_IOS_LLHPay, ProductID) == 0x000000, "Member 'LLHSDKPay_IOS_LLHPay::ProductID' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_IOS_LLHPay, PayExt) == 0x000010, "Member 'LLHSDKPay_IOS_LLHPay::PayExt' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_QuerySkus
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_IOS_QuerySkus final
{
public:
	TArray<class FString>                         ProductIDs;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_QuerySkus) == 0x000008, "Wrong alignment on LLHSDKPay_IOS_QuerySkus");
static_assert(sizeof(LLHSDKPay_IOS_QuerySkus) == 0x000010, "Wrong size on LLHSDKPay_IOS_QuerySkus");
static_assert(offsetof(LLHSDKPay_IOS_QuerySkus, ProductIDs) == 0x000000, "Member 'LLHSDKPay_IOS_QuerySkus::ProductIDs' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_SetAutoPayExt
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKPay_IOS_SetAutoPayExt final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_SetAutoPayExt) == 0x000001, "Wrong alignment on LLHSDKPay_IOS_SetAutoPayExt");
static_assert(sizeof(LLHSDKPay_IOS_SetAutoPayExt) == 0x000001, "Wrong size on LLHSDKPay_IOS_SetAutoPayExt");
static_assert(offsetof(LLHSDKPay_IOS_SetAutoPayExt, bEnabled) == 0x000000, "Member 'LLHSDKPay_IOS_SetAutoPayExt::bEnabled' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_SetUserPayExt
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_IOS_SetUserPayExt final
{
public:
	class FString                                 PayExt;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_SetUserPayExt) == 0x000008, "Wrong alignment on LLHSDKPay_IOS_SetUserPayExt");
static_assert(sizeof(LLHSDKPay_IOS_SetUserPayExt) == 0x000010, "Wrong size on LLHSDKPay_IOS_SetUserPayExt");
static_assert(offsetof(LLHSDKPay_IOS_SetUserPayExt, PayExt) == 0x000000, "Member 'LLHSDKPay_IOS_SetUserPayExt::PayExt' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.IOS_SetUserPayExtInCallback
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_IOS_SetUserPayExtInCallback final
{
public:
	class FString                                 ProductID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayExt;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_IOS_SetUserPayExtInCallback) == 0x000008, "Wrong alignment on LLHSDKPay_IOS_SetUserPayExtInCallback");
static_assert(sizeof(LLHSDKPay_IOS_SetUserPayExtInCallback) == 0x000020, "Wrong size on LLHSDKPay_IOS_SetUserPayExtInCallback");
static_assert(offsetof(LLHSDKPay_IOS_SetUserPayExtInCallback, ProductID) == 0x000000, "Member 'LLHSDKPay_IOS_SetUserPayExtInCallback::ProductID' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_IOS_SetUserPayExtInCallback, PayExt) == 0x000010, "Member 'LLHSDKPay_IOS_SetUserPayExtInCallback::PayExt' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.LimPCQueryPriceLadderV2
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_LimPCQueryPriceLadderV2 final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_LimPCQueryPriceLadderV2) == 0x000008, "Wrong alignment on LLHSDKPay_LimPCQueryPriceLadderV2");
static_assert(sizeof(LLHSDKPay_LimPCQueryPriceLadderV2) == 0x000010, "Wrong size on LLHSDKPay_LimPCQueryPriceLadderV2");
static_assert(offsetof(LLHSDKPay_LimPCQueryPriceLadderV2, Params_0) == 0x000000, "Member 'LLHSDKPay_LimPCQueryPriceLadderV2::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.LimPCQueryPriceLadderWithRegion
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_LimPCQueryPriceLadderWithRegion final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_LimPCQueryPriceLadderWithRegion) == 0x000008, "Wrong alignment on LLHSDKPay_LimPCQueryPriceLadderWithRegion");
static_assert(sizeof(LLHSDKPay_LimPCQueryPriceLadderWithRegion) == 0x000010, "Wrong size on LLHSDKPay_LimPCQueryPriceLadderWithRegion");
static_assert(offsetof(LLHSDKPay_LimPCQueryPriceLadderWithRegion, Params_0) == 0x000000, "Member 'LLHSDKPay_LimPCQueryPriceLadderWithRegion::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.LimPCStartPay
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_LimPCStartPay final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_LimPCStartPay) == 0x000008, "Wrong alignment on LLHSDKPay_LimPCStartPay");
static_assert(sizeof(LLHSDKPay_LimPCStartPay) == 0x000010, "Wrong size on LLHSDKPay_LimPCStartPay");
static_assert(offsetof(LLHSDKPay_LimPCStartPay, Params_0) == 0x000000, "Member 'LLHSDKPay_LimPCStartPay::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.LimPCThirdPartyCheckoutCounterItemsGet
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet) == 0x000008, "Wrong alignment on LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet");
static_assert(sizeof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet) == 0x000010, "Wrong size on LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet");
static_assert(offsetof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet, Params_0) == 0x000000, "Member 'LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsGet::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.LimPCThirdPartyCheckoutCounterItemsPay
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay) == 0x000008, "Wrong alignment on LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay");
static_assert(sizeof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay) == 0x000010, "Wrong size on LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay");
static_assert(offsetof(LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay, Params_0) == 0x000000, "Member 'LLHSDKPay_LimPCThirdPartyCheckoutCounterItemsPay::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.SetPayNotifyUrl
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_SetPayNotifyUrl final
{
public:
	class FString                                 InNotifyUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_SetPayNotifyUrl) == 0x000008, "Wrong alignment on LLHSDKPay_SetPayNotifyUrl");
static_assert(sizeof(LLHSDKPay_SetPayNotifyUrl) == 0x000010, "Wrong size on LLHSDKPay_SetPayNotifyUrl");
static_assert(offsetof(LLHSDKPay_SetPayNotifyUrl, InNotifyUrl) == 0x000000, "Member 'LLHSDKPay_SetPayNotifyUrl::InNotifyUrl' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Steam_StartPay
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Steam_StartPay final
{
public:
	class FString                                 SteamPayInfo;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Steam_StartPay) == 0x000008, "Wrong alignment on LLHSDKPay_Steam_StartPay");
static_assert(sizeof(LLHSDKPay_Steam_StartPay) == 0x000010, "Wrong size on LLHSDKPay_Steam_StartPay");
static_assert(offsetof(LLHSDKPay_Steam_StartPay, SteamPayInfo) == 0x000000, "Member 'LLHSDKPay_Steam_StartPay::SteamPayInfo' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.SteamQuerySkus
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_SteamQuerySkus final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_SteamQuerySkus) == 0x000008, "Wrong alignment on LLHSDKPay_SteamQuerySkus");
static_assert(sizeof(LLHSDKPay_SteamQuerySkus) == 0x000010, "Wrong size on LLHSDKPay_SteamQuerySkus");
static_assert(offsetof(LLHSDKPay_SteamQuerySkus, Params_0) == 0x000000, "Member 'LLHSDKPay_SteamQuerySkus::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.SteamQuerySkusV2
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_SteamQuerySkusV2 final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_SteamQuerySkusV2) == 0x000008, "Wrong alignment on LLHSDKPay_SteamQuerySkusV2");
static_assert(sizeof(LLHSDKPay_SteamQuerySkusV2) == 0x000010, "Wrong size on LLHSDKPay_SteamQuerySkusV2");
static_assert(offsetof(LLHSDKPay_SteamQuerySkusV2, Params_0) == 0x000000, "Member 'LLHSDKPay_SteamQuerySkusV2::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.SteamStartPayV2
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_SteamStartPayV2 final
{
public:
	class FString                                 SteamPayInfo;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_SteamStartPayV2) == 0x000008, "Wrong alignment on LLHSDKPay_SteamStartPayV2");
static_assert(sizeof(LLHSDKPay_SteamStartPayV2) == 0x000010, "Wrong size on LLHSDKPay_SteamStartPayV2");
static_assert(offsetof(LLHSDKPay_SteamStartPayV2, SteamPayInfo) == 0x000000, "Member 'LLHSDKPay_SteamStartPayV2::SteamPayInfo' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Switch_EShopOpen
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Switch_EShopOpen final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Switch_EShopOpen) == 0x000008, "Wrong alignment on LLHSDKPay_Switch_EShopOpen");
static_assert(sizeof(LLHSDKPay_Switch_EShopOpen) == 0x000010, "Wrong size on LLHSDKPay_Switch_EShopOpen");
static_assert(offsetof(LLHSDKPay_Switch_EShopOpen, Params_0) == 0x000000, "Member 'LLHSDKPay_Switch_EShopOpen::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Switch_GetConsumableItems
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Switch_GetConsumableItems final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Switch_GetConsumableItems) == 0x000008, "Wrong alignment on LLHSDKPay_Switch_GetConsumableItems");
static_assert(sizeof(LLHSDKPay_Switch_GetConsumableItems) == 0x000010, "Wrong size on LLHSDKPay_Switch_GetConsumableItems");
static_assert(offsetof(LLHSDKPay_Switch_GetConsumableItems, Params_0) == 0x000000, "Member 'LLHSDKPay_Switch_GetConsumableItems::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Switch_GetConsumables
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Switch_GetConsumables final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Switch_GetConsumables) == 0x000008, "Wrong alignment on LLHSDKPay_Switch_GetConsumables");
static_assert(sizeof(LLHSDKPay_Switch_GetConsumables) == 0x000010, "Wrong size on LLHSDKPay_Switch_GetConsumables");
static_assert(offsetof(LLHSDKPay_Switch_GetConsumables, Params_0) == 0x000000, "Member 'LLHSDKPay_Switch_GetConsumables::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Switch_OrdersCheck
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Switch_OrdersCheck final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Switch_OrdersCheck) == 0x000008, "Wrong alignment on LLHSDKPay_Switch_OrdersCheck");
static_assert(sizeof(LLHSDKPay_Switch_OrdersCheck) == 0x000010, "Wrong size on LLHSDKPay_Switch_OrdersCheck");
static_assert(offsetof(LLHSDKPay_Switch_OrdersCheck, Params_0) == 0x000000, "Member 'LLHSDKPay_Switch_OrdersCheck::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Switch_OrdersConsume
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKPay_Switch_OrdersConsume final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Switch_OrdersConsume) == 0x000008, "Wrong alignment on LLHSDKPay_Switch_OrdersConsume");
static_assert(sizeof(LLHSDKPay_Switch_OrdersConsume) == 0x000010, "Wrong size on LLHSDKPay_Switch_OrdersConsume");
static_assert(offsetof(LLHSDKPay_Switch_OrdersConsume, Params_0) == 0x000000, "Member 'LLHSDKPay_Switch_OrdersConsume::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKPay.Test_Google_SkuItemDetailsToString
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKPay_Test_Google_SkuItemDetailsToString final
{
public:
	struct FLLHSDKGenericSkuItemsDetailList       InDetails;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKPay_Test_Google_SkuItemDetailsToString) == 0x000008, "Wrong alignment on LLHSDKPay_Test_Google_SkuItemDetailsToString");
static_assert(sizeof(LLHSDKPay_Test_Google_SkuItemDetailsToString) == 0x000020, "Wrong size on LLHSDKPay_Test_Google_SkuItemDetailsToString");
static_assert(offsetof(LLHSDKPay_Test_Google_SkuItemDetailsToString, InDetails) == 0x000000, "Member 'LLHSDKPay_Test_Google_SkuItemDetailsToString::InDetails' has a wrong offset!");
static_assert(offsetof(LLHSDKPay_Test_Google_SkuItemDetailsToString, ReturnValue) == 0x000010, "Member 'LLHSDKPay_Test_Google_SkuItemDetailsToString::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.AddLIMPCAlilog
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKReport_AddLIMPCAlilog final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_AddLIMPCAlilog) == 0x000008, "Wrong alignment on LLHSDKReport_AddLIMPCAlilog");
static_assert(sizeof(LLHSDKReport_AddLIMPCAlilog) == 0x000018, "Wrong size on LLHSDKReport_AddLIMPCAlilog");
static_assert(offsetof(LLHSDKReport_AddLIMPCAlilog, Params_0) == 0x000000, "Member 'LLHSDKReport_AddLIMPCAlilog::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_AddLIMPCAlilog, ReturnValue) == 0x000010, "Member 'LLHSDKReport_AddLIMPCAlilog::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.AddLSLSLog
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKReport_AddLSLSLog final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_AddLSLSLog) == 0x000008, "Wrong alignment on LLHSDKReport_AddLSLSLog");
static_assert(sizeof(LLHSDKReport_AddLSLSLog) == 0x000010, "Wrong size on LLHSDKReport_AddLSLSLog");
static_assert(offsetof(LLHSDKReport_AddLSLSLog, Params_0) == 0x000000, "Member 'LLHSDKReport_AddLSLSLog::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.CommonReportLimPCPoint
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKReport_CommonReportLimPCPoint final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_CommonReportLimPCPoint) == 0x000008, "Wrong alignment on LLHSDKReport_CommonReportLimPCPoint");
static_assert(sizeof(LLHSDKReport_CommonReportLimPCPoint) == 0x000018, "Wrong size on LLHSDKReport_CommonReportLimPCPoint");
static_assert(offsetof(LLHSDKReport_CommonReportLimPCPoint, Params_0) == 0x000000, "Member 'LLHSDKReport_CommonReportLimPCPoint::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_CommonReportLimPCPoint, ReturnValue) == 0x000010, "Member 'LLHSDKReport_CommonReportLimPCPoint::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.DAPLogAdd
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKReport_DAPLogAdd final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_DAPLogAdd) == 0x000008, "Wrong alignment on LLHSDKReport_DAPLogAdd");
static_assert(sizeof(LLHSDKReport_DAPLogAdd) == 0x000010, "Wrong size on LLHSDKReport_DAPLogAdd");
static_assert(offsetof(LLHSDKReport_DAPLogAdd, Params_0) == 0x000000, "Member 'LLHSDKReport_DAPLogAdd::Params_0' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.EnableLogReport
// 0x0001 (0x0001 - 0x0000)
struct LLHSDKReport_EnableLogReport final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_EnableLogReport) == 0x000001, "Wrong alignment on LLHSDKReport_EnableLogReport");
static_assert(sizeof(LLHSDKReport_EnableLogReport) == 0x000001, "Wrong size on LLHSDKReport_EnableLogReport");
static_assert(offsetof(LLHSDKReport_EnableLogReport, bEnable) == 0x000000, "Member 'LLHSDKReport_EnableLogReport::bEnable' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LLHSDKReport_GetInstance final
{
public:
	class ULLHSDKReport*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_GetInstance) == 0x000008, "Wrong alignment on LLHSDKReport_GetInstance");
static_assert(sizeof(LLHSDKReport_GetInstance) == 0x000008, "Wrong size on LLHSDKReport_GetInstance");
static_assert(offsetof(LLHSDKReport_GetInstance, ReturnValue) == 0x000000, "Member 'LLHSDKReport_GetInstance::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.GetLimPCAlilogFields
// 0x0004 (0x0004 - 0x0000)
struct LLHSDKReport_GetLimPCAlilogFields final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_GetLimPCAlilogFields) == 0x000004, "Wrong alignment on LLHSDKReport_GetLimPCAlilogFields");
static_assert(sizeof(LLHSDKReport_GetLimPCAlilogFields) == 0x000004, "Wrong size on LLHSDKReport_GetLimPCAlilogFields");
static_assert(offsetof(LLHSDKReport_GetLimPCAlilogFields, ReturnValue) == 0x000000, "Member 'LLHSDKReport_GetLimPCAlilogFields::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.LimPCGameActionOptionsReport
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKReport_LimPCGameActionOptionsReport final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_LimPCGameActionOptionsReport) == 0x000008, "Wrong alignment on LLHSDKReport_LimPCGameActionOptionsReport");
static_assert(sizeof(LLHSDKReport_LimPCGameActionOptionsReport) == 0x000018, "Wrong size on LLHSDKReport_LimPCGameActionOptionsReport");
static_assert(offsetof(LLHSDKReport_LimPCGameActionOptionsReport, Params_0) == 0x000000, "Member 'LLHSDKReport_LimPCGameActionOptionsReport::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_LimPCGameActionOptionsReport, ReturnValue) == 0x000010, "Member 'LLHSDKReport_LimPCGameActionOptionsReport::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportCustomEventForDomesticChannel
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKReport_ReportCustomEventForDomesticChannel final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JsonParamsStr;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_ReportCustomEventForDomesticChannel) == 0x000008, "Wrong alignment on LLHSDKReport_ReportCustomEventForDomesticChannel");
static_assert(sizeof(LLHSDKReport_ReportCustomEventForDomesticChannel) == 0x000020, "Wrong size on LLHSDKReport_ReportCustomEventForDomesticChannel");
static_assert(offsetof(LLHSDKReport_ReportCustomEventForDomesticChannel, EventName) == 0x000000, "Member 'LLHSDKReport_ReportCustomEventForDomesticChannel::EventName' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportCustomEventForDomesticChannel, JsonParamsStr) == 0x000010, "Member 'LLHSDKReport_ReportCustomEventForDomesticChannel::JsonParamsStr' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportGameInfoForDomesticChannel
// 0x0020 (0x0020 - 0x0000)
struct LLHSDKReport_ReportGameInfoForDomesticChannel final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JsonParamsStr;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_ReportGameInfoForDomesticChannel) == 0x000008, "Wrong alignment on LLHSDKReport_ReportGameInfoForDomesticChannel");
static_assert(sizeof(LLHSDKReport_ReportGameInfoForDomesticChannel) == 0x000020, "Wrong size on LLHSDKReport_ReportGameInfoForDomesticChannel");
static_assert(offsetof(LLHSDKReport_ReportGameInfoForDomesticChannel, EventName) == 0x000000, "Member 'LLHSDKReport_ReportGameInfoForDomesticChannel::EventName' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportGameInfoForDomesticChannel, JsonParamsStr) == 0x000010, "Member 'LLHSDKReport_ReportGameInfoForDomesticChannel::JsonParamsStr' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportJsonToLilithImmediate
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKReport_ReportJsonToLilithImmediate final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JsonContentStr;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_ReportJsonToLilithImmediate) == 0x000008, "Wrong alignment on LLHSDKReport_ReportJsonToLilithImmediate");
static_assert(sizeof(LLHSDKReport_ReportJsonToLilithImmediate) == 0x000028, "Wrong size on LLHSDKReport_ReportJsonToLilithImmediate");
static_assert(offsetof(LLHSDKReport_ReportJsonToLilithImmediate, EventName) == 0x000000, "Member 'LLHSDKReport_ReportJsonToLilithImmediate::EventName' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportJsonToLilithImmediate, JsonContentStr) == 0x000010, "Member 'LLHSDKReport_ReportJsonToLilithImmediate::JsonContentStr' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportJsonToLilithImmediate, ReturnValue) == 0x000020, "Member 'LLHSDKReport_ReportJsonToLilithImmediate::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportRevenueToThirdParty
// 0x0040 (0x0040 - 0x0000)
struct LLHSDKReport_ReportRevenueToThirdParty final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKReportCurrencyType                     Currency;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Revenue;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Parameters;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_ReportRevenueToThirdParty) == 0x000008, "Wrong alignment on LLHSDKReport_ReportRevenueToThirdParty");
static_assert(sizeof(LLHSDKReport_ReportRevenueToThirdParty) == 0x000040, "Wrong size on LLHSDKReport_ReportRevenueToThirdParty");
static_assert(offsetof(LLHSDKReport_ReportRevenueToThirdParty, EventName) == 0x000000, "Member 'LLHSDKReport_ReportRevenueToThirdParty::EventName' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportRevenueToThirdParty, Currency) == 0x000010, "Member 'LLHSDKReport_ReportRevenueToThirdParty::Currency' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportRevenueToThirdParty, Revenue) == 0x000018, "Member 'LLHSDKReport_ReportRevenueToThirdParty::Revenue' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportRevenueToThirdParty, Parameters) == 0x000028, "Member 'LLHSDKReport_ReportRevenueToThirdParty::Parameters' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportRevenueToThirdParty, ReturnValue) == 0x000038, "Member 'LLHSDKReport_ReportRevenueToThirdParty::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportRoleInfo
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKReport_ReportRoleInfo final
{
public:
	class FString                                 JsonParamsStr;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_ReportRoleInfo) == 0x000008, "Wrong alignment on LLHSDKReport_ReportRoleInfo");
static_assert(sizeof(LLHSDKReport_ReportRoleInfo) == 0x000010, "Wrong size on LLHSDKReport_ReportRoleInfo");
static_assert(offsetof(LLHSDKReport_ReportRoleInfo, JsonParamsStr) == 0x000000, "Member 'LLHSDKReport_ReportRoleInfo::JsonParamsStr' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.ReportToThirdParty
// 0x0028 (0x0028 - 0x0000)
struct LLHSDKReport_ReportToThirdParty final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Parameters;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_ReportToThirdParty) == 0x000008, "Wrong alignment on LLHSDKReport_ReportToThirdParty");
static_assert(sizeof(LLHSDKReport_ReportToThirdParty) == 0x000028, "Wrong size on LLHSDKReport_ReportToThirdParty");
static_assert(offsetof(LLHSDKReport_ReportToThirdParty, EventName) == 0x000000, "Member 'LLHSDKReport_ReportToThirdParty::EventName' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportToThirdParty, Parameters) == 0x000010, "Member 'LLHSDKReport_ReportToThirdParty::Parameters' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_ReportToThirdParty, ReturnValue) == 0x000020, "Member 'LLHSDKReport_ReportToThirdParty::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.SetLIMPCAlilogConfig
// 0x0018 (0x0018 - 0x0000)
struct LLHSDKReport_SetLIMPCAlilogConfig final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LLHSDKReport_SetLIMPCAlilogConfig) == 0x000008, "Wrong alignment on LLHSDKReport_SetLIMPCAlilogConfig");
static_assert(sizeof(LLHSDKReport_SetLIMPCAlilogConfig) == 0x000018, "Wrong size on LLHSDKReport_SetLIMPCAlilogConfig");
static_assert(offsetof(LLHSDKReport_SetLIMPCAlilogConfig, Params_0) == 0x000000, "Member 'LLHSDKReport_SetLIMPCAlilogConfig::Params_0' has a wrong offset!");
static_assert(offsetof(LLHSDKReport_SetLIMPCAlilogConfig, ReturnValue) == 0x000010, "Member 'LLHSDKReport_SetLIMPCAlilogConfig::ReturnValue' has a wrong offset!");

// Function LLHSDK.LLHSDKReport.SetLSLSConfig
// 0x0010 (0x0010 - 0x0000)
struct LLHSDKReport_SetLSLSConfig final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LLHSDKReport_SetLSLSConfig) == 0x000008, "Wrong alignment on LLHSDKReport_SetLSLSConfig");
static_assert(sizeof(LLHSDKReport_SetLSLSConfig) == 0x000010, "Wrong size on LLHSDKReport_SetLSLSConfig");
static_assert(offsetof(LLHSDKReport_SetLSLSConfig, Params_0) == 0x000000, "Member 'LLHSDKReport_SetLSLSConfig::Params_0' has a wrong offset!");

}

