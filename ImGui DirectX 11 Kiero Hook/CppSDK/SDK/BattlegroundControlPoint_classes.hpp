#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlegroundControlPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattlegroundControlPoint.BattlegroundControlPoint_C
// 0x0250 (0x0590 - 0x0340)
class ABattlegroundControlPoint_C final : public ABattlegroundControlPoint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FX_BG_HoldAreaEdge;                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FX_BG_HoldAreaCube;                                // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_BG_CenterSparks;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FX_BG_CenterGround;                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FX_BG_CenterSignalLine;                            // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FX_BG_CenterSignalGlow;                            // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CenterSignalGlowMI;                                // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CenterSignalLineMI;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HoldAreaCubeMI;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HoldAreaEdgeMI;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EControlPointStatus, struct FLinearColor> CenterSignalGlowColors;                           // 0x03A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EControlPointStatus, struct FLinearColor> CenterSignalLineColors;                           // 0x03F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EControlPointStatus, struct FLinearColor> HoldAreaCubeColors_Dark;                          // 0x0448(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EControlPointStatus, struct FLinearColor> HoldAreaCubeColors_Bright;                        // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EControlPointStatus, struct FLinearColor> HoldAreaEdgeColors_Dark;                          // 0x04E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EControlPointStatus, struct FLinearColor> HoldAreaEdgeColors_Bright;                        // 0x0538(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EControlPointStatus                           CurOccupiedFactionStatus;                          // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOccupying;                                        // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetOccupying(bool* NewOccupying);
	void K2_OnCharactersInsideChanged();
	void K2_OnProgressOwnerFactionChanged();
	void K2_OnProgressStatusChanged();
	void ExecuteUbergraph_BattlegroundControlPoint(int32 EntryPoint);
	void GetStatus(EFactionType InFaction, EControlPointStatus* OutStatus);
	void OnOccupiedChanged();
	void OnOccupyingChanged();
	void ReceiveBeginPlay();
	void K2_OnOccupiedFactionChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattlegroundControlPoint_C">();
	}
	static class ABattlegroundControlPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattlegroundControlPoint_C>();
	}
};
static_assert(alignof(ABattlegroundControlPoint_C) == 0x000008, "Wrong alignment on ABattlegroundControlPoint_C");
static_assert(sizeof(ABattlegroundControlPoint_C) == 0x000590, "Wrong size on ABattlegroundControlPoint_C");
static_assert(offsetof(ABattlegroundControlPoint_C, UberGraphFrame) == 0x000340, "Member 'ABattlegroundControlPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_HoldAreaEdge) == 0x000348, "Member 'ABattlegroundControlPoint_C::FX_BG_HoldAreaEdge' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_HoldAreaCube) == 0x000350, "Member 'ABattlegroundControlPoint_C::FX_BG_HoldAreaCube' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_CenterSparks) == 0x000358, "Member 'ABattlegroundControlPoint_C::FX_BG_CenterSparks' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_CenterGround) == 0x000360, "Member 'ABattlegroundControlPoint_C::FX_BG_CenterGround' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_CenterSignalLine) == 0x000368, "Member 'ABattlegroundControlPoint_C::FX_BG_CenterSignalLine' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, FX_BG_CenterSignalGlow) == 0x000370, "Member 'ABattlegroundControlPoint_C::FX_BG_CenterSignalGlow' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, Box) == 0x000378, "Member 'ABattlegroundControlPoint_C::Box' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, DefaultSceneRoot) == 0x000380, "Member 'ABattlegroundControlPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, CenterSignalGlowMI) == 0x000388, "Member 'ABattlegroundControlPoint_C::CenterSignalGlowMI' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, CenterSignalLineMI) == 0x000390, "Member 'ABattlegroundControlPoint_C::CenterSignalLineMI' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaCubeMI) == 0x000398, "Member 'ABattlegroundControlPoint_C::HoldAreaCubeMI' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaEdgeMI) == 0x0003A0, "Member 'ABattlegroundControlPoint_C::HoldAreaEdgeMI' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, CenterSignalGlowColors) == 0x0003A8, "Member 'ABattlegroundControlPoint_C::CenterSignalGlowColors' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, CenterSignalLineColors) == 0x0003F8, "Member 'ABattlegroundControlPoint_C::CenterSignalLineColors' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaCubeColors_Dark) == 0x000448, "Member 'ABattlegroundControlPoint_C::HoldAreaCubeColors_Dark' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaCubeColors_Bright) == 0x000498, "Member 'ABattlegroundControlPoint_C::HoldAreaCubeColors_Bright' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaEdgeColors_Dark) == 0x0004E8, "Member 'ABattlegroundControlPoint_C::HoldAreaEdgeColors_Dark' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, HoldAreaEdgeColors_Bright) == 0x000538, "Member 'ABattlegroundControlPoint_C::HoldAreaEdgeColors_Bright' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, CurOccupiedFactionStatus) == 0x000588, "Member 'ABattlegroundControlPoint_C::CurOccupiedFactionStatus' has a wrong offset!");
static_assert(offsetof(ABattlegroundControlPoint_C, bOccupying) == 0x000589, "Member 'ABattlegroundControlPoint_C::bOccupying' has a wrong offset!");

}

