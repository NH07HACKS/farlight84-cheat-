#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplineBase

#include "Basic.hpp"

#include "BP_ZiplineBase_classes.hpp"
#include "BP_ZiplineBase_parameters.hpp"


namespace SDK
{

// Function BP_ZiplineBase.BP_ZiplineBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ZiplineBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.GroundDistanceCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MaxDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplineBase_C::GroundDistanceCheck(float MaxDistance, const struct FVector& Location, bool* IsValid, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "GroundDistanceCheck");

	Params::BP_ZiplineBase_C_GroundDistanceCheck Parms{};

	Parms.MaxDistance = MaxDistance;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.GetValidCollisionDistanceOffset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_ZiplineBase_C::GetValidCollisionDistanceOffset(const struct FVector& Direction, const struct FVector& Start, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "GetValidCollisionDistanceOffset");

	Params::BP_ZiplineBase_C_GetValidCollisionDistanceOffset Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Start = std::move(Start);
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.GetCompareHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Heigher                                                (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Lower                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplineBase_C::GetCompareHeight(class USceneComponent* A, class USceneComponent* B, class USceneComponent** Heigher, class USceneComponent** Lower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "GetCompareHeight");

	Params::BP_ZiplineBase_C_GetCompareHeight Parms{};

	Parms.A = A;
	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (Heigher != nullptr)
		*Heigher = Parms.Heigher;

	if (Lower != nullptr)
		*Lower = Parms.Lower;
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.GetAnchorComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 PointA                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 StartA                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 EndA                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent**                   BoxA                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 LandA                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 PointB                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 StartB                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 EndB                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent**                   BoxB                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 LandB                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplineBase_C::GetAnchorComponents(class USceneComponent** PointA, class USceneComponent** StartA, class USceneComponent** EndA, class UBoxComponent** BoxA, class USceneComponent** LandA, class USceneComponent** PointB, class USceneComponent** StartB, class USceneComponent** EndB, class UBoxComponent** BoxB, class USceneComponent** LandB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "GetAnchorComponents");

	Params::BP_ZiplineBase_C_GetAnchorComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PointA != nullptr)
		*PointA = Parms.PointA;

	if (StartA != nullptr)
		*StartA = Parms.StartA;

	if (EndA != nullptr)
		*EndA = Parms.EndA;

	if (BoxA != nullptr)
		*BoxA = Parms.BoxA;

	if (LandA != nullptr)
		*LandA = Parms.LandA;

	if (PointB != nullptr)
		*PointB = Parms.PointB;

	if (StartB != nullptr)
		*StartB = Parms.StartB;

	if (EndB != nullptr)
		*EndB = Parms.EndB;

	if (BoxB != nullptr)
		*BoxB = Parms.BoxB;

	if (LandB != nullptr)
		*LandB = Parms.LandB;
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.FixPlace
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ZiplineBase_C::FixPlace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "FixPlace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.Get Point Location
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   PillarLoc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         CorrectedLoc                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EZiplineType*                           Zipline_Type                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HorzDir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ZiplineBase_C::Get_Point_Location(const struct FVector& PillarLoc, struct FVector* CorrectedLoc, EZiplineType* Zipline_Type, struct FVector* HorzDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "Get Point Location");

	Params::BP_ZiplineBase_C_Get_Point_Location Parms{};

	Parms.PillarLoc = std::move(PillarLoc);

	UObject::ProcessEvent(Func, &Parms);

	if (CorrectedLoc != nullptr)
		*CorrectedLoc = std::move(Parms.CorrectedLoc);

	if (Zipline_Type != nullptr)
		*Zipline_Type = Parms.Zipline_Type;

	if (HorzDir != nullptr)
		*HorzDir = std::move(Parms.HorzDir);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.CreatePillar
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ZiplineBase_C::CreatePillar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "CreatePillar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.FixZipLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ZiplineBase_C::FixZipLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "FixZipLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.CalcSideRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ZiplineBase_C::CalcSideRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "CalcSideRotation");

	Params::BP_ZiplineBase_C_CalcSideRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_ZiplineBase.BP_ZiplineBase_C.GetPillars
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TArray<class AActor*> ABP_ZiplineBase_C::GetPillars() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ZiplineBase_C", "GetPillars");

	Params::BP_ZiplineBase_C_GetPillars Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

