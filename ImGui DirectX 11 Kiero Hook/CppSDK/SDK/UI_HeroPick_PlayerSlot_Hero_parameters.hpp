#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HeroPick_PlayerSlot_Hero

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SolarUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_HeroPick_Stage_structs.hpp"


namespace SDK::Params
{

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero
// 0x0038 (0x0038 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero) == 0x000008, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero) == 0x000038, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, EntryPoint) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_BreakVector2D_X) == 0x000004, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, K2Node_Event_InLayoutType) == 0x00000D, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, K2Node_SwitchEnum_CmpSuccess) == 0x00000E, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_BreakVector2D_X_1) == 0x000018, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_BreakVector2D_Y_1) == 0x00001C, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000020, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000028, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000030, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ExecuteUbergraph_UI_HeroPick_PlayerSlot_Hero::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_PreConstruct");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_PreConstruct) == 0x000001, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_PreConstruct");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.SetHeropickStage
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage final
{
public:
	E_HeroPick_Stage                              Stage_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage) == 0x000001, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage) == 0x000001, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage, Stage_0) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetHeropickStage::Stage_0' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.SetOwn
// 0x0001 (0x0001 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_SetOwn final
{
public:
	bool                                          IsOwn_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_SetOwn) == 0x000001, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_SetOwn");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_SetOwn) == 0x000001, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_SetOwn");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetOwn, IsOwn_0) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetOwn::IsOwn_0' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.PlayVoice
// 0x0005 (0x0005 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_PlayVoice final
{
public:
	bool                                          IsTalking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice) == 0x000001, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_PlayVoice");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice) == 0x000005, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_PlayVoice");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice, IsTalking_0) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PlayVoice::IsTalking_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice, Temp_bool_Variable) == 0x000001, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PlayVoice::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice, Temp_byte_Variable) == 0x000002, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PlayVoice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice, Temp_byte_Variable_1) == 0x000003, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PlayVoice::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_PlayVoice, K2Node_Select_Default) == 0x000004, "Member 'UI_HeroPick_PlayerSlot_Hero_C_PlayVoice::K2Node_Select_Default' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.SetIsSelf
// 0x0050 (0x0050 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf final
{
public:
	bool                                          IsSelf_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPCPlatform_IsPCPlatform;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf) == 0x000008, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf) == 0x000050, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, IsSelf_0) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::IsSelf_0' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_bool_Variable) == 0x000001, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_byte_Variable) == 0x000002, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_byte_Variable_1) == 0x000003, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_bool_Variable_1) == 0x000004, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, K2Node_Select_Default) == 0x000005, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_object_Variable) == 0x000008, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_object_Variable_1) == 0x000010, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_bool_Variable_2) == 0x000018, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, K2Node_Select_Default_1) == 0x000020, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_struct_Variable) == 0x000028, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, Temp_struct_Variable_1) == 0x000030, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, CallFunc_IsPCPlatform_IsPCPlatform) == 0x000038, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::CallFunc_IsPCPlatform_IsPCPlatform' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, K2Node_Select_Default_2) == 0x00003C, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, CallFunc_BreakVector2D_X) == 0x000044, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'UI_HeroPick_PlayerSlot_Hero_C_SetIsSelf::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function UI_HeroPick_PlayerSlot_Hero.UI_HeroPick_PlayerSlot_Hero_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_HeroPick_PlayerSlot_Hero_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_HeroPick_PlayerSlot_Hero_C_GetModuleName) == 0x000008, "Wrong alignment on UI_HeroPick_PlayerSlot_Hero_C_GetModuleName");
static_assert(sizeof(UI_HeroPick_PlayerSlot_Hero_C_GetModuleName) == 0x000010, "Wrong size on UI_HeroPick_PlayerSlot_Hero_C_GetModuleName");
static_assert(offsetof(UI_HeroPick_PlayerSlot_Hero_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_HeroPick_PlayerSlot_Hero_C_GetModuleName::ReturnValue' has a wrong offset!");

}

