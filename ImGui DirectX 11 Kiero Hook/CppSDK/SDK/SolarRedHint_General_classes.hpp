#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarRedHint_General

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"
#include "E_RedHintPath_New_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Type_RedHint_structs.hpp"
#include "UMG_structs.hpp"
#include "SolarUI_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SolarRedHint_General.SolarRedHint_General_C
// 0x0030 (0x0620 - 0x05F0)
class USolarRedHint_General_C final : public USolarUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Img_HintPoint;                                     // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_HintPoint_Num;                                 // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_HintNum;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int64                                         HintKey;                                           // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERedHintPath                                  HintPath;                                          // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAutoRefresh;                                     // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_RedHint                                Type;                                              // 0x061A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNewHintPath;                                    // 0x061B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_RedHintPath_New                             HintPathNew;                                       // 0x061C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPC;                                              // 0x061D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnSetHintDataComplete();
	void SetStyle(E_Type_RedHint Type_0);
	void SetHintData(int64 Key, ERedHintPath Path, bool bAutoRefresh, E_Type_RedHint Type_0, bool bNewHintPath, E_RedHintPath_New NewPath);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void ReceivePlatformLayout(EUSolarWidgetLayoutType InLayoutType);
	void ExecuteUbergraph_SolarRedHint_General(int32 EntryPoint);
	void OnInitialized();
	void OnSetHintDataCompleteCopy();
	void ConstructCopy();
	void Destruct();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SolarRedHint_General_C">();
	}
	static class USolarRedHint_General_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarRedHint_General_C>();
	}
};
static_assert(alignof(USolarRedHint_General_C) == 0x000008, "Wrong alignment on USolarRedHint_General_C");
static_assert(sizeof(USolarRedHint_General_C) == 0x000620, "Wrong size on USolarRedHint_General_C");
static_assert(offsetof(USolarRedHint_General_C, UberGraphFrame) == 0x0005F0, "Member 'USolarRedHint_General_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, Img_HintPoint) == 0x0005F8, "Member 'USolarRedHint_General_C::Img_HintPoint' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, Img_HintPoint_Num) == 0x000600, "Member 'USolarRedHint_General_C::Img_HintPoint_Num' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, Text_HintNum) == 0x000608, "Member 'USolarRedHint_General_C::Text_HintNum' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, HintKey) == 0x000610, "Member 'USolarRedHint_General_C::HintKey' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, HintPath) == 0x000618, "Member 'USolarRedHint_General_C::HintPath' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, IsAutoRefresh) == 0x000619, "Member 'USolarRedHint_General_C::IsAutoRefresh' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, Type) == 0x00061A, "Member 'USolarRedHint_General_C::Type' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, UseNewHintPath) == 0x00061B, "Member 'USolarRedHint_General_C::UseNewHintPath' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, HintPathNew) == 0x00061C, "Member 'USolarRedHint_General_C::HintPathNew' has a wrong offset!");
static_assert(offsetof(USolarRedHint_General_C, IsPC) == 0x00061D, "Member 'USolarRedHint_General_C::IsPC' has a wrong offset!");

}

