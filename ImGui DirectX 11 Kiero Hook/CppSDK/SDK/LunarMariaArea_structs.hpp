#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LunarMariaArea

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LunarMariaArea.EAreaResolutionRatio
// NumValues: 0x000E
enum class EAreaResolutionRatio : uint8
{
	X1                                       = 1,
	X2                                       = 2,
	X3                                       = 3,
	X4                                       = 4,
	X5                                       = 5,
	X6                                       = 6,
	X7                                       = 7,
	X8                                       = 8,
	X9                                       = 9,
	X10                                      = 10,
	X_1                                      = 11,
	X_2                                      = 12,
	X_3                                      = 13,
	EAreaResolutionRatio_MAX                 = 14,
};

// ScriptStruct LunarMariaArea.AreaGroupSet
// 0x0010 (0x0010 - 0x0000)
struct FAreaGroupSet final
{
public:
	TArray<class FName>                           LayerNames;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaGroupSet) == 0x000008, "Wrong alignment on FAreaGroupSet");
static_assert(sizeof(FAreaGroupSet) == 0x000010, "Wrong size on FAreaGroupSet");
static_assert(offsetof(FAreaGroupSet, LayerNames) == 0x000000, "Member 'FAreaGroupSet::LayerNames' has a wrong offset!");

// ScriptStruct LunarMariaArea.AreaBitLayerConfig
// 0x0040 (0x0040 - 0x0000)
struct FAreaBitLayerConfig final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Asset;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetShort;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitMask;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DisplayColor;                                      // 0x002C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x003C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaBitLayerConfig) == 0x000008, "Wrong alignment on FAreaBitLayerConfig");
static_assert(sizeof(FAreaBitLayerConfig) == 0x000040, "Wrong size on FAreaBitLayerConfig");
static_assert(offsetof(FAreaBitLayerConfig, LayerName) == 0x000000, "Member 'FAreaBitLayerConfig::LayerName' has a wrong offset!");
static_assert(offsetof(FAreaBitLayerConfig, Asset) == 0x000008, "Member 'FAreaBitLayerConfig::Asset' has a wrong offset!");
static_assert(offsetof(FAreaBitLayerConfig, AssetShort) == 0x000018, "Member 'FAreaBitLayerConfig::AssetShort' has a wrong offset!");
static_assert(offsetof(FAreaBitLayerConfig, BitMask) == 0x000028, "Member 'FAreaBitLayerConfig::BitMask' has a wrong offset!");
static_assert(offsetof(FAreaBitLayerConfig, DisplayColor) == 0x00002C, "Member 'FAreaBitLayerConfig::DisplayColor' has a wrong offset!");
static_assert(offsetof(FAreaBitLayerConfig, bIsVisible) == 0x00003C, "Member 'FAreaBitLayerConfig::bIsVisible' has a wrong offset!");

// ScriptStruct LunarMariaArea.AreaLayerData
// 0x0140 (0x0140 - 0x0000)
struct FAreaLayerData final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Asset;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetShort;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBitMask;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, struct FAreaBitLayerConfig>       BitLayers;                                         // 0x0030(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             BitMaskNames;                                      // 0x0080(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<struct FIntPoint, class UTexture2D*>     ComponentWeightMapTextures;                        // 0x00D0(0x0050)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0120(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0128(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 BitDisplayColorTexture;                            // 0x0130(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaResolutionRatio                          ResolutionRatio;                                   // 0x0138(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComponentSizeQuads;                                // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaLayerData) == 0x000008, "Wrong alignment on FAreaLayerData");
static_assert(sizeof(FAreaLayerData) == 0x000140, "Wrong size on FAreaLayerData");
static_assert(offsetof(FAreaLayerData, LayerName) == 0x000000, "Member 'FAreaLayerData::LayerName' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, Asset) == 0x000008, "Member 'FAreaLayerData::Asset' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, AssetShort) == 0x000018, "Member 'FAreaLayerData::AssetShort' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, bIsBitMask) == 0x000028, "Member 'FAreaLayerData::bIsBitMask' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, BitLayers) == 0x000030, "Member 'FAreaLayerData::BitLayers' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, BitMaskNames) == 0x000080, "Member 'FAreaLayerData::BitMaskNames' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, ComponentWeightMapTextures) == 0x0000D0, "Member 'FAreaLayerData::ComponentWeightMapTextures' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, GroupName) == 0x000120, "Member 'FAreaLayerData::GroupName' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, Index) == 0x000128, "Member 'FAreaLayerData::Index' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, BitDisplayColorTexture) == 0x000130, "Member 'FAreaLayerData::BitDisplayColorTexture' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, ResolutionRatio) == 0x000138, "Member 'FAreaLayerData::ResolutionRatio' has a wrong offset!");
static_assert(offsetof(FAreaLayerData, ComponentSizeQuads) == 0x00013C, "Member 'FAreaLayerData::ComponentSizeQuads' has a wrong offset!");

// ScriptStruct LunarMariaArea.AreaTileLayerData
// 0x0050 (0x0050 - 0x0000)
struct FAreaTileLayerData final
{
public:
	TMap<struct FIntPoint, class UTexture2D*>     ComponentWeightMapTextures;                        // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaTileLayerData) == 0x000008, "Wrong alignment on FAreaTileLayerData");
static_assert(sizeof(FAreaTileLayerData) == 0x000050, "Wrong size on FAreaTileLayerData");
static_assert(offsetof(FAreaTileLayerData, ComponentWeightMapTextures) == 0x000000, "Member 'FAreaTileLayerData::ComponentWeightMapTextures' has a wrong offset!");

}

