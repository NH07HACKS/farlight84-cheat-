#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniMapUMG

#include "Basic.hpp"

#include "MiniMapUMG_classes.hpp"
#include "MiniMapUMG_parameters.hpp"


namespace SDK
{

// Function MiniMapUMG.MiniMapUMG_C.ExecuteUbergraph_MiniMapUMG
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniMapUMG_C::ExecuteUbergraph_MiniMapUMG(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "ExecuteUbergraph_MiniMapUMG");

	Params::MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMiniMapUMG_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.RemoveDotLineOnMap
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   DotLineID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniMapUMG_C::RemoveDotLineOnMap(int32 DotLineID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "RemoveDotLineOnMap");

	Params::MiniMapUMG_C_RemoveDotLineOnMap Parms{};

	Parms.DotLineID = DotLineID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.RemoveMarkIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMapMarkBase*                     InMapMark                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniMapUMG_C::RemoveMarkIcon(class UMapMarkBase* InMapMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "RemoveMarkIcon");

	Params::MiniMapUMG_C_RemoveMarkIcon Parms{};

	Parms.InMapMark = InMapMark;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMiniMapUMG_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "PreConstruct");

	Params::MiniMapUMG_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.GetTwoFingerDistance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniMapUMG_C::GetTwoFingerDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "GetTwoFingerDistance");

	Params::MiniMapUMG_C_GetTwoFingerDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function MiniMapUMG.MiniMapUMG_C.DisableOneFinger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             Event                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniMapUMG_C::DisableOneFinger(const struct FPointerEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "DisableOneFinger");

	Params::MiniMapUMG_C_DisableOneFinger Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.InitMarkIcon
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMapMarkBase>         InMapMarkClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVector2D&                 InMarkPos                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EdgeSupport                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EdgeSupportWithBigMap                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMapMarkBase*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMapMarkBase* UMiniMapUMG_C::InitMarkIcon(TSubclassOf<class UMapMarkBase> InMapMarkClass, const struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "InitMarkIcon");

	Params::MiniMapUMG_C_InitMarkIcon Parms{};

	Parms.InMapMarkClass = InMapMarkClass;
	Parms.InMarkPos = std::move(InMarkPos);
	Parms.EdgeSupport = EdgeSupport;
	Parms.EdgeSupportWithBigMap = EdgeSupportWithBigMap;
	Parms.ZOrder = ZOrder;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.InitMarkIconOnMapFrame
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMapMarkBase>         InMapMarkClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVector2D&                 Pivot                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMapMarkBase*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMapMarkBase* UMiniMapUMG_C::InitMarkIconOnMapFrame(TSubclassOf<class UMapMarkBase> InMapMarkClass, const struct FVector2D& Pivot, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "InitMarkIconOnMapFrame");

	Params::MiniMapUMG_C_InitMarkIconOnMapFrame Parms{};

	Parms.InMapMarkClass = InMapMarkClass;
	Parms.Pivot = std::move(Pivot);
	Parms.ZOrder = ZOrder;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.AddDotLineOnMap
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           StartPointActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           EndPointActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              DotLineColor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UMiniMapUMG_C::AddDotLineOnMap(class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& DotLineColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "AddDotLineOnMap");

	Params::MiniMapUMG_C_AddDotLineOnMap Parms{};

	Parms.StartPointActor = StartPointActor;
	Parms.EndPointActor = EndPointActor;
	Parms.DotLineColor = std::move(DotLineColor);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.SetBigMapFOV
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const float&                            InSliderValue                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            InFOVValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InCenter                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMiniMapUMG_C::SetBigMapFOV(const float& InSliderValue, const float& InFOVValue, const struct FVector2D& InCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "SetBigMapFOV");

	Params::MiniMapUMG_C_SetBigMapFOV Parms{};

	Parms.InSliderValue = InSliderValue;
	Parms.InFOVValue = InFOVValue;
	Parms.InCenter = std::move(InCenter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMiniMapUMG_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseLeave");

	Params::MiniMapUMG_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.OnSolarUIOpened
// (Native, Event, Protected, BlueprintEvent)

void UMiniMapUMG_C::OnSolarUIOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnSolarUIOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MiniMapUMG.MiniMapUMG_C.CreateMapMark
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    MapMarkName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMapMarkBase*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMapMarkBase* UMiniMapUMG_C::CreateMapMark(const class FString& MapMarkName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "CreateMapMark");

	Params::MiniMapUMG_C_CreateMapMark Parms{};

	Parms.MapMarkName = std::move(MapMarkName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMiniMapUMG_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseEnter");

	Params::MiniMapUMG_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.OnTouchManagerInitialized
// (Event, Protected, BlueprintEvent)

void UMiniMapUMG_C::OnTouchManagerInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnTouchManagerInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.OnSolarUIClosed
// (Native, Event, Protected, BlueprintEvent)

void UMiniMapUMG_C::OnSolarUIClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnSolarUIClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UMiniMapUMG_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseButtonUp");

	Params::MiniMapUMG_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.VehicleClear
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMiniMapUMG_C::VehicleClear(bool IsOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "VehicleClear");

	Params::MiniMapUMG_C_VehicleClear Parms{};

	Parms.IsOwner = IsOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniMapUMG.MiniMapUMG_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMiniMapUMG_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.ClearMiniMapMarkWidget
// (Event, Public, BlueprintEvent)

void UMiniMapUMG_C::ClearMiniMapMarkWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "ClearMiniMapMarkWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.DestructCopy
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMiniMapUMG_C::DestructCopy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "DestructCopy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UMiniMapUMG_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseMove");

	Params::MiniMapUMG_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 InMyGeometry                                           (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UMiniMapUMG_C::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseButtonDoubleClick");

	Params::MiniMapUMG_C_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.CreateMapImageWidget
// (Event, Protected, BlueprintEvent)

void UMiniMapUMG_C::CreateMapImageWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "CreateMapImageWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMiniMapUMG_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.RefreshLastVehicleLocation
// (Event, Public, BlueprintEvent)

void UMiniMapUMG_C::RefreshLastVehicleLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "RefreshLastVehicleLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.ClearVehicleMarkWidget
// (Event, Public, BlueprintEvent)

void UMiniMapUMG_C::ClearVehicleMarkWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "ClearVehicleMarkWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UMiniMapUMG_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "OnMouseButtonDown");

	Params::MiniMapUMG_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MiniMapUMG.MiniMapUMG_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UMiniMapUMG_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapUMG_C", "GetModuleName");

	Params::MiniMapUMG_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

