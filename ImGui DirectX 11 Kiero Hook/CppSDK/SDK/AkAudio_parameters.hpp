#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AkAudio.AkAndroidInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkAndroidInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAndroidInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkAndroidInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkAndroidInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkAndroidInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkAndroidInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkAndroidInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkGameObject.PostAkEvent
// 0x0048 (0x0048 - 0x0000)
struct AkGameObject_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 in_EventName;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameObject_PostAkEvent) == 0x000008, "Wrong alignment on AkGameObject_PostAkEvent");
static_assert(sizeof(AkGameObject_PostAkEvent) == 0x000048, "Wrong size on AkGameObject_PostAkEvent");
static_assert(offsetof(AkGameObject_PostAkEvent, AkEvent) == 0x000000, "Member 'AkGameObject_PostAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEvent, CallbackMask) == 0x000008, "Member 'AkGameObject_PostAkEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEvent, PostEventCallback) == 0x00000C, "Member 'AkGameObject_PostAkEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEvent, ExternalSources) == 0x000020, "Member 'AkGameObject_PostAkEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEvent, in_EventName) == 0x000030, "Member 'AkGameObject_PostAkEvent::in_EventName' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEvent, ReturnValue) == 0x000040, "Member 'AkGameObject_PostAkEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameObject.PostAkEventAsync
// 0x0050 (0x0050 - 0x0000)
struct AkGameObject_PostAkEventAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameObject_PostAkEventAsync) == 0x000008, "Wrong alignment on AkGameObject_PostAkEventAsync");
static_assert(sizeof(AkGameObject_PostAkEventAsync) == 0x000050, "Wrong size on AkGameObject_PostAkEventAsync");
static_assert(offsetof(AkGameObject_PostAkEventAsync, WorldContextObject) == 0x000000, "Member 'AkGameObject_PostAkEventAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, AkEvent) == 0x000008, "Member 'AkGameObject_PostAkEventAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, PlayingID) == 0x000010, "Member 'AkGameObject_PostAkEventAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, CallbackMask) == 0x000014, "Member 'AkGameObject_PostAkEventAsync::CallbackMask' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, PostEventCallback) == 0x000018, "Member 'AkGameObject_PostAkEventAsync::PostEventCallback' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, ExternalSources) == 0x000028, "Member 'AkGameObject_PostAkEventAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAkEventAsync, LatentInfo) == 0x000038, "Member 'AkGameObject_PostAkEventAsync::LatentInfo' has a wrong offset!");

// Function AkAudio.AkGameObject.PostAssociatedAkEvent
// 0x0030 (0x0030 - 0x0000)
struct AkGameObject_PostAssociatedAkEvent final
{
public:
	int32                                         CallbackMask;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameObject_PostAssociatedAkEvent) == 0x000008, "Wrong alignment on AkGameObject_PostAssociatedAkEvent");
static_assert(sizeof(AkGameObject_PostAssociatedAkEvent) == 0x000030, "Wrong size on AkGameObject_PostAssociatedAkEvent");
static_assert(offsetof(AkGameObject_PostAssociatedAkEvent, CallbackMask) == 0x000000, "Member 'AkGameObject_PostAssociatedAkEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEvent, PostEventCallback) == 0x000004, "Member 'AkGameObject_PostAssociatedAkEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEvent, ExternalSources) == 0x000018, "Member 'AkGameObject_PostAssociatedAkEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEvent, ReturnValue) == 0x000028, "Member 'AkGameObject_PostAssociatedAkEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameObject.PostAssociatedAkEventAsync
// 0x0050 (0x0050 - 0x0000)
struct AkGameObject_PostAssociatedAkEventAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameObject_PostAssociatedAkEventAsync) == 0x000008, "Wrong alignment on AkGameObject_PostAssociatedAkEventAsync");
static_assert(sizeof(AkGameObject_PostAssociatedAkEventAsync) == 0x000050, "Wrong size on AkGameObject_PostAssociatedAkEventAsync");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, WorldContextObject) == 0x000000, "Member 'AkGameObject_PostAssociatedAkEventAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, CallbackMask) == 0x000008, "Member 'AkGameObject_PostAssociatedAkEventAsync::CallbackMask' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, PostEventCallback) == 0x00000C, "Member 'AkGameObject_PostAssociatedAkEventAsync::PostEventCallback' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, ExternalSources) == 0x000020, "Member 'AkGameObject_PostAssociatedAkEventAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, LatentInfo) == 0x000030, "Member 'AkGameObject_PostAssociatedAkEventAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(AkGameObject_PostAssociatedAkEventAsync, PlayingID) == 0x000048, "Member 'AkGameObject_PostAssociatedAkEventAsync::PlayingID' has a wrong offset!");

// Function AkAudio.AkGameObject.GetRTPCValue
// 0x0030 (0x0030 - 0x0000)
struct AkGameObject_GetRTPCValue final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTPCValueType                                InputValueType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTPCValueType                                OutputValueType;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RTPC;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameObject_GetRTPCValue) == 0x000008, "Wrong alignment on AkGameObject_GetRTPCValue");
static_assert(sizeof(AkGameObject_GetRTPCValue) == 0x000030, "Wrong size on AkGameObject_GetRTPCValue");
static_assert(offsetof(AkGameObject_GetRTPCValue, RTPCValue) == 0x000000, "Member 'AkGameObject_GetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameObject_GetRTPCValue, InputValueType) == 0x000008, "Member 'AkGameObject_GetRTPCValue::InputValueType' has a wrong offset!");
static_assert(offsetof(AkGameObject_GetRTPCValue, Value) == 0x00000C, "Member 'AkGameObject_GetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkGameObject_GetRTPCValue, OutputValueType) == 0x000010, "Member 'AkGameObject_GetRTPCValue::OutputValueType' has a wrong offset!");
static_assert(offsetof(AkGameObject_GetRTPCValue, RTPC) == 0x000018, "Member 'AkGameObject_GetRTPCValue::RTPC' has a wrong offset!");
static_assert(offsetof(AkGameObject_GetRTPCValue, PlayingID) == 0x000028, "Member 'AkGameObject_GetRTPCValue::PlayingID' has a wrong offset!");

// Function AkAudio.AkGameObject.SetRTPCValue
// 0x0020 (0x0020 - 0x0000)
struct AkGameObject_SetRTPCValue final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameObject_SetRTPCValue) == 0x000008, "Wrong alignment on AkGameObject_SetRTPCValue");
static_assert(sizeof(AkGameObject_SetRTPCValue) == 0x000020, "Wrong size on AkGameObject_SetRTPCValue");
static_assert(offsetof(AkGameObject_SetRTPCValue, RTPCValue) == 0x000000, "Member 'AkGameObject_SetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameObject_SetRTPCValue, Value) == 0x000008, "Member 'AkGameObject_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkGameObject_SetRTPCValue, InterpolationTimeMs) == 0x00000C, "Member 'AkGameObject_SetRTPCValue::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameObject_SetRTPCValue, RTPC) == 0x000010, "Member 'AkGameObject_SetRTPCValue::RTPC' has a wrong offset!");

// Function AkAudio.AkPooledEmitter.OnEndOfEvent
// 0x0010 (0x0010 - 0x0000)
struct AkPooledEmitter_OnEndOfEvent final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkPooledEmitter_OnEndOfEvent) == 0x000008, "Wrong alignment on AkPooledEmitter_OnEndOfEvent");
static_assert(sizeof(AkPooledEmitter_OnEndOfEvent) == 0x000010, "Wrong size on AkPooledEmitter_OnEndOfEvent");
static_assert(offsetof(AkPooledEmitter_OnEndOfEvent, CallbackType) == 0x000000, "Member 'AkPooledEmitter_OnEndOfEvent::CallbackType' has a wrong offset!");
static_assert(offsetof(AkPooledEmitter_OnEndOfEvent, CallbackInfo) == 0x000008, "Member 'AkPooledEmitter_OnEndOfEvent::CallbackInfo' has a wrong offset!");

// Function AkAudio.AkPortalComponent.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct AkPortalComponent_GetCurrentState final
{
public:
	EAkAcousticPortalState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkPortalComponent_GetCurrentState) == 0x000001, "Wrong alignment on AkPortalComponent_GetCurrentState");
static_assert(sizeof(AkPortalComponent_GetCurrentState) == 0x000001, "Wrong size on AkPortalComponent_GetCurrentState");
static_assert(offsetof(AkPortalComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'AkPortalComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function AkAudio.AkPortalComponent.GetPrimitiveParent
// 0x0008 (0x0008 - 0x0000)
struct AkPortalComponent_GetPrimitiveParent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkPortalComponent_GetPrimitiveParent) == 0x000008, "Wrong alignment on AkPortalComponent_GetPrimitiveParent");
static_assert(sizeof(AkPortalComponent_GetPrimitiveParent) == 0x000008, "Wrong size on AkPortalComponent_GetPrimitiveParent");
static_assert(offsetof(AkPortalComponent_GetPrimitiveParent, ReturnValue) == 0x000000, "Member 'AkPortalComponent_GetPrimitiveParent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkPortalComponent.PortalPlacementValid
// 0x0001 (0x0001 - 0x0000)
struct AkPortalComponent_PortalPlacementValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkPortalComponent_PortalPlacementValid) == 0x000001, "Wrong alignment on AkPortalComponent_PortalPlacementValid");
static_assert(sizeof(AkPortalComponent_PortalPlacementValid) == 0x000001, "Wrong size on AkPortalComponent_PortalPlacementValid");
static_assert(offsetof(AkPortalComponent_PortalPlacementValid, ReturnValue) == 0x000000, "Member 'AkPortalComponent_PortalPlacementValid::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAcousticPortal.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct AkAcousticPortal_GetCurrentState final
{
public:
	EAkAcousticPortalState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAcousticPortal_GetCurrentState) == 0x000001, "Wrong alignment on AkAcousticPortal_GetCurrentState");
static_assert(sizeof(AkAcousticPortal_GetCurrentState) == 0x000001, "Wrong size on AkAcousticPortal_GetCurrentState");
static_assert(offsetof(AkAcousticPortal_GetCurrentState, ReturnValue) == 0x000000, "Member 'AkAcousticPortal_GetCurrentState::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAudioEvent.GetIsInfinite
// 0x0001 (0x0001 - 0x0000)
struct AkAudioEvent_GetIsInfinite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAudioEvent_GetIsInfinite) == 0x000001, "Wrong alignment on AkAudioEvent_GetIsInfinite");
static_assert(sizeof(AkAudioEvent_GetIsInfinite) == 0x000001, "Wrong size on AkAudioEvent_GetIsInfinite");
static_assert(offsetof(AkAudioEvent_GetIsInfinite, ReturnValue) == 0x000000, "Member 'AkAudioEvent_GetIsInfinite::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAudioEvent.GetMaxAttenuationRadius
// 0x0004 (0x0004 - 0x0000)
struct AkAudioEvent_GetMaxAttenuationRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAudioEvent_GetMaxAttenuationRadius) == 0x000004, "Wrong alignment on AkAudioEvent_GetMaxAttenuationRadius");
static_assert(sizeof(AkAudioEvent_GetMaxAttenuationRadius) == 0x000004, "Wrong size on AkAudioEvent_GetMaxAttenuationRadius");
static_assert(offsetof(AkAudioEvent_GetMaxAttenuationRadius, ReturnValue) == 0x000000, "Member 'AkAudioEvent_GetMaxAttenuationRadius::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAudioEvent.GetMaximumDuration
// 0x0004 (0x0004 - 0x0000)
struct AkAudioEvent_GetMaximumDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAudioEvent_GetMaximumDuration) == 0x000004, "Wrong alignment on AkAudioEvent_GetMaximumDuration");
static_assert(sizeof(AkAudioEvent_GetMaximumDuration) == 0x000004, "Wrong size on AkAudioEvent_GetMaximumDuration");
static_assert(offsetof(AkAudioEvent_GetMaximumDuration, ReturnValue) == 0x000000, "Member 'AkAudioEvent_GetMaximumDuration::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAudioEvent.GetMinimumDuration
// 0x0004 (0x0004 - 0x0000)
struct AkAudioEvent_GetMinimumDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAudioEvent_GetMinimumDuration) == 0x000004, "Wrong alignment on AkAudioEvent_GetMinimumDuration");
static_assert(sizeof(AkAudioEvent_GetMinimumDuration) == 0x000004, "Wrong size on AkAudioEvent_GetMinimumDuration");
static_assert(offsetof(AkAudioEvent_GetMinimumDuration, ReturnValue) == 0x000000, "Member 'AkAudioEvent_GetMinimumDuration::ReturnValue' has a wrong offset!");

// Function AkAudio.AKComponent.PostAkEventAndWaitForEnd
// 0x0048 (0x0048 - 0x0000)
struct AKComponent_PostAkEventAndWaitForEnd final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 in_EventName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AKComponent_PostAkEventAndWaitForEnd) == 0x000008, "Wrong alignment on AKComponent_PostAkEventAndWaitForEnd");
static_assert(sizeof(AKComponent_PostAkEventAndWaitForEnd) == 0x000048, "Wrong size on AKComponent_PostAkEventAndWaitForEnd");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEnd, AkEvent) == 0x000000, "Member 'AKComponent_PostAkEventAndWaitForEnd::AkEvent' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEnd, in_EventName) == 0x000008, "Member 'AKComponent_PostAkEventAndWaitForEnd::in_EventName' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEnd, ExternalSources) == 0x000018, "Member 'AKComponent_PostAkEventAndWaitForEnd::ExternalSources' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEnd, LatentInfo) == 0x000028, "Member 'AKComponent_PostAkEventAndWaitForEnd::LatentInfo' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEnd, ReturnValue) == 0x000040, "Member 'AKComponent_PostAkEventAndWaitForEnd::ReturnValue' has a wrong offset!");

// Function AkAudio.AKComponent.PostAkEventAndWaitForEndAsync
// 0x0038 (0x0038 - 0x0000)
struct AKComponent_PostAkEventAndWaitForEndAsync final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_PostAkEventAndWaitForEndAsync) == 0x000008, "Wrong alignment on AKComponent_PostAkEventAndWaitForEndAsync");
static_assert(sizeof(AKComponent_PostAkEventAndWaitForEndAsync) == 0x000038, "Wrong size on AKComponent_PostAkEventAndWaitForEndAsync");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEndAsync, AkEvent) == 0x000000, "Member 'AKComponent_PostAkEventAndWaitForEndAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEndAsync, PlayingID) == 0x000008, "Member 'AKComponent_PostAkEventAndWaitForEndAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEndAsync, ExternalSources) == 0x000010, "Member 'AKComponent_PostAkEventAndWaitForEndAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventAndWaitForEndAsync, LatentInfo) == 0x000020, "Member 'AKComponent_PostAkEventAndWaitForEndAsync::LatentInfo' has a wrong offset!");

// Function AkAudio.AKComponent.PostAkEventByName
// 0x0018 (0x0018 - 0x0000)
struct AKComponent_PostAkEventByName final
{
public:
	class FString                                 in_EventName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AKComponent_PostAkEventByName) == 0x000008, "Wrong alignment on AKComponent_PostAkEventByName");
static_assert(sizeof(AKComponent_PostAkEventByName) == 0x000018, "Wrong size on AKComponent_PostAkEventByName");
static_assert(offsetof(AKComponent_PostAkEventByName, in_EventName) == 0x000000, "Member 'AKComponent_PostAkEventByName::in_EventName' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAkEventByName, ReturnValue) == 0x000010, "Member 'AKComponent_PostAkEventByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AKComponent.PostAssociatedAkEventAndWaitForEnd
// 0x0030 (0x0030 - 0x0000)
struct AKComponent_PostAssociatedAkEventAndWaitForEnd final
{
public:
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AKComponent_PostAssociatedAkEventAndWaitForEnd) == 0x000008, "Wrong alignment on AKComponent_PostAssociatedAkEventAndWaitForEnd");
static_assert(sizeof(AKComponent_PostAssociatedAkEventAndWaitForEnd) == 0x000030, "Wrong size on AKComponent_PostAssociatedAkEventAndWaitForEnd");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEnd, ExternalSources) == 0x000000, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEnd::ExternalSources' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEnd, LatentInfo) == 0x000010, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEnd::LatentInfo' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEnd, ReturnValue) == 0x000028, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEnd::ReturnValue' has a wrong offset!");

// Function AkAudio.AKComponent.PostAssociatedAkEventAndWaitForEndAsync
// 0x0030 (0x0030 - 0x0000)
struct AKComponent_PostAssociatedAkEventAndWaitForEndAsync final
{
public:
	int32                                         PlayingID;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_PostAssociatedAkEventAndWaitForEndAsync) == 0x000008, "Wrong alignment on AKComponent_PostAssociatedAkEventAndWaitForEndAsync");
static_assert(sizeof(AKComponent_PostAssociatedAkEventAndWaitForEndAsync) == 0x000030, "Wrong size on AKComponent_PostAssociatedAkEventAndWaitForEndAsync");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEndAsync, PlayingID) == 0x000000, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEndAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEndAsync, ExternalSources) == 0x000008, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEndAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(AKComponent_PostAssociatedAkEventAndWaitForEndAsync, LatentInfo) == 0x000018, "Member 'AKComponent_PostAssociatedAkEventAndWaitForEndAsync::LatentInfo' has a wrong offset!");

// Function AkAudio.AKComponent.PostTrigger
// 0x0018 (0x0018 - 0x0000)
struct AKComponent_PostTrigger final
{
public:
	class UAkTrigger*                             TriggerValue;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Trigger;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_PostTrigger) == 0x000008, "Wrong alignment on AKComponent_PostTrigger");
static_assert(sizeof(AKComponent_PostTrigger) == 0x000018, "Wrong size on AKComponent_PostTrigger");
static_assert(offsetof(AKComponent_PostTrigger, TriggerValue) == 0x000000, "Member 'AKComponent_PostTrigger::TriggerValue' has a wrong offset!");
static_assert(offsetof(AKComponent_PostTrigger, Trigger) == 0x000008, "Member 'AKComponent_PostTrigger::Trigger' has a wrong offset!");

// Function AkAudio.AKComponent.SetAttenuationScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct AKComponent_SetAttenuationScalingFactor final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetAttenuationScalingFactor) == 0x000004, "Wrong alignment on AKComponent_SetAttenuationScalingFactor");
static_assert(sizeof(AKComponent_SetAttenuationScalingFactor) == 0x000004, "Wrong size on AKComponent_SetAttenuationScalingFactor");
static_assert(offsetof(AKComponent_SetAttenuationScalingFactor, Value) == 0x000000, "Member 'AKComponent_SetAttenuationScalingFactor::Value' has a wrong offset!");

// Function AkAudio.AKComponent.SetEarlyReflectionsAuxBus
// 0x0010 (0x0010 - 0x0000)
struct AKComponent_SetEarlyReflectionsAuxBus final
{
public:
	class FString                                 AuxBusName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetEarlyReflectionsAuxBus) == 0x000008, "Wrong alignment on AKComponent_SetEarlyReflectionsAuxBus");
static_assert(sizeof(AKComponent_SetEarlyReflectionsAuxBus) == 0x000010, "Wrong size on AKComponent_SetEarlyReflectionsAuxBus");
static_assert(offsetof(AKComponent_SetEarlyReflectionsAuxBus, AuxBusName) == 0x000000, "Member 'AKComponent_SetEarlyReflectionsAuxBus::AuxBusName' has a wrong offset!");

// Function AkAudio.AKComponent.SetEarlyReflectionsVolume
// 0x0004 (0x0004 - 0x0000)
struct AKComponent_SetEarlyReflectionsVolume final
{
public:
	float                                         SendVolume;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetEarlyReflectionsVolume) == 0x000004, "Wrong alignment on AKComponent_SetEarlyReflectionsVolume");
static_assert(sizeof(AKComponent_SetEarlyReflectionsVolume) == 0x000004, "Wrong size on AKComponent_SetEarlyReflectionsVolume");
static_assert(offsetof(AKComponent_SetEarlyReflectionsVolume, SendVolume) == 0x000000, "Member 'AKComponent_SetEarlyReflectionsVolume::SendVolume' has a wrong offset!");

// Function AkAudio.AKComponent.SetGameObjectRadius
// 0x0008 (0x0008 - 0x0000)
struct AKComponent_SetGameObjectRadius final
{
public:
	float                                         in_outerRadius;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         in_innerRadius;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetGameObjectRadius) == 0x000004, "Wrong alignment on AKComponent_SetGameObjectRadius");
static_assert(sizeof(AKComponent_SetGameObjectRadius) == 0x000008, "Wrong size on AKComponent_SetGameObjectRadius");
static_assert(offsetof(AKComponent_SetGameObjectRadius, in_outerRadius) == 0x000000, "Member 'AKComponent_SetGameObjectRadius::in_outerRadius' has a wrong offset!");
static_assert(offsetof(AKComponent_SetGameObjectRadius, in_innerRadius) == 0x000004, "Member 'AKComponent_SetGameObjectRadius::in_innerRadius' has a wrong offset!");

// Function AkAudio.AKComponent.SetListeners
// 0x0010 (0x0010 - 0x0000)
struct AKComponent_SetListeners final
{
public:
	TArray<class UAKComponent*>                   Listeners;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetListeners) == 0x000008, "Wrong alignment on AKComponent_SetListeners");
static_assert(sizeof(AKComponent_SetListeners) == 0x000010, "Wrong size on AKComponent_SetListeners");
static_assert(offsetof(AKComponent_SetListeners, Listeners) == 0x000000, "Member 'AKComponent_SetListeners::Listeners' has a wrong offset!");

// Function AkAudio.AKComponent.SetOutputBusVolume
// 0x0004 (0x0004 - 0x0000)
struct AKComponent_SetOutputBusVolume final
{
public:
	float                                         BusVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetOutputBusVolume) == 0x000004, "Wrong alignment on AKComponent_SetOutputBusVolume");
static_assert(sizeof(AKComponent_SetOutputBusVolume) == 0x000004, "Wrong size on AKComponent_SetOutputBusVolume");
static_assert(offsetof(AKComponent_SetOutputBusVolume, BusVolume) == 0x000000, "Member 'AKComponent_SetOutputBusVolume::BusVolume' has a wrong offset!");

// Function AkAudio.AKComponent.SetStopWhenOwnerDestroyed
// 0x0001 (0x0001 - 0x0000)
struct AKComponent_SetStopWhenOwnerDestroyed final
{
public:
	bool                                          bStopWhenOwnerDestroyed;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetStopWhenOwnerDestroyed) == 0x000001, "Wrong alignment on AKComponent_SetStopWhenOwnerDestroyed");
static_assert(sizeof(AKComponent_SetStopWhenOwnerDestroyed) == 0x000001, "Wrong size on AKComponent_SetStopWhenOwnerDestroyed");
static_assert(offsetof(AKComponent_SetStopWhenOwnerDestroyed, bStopWhenOwnerDestroyed) == 0x000000, "Member 'AKComponent_SetStopWhenOwnerDestroyed::bStopWhenOwnerDestroyed' has a wrong offset!");

// Function AkAudio.AKComponent.SetSwitch
// 0x0028 (0x0028 - 0x0000)
struct AKComponent_SetSwitch final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchGroup;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_SetSwitch) == 0x000008, "Wrong alignment on AKComponent_SetSwitch");
static_assert(sizeof(AKComponent_SetSwitch) == 0x000028, "Wrong size on AKComponent_SetSwitch");
static_assert(offsetof(AKComponent_SetSwitch, SwitchValue) == 0x000000, "Member 'AKComponent_SetSwitch::SwitchValue' has a wrong offset!");
static_assert(offsetof(AKComponent_SetSwitch, SwitchGroup) == 0x000008, "Member 'AKComponent_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AKComponent_SetSwitch, SwitchState) == 0x000018, "Member 'AKComponent_SetSwitch::SwitchState' has a wrong offset!");

// Function AkAudio.AKComponent.UseEarlyReflections
// 0x0028 (0x0028 - 0x0000)
struct AKComponent_UseEarlyReflections final
{
public:
	class UAkAuxBus*                              AuxBus;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BusSendGain;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPathLength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpotReflectors;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuxBusName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_UseEarlyReflections) == 0x000008, "Wrong alignment on AKComponent_UseEarlyReflections");
static_assert(sizeof(AKComponent_UseEarlyReflections) == 0x000028, "Wrong size on AKComponent_UseEarlyReflections");
static_assert(offsetof(AKComponent_UseEarlyReflections, AuxBus) == 0x000000, "Member 'AKComponent_UseEarlyReflections::AuxBus' has a wrong offset!");
static_assert(offsetof(AKComponent_UseEarlyReflections, Order) == 0x000008, "Member 'AKComponent_UseEarlyReflections::Order' has a wrong offset!");
static_assert(offsetof(AKComponent_UseEarlyReflections, BusSendGain) == 0x00000C, "Member 'AKComponent_UseEarlyReflections::BusSendGain' has a wrong offset!");
static_assert(offsetof(AKComponent_UseEarlyReflections, MaxPathLength) == 0x000010, "Member 'AKComponent_UseEarlyReflections::MaxPathLength' has a wrong offset!");
static_assert(offsetof(AKComponent_UseEarlyReflections, SpotReflectors) == 0x000014, "Member 'AKComponent_UseEarlyReflections::SpotReflectors' has a wrong offset!");
static_assert(offsetof(AKComponent_UseEarlyReflections, AuxBusName) == 0x000018, "Member 'AKComponent_UseEarlyReflections::AuxBusName' has a wrong offset!");

// Function AkAudio.AKComponent.UseReverbVolumes
// 0x0001 (0x0001 - 0x0000)
struct AKComponent_UseReverbVolumes final
{
public:
	bool                                          inUseReverbVolumes;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_UseReverbVolumes) == 0x000001, "Wrong alignment on AKComponent_UseReverbVolumes");
static_assert(sizeof(AKComponent_UseReverbVolumes) == 0x000001, "Wrong size on AKComponent_UseReverbVolumes");
static_assert(offsetof(AKComponent_UseReverbVolumes, inUseReverbVolumes) == 0x000000, "Member 'AKComponent_UseReverbVolumes::inUseReverbVolumes' has a wrong offset!");

// Function AkAudio.AKComponent.GetAttenuationRadius
// 0x0004 (0x0004 - 0x0000)
struct AKComponent_GetAttenuationRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AKComponent_GetAttenuationRadius) == 0x000004, "Wrong alignment on AKComponent_GetAttenuationRadius");
static_assert(sizeof(AKComponent_GetAttenuationRadius) == 0x000004, "Wrong size on AKComponent_GetAttenuationRadius");
static_assert(offsetof(AKComponent_GetAttenuationRadius, ReturnValue) == 0x000000, "Member 'AKComponent_GetAttenuationRadius::ReturnValue' has a wrong offset!");

// Function AkAudio.AkAudioInputComponent.PostAssociatedAudioInputEvent
// 0x0004 (0x0004 - 0x0000)
struct AkAudioInputComponent_PostAssociatedAudioInputEvent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAudioInputComponent_PostAssociatedAudioInputEvent) == 0x000004, "Wrong alignment on AkAudioInputComponent_PostAssociatedAudioInputEvent");
static_assert(sizeof(AkAudioInputComponent_PostAssociatedAudioInputEvent) == 0x000004, "Wrong size on AkAudioInputComponent_PostAssociatedAudioInputEvent");
static_assert(offsetof(AkAudioInputComponent_PostAssociatedAudioInputEvent, ReturnValue) == 0x000000, "Member 'AkAudioInputComponent_PostAssociatedAudioInputEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkCheckBox.SetAkBoolProperty
// 0x0010 (0x0010 - 0x0000)
struct AkCheckBox_SetAkBoolProperty final
{
public:
	class FString                                 ItemProperty;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_SetAkBoolProperty) == 0x000008, "Wrong alignment on AkCheckBox_SetAkBoolProperty");
static_assert(sizeof(AkCheckBox_SetAkBoolProperty) == 0x000010, "Wrong size on AkCheckBox_SetAkBoolProperty");
static_assert(offsetof(AkCheckBox_SetAkBoolProperty, ItemProperty) == 0x000000, "Member 'AkCheckBox_SetAkBoolProperty::ItemProperty' has a wrong offset!");

// Function AkAudio.AkCheckBox.SetAkItemId
// 0x0010 (0x0010 - 0x0000)
struct AkCheckBox_SetAkItemId final
{
public:
	struct FGuid                                  ItemID;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_SetAkItemId) == 0x000004, "Wrong alignment on AkCheckBox_SetAkItemId");
static_assert(sizeof(AkCheckBox_SetAkItemId) == 0x000010, "Wrong size on AkCheckBox_SetAkItemId");
static_assert(offsetof(AkCheckBox_SetAkItemId, ItemID) == 0x000000, "Member 'AkCheckBox_SetAkItemId::ItemID' has a wrong offset!");

// Function AkAudio.AkCheckBox.SetCheckedState
// 0x0001 (0x0001 - 0x0000)
struct AkCheckBox_SetCheckedState final
{
public:
	ECheckBoxState                                InCheckedState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_SetCheckedState) == 0x000001, "Wrong alignment on AkCheckBox_SetCheckedState");
static_assert(sizeof(AkCheckBox_SetCheckedState) == 0x000001, "Wrong size on AkCheckBox_SetCheckedState");
static_assert(offsetof(AkCheckBox_SetCheckedState, InCheckedState) == 0x000000, "Member 'AkCheckBox_SetCheckedState::InCheckedState' has a wrong offset!");

// Function AkAudio.AkCheckBox.SetIsChecked
// 0x0001 (0x0001 - 0x0000)
struct AkCheckBox_SetIsChecked final
{
public:
	bool                                          InIsChecked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_SetIsChecked) == 0x000001, "Wrong alignment on AkCheckBox_SetIsChecked");
static_assert(sizeof(AkCheckBox_SetIsChecked) == 0x000001, "Wrong size on AkCheckBox_SetIsChecked");
static_assert(offsetof(AkCheckBox_SetIsChecked, InIsChecked) == 0x000000, "Member 'AkCheckBox_SetIsChecked::InIsChecked' has a wrong offset!");

// Function AkAudio.AkCheckBox.GetAkItemId
// 0x0010 (0x0010 - 0x0000)
struct AkCheckBox_GetAkItemId final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_GetAkItemId) == 0x000004, "Wrong alignment on AkCheckBox_GetAkItemId");
static_assert(sizeof(AkCheckBox_GetAkItemId) == 0x000010, "Wrong size on AkCheckBox_GetAkItemId");
static_assert(offsetof(AkCheckBox_GetAkItemId, ReturnValue) == 0x000000, "Member 'AkCheckBox_GetAkItemId::ReturnValue' has a wrong offset!");

// Function AkAudio.AkCheckBox.GetAkProperty
// 0x0010 (0x0010 - 0x0000)
struct AkCheckBox_GetAkProperty final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_GetAkProperty) == 0x000008, "Wrong alignment on AkCheckBox_GetAkProperty");
static_assert(sizeof(AkCheckBox_GetAkProperty) == 0x000010, "Wrong size on AkCheckBox_GetAkProperty");
static_assert(offsetof(AkCheckBox_GetAkProperty, ReturnValue) == 0x000000, "Member 'AkCheckBox_GetAkProperty::ReturnValue' has a wrong offset!");

// Function AkAudio.AkCheckBox.GetCheckedState
// 0x0001 (0x0001 - 0x0000)
struct AkCheckBox_GetCheckedState final
{
public:
	ECheckBoxState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_GetCheckedState) == 0x000001, "Wrong alignment on AkCheckBox_GetCheckedState");
static_assert(sizeof(AkCheckBox_GetCheckedState) == 0x000001, "Wrong size on AkCheckBox_GetCheckedState");
static_assert(offsetof(AkCheckBox_GetCheckedState, ReturnValue) == 0x000000, "Member 'AkCheckBox_GetCheckedState::ReturnValue' has a wrong offset!");

// Function AkAudio.AkCheckBox.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct AkCheckBox_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_IsChecked) == 0x000001, "Wrong alignment on AkCheckBox_IsChecked");
static_assert(sizeof(AkCheckBox_IsChecked) == 0x000001, "Wrong size on AkCheckBox_IsChecked");
static_assert(offsetof(AkCheckBox_IsChecked, ReturnValue) == 0x000000, "Member 'AkCheckBox_IsChecked::ReturnValue' has a wrong offset!");

// Function AkAudio.AkCheckBox.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct AkCheckBox_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkCheckBox_IsPressed) == 0x000001, "Wrong alignment on AkCheckBox_IsPressed");
static_assert(sizeof(AkCheckBox_IsPressed) == 0x000001, "Wrong size on AkCheckBox_IsPressed");
static_assert(offsetof(AkCheckBox_IsPressed, ReturnValue) == 0x000000, "Member 'AkCheckBox_IsPressed::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.AddOutputCaptureMarker
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_AddOutputCaptureMarker final
{
public:
	class FString                                 MarkerText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_AddOutputCaptureMarker) == 0x000008, "Wrong alignment on AkGameplayStatics_AddOutputCaptureMarker");
static_assert(sizeof(AkGameplayStatics_AddOutputCaptureMarker) == 0x000010, "Wrong size on AkGameplayStatics_AddOutputCaptureMarker");
static_assert(offsetof(AkGameplayStatics_AddOutputCaptureMarker, MarkerText) == 0x000000, "Member 'AkGameplayStatics_AddOutputCaptureMarker::MarkerText' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ApplyDopplerEffectDatas
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_ApplyDopplerEffectDatas final
{
public:
	class AActor*                                 SoundingObj;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ListeningObjPos;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddDopplerIntensity;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinusDopplerIntensity;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_ApplyDopplerEffectDatas) == 0x000008, "Wrong alignment on AkGameplayStatics_ApplyDopplerEffectDatas");
static_assert(sizeof(AkGameplayStatics_ApplyDopplerEffectDatas) == 0x000020, "Wrong size on AkGameplayStatics_ApplyDopplerEffectDatas");
static_assert(offsetof(AkGameplayStatics_ApplyDopplerEffectDatas, SoundingObj) == 0x000000, "Member 'AkGameplayStatics_ApplyDopplerEffectDatas::SoundingObj' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ApplyDopplerEffectDatas, ListeningObjPos) == 0x000008, "Member 'AkGameplayStatics_ApplyDopplerEffectDatas::ListeningObjPos' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ApplyDopplerEffectDatas, AddDopplerIntensity) == 0x000014, "Member 'AkGameplayStatics_ApplyDopplerEffectDatas::AddDopplerIntensity' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ApplyDopplerEffectDatas, MinusDopplerIntensity) == 0x000018, "Member 'AkGameplayStatics_ApplyDopplerEffectDatas::MinusDopplerIntensity' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ApplyDopplerEffectDatas, DeltaTime) == 0x00001C, "Member 'AkGameplayStatics_ApplyDopplerEffectDatas::DeltaTime' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.CancelEventCallback
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_CancelEventCallback final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_CancelEventCallback) == 0x000004, "Wrong alignment on AkGameplayStatics_CancelEventCallback");
static_assert(sizeof(AkGameplayStatics_CancelEventCallback) == 0x000010, "Wrong size on AkGameplayStatics_CancelEventCallback");
static_assert(offsetof(AkGameplayStatics_CancelEventCallback, PostEventCallback) == 0x000000, "Member 'AkGameplayStatics_CancelEventCallback::PostEventCallback' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ClearDopplerEffectDatas
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_ClearDopplerEffectDatas final
{
public:
	class AActor*                                 SoundingObj;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_ClearDopplerEffectDatas) == 0x000008, "Wrong alignment on AkGameplayStatics_ClearDopplerEffectDatas");
static_assert(sizeof(AkGameplayStatics_ClearDopplerEffectDatas) == 0x000008, "Wrong size on AkGameplayStatics_ClearDopplerEffectDatas");
static_assert(offsetof(AkGameplayStatics_ClearDopplerEffectDatas, SoundingObj) == 0x000000, "Member 'AkGameplayStatics_ClearDopplerEffectDatas::SoundingObj' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ExecuteActionOnEvent
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_ExecuteActionOnEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkActionOnEventType                          ActionType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionDuration;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkCurveInterpolation                         FadeCurve;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayingID;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_ExecuteActionOnEvent) == 0x000008, "Wrong alignment on AkGameplayStatics_ExecuteActionOnEvent");
static_assert(sizeof(AkGameplayStatics_ExecuteActionOnEvent) == 0x000028, "Wrong size on AkGameplayStatics_ExecuteActionOnEvent");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_ExecuteActionOnEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, ActionType) == 0x000008, "Member 'AkGameplayStatics_ExecuteActionOnEvent::ActionType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, Actor) == 0x000010, "Member 'AkGameplayStatics_ExecuteActionOnEvent::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, TransitionDuration) == 0x000018, "Member 'AkGameplayStatics_ExecuteActionOnEvent::TransitionDuration' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, FadeCurve) == 0x00001C, "Member 'AkGameplayStatics_ExecuteActionOnEvent::FadeCurve' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnEvent, PlayingID) == 0x000020, "Member 'AkGameplayStatics_ExecuteActionOnEvent::PlayingID' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ExecuteActionOnPlayingID
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_ExecuteActionOnPlayingID final
{
public:
	EAkActionOnEventType                          ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayingID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionDuration;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkCurveInterpolation                         FadeCurve;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_ExecuteActionOnPlayingID) == 0x000004, "Wrong alignment on AkGameplayStatics_ExecuteActionOnPlayingID");
static_assert(sizeof(AkGameplayStatics_ExecuteActionOnPlayingID) == 0x000010, "Wrong size on AkGameplayStatics_ExecuteActionOnPlayingID");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnPlayingID, ActionType) == 0x000000, "Member 'AkGameplayStatics_ExecuteActionOnPlayingID::ActionType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnPlayingID, PlayingID) == 0x000004, "Member 'AkGameplayStatics_ExecuteActionOnPlayingID::PlayingID' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnPlayingID, TransitionDuration) == 0x000008, "Member 'AkGameplayStatics_ExecuteActionOnPlayingID::TransitionDuration' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ExecuteActionOnPlayingID, FadeCurve) == 0x00000C, "Member 'AkGameplayStatics_ExecuteActionOnPlayingID::FadeCurve' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetAkAudioTypeUserData
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_GetAkAudioTypeUserData final
{
public:
	const class UAkAudioType*                     Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UClass*                           Type;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetAkAudioTypeUserData) == 0x000008, "Wrong alignment on AkGameplayStatics_GetAkAudioTypeUserData");
static_assert(sizeof(AkGameplayStatics_GetAkAudioTypeUserData) == 0x000018, "Wrong size on AkGameplayStatics_GetAkAudioTypeUserData");
static_assert(offsetof(AkGameplayStatics_GetAkAudioTypeUserData, Instance) == 0x000000, "Member 'AkGameplayStatics_GetAkAudioTypeUserData::Instance' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkAudioTypeUserData, Type) == 0x000008, "Member 'AkGameplayStatics_GetAkAudioTypeUserData::Type' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkAudioTypeUserData, ReturnValue) == 0x000010, "Member 'AkGameplayStatics_GetAkAudioTypeUserData::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetAkComponent
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_GetAkComponent final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComponentCreated;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAKComponent*                           ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetAkComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_GetAkComponent");
static_assert(sizeof(AkGameplayStatics_GetAkComponent) == 0x000030, "Wrong size on AkGameplayStatics_GetAkComponent");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, AttachToComponent) == 0x000000, "Member 'AkGameplayStatics_GetAkComponent::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, ComponentCreated) == 0x000008, "Member 'AkGameplayStatics_GetAkComponent::ComponentCreated' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, AttachPointName) == 0x00000C, "Member 'AkGameplayStatics_GetAkComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, Location) == 0x000014, "Member 'AkGameplayStatics_GetAkComponent::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, LocationType) == 0x000020, "Member 'AkGameplayStatics_GetAkComponent::LocationType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, ReturnValue) == 0x000028, "Member 'AkGameplayStatics_GetAkComponent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetAkMediaAssetUserData
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_GetAkMediaAssetUserData final
{
public:
	const class UAkMediaAsset*                    Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UClass*                           Type;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetAkMediaAssetUserData) == 0x000008, "Wrong alignment on AkGameplayStatics_GetAkMediaAssetUserData");
static_assert(sizeof(AkGameplayStatics_GetAkMediaAssetUserData) == 0x000018, "Wrong size on AkGameplayStatics_GetAkMediaAssetUserData");
static_assert(offsetof(AkGameplayStatics_GetAkMediaAssetUserData, Instance) == 0x000000, "Member 'AkGameplayStatics_GetAkMediaAssetUserData::Instance' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkMediaAssetUserData, Type) == 0x000008, "Member 'AkGameplayStatics_GetAkMediaAssetUserData::Type' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkMediaAssetUserData, ReturnValue) == 0x000010, "Member 'AkGameplayStatics_GetAkMediaAssetUserData::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetAvailableAudioCultures
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_GetAvailableAudioCultures final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetAvailableAudioCultures) == 0x000008, "Wrong alignment on AkGameplayStatics_GetAvailableAudioCultures");
static_assert(sizeof(AkGameplayStatics_GetAvailableAudioCultures) == 0x000010, "Wrong size on AkGameplayStatics_GetAvailableAudioCultures");
static_assert(offsetof(AkGameplayStatics_GetAvailableAudioCultures, ReturnValue) == 0x000000, "Member 'AkGameplayStatics_GetAvailableAudioCultures::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetCurrentAudioCulture
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_GetCurrentAudioCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetCurrentAudioCulture) == 0x000008, "Wrong alignment on AkGameplayStatics_GetCurrentAudioCulture");
static_assert(sizeof(AkGameplayStatics_GetCurrentAudioCulture) == 0x000010, "Wrong size on AkGameplayStatics_GetCurrentAudioCulture");
static_assert(offsetof(AkGameplayStatics_GetCurrentAudioCulture, ReturnValue) == 0x000000, "Member 'AkGameplayStatics_GetCurrentAudioCulture::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetDopplerEffectDatas
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_GetDopplerEffectDatas final
{
public:
	class AActor*                                 SoundingObj;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SoundingObjPos;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ListeningObjPos;                                   // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddDopplerIntensity;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinusDopplerIntensity;                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetDopplerEffectDatas) == 0x000008, "Wrong alignment on AkGameplayStatics_GetDopplerEffectDatas");
static_assert(sizeof(AkGameplayStatics_GetDopplerEffectDatas) == 0x000030, "Wrong size on AkGameplayStatics_GetDopplerEffectDatas");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, SoundingObj) == 0x000000, "Member 'AkGameplayStatics_GetDopplerEffectDatas::SoundingObj' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, SoundingObjPos) == 0x000008, "Member 'AkGameplayStatics_GetDopplerEffectDatas::SoundingObjPos' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, ListeningObjPos) == 0x000014, "Member 'AkGameplayStatics_GetDopplerEffectDatas::ListeningObjPos' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, AddDopplerIntensity) == 0x000020, "Member 'AkGameplayStatics_GetDopplerEffectDatas::AddDopplerIntensity' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, MinusDopplerIntensity) == 0x000024, "Member 'AkGameplayStatics_GetDopplerEffectDatas::MinusDopplerIntensity' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, DeltaTime) == 0x000028, "Member 'AkGameplayStatics_GetDopplerEffectDatas::DeltaTime' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetDopplerEffectDatas, ReturnValue) == 0x00002C, "Member 'AkGameplayStatics_GetDopplerEffectDatas::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetOcclusionScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct AkGameplayStatics_GetOcclusionScalingFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetOcclusionScalingFactor) == 0x000004, "Wrong alignment on AkGameplayStatics_GetOcclusionScalingFactor");
static_assert(sizeof(AkGameplayStatics_GetOcclusionScalingFactor) == 0x000004, "Wrong size on AkGameplayStatics_GetOcclusionScalingFactor");
static_assert(offsetof(AkGameplayStatics_GetOcclusionScalingFactor, ReturnValue) == 0x000000, "Member 'AkGameplayStatics_GetOcclusionScalingFactor::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetRTPCValue
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_GetRTPCValue final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTPCValueType                                InputValueType;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTPCValueType                                OutputValueType;                                   // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RTPC;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetRTPCValue) == 0x000008, "Wrong alignment on AkGameplayStatics_GetRTPCValue");
static_assert(sizeof(AkGameplayStatics_GetRTPCValue) == 0x000028, "Wrong size on AkGameplayStatics_GetRTPCValue");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, RTPCValue) == 0x000000, "Member 'AkGameplayStatics_GetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, PlayingID) == 0x000008, "Member 'AkGameplayStatics_GetRTPCValue::PlayingID' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, InputValueType) == 0x00000C, "Member 'AkGameplayStatics_GetRTPCValue::InputValueType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, Value) == 0x000010, "Member 'AkGameplayStatics_GetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, OutputValueType) == 0x000014, "Member 'AkGameplayStatics_GetRTPCValue::OutputValueType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, Actor) == 0x000018, "Member 'AkGameplayStatics_GetRTPCValue::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetRTPCValue, RTPC) == 0x000020, "Member 'AkGameplayStatics_GetRTPCValue::RTPC' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetSpeakerAngles
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_GetSpeakerAngles final
{
public:
	TArray<float>                                 SpeakerAngles;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAngle;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceShareset;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetSpeakerAngles) == 0x000008, "Wrong alignment on AkGameplayStatics_GetSpeakerAngles");
static_assert(sizeof(AkGameplayStatics_GetSpeakerAngles) == 0x000028, "Wrong size on AkGameplayStatics_GetSpeakerAngles");
static_assert(offsetof(AkGameplayStatics_GetSpeakerAngles, SpeakerAngles) == 0x000000, "Member 'AkGameplayStatics_GetSpeakerAngles::SpeakerAngles' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetSpeakerAngles, HeightAngle) == 0x000010, "Member 'AkGameplayStatics_GetSpeakerAngles::HeightAngle' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetSpeakerAngles, DeviceShareset) == 0x000018, "Member 'AkGameplayStatics_GetSpeakerAngles::DeviceShareset' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct AkGameplayStatics_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_IsEditor) == 0x000001, "Wrong alignment on AkGameplayStatics_IsEditor");
static_assert(sizeof(AkGameplayStatics_IsEditor) == 0x000001, "Wrong size on AkGameplayStatics_IsEditor");
static_assert(offsetof(AkGameplayStatics_IsEditor, ReturnValue) == 0x000000, "Member 'AkGameplayStatics_IsEditor::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.IsGame
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_IsGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_IsGame) == 0x000008, "Wrong alignment on AkGameplayStatics_IsGame");
static_assert(sizeof(AkGameplayStatics_IsGame) == 0x000010, "Wrong size on AkGameplayStatics_IsGame");
static_assert(offsetof(AkGameplayStatics_IsGame, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_IsGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_IsGame, ReturnValue) == 0x000008, "Member 'AkGameplayStatics_IsGame::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBank
// 0x0038 (0x0038 - 0x0000)
struct AkGameplayStatics_LoadBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BankName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBank) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBank");
static_assert(sizeof(AkGameplayStatics_LoadBank) == 0x000038, "Wrong size on AkGameplayStatics_LoadBank");
static_assert(offsetof(AkGameplayStatics_LoadBank, Bank) == 0x000000, "Member 'AkGameplayStatics_LoadBank::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBank, BankName) == 0x000008, "Member 'AkGameplayStatics_LoadBank::BankName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBank, LatentInfo) == 0x000018, "Member 'AkGameplayStatics_LoadBank::LatentInfo' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBank, WorldContextObject) == 0x000030, "Member 'AkGameplayStatics_LoadBank::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBankAsync
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_LoadBankAsync final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> BankLoadedCallback;                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBankAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBankAsync");
static_assert(sizeof(AkGameplayStatics_LoadBankAsync) == 0x000018, "Wrong size on AkGameplayStatics_LoadBankAsync");
static_assert(offsetof(AkGameplayStatics_LoadBankAsync, Bank) == 0x000000, "Member 'AkGameplayStatics_LoadBankAsync::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBankAsync, BankLoadedCallback) == 0x000008, "Member 'AkGameplayStatics_LoadBankAsync::BankLoadedCallback' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_LoadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBankByName) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBankByName");
static_assert(sizeof(AkGameplayStatics_LoadBankByName) == 0x000010, "Wrong size on AkGameplayStatics_LoadBankByName");
static_assert(offsetof(AkGameplayStatics_LoadBankByName, BankName) == 0x000000, "Member 'AkGameplayStatics_LoadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBankByNameAsync
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_LoadBankByNameAsync final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> BankLoadedCallback;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBankByNameAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBankByNameAsync");
static_assert(sizeof(AkGameplayStatics_LoadBankByNameAsync) == 0x000020, "Wrong size on AkGameplayStatics_LoadBankByNameAsync");
static_assert(offsetof(AkGameplayStatics_LoadBankByNameAsync, BankName) == 0x000000, "Member 'AkGameplayStatics_LoadBankByNameAsync::BankName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBankByNameAsync, BankLoadedCallback) == 0x000010, "Member 'AkGameplayStatics_LoadBankByNameAsync::BankLoadedCallback' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBanks
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_LoadBanks final
{
public:
	TArray<class UAkAudioBank*>                   SoundBanks;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SynchronizeSoundBanks;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_LoadBanks) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBanks");
static_assert(sizeof(AkGameplayStatics_LoadBanks) == 0x000018, "Wrong size on AkGameplayStatics_LoadBanks");
static_assert(offsetof(AkGameplayStatics_LoadBanks, SoundBanks) == 0x000000, "Member 'AkGameplayStatics_LoadBanks::SoundBanks' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBanks, SynchronizeSoundBanks) == 0x000010, "Member 'AkGameplayStatics_LoadBanks::SynchronizeSoundBanks' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySound
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_PlaySound final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySound) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySound");
static_assert(sizeof(AkGameplayStatics_PlaySound) == 0x000018, "Wrong size on AkGameplayStatics_PlaySound");
static_assert(offsetof(AkGameplayStatics_PlaySound, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PlaySound::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound, Actor) == 0x000008, "Member 'AkGameplayStatics_PlaySound::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound, bStopWhenAttachedToDestroyed) == 0x000010, "Member 'AkGameplayStatics_PlaySound::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound, ReturnValue) == 0x000014, "Member 'AkGameplayStatics_PlaySound::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySound2D
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_PlaySound2D final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySound2D) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySound2D");
static_assert(sizeof(AkGameplayStatics_PlaySound2D) == 0x000010, "Wrong size on AkGameplayStatics_PlaySound2D");
static_assert(offsetof(AkGameplayStatics_PlaySound2D, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PlaySound2D::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound2D, bStopWhenAttachedToDestroyed) == 0x000008, "Member 'AkGameplayStatics_PlaySound2D::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound2D, ReturnValue) == 0x00000C, "Member 'AkGameplayStatics_PlaySound2D::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySound2Dbyname
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_PlaySound2Dbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySound2Dbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySound2Dbyname");
static_assert(sizeof(AkGameplayStatics_PlaySound2Dbyname) == 0x000018, "Wrong size on AkGameplayStatics_PlaySound2Dbyname");
static_assert(offsetof(AkGameplayStatics_PlaySound2Dbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_PlaySound2Dbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound2Dbyname, bStopWhenAttachedToDestroyed) == 0x000010, "Member 'AkGameplayStatics_PlaySound2Dbyname::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySound2Dbyname, ReturnValue) == 0x000014, "Member 'AkGameplayStatics_PlaySound2Dbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySoundAtLocation
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_PlaySoundAtLocation final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySoundAtLocation");
static_assert(sizeof(AkGameplayStatics_PlaySoundAtLocation) == 0x000030, "Wrong size on AkGameplayStatics_PlaySoundAtLocation");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocation, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PlaySoundAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocation, Location) == 0x000008, "Member 'AkGameplayStatics_PlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocation, Orientation) == 0x000014, "Member 'AkGameplayStatics_PlaySoundAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocation, WorldContextObject) == 0x000020, "Member 'AkGameplayStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocation, ReturnValue) == 0x000028, "Member 'AkGameplayStatics_PlaySoundAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySoundAtLocationbyname
// 0x0038 (0x0038 - 0x0000)
struct AkGameplayStatics_PlaySoundAtLocationbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PlaySoundAtLocationbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySoundAtLocationbyname");
static_assert(sizeof(AkGameplayStatics_PlaySoundAtLocationbyname) == 0x000038, "Wrong size on AkGameplayStatics_PlaySoundAtLocationbyname");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocationbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_PlaySoundAtLocationbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocationbyname, Location) == 0x000010, "Member 'AkGameplayStatics_PlaySoundAtLocationbyname::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocationbyname, Orientation) == 0x00001C, "Member 'AkGameplayStatics_PlaySoundAtLocationbyname::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocationbyname, WorldContextObject) == 0x000028, "Member 'AkGameplayStatics_PlaySoundAtLocationbyname::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundAtLocationbyname, ReturnValue) == 0x000030, "Member 'AkGameplayStatics_PlaySoundAtLocationbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySoundbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_PlaySoundbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySoundbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySoundbyname");
static_assert(sizeof(AkGameplayStatics_PlaySoundbyname) == 0x000020, "Wrong size on AkGameplayStatics_PlaySoundbyname");
static_assert(offsetof(AkGameplayStatics_PlaySoundbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_PlaySoundbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundbyname, Actor) == 0x000010, "Member 'AkGameplayStatics_PlaySoundbyname::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundbyname, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PlaySoundbyname::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundbyname, ReturnValue) == 0x00001C, "Member 'AkGameplayStatics_PlaySoundbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySoundToComponent
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_PlaySoundToComponent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySoundToComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySoundToComponent");
static_assert(sizeof(AkGameplayStatics_PlaySoundToComponent) == 0x000018, "Wrong size on AkGameplayStatics_PlaySoundToComponent");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PlaySoundToComponent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponent, Component) == 0x000008, "Member 'AkGameplayStatics_PlaySoundToComponent::Component' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponent, bStopWhenAttachedToDestroyed) == 0x000010, "Member 'AkGameplayStatics_PlaySoundToComponent::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponent, ReturnValue) == 0x000014, "Member 'AkGameplayStatics_PlaySoundToComponent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PlaySoundToComponentbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_PlaySoundToComponentbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PlaySoundToComponentbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_PlaySoundToComponentbyname");
static_assert(sizeof(AkGameplayStatics_PlaySoundToComponentbyname) == 0x000020, "Wrong size on AkGameplayStatics_PlaySoundToComponentbyname");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponentbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_PlaySoundToComponentbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponentbyname, Component) == 0x000010, "Member 'AkGameplayStatics_PlaySoundToComponentbyname::Component' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponentbyname, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PlaySoundToComponentbyname::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PlaySoundToComponentbyname, ReturnValue) == 0x00001C, "Member 'AkGameplayStatics_PlaySoundToComponentbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostAndWaitForEndOfEvent
// 0x0058 (0x0058 - 0x0000)
struct AkGameplayStatics_PostAndWaitForEndOfEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostAndWaitForEndOfEvent) == 0x000008, "Wrong alignment on AkGameplayStatics_PostAndWaitForEndOfEvent");
static_assert(sizeof(AkGameplayStatics_PostAndWaitForEndOfEvent) == 0x000058, "Wrong size on AkGameplayStatics_PostAndWaitForEndOfEvent");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, Actor) == 0x000008, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, bStopWhenAttachedToDestroyed) == 0x000010, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, ExternalSources) == 0x000018, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, EventName) == 0x000028, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, LatentInfo) == 0x000038, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::LatentInfo' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEvent, ReturnValue) == 0x000050, "Member 'AkGameplayStatics_PostAndWaitForEndOfEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostAndWaitForEndOfEventAsync
// 0x0040 (0x0040 - 0x0000)
struct AkGameplayStatics_PostAndWaitForEndOfEventAsync final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PostAndWaitForEndOfEventAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_PostAndWaitForEndOfEventAsync");
static_assert(sizeof(AkGameplayStatics_PostAndWaitForEndOfEventAsync) == 0x000040, "Wrong size on AkGameplayStatics_PostAndWaitForEndOfEventAsync");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, Actor) == 0x000008, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, PlayingID) == 0x000010, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, bStopWhenAttachedToDestroyed) == 0x000014, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, ExternalSources) == 0x000018, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostAndWaitForEndOfEventAsync, LatentInfo) == 0x000028, "Member 'AkGameplayStatics_PostAndWaitForEndOfEventAsync::LatentInfo' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEvent
// 0x0058 (0x0058 - 0x0000)
struct AkGameplayStatics_PostEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEvent) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEvent");
static_assert(sizeof(AkGameplayStatics_PostEvent) == 0x000058, "Wrong size on AkGameplayStatics_PostEvent");
static_assert(offsetof(AkGameplayStatics_PostEvent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, Actor) == 0x000008, "Member 'AkGameplayStatics_PostEvent::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, CallbackMask) == 0x000010, "Member 'AkGameplayStatics_PostEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, PostEventCallback) == 0x000014, "Member 'AkGameplayStatics_PostEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, ExternalSources) == 0x000028, "Member 'AkGameplayStatics_PostEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, bStopWhenAttachedToDestroyed) == 0x000038, "Member 'AkGameplayStatics_PostEvent::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, EventName) == 0x000040, "Member 'AkGameplayStatics_PostEvent::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, ReturnValue) == 0x000050, "Member 'AkGameplayStatics_PostEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAtLocation
// 0x0040 (0x0040 - 0x0000)
struct AkGameplayStatics_PostEventAtLocation final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventAtLocation) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAtLocation");
static_assert(sizeof(AkGameplayStatics_PostEventAtLocation) == 0x000040, "Wrong size on AkGameplayStatics_PostEventAtLocation");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEventAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, Location) == 0x000008, "Member 'AkGameplayStatics_PostEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, Orientation) == 0x000014, "Member 'AkGameplayStatics_PostEventAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, EventName) == 0x000020, "Member 'AkGameplayStatics_PostEventAtLocation::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, WorldContextObject) == 0x000030, "Member 'AkGameplayStatics_PostEventAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, ReturnValue) == 0x000038, "Member 'AkGameplayStatics_PostEventAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAtLocationByName
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_PostEventAtLocationByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PostEventAtLocationByName) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAtLocationByName");
static_assert(sizeof(AkGameplayStatics_PostEventAtLocationByName) == 0x000030, "Wrong size on AkGameplayStatics_PostEventAtLocationByName");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, EventName) == 0x000000, "Member 'AkGameplayStatics_PostEventAtLocationByName::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, Location) == 0x000010, "Member 'AkGameplayStatics_PostEventAtLocationByName::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, Orientation) == 0x00001C, "Member 'AkGameplayStatics_PostEventAtLocationByName::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, WorldContextObject) == 0x000028, "Member 'AkGameplayStatics_PostEventAtLocationByName::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAttached
// 0x0038 (0x0038 - 0x0000)
struct AkGameplayStatics_PostEventAttached final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventAttached) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAttached");
static_assert(sizeof(AkGameplayStatics_PostEventAttached) == 0x000038, "Wrong size on AkGameplayStatics_PostEventAttached");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEventAttached::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, Actor) == 0x000008, "Member 'AkGameplayStatics_PostEventAttached::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, AttachPointName) == 0x000010, "Member 'AkGameplayStatics_PostEventAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PostEventAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, EventName) == 0x000020, "Member 'AkGameplayStatics_PostEventAttached::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, ReturnValue) == 0x000030, "Member 'AkGameplayStatics_PostEventAttached::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventByName
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_PostEventByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventByName) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventByName");
static_assert(sizeof(AkGameplayStatics_PostEventByName) == 0x000020, "Wrong size on AkGameplayStatics_PostEventByName");
static_assert(offsetof(AkGameplayStatics_PostEventByName, EventName) == 0x000000, "Member 'AkGameplayStatics_PostEventByName::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventByName, Actor) == 0x000010, "Member 'AkGameplayStatics_PostEventByName::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventByName, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PostEventByName::bStopWhenAttachedToDestroyed' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostTrigger
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_PostTrigger final
{
public:
	class UAkTrigger*                             TriggerValue;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Trigger;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PostTrigger) == 0x000008, "Wrong alignment on AkGameplayStatics_PostTrigger");
static_assert(sizeof(AkGameplayStatics_PostTrigger) == 0x000018, "Wrong size on AkGameplayStatics_PostTrigger");
static_assert(offsetof(AkGameplayStatics_PostTrigger, TriggerValue) == 0x000000, "Member 'AkGameplayStatics_PostTrigger::TriggerValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostTrigger, Actor) == 0x000008, "Member 'AkGameplayStatics_PostTrigger::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostTrigger, Trigger) == 0x000010, "Member 'AkGameplayStatics_PostTrigger::Trigger' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ReplaceMainOutput
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_ReplaceMainOutput final
{
public:
	struct FAkOutputSettings                      MainOutputSettings;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_ReplaceMainOutput) == 0x000008, "Wrong alignment on AkGameplayStatics_ReplaceMainOutput");
static_assert(sizeof(AkGameplayStatics_ReplaceMainOutput) == 0x000018, "Wrong size on AkGameplayStatics_ReplaceMainOutput");
static_assert(offsetof(AkGameplayStatics_ReplaceMainOutput, MainOutputSettings) == 0x000000, "Member 'AkGameplayStatics_ReplaceMainOutput::MainOutputSettings' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.ResetRTPCValue
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_ResetRTPCValue final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RTPC;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_ResetRTPCValue) == 0x000008, "Wrong alignment on AkGameplayStatics_ResetRTPCValue");
static_assert(sizeof(AkGameplayStatics_ResetRTPCValue) == 0x000020, "Wrong size on AkGameplayStatics_ResetRTPCValue");
static_assert(offsetof(AkGameplayStatics_ResetRTPCValue, RTPCValue) == 0x000000, "Member 'AkGameplayStatics_ResetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ResetRTPCValue, InterpolationTimeMs) == 0x000008, "Member 'AkGameplayStatics_ResetRTPCValue::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ResetRTPCValue, Actor) == 0x000010, "Member 'AkGameplayStatics_ResetRTPCValue::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_ResetRTPCValue, RTPC) == 0x000018, "Member 'AkGameplayStatics_ResetRTPCValue::RTPC' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetBusConfig
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetBusConfig final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChannelConfiguration                       ChannelConfiguration;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetBusConfig) == 0x000008, "Wrong alignment on AkGameplayStatics_SetBusConfig");
static_assert(sizeof(AkGameplayStatics_SetBusConfig) == 0x000018, "Wrong size on AkGameplayStatics_SetBusConfig");
static_assert(offsetof(AkGameplayStatics_SetBusConfig, BusName) == 0x000000, "Member 'AkGameplayStatics_SetBusConfig::BusName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetBusConfig, ChannelConfiguration) == 0x000010, "Member 'AkGameplayStatics_SetBusConfig::ChannelConfiguration' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetCurrentAudioCulture
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_SetCurrentAudioCulture final
{
public:
	class FString                                 AudioCulture;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetCurrentAudioCulture) == 0x000008, "Wrong alignment on AkGameplayStatics_SetCurrentAudioCulture");
static_assert(sizeof(AkGameplayStatics_SetCurrentAudioCulture) == 0x000030, "Wrong size on AkGameplayStatics_SetCurrentAudioCulture");
static_assert(offsetof(AkGameplayStatics_SetCurrentAudioCulture, AudioCulture) == 0x000000, "Member 'AkGameplayStatics_SetCurrentAudioCulture::AudioCulture' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetCurrentAudioCulture, LatentInfo) == 0x000010, "Member 'AkGameplayStatics_SetCurrentAudioCulture::LatentInfo' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetCurrentAudioCulture, WorldContextObject) == 0x000028, "Member 'AkGameplayStatics_SetCurrentAudioCulture::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetCurrentAudioCultureAsync
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetCurrentAudioCultureAsync final
{
public:
	class FString                                 AudioCulture;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Succeeded)>               Completed;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetCurrentAudioCultureAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_SetCurrentAudioCultureAsync");
static_assert(sizeof(AkGameplayStatics_SetCurrentAudioCultureAsync) == 0x000020, "Wrong size on AkGameplayStatics_SetCurrentAudioCultureAsync");
static_assert(offsetof(AkGameplayStatics_SetCurrentAudioCultureAsync, AudioCulture) == 0x000000, "Member 'AkGameplayStatics_SetCurrentAudioCultureAsync::AudioCulture' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetCurrentAudioCultureAsync, Completed) == 0x000010, "Member 'AkGameplayStatics_SetCurrentAudioCultureAsync::Completed' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetGameObjectToPortalObstruction
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetGameObjectToPortalObstruction final
{
public:
	class UAKComponent*                           GameObjectAkComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkPortalComponent*                     PortalComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetGameObjectToPortalObstruction) == 0x000008, "Wrong alignment on AkGameplayStatics_SetGameObjectToPortalObstruction");
static_assert(sizeof(AkGameplayStatics_SetGameObjectToPortalObstruction) == 0x000018, "Wrong size on AkGameplayStatics_SetGameObjectToPortalObstruction");
static_assert(offsetof(AkGameplayStatics_SetGameObjectToPortalObstruction, GameObjectAkComponent) == 0x000000, "Member 'AkGameplayStatics_SetGameObjectToPortalObstruction::GameObjectAkComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetGameObjectToPortalObstruction, PortalComponent) == 0x000008, "Member 'AkGameplayStatics_SetGameObjectToPortalObstruction::PortalComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetGameObjectToPortalObstruction, ObstructionValue) == 0x000010, "Member 'AkGameplayStatics_SetGameObjectToPortalObstruction::ObstructionValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetMultipleChannelEmitterPositions
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_SetMultipleChannelEmitterPositions final
{
public:
	class UAKComponent*                           GameObjectAkComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAkChannelConfiguration>               ChannelMasks;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Positions;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkMultiPositionType                          MultiPositionType;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetMultipleChannelEmitterPositions) == 0x000008, "Wrong alignment on AkGameplayStatics_SetMultipleChannelEmitterPositions");
static_assert(sizeof(AkGameplayStatics_SetMultipleChannelEmitterPositions) == 0x000030, "Wrong size on AkGameplayStatics_SetMultipleChannelEmitterPositions");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelEmitterPositions, GameObjectAkComponent) == 0x000000, "Member 'AkGameplayStatics_SetMultipleChannelEmitterPositions::GameObjectAkComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelEmitterPositions, ChannelMasks) == 0x000008, "Member 'AkGameplayStatics_SetMultipleChannelEmitterPositions::ChannelMasks' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelEmitterPositions, Positions) == 0x000018, "Member 'AkGameplayStatics_SetMultipleChannelEmitterPositions::Positions' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelEmitterPositions, MultiPositionType) == 0x000028, "Member 'AkGameplayStatics_SetMultipleChannelEmitterPositions::MultiPositionType' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetMultipleChannelMaskEmitterPositions
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_SetMultipleChannelMaskEmitterPositions final
{
public:
	class UAKComponent*                           GameObjectAkComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkChannelMask>                 ChannelMasks;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Positions;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkMultiPositionType                          MultiPositionType;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions) == 0x000008, "Wrong alignment on AkGameplayStatics_SetMultipleChannelMaskEmitterPositions");
static_assert(sizeof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions) == 0x000030, "Wrong size on AkGameplayStatics_SetMultipleChannelMaskEmitterPositions");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions, GameObjectAkComponent) == 0x000000, "Member 'AkGameplayStatics_SetMultipleChannelMaskEmitterPositions::GameObjectAkComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions, ChannelMasks) == 0x000008, "Member 'AkGameplayStatics_SetMultipleChannelMaskEmitterPositions::ChannelMasks' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions, Positions) == 0x000018, "Member 'AkGameplayStatics_SetMultipleChannelMaskEmitterPositions::Positions' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultipleChannelMaskEmitterPositions, MultiPositionType) == 0x000028, "Member 'AkGameplayStatics_SetMultipleChannelMaskEmitterPositions::MultiPositionType' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetMultiplePositions
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetMultiplePositions final
{
public:
	class UAKComponent*                           GameObjectAkComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Positions;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkMultiPositionType                          MultiPositionType;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetMultiplePositions) == 0x000008, "Wrong alignment on AkGameplayStatics_SetMultiplePositions");
static_assert(sizeof(AkGameplayStatics_SetMultiplePositions) == 0x000020, "Wrong size on AkGameplayStatics_SetMultiplePositions");
static_assert(offsetof(AkGameplayStatics_SetMultiplePositions, GameObjectAkComponent) == 0x000000, "Member 'AkGameplayStatics_SetMultiplePositions::GameObjectAkComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultiplePositions, Positions) == 0x000008, "Member 'AkGameplayStatics_SetMultiplePositions::Positions' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetMultiplePositions, MultiPositionType) == 0x000018, "Member 'AkGameplayStatics_SetMultiplePositions::MultiPositionType' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetOcclusionRefreshInterval
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetOcclusionRefreshInterval final
{
public:
	float                                         RefreshInterval;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetOcclusionRefreshInterval) == 0x000008, "Wrong alignment on AkGameplayStatics_SetOcclusionRefreshInterval");
static_assert(sizeof(AkGameplayStatics_SetOcclusionRefreshInterval) == 0x000010, "Wrong size on AkGameplayStatics_SetOcclusionRefreshInterval");
static_assert(offsetof(AkGameplayStatics_SetOcclusionRefreshInterval, RefreshInterval) == 0x000000, "Member 'AkGameplayStatics_SetOcclusionRefreshInterval::RefreshInterval' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetOcclusionRefreshInterval, Actor) == 0x000008, "Member 'AkGameplayStatics_SetOcclusionRefreshInterval::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetOcclusionScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct AkGameplayStatics_SetOcclusionScalingFactor final
{
public:
	float                                         ScalingFactor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetOcclusionScalingFactor) == 0x000004, "Wrong alignment on AkGameplayStatics_SetOcclusionScalingFactor");
static_assert(sizeof(AkGameplayStatics_SetOcclusionScalingFactor) == 0x000004, "Wrong size on AkGameplayStatics_SetOcclusionScalingFactor");
static_assert(offsetof(AkGameplayStatics_SetOcclusionScalingFactor, ScalingFactor) == 0x000000, "Member 'AkGameplayStatics_SetOcclusionScalingFactor::ScalingFactor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetOutputBusVolume
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetOutputBusVolume final
{
public:
	float                                         BusVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetOutputBusVolume) == 0x000008, "Wrong alignment on AkGameplayStatics_SetOutputBusVolume");
static_assert(sizeof(AkGameplayStatics_SetOutputBusVolume) == 0x000010, "Wrong size on AkGameplayStatics_SetOutputBusVolume");
static_assert(offsetof(AkGameplayStatics_SetOutputBusVolume, BusVolume) == 0x000000, "Member 'AkGameplayStatics_SetOutputBusVolume::BusVolume' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetOutputBusVolume, Actor) == 0x000008, "Member 'AkGameplayStatics_SetOutputBusVolume::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetPanningRule
// 0x0001 (0x0001 - 0x0000)
struct AkGameplayStatics_SetPanningRule final
{
public:
	EPanningRule                                  PanRule;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetPanningRule) == 0x000001, "Wrong alignment on AkGameplayStatics_SetPanningRule");
static_assert(sizeof(AkGameplayStatics_SetPanningRule) == 0x000001, "Wrong size on AkGameplayStatics_SetPanningRule");
static_assert(offsetof(AkGameplayStatics_SetPanningRule, PanRule) == 0x000000, "Member 'AkGameplayStatics_SetPanningRule::PanRule' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetPortalObstructionAndOcclusion
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetPortalObstructionAndOcclusion final
{
public:
	class UAkPortalComponent*                     PortalComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionValue;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionValue;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetPortalObstructionAndOcclusion) == 0x000008, "Wrong alignment on AkGameplayStatics_SetPortalObstructionAndOcclusion");
static_assert(sizeof(AkGameplayStatics_SetPortalObstructionAndOcclusion) == 0x000010, "Wrong size on AkGameplayStatics_SetPortalObstructionAndOcclusion");
static_assert(offsetof(AkGameplayStatics_SetPortalObstructionAndOcclusion, PortalComponent) == 0x000000, "Member 'AkGameplayStatics_SetPortalObstructionAndOcclusion::PortalComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetPortalObstructionAndOcclusion, ObstructionValue) == 0x000008, "Member 'AkGameplayStatics_SetPortalObstructionAndOcclusion::ObstructionValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetPortalObstructionAndOcclusion, OcclusionValue) == 0x00000C, "Member 'AkGameplayStatics_SetPortalObstructionAndOcclusion::OcclusionValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetPortalToPortalObstruction
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetPortalToPortalObstruction final
{
public:
	class UAkPortalComponent*                     PortalComponent0;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkPortalComponent*                     PortalComponent1;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetPortalToPortalObstruction) == 0x000008, "Wrong alignment on AkGameplayStatics_SetPortalToPortalObstruction");
static_assert(sizeof(AkGameplayStatics_SetPortalToPortalObstruction) == 0x000018, "Wrong size on AkGameplayStatics_SetPortalToPortalObstruction");
static_assert(offsetof(AkGameplayStatics_SetPortalToPortalObstruction, PortalComponent0) == 0x000000, "Member 'AkGameplayStatics_SetPortalToPortalObstruction::PortalComponent0' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetPortalToPortalObstruction, PortalComponent1) == 0x000008, "Member 'AkGameplayStatics_SetPortalToPortalObstruction::PortalComponent1' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetPortalToPortalObstruction, ObstructionValue) == 0x000010, "Member 'AkGameplayStatics_SetPortalToPortalObstruction::ObstructionValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetReflectionsOrder
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_SetReflectionsOrder final
{
public:
	int32                                         Order;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshPaths;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_SetReflectionsOrder) == 0x000004, "Wrong alignment on AkGameplayStatics_SetReflectionsOrder");
static_assert(sizeof(AkGameplayStatics_SetReflectionsOrder) == 0x000008, "Wrong size on AkGameplayStatics_SetReflectionsOrder");
static_assert(offsetof(AkGameplayStatics_SetReflectionsOrder, Order) == 0x000000, "Member 'AkGameplayStatics_SetReflectionsOrder::Order' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetReflectionsOrder, RefreshPaths) == 0x000004, "Member 'AkGameplayStatics_SetReflectionsOrder::RefreshPaths' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValue
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetRTPCValue final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RTPC;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValue) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValue");
static_assert(sizeof(AkGameplayStatics_SetRTPCValue) == 0x000020, "Wrong size on AkGameplayStatics_SetRTPCValue");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, RTPCValue) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, Value) == 0x000008, "Member 'AkGameplayStatics_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, InterpolationTimeMs) == 0x00000C, "Member 'AkGameplayStatics_SetRTPCValue::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, Actor) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValue::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, RTPC) == 0x000018, "Member 'AkGameplayStatics_SetRTPCValue::RTPC' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValuebyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetRTPCValuebyname final
{
public:
	class FString                                 RTPC;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValuebyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValuebyname");
static_assert(sizeof(AkGameplayStatics_SetRTPCValuebyname) == 0x000020, "Wrong size on AkGameplayStatics_SetRTPCValuebyname");
static_assert(offsetof(AkGameplayStatics_SetRTPCValuebyname, RTPC) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValuebyname::RTPC' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValuebyname, Value) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValuebyname::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValuebyname, InterpolationTimeMs) == 0x000014, "Member 'AkGameplayStatics_SetRTPCValuebyname::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValuebyname, Actor) == 0x000018, "Member 'AkGameplayStatics_SetRTPCValuebyname::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValueToComponent
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetRTPCValueToComponent final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValueToComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValueToComponent");
static_assert(sizeof(AkGameplayStatics_SetRTPCValueToComponent) == 0x000018, "Wrong size on AkGameplayStatics_SetRTPCValueToComponent");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponent, RTPCValue) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValueToComponent::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponent, Value) == 0x000008, "Member 'AkGameplayStatics_SetRTPCValueToComponent::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponent, InterpolationTimeMs) == 0x00000C, "Member 'AkGameplayStatics_SetRTPCValueToComponent::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponent, Component) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValueToComponent::Component' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValueToComponentbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetRTPCValueToComponentbyname final
{
public:
	class FString                                 RTPC;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValueToComponentbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValueToComponentbyname");
static_assert(sizeof(AkGameplayStatics_SetRTPCValueToComponentbyname) == 0x000020, "Wrong size on AkGameplayStatics_SetRTPCValueToComponentbyname");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponentbyname, RTPC) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValueToComponentbyname::RTPC' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponentbyname, Value) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValueToComponentbyname::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponentbyname, InterpolationTimeMs) == 0x000014, "Member 'AkGameplayStatics_SetRTPCValueToComponentbyname::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToComponentbyname, Component) == 0x000018, "Member 'AkGameplayStatics_SetRTPCValueToComponentbyname::Component' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValueToListener
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetRTPCValueToListener final
{
public:
	class UAkRtpc*                                RTPCValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValueToListener) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValueToListener");
static_assert(sizeof(AkGameplayStatics_SetRTPCValueToListener) == 0x000010, "Wrong size on AkGameplayStatics_SetRTPCValueToListener");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListener, RTPCValue) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValueToListener::RTPCValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListener, Value) == 0x000008, "Member 'AkGameplayStatics_SetRTPCValueToListener::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListener, InterpolationTimeMs) == 0x00000C, "Member 'AkGameplayStatics_SetRTPCValueToListener::InterpolationTimeMs' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValueToListenerbyname
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetRTPCValueToListenerbyname final
{
public:
	class FString                                 RTPC;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValueToListenerbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValueToListenerbyname");
static_assert(sizeof(AkGameplayStatics_SetRTPCValueToListenerbyname) == 0x000018, "Wrong size on AkGameplayStatics_SetRTPCValueToListenerbyname");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListenerbyname, RTPC) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValueToListenerbyname::RTPC' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListenerbyname, Value) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValueToListenerbyname::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValueToListenerbyname, InterpolationTimeMs) == 0x000014, "Member 'AkGameplayStatics_SetRTPCValueToListenerbyname::InterpolationTimeMs' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSpeakerAngles
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_SetSpeakerAngles final
{
public:
	TArray<float>                                 SpeakerAngles;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAngle;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceShareset;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSpeakerAngles) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSpeakerAngles");
static_assert(sizeof(AkGameplayStatics_SetSpeakerAngles) == 0x000028, "Wrong size on AkGameplayStatics_SetSpeakerAngles");
static_assert(offsetof(AkGameplayStatics_SetSpeakerAngles, SpeakerAngles) == 0x000000, "Member 'AkGameplayStatics_SetSpeakerAngles::SpeakerAngles' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSpeakerAngles, HeightAngle) == 0x000010, "Member 'AkGameplayStatics_SetSpeakerAngles::HeightAngle' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSpeakerAngles, DeviceShareset) == 0x000018, "Member 'AkGameplayStatics_SetSpeakerAngles::DeviceShareset' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetState
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetState final
{
public:
	class UAkStateValue*                          StateValue;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateGroup;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   State;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetState) == 0x000008, "Wrong alignment on AkGameplayStatics_SetState");
static_assert(sizeof(AkGameplayStatics_SetState) == 0x000018, "Wrong size on AkGameplayStatics_SetState");
static_assert(offsetof(AkGameplayStatics_SetState, StateValue) == 0x000000, "Member 'AkGameplayStatics_SetState::StateValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetState, StateGroup) == 0x000008, "Member 'AkGameplayStatics_SetState::StateGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetState, State) == 0x000010, "Member 'AkGameplayStatics_SetState::State' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitch
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetSwitch final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchGroup;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchState;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitch) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitch");
static_assert(sizeof(AkGameplayStatics_SetSwitch) == 0x000020, "Wrong size on AkGameplayStatics_SetSwitch");
static_assert(offsetof(AkGameplayStatics_SetSwitch, SwitchValue) == 0x000000, "Member 'AkGameplayStatics_SetSwitch::SwitchValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitch, Actor) == 0x000008, "Member 'AkGameplayStatics_SetSwitch::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitch, SwitchGroup) == 0x000010, "Member 'AkGameplayStatics_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitch, SwitchState) == 0x000018, "Member 'AkGameplayStatics_SetSwitch::SwitchState' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitchbyname
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_SetSwitchbyname final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchGroup;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitchbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitchbyname");
static_assert(sizeof(AkGameplayStatics_SetSwitchbyname) == 0x000028, "Wrong size on AkGameplayStatics_SetSwitchbyname");
static_assert(offsetof(AkGameplayStatics_SetSwitchbyname, Actor) == 0x000000, "Member 'AkGameplayStatics_SetSwitchbyname::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchbyname, SwitchGroup) == 0x000008, "Member 'AkGameplayStatics_SetSwitchbyname::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchbyname, SwitchState) == 0x000018, "Member 'AkGameplayStatics_SetSwitchbyname::SwitchState' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitchToComponent
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetSwitchToComponent final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitchToComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitchToComponent");
static_assert(sizeof(AkGameplayStatics_SetSwitchToComponent) == 0x000010, "Wrong size on AkGameplayStatics_SetSwitchToComponent");
static_assert(offsetof(AkGameplayStatics_SetSwitchToComponent, SwitchValue) == 0x000000, "Member 'AkGameplayStatics_SetSwitchToComponent::SwitchValue' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchToComponent, Component) == 0x000008, "Member 'AkGameplayStatics_SetSwitchToComponent::Component' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitchToComponentbyname
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_SetSwitchToComponentbyname final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchGroup;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitchToComponentbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitchToComponentbyname");
static_assert(sizeof(AkGameplayStatics_SetSwitchToComponentbyname) == 0x000028, "Wrong size on AkGameplayStatics_SetSwitchToComponentbyname");
static_assert(offsetof(AkGameplayStatics_SetSwitchToComponentbyname, Component) == 0x000000, "Member 'AkGameplayStatics_SetSwitchToComponentbyname::Component' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchToComponentbyname, SwitchGroup) == 0x000008, "Member 'AkGameplayStatics_SetSwitchToComponentbyname::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchToComponentbyname, SwitchState) == 0x000018, "Member 'AkGameplayStatics_SetSwitchToComponentbyname::SwitchState' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitchToListener
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_SetSwitchToListener final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitchToListener) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitchToListener");
static_assert(sizeof(AkGameplayStatics_SetSwitchToListener) == 0x000008, "Wrong size on AkGameplayStatics_SetSwitchToListener");
static_assert(offsetof(AkGameplayStatics_SetSwitchToListener, SwitchValue) == 0x000000, "Member 'AkGameplayStatics_SetSwitchToListener::SwitchValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitchToListenerbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_SetSwitchToListenerbyname final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitchToListenerbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitchToListenerbyname");
static_assert(sizeof(AkGameplayStatics_SetSwitchToListenerbyname) == 0x000020, "Wrong size on AkGameplayStatics_SetSwitchToListenerbyname");
static_assert(offsetof(AkGameplayStatics_SetSwitchToListenerbyname, SwitchGroup) == 0x000000, "Member 'AkGameplayStatics_SetSwitchToListenerbyname::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitchToListenerbyname, SwitchState) == 0x000010, "Member 'AkGameplayStatics_SetSwitchToListenerbyname::SwitchState' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SpawnAkComponentAtLocation
// 0x0050 (0x0050 - 0x0000)
struct AkGameplayStatics_SpawnAkComponentAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAKComponent*                           ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SpawnAkComponentAtLocation) == 0x000008, "Wrong alignment on AkGameplayStatics_SpawnAkComponentAtLocation");
static_assert(sizeof(AkGameplayStatics_SpawnAkComponentAtLocation) == 0x000050, "Wrong size on AkGameplayStatics_SpawnAkComponentAtLocation");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AkEvent) == 0x000008, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, Location) == 0x000010, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, Orientation) == 0x00001C, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AutoPost) == 0x000028, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AutoPost' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, EventName) == 0x000030, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AutoDestroy) == 0x000040, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AutoDestroy' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, ReturnValue) == 0x000048, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartAllAmbientSounds
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StartAllAmbientSounds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartAllAmbientSounds) == 0x000008, "Wrong alignment on AkGameplayStatics_StartAllAmbientSounds");
static_assert(sizeof(AkGameplayStatics_StartAllAmbientSounds) == 0x000008, "Wrong size on AkGameplayStatics_StartAllAmbientSounds");
static_assert(offsetof(AkGameplayStatics_StartAllAmbientSounds, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_StartAllAmbientSounds::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartOutputCapture
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_StartOutputCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartOutputCapture) == 0x000008, "Wrong alignment on AkGameplayStatics_StartOutputCapture");
static_assert(sizeof(AkGameplayStatics_StartOutputCapture) == 0x000010, "Wrong size on AkGameplayStatics_StartOutputCapture");
static_assert(offsetof(AkGameplayStatics_StartOutputCapture, Filename) == 0x000000, "Member 'AkGameplayStatics_StartOutputCapture::Filename' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartProfilerCapture
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_StartProfilerCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartProfilerCapture) == 0x000008, "Wrong alignment on AkGameplayStatics_StartProfilerCapture");
static_assert(sizeof(AkGameplayStatics_StartProfilerCapture) == 0x000010, "Wrong size on AkGameplayStatics_StartProfilerCapture");
static_assert(offsetof(AkGameplayStatics_StartProfilerCapture, Filename) == 0x000000, "Member 'AkGameplayStatics_StartProfilerCapture::Filename' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopActor
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StopActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StopActor) == 0x000008, "Wrong alignment on AkGameplayStatics_StopActor");
static_assert(sizeof(AkGameplayStatics_StopActor) == 0x000008, "Wrong size on AkGameplayStatics_StopActor");
static_assert(offsetof(AkGameplayStatics_StopActor, Actor) == 0x000000, "Member 'AkGameplayStatics_StopActor::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopAllAmbientSounds
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StopAllAmbientSounds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StopAllAmbientSounds) == 0x000008, "Wrong alignment on AkGameplayStatics_StopAllAmbientSounds");
static_assert(sizeof(AkGameplayStatics_StopAllAmbientSounds) == 0x000008, "Wrong size on AkGameplayStatics_StopAllAmbientSounds");
static_assert(offsetof(AkGameplayStatics_StopAllAmbientSounds, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_StopAllAmbientSounds::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSound
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_StopSound final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSound) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSound");
static_assert(sizeof(AkGameplayStatics_StopSound) == 0x000018, "Wrong size on AkGameplayStatics_StopSound");
static_assert(offsetof(AkGameplayStatics_StopSound, AkEvent) == 0x000000, "Member 'AkGameplayStatics_StopSound::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSound, Actor) == 0x000008, "Member 'AkGameplayStatics_StopSound::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSound, ReturnValue) == 0x000010, "Member 'AkGameplayStatics_StopSound::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSound2D
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_StopSound2D final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSound2D) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSound2D");
static_assert(sizeof(AkGameplayStatics_StopSound2D) == 0x000010, "Wrong size on AkGameplayStatics_StopSound2D");
static_assert(offsetof(AkGameplayStatics_StopSound2D, AkEvent) == 0x000000, "Member 'AkGameplayStatics_StopSound2D::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSound2D, ReturnValue) == 0x000008, "Member 'AkGameplayStatics_StopSound2D::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSound2Dbyname
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_StopSound2Dbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSound2Dbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSound2Dbyname");
static_assert(sizeof(AkGameplayStatics_StopSound2Dbyname) == 0x000018, "Wrong size on AkGameplayStatics_StopSound2Dbyname");
static_assert(offsetof(AkGameplayStatics_StopSound2Dbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_StopSound2Dbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSound2Dbyname, ReturnValue) == 0x000010, "Member 'AkGameplayStatics_StopSound2Dbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSoundbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_StopSoundbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSoundbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSoundbyname");
static_assert(sizeof(AkGameplayStatics_StopSoundbyname) == 0x000020, "Wrong size on AkGameplayStatics_StopSoundbyname");
static_assert(offsetof(AkGameplayStatics_StopSoundbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_StopSoundbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundbyname, Actor) == 0x000010, "Member 'AkGameplayStatics_StopSoundbyname::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundbyname, ReturnValue) == 0x000018, "Member 'AkGameplayStatics_StopSoundbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSoundOnComponent
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_StopSoundOnComponent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSoundOnComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSoundOnComponent");
static_assert(sizeof(AkGameplayStatics_StopSoundOnComponent) == 0x000018, "Wrong size on AkGameplayStatics_StopSoundOnComponent");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_StopSoundOnComponent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponent, Component) == 0x000008, "Member 'AkGameplayStatics_StopSoundOnComponent::Component' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponent, ReturnValue) == 0x000010, "Member 'AkGameplayStatics_StopSoundOnComponent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopSoundOnComponentbyname
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_StopSoundOnComponentbyname final
{
public:
	class FString                                 SoundName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_StopSoundOnComponentbyname) == 0x000008, "Wrong alignment on AkGameplayStatics_StopSoundOnComponentbyname");
static_assert(sizeof(AkGameplayStatics_StopSoundOnComponentbyname) == 0x000020, "Wrong size on AkGameplayStatics_StopSoundOnComponentbyname");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponentbyname, SoundName) == 0x000000, "Member 'AkGameplayStatics_StopSoundOnComponentbyname::SoundName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponentbyname, Component) == 0x000010, "Member 'AkGameplayStatics_StopSoundOnComponentbyname::Component' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_StopSoundOnComponentbyname, ReturnValue) == 0x000018, "Member 'AkGameplayStatics_StopSoundOnComponentbyname::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.Suspend
// 0x0001 (0x0001 - 0x0000)
struct AkGameplayStatics_Suspend final
{
public:
	bool                                          in_bRenderAnyway;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_Suspend) == 0x000001, "Wrong alignment on AkGameplayStatics_Suspend");
static_assert(sizeof(AkGameplayStatics_Suspend) == 0x000001, "Wrong size on AkGameplayStatics_Suspend");
static_assert(offsetof(AkGameplayStatics_Suspend, in_bRenderAnyway) == 0x000000, "Member 'AkGameplayStatics_Suspend::in_bRenderAnyway' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBank
// 0x0038 (0x0038 - 0x0000)
struct AkGameplayStatics_UnloadBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BankName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBank) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBank");
static_assert(sizeof(AkGameplayStatics_UnloadBank) == 0x000038, "Wrong size on AkGameplayStatics_UnloadBank");
static_assert(offsetof(AkGameplayStatics_UnloadBank, Bank) == 0x000000, "Member 'AkGameplayStatics_UnloadBank::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBank, BankName) == 0x000008, "Member 'AkGameplayStatics_UnloadBank::BankName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBank, LatentInfo) == 0x000018, "Member 'AkGameplayStatics_UnloadBank::LatentInfo' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBank, WorldContextObject) == 0x000030, "Member 'AkGameplayStatics_UnloadBank::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBankAsync
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_UnloadBankAsync final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> BankUnloadedCallback;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBankAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBankAsync");
static_assert(sizeof(AkGameplayStatics_UnloadBankAsync) == 0x000018, "Wrong size on AkGameplayStatics_UnloadBankAsync");
static_assert(offsetof(AkGameplayStatics_UnloadBankAsync, Bank) == 0x000000, "Member 'AkGameplayStatics_UnloadBankAsync::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBankAsync, BankUnloadedCallback) == 0x000008, "Member 'AkGameplayStatics_UnloadBankAsync::BankUnloadedCallback' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_UnloadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBankByName) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBankByName");
static_assert(sizeof(AkGameplayStatics_UnloadBankByName) == 0x000010, "Wrong size on AkGameplayStatics_UnloadBankByName");
static_assert(offsetof(AkGameplayStatics_UnloadBankByName, BankName) == 0x000000, "Member 'AkGameplayStatics_UnloadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBankByNameAsync
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_UnloadBankByNameAsync final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> BankUnloadedCallback;                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBankByNameAsync) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBankByNameAsync");
static_assert(sizeof(AkGameplayStatics_UnloadBankByNameAsync) == 0x000020, "Wrong size on AkGameplayStatics_UnloadBankByNameAsync");
static_assert(offsetof(AkGameplayStatics_UnloadBankByNameAsync, BankName) == 0x000000, "Member 'AkGameplayStatics_UnloadBankByNameAsync::BankName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBankByNameAsync, BankUnloadedCallback) == 0x000010, "Member 'AkGameplayStatics_UnloadBankByNameAsync::BankUnloadedCallback' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UpdateDopplerEffectDatas
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_UpdateDopplerEffectDatas final
{
public:
	class AActor*                                 SoundingObj;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SoundingObjPos;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ListeningObjPos;                                   // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UpdateDopplerEffectDatas) == 0x000008, "Wrong alignment on AkGameplayStatics_UpdateDopplerEffectDatas");
static_assert(sizeof(AkGameplayStatics_UpdateDopplerEffectDatas) == 0x000020, "Wrong size on AkGameplayStatics_UpdateDopplerEffectDatas");
static_assert(offsetof(AkGameplayStatics_UpdateDopplerEffectDatas, SoundingObj) == 0x000000, "Member 'AkGameplayStatics_UpdateDopplerEffectDatas::SoundingObj' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UpdateDopplerEffectDatas, SoundingObjPos) == 0x000008, "Member 'AkGameplayStatics_UpdateDopplerEffectDatas::SoundingObjPos' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UpdateDopplerEffectDatas, ListeningObjPos) == 0x000014, "Member 'AkGameplayStatics_UpdateDopplerEffectDatas::ListeningObjPos' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UpdatePostedEventMultiPositions
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_UpdatePostedEventMultiPositions final
{
public:
	class UAKComponent*                           AKComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UpdatePostedEventMultiPositions) == 0x000008, "Wrong alignment on AkGameplayStatics_UpdatePostedEventMultiPositions");
static_assert(sizeof(AkGameplayStatics_UpdatePostedEventMultiPositions) == 0x000018, "Wrong size on AkGameplayStatics_UpdatePostedEventMultiPositions");
static_assert(offsetof(AkGameplayStatics_UpdatePostedEventMultiPositions, AKComponent) == 0x000000, "Member 'AkGameplayStatics_UpdatePostedEventMultiPositions::AKComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UpdatePostedEventMultiPositions, Positions) == 0x000008, "Member 'AkGameplayStatics_UpdatePostedEventMultiPositions::Positions' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UseEarlyReflections
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_UseEarlyReflections final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              AuxBus;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BusSendGain;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPathLength;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpotReflectors;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuxBusName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UseEarlyReflections) == 0x000008, "Wrong alignment on AkGameplayStatics_UseEarlyReflections");
static_assert(sizeof(AkGameplayStatics_UseEarlyReflections) == 0x000030, "Wrong size on AkGameplayStatics_UseEarlyReflections");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, Actor) == 0x000000, "Member 'AkGameplayStatics_UseEarlyReflections::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, AuxBus) == 0x000008, "Member 'AkGameplayStatics_UseEarlyReflections::AuxBus' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, Order) == 0x000010, "Member 'AkGameplayStatics_UseEarlyReflections::Order' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, BusSendGain) == 0x000014, "Member 'AkGameplayStatics_UseEarlyReflections::BusSendGain' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, MaxPathLength) == 0x000018, "Member 'AkGameplayStatics_UseEarlyReflections::MaxPathLength' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, SpotReflectors) == 0x00001C, "Member 'AkGameplayStatics_UseEarlyReflections::SpotReflectors' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseEarlyReflections, AuxBusName) == 0x000020, "Member 'AkGameplayStatics_UseEarlyReflections::AuxBusName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UseReverbVolumes
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_UseReverbVolumes final
{
public:
	bool                                          inUseReverbVolumes;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UseReverbVolumes) == 0x000008, "Wrong alignment on AkGameplayStatics_UseReverbVolumes");
static_assert(sizeof(AkGameplayStatics_UseReverbVolumes) == 0x000010, "Wrong size on AkGameplayStatics_UseReverbVolumes");
static_assert(offsetof(AkGameplayStatics_UseReverbVolumes, inUseReverbVolumes) == 0x000000, "Member 'AkGameplayStatics_UseReverbVolumes::inUseReverbVolumes' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseReverbVolumes, Actor) == 0x000008, "Member 'AkGameplayStatics_UseReverbVolumes::Actor' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetCc
// 0x0005 (0x0005 - 0x0000)
struct AkMIDIEventCallbackInfo_GetCc final
{
public:
	struct FAkMidiCc                              AsCc;                                              // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetCc) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetCc");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetCc) == 0x000005, "Wrong size on AkMIDIEventCallbackInfo_GetCc");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetCc, AsCc) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetCc::AsCc' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetCc, ReturnValue) == 0x000004, "Member 'AkMIDIEventCallbackInfo_GetCc::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetChannel
// 0x0001 (0x0001 - 0x0000)
struct AkMIDIEventCallbackInfo_GetChannel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetChannel) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetChannel");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetChannel) == 0x000001, "Wrong size on AkMIDIEventCallbackInfo_GetChannel");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetChannel, ReturnValue) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetChannel::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetChannelAftertouch
// 0x0004 (0x0004 - 0x0000)
struct AkMIDIEventCallbackInfo_GetChannelAftertouch final
{
public:
	struct FAkMidiChannelAftertouch               AsChannelAftertouch;                               // 0x0000(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetChannelAftertouch) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetChannelAftertouch");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetChannelAftertouch) == 0x000004, "Wrong size on AkMIDIEventCallbackInfo_GetChannelAftertouch");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetChannelAftertouch, AsChannelAftertouch) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetChannelAftertouch::AsChannelAftertouch' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetChannelAftertouch, ReturnValue) == 0x000003, "Member 'AkMIDIEventCallbackInfo_GetChannelAftertouch::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetGeneric
// 0x0005 (0x0005 - 0x0000)
struct AkMIDIEventCallbackInfo_GetGeneric final
{
public:
	struct FAkMidiGeneric                         AsGeneric;                                         // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetGeneric) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetGeneric");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetGeneric) == 0x000005, "Wrong size on AkMIDIEventCallbackInfo_GetGeneric");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetGeneric, AsGeneric) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetGeneric::AsGeneric' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetGeneric, ReturnValue) == 0x000004, "Member 'AkMIDIEventCallbackInfo_GetGeneric::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetNoteAftertouch
// 0x0005 (0x0005 - 0x0000)
struct AkMIDIEventCallbackInfo_GetNoteAftertouch final
{
public:
	struct FAkMidiNoteAftertouch                  AsNoteAftertouch;                                  // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetNoteAftertouch) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetNoteAftertouch");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetNoteAftertouch) == 0x000005, "Wrong size on AkMIDIEventCallbackInfo_GetNoteAftertouch");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteAftertouch, AsNoteAftertouch) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetNoteAftertouch::AsNoteAftertouch' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteAftertouch, ReturnValue) == 0x000004, "Member 'AkMIDIEventCallbackInfo_GetNoteAftertouch::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetNoteOff
// 0x0005 (0x0005 - 0x0000)
struct AkMIDIEventCallbackInfo_GetNoteOff final
{
public:
	struct FAkMidiNoteOnOff                       AsNoteOff;                                         // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetNoteOff) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetNoteOff");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetNoteOff) == 0x000005, "Wrong size on AkMIDIEventCallbackInfo_GetNoteOff");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteOff, AsNoteOff) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetNoteOff::AsNoteOff' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteOff, ReturnValue) == 0x000004, "Member 'AkMIDIEventCallbackInfo_GetNoteOff::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetNoteOn
// 0x0005 (0x0005 - 0x0000)
struct AkMIDIEventCallbackInfo_GetNoteOn final
{
public:
	struct FAkMidiNoteOnOff                       AsNoteOn;                                          // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetNoteOn) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetNoteOn");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetNoteOn) == 0x000005, "Wrong size on AkMIDIEventCallbackInfo_GetNoteOn");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteOn, AsNoteOn) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetNoteOn::AsNoteOn' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetNoteOn, ReturnValue) == 0x000004, "Member 'AkMIDIEventCallbackInfo_GetNoteOn::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetPitchBend
// 0x000C (0x000C - 0x0000)
struct AkMIDIEventCallbackInfo_GetPitchBend final
{
public:
	struct FAkMidiPitchBend                       AsPitchBend;                                       // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetPitchBend) == 0x000004, "Wrong alignment on AkMIDIEventCallbackInfo_GetPitchBend");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetPitchBend) == 0x00000C, "Wrong size on AkMIDIEventCallbackInfo_GetPitchBend");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetPitchBend, AsPitchBend) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetPitchBend::AsPitchBend' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetPitchBend, ReturnValue) == 0x000008, "Member 'AkMIDIEventCallbackInfo_GetPitchBend::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetProgramChange
// 0x0004 (0x0004 - 0x0000)
struct AkMIDIEventCallbackInfo_GetProgramChange final
{
public:
	struct FAkMidiProgramChange                   AsProgramChange;                                   // 0x0000(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetProgramChange) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetProgramChange");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetProgramChange) == 0x000004, "Wrong size on AkMIDIEventCallbackInfo_GetProgramChange");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetProgramChange, AsProgramChange) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetProgramChange::AsProgramChange' has a wrong offset!");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetProgramChange, ReturnValue) == 0x000003, "Member 'AkMIDIEventCallbackInfo_GetProgramChange::ReturnValue' has a wrong offset!");

// Function AkAudio.AkMIDIEventCallbackInfo.GetType
// 0x0001 (0x0001 - 0x0000)
struct AkMIDIEventCallbackInfo_GetType final
{
public:
	EAkMidiEventType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMIDIEventCallbackInfo_GetType) == 0x000001, "Wrong alignment on AkMIDIEventCallbackInfo_GetType");
static_assert(sizeof(AkMIDIEventCallbackInfo_GetType) == 0x000001, "Wrong size on AkMIDIEventCallbackInfo_GetType");
static_assert(offsetof(AkMIDIEventCallbackInfo_GetType, ReturnValue) == 0x000000, "Member 'AkMIDIEventCallbackInfo_GetType::ReturnValue' has a wrong offset!");

// Function AkAudio.AkHololensInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkHololensInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkHololensInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkHololensInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkHololensInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkHololensInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkHololensInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkHololensInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkItemBoolPropertiesConv.Conv_FAkBoolPropertyToControlToString
// 0x0020 (0x0020 - 0x0000)
struct AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString final
{
public:
	struct FAkBoolPropertyToControl               INAkBoolPropertyToControl;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString) == 0x000008, "Wrong alignment on AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString");
static_assert(sizeof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString) == 0x000020, "Wrong size on AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString");
static_assert(offsetof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString, INAkBoolPropertyToControl) == 0x000000, "Member 'AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString::INAkBoolPropertyToControl' has a wrong offset!");
static_assert(offsetof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString, ReturnValue) == 0x000010, "Member 'AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToString::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemBoolPropertiesConv.Conv_FAkBoolPropertyToControlToText
// 0x0028 (0x0028 - 0x0000)
struct AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText final
{
public:
	struct FAkBoolPropertyToControl               INAkBoolPropertyToControl;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText) == 0x000008, "Wrong alignment on AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText");
static_assert(sizeof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText) == 0x000028, "Wrong size on AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText");
static_assert(offsetof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText, INAkBoolPropertyToControl) == 0x000000, "Member 'AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText::INAkBoolPropertyToControl' has a wrong offset!");
static_assert(offsetof(AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText, ReturnValue) == 0x000010, "Member 'AkItemBoolPropertiesConv_Conv_FAkBoolPropertyToControlToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemBoolProperties.SetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkItemBoolProperties_SetSearchText final
{
public:
	class FString                                 newText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemBoolProperties_SetSearchText) == 0x000008, "Wrong alignment on AkItemBoolProperties_SetSearchText");
static_assert(sizeof(AkItemBoolProperties_SetSearchText) == 0x000010, "Wrong size on AkItemBoolProperties_SetSearchText");
static_assert(offsetof(AkItemBoolProperties_SetSearchText, newText) == 0x000000, "Member 'AkItemBoolProperties_SetSearchText::newText' has a wrong offset!");

// Function AkAudio.AkItemBoolProperties.GetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkItemBoolProperties_GetSearchText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemBoolProperties_GetSearchText) == 0x000008, "Wrong alignment on AkItemBoolProperties_GetSearchText");
static_assert(sizeof(AkItemBoolProperties_GetSearchText) == 0x000010, "Wrong size on AkItemBoolProperties_GetSearchText");
static_assert(offsetof(AkItemBoolProperties_GetSearchText, ReturnValue) == 0x000000, "Member 'AkItemBoolProperties_GetSearchText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemBoolProperties.GetSelectedProperty
// 0x0010 (0x0010 - 0x0000)
struct AkItemBoolProperties_GetSelectedProperty final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemBoolProperties_GetSelectedProperty) == 0x000008, "Wrong alignment on AkItemBoolProperties_GetSelectedProperty");
static_assert(sizeof(AkItemBoolProperties_GetSelectedProperty) == 0x000010, "Wrong size on AkItemBoolProperties_GetSelectedProperty");
static_assert(offsetof(AkItemBoolProperties_GetSelectedProperty, ReturnValue) == 0x000000, "Member 'AkItemBoolProperties_GetSelectedProperty::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemPropertiesConv.Conv_FAkPropertyToControlToString
// 0x0020 (0x0020 - 0x0000)
struct AkItemPropertiesConv_Conv_FAkPropertyToControlToString final
{
public:
	struct FAkPropertyToControl                   INAkPropertyToControl;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemPropertiesConv_Conv_FAkPropertyToControlToString) == 0x000008, "Wrong alignment on AkItemPropertiesConv_Conv_FAkPropertyToControlToString");
static_assert(sizeof(AkItemPropertiesConv_Conv_FAkPropertyToControlToString) == 0x000020, "Wrong size on AkItemPropertiesConv_Conv_FAkPropertyToControlToString");
static_assert(offsetof(AkItemPropertiesConv_Conv_FAkPropertyToControlToString, INAkPropertyToControl) == 0x000000, "Member 'AkItemPropertiesConv_Conv_FAkPropertyToControlToString::INAkPropertyToControl' has a wrong offset!");
static_assert(offsetof(AkItemPropertiesConv_Conv_FAkPropertyToControlToString, ReturnValue) == 0x000010, "Member 'AkItemPropertiesConv_Conv_FAkPropertyToControlToString::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemPropertiesConv.Conv_FAkPropertyToControlToText
// 0x0028 (0x0028 - 0x0000)
struct AkItemPropertiesConv_Conv_FAkPropertyToControlToText final
{
public:
	struct FAkPropertyToControl                   INAkPropertyToControl;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemPropertiesConv_Conv_FAkPropertyToControlToText) == 0x000008, "Wrong alignment on AkItemPropertiesConv_Conv_FAkPropertyToControlToText");
static_assert(sizeof(AkItemPropertiesConv_Conv_FAkPropertyToControlToText) == 0x000028, "Wrong size on AkItemPropertiesConv_Conv_FAkPropertyToControlToText");
static_assert(offsetof(AkItemPropertiesConv_Conv_FAkPropertyToControlToText, INAkPropertyToControl) == 0x000000, "Member 'AkItemPropertiesConv_Conv_FAkPropertyToControlToText::INAkPropertyToControl' has a wrong offset!");
static_assert(offsetof(AkItemPropertiesConv_Conv_FAkPropertyToControlToText, ReturnValue) == 0x000010, "Member 'AkItemPropertiesConv_Conv_FAkPropertyToControlToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemProperties.SetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkItemProperties_SetSearchText final
{
public:
	class FString                                 newText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemProperties_SetSearchText) == 0x000008, "Wrong alignment on AkItemProperties_SetSearchText");
static_assert(sizeof(AkItemProperties_SetSearchText) == 0x000010, "Wrong size on AkItemProperties_SetSearchText");
static_assert(offsetof(AkItemProperties_SetSearchText, newText) == 0x000000, "Member 'AkItemProperties_SetSearchText::newText' has a wrong offset!");

// Function AkAudio.AkItemProperties.GetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkItemProperties_GetSearchText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemProperties_GetSearchText) == 0x000008, "Wrong alignment on AkItemProperties_GetSearchText");
static_assert(sizeof(AkItemProperties_GetSearchText) == 0x000010, "Wrong size on AkItemProperties_GetSearchText");
static_assert(offsetof(AkItemProperties_GetSearchText, ReturnValue) == 0x000000, "Member 'AkItemProperties_GetSearchText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkItemProperties.GetSelectedProperty
// 0x0010 (0x0010 - 0x0000)
struct AkItemProperties_GetSelectedProperty final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkItemProperties_GetSelectedProperty) == 0x000008, "Wrong alignment on AkItemProperties_GetSelectedProperty");
static_assert(sizeof(AkItemProperties_GetSelectedProperty) == 0x000010, "Wrong size on AkItemProperties_GetSelectedProperty");
static_assert(offsetof(AkItemProperties_GetSelectedProperty, ReturnValue) == 0x000000, "Member 'AkItemProperties_GetSelectedProperty::ReturnValue' has a wrong offset!");

// Function AkAudio.AkLateReverbComponent.AssociateAkTextureSetComponent
// 0x0008 (0x0008 - 0x0000)
struct AkLateReverbComponent_AssociateAkTextureSetComponent final
{
public:
	class UAkAcousticTextureSetComponent*         textureSetComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkLateReverbComponent_AssociateAkTextureSetComponent) == 0x000008, "Wrong alignment on AkLateReverbComponent_AssociateAkTextureSetComponent");
static_assert(sizeof(AkLateReverbComponent_AssociateAkTextureSetComponent) == 0x000008, "Wrong size on AkLateReverbComponent_AssociateAkTextureSetComponent");
static_assert(offsetof(AkLateReverbComponent_AssociateAkTextureSetComponent, textureSetComponent) == 0x000000, "Member 'AkLateReverbComponent_AssociateAkTextureSetComponent::textureSetComponent' has a wrong offset!");

// Function AkAudio.AkLinuxInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkLinuxInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkLinuxInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkLinuxInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkLinuxInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkLinuxInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkLinuxInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkLinuxInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkMacInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkMacInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkMacInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkMacInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkMacInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkMacInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkMacInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkMacInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkPS4InitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkPS4InitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkPS4InitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkPS4InitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkPS4InitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkPS4InitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkPS4InitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkPS4InitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkRoomComponent.SetGeometryComponent
// 0x0008 (0x0008 - 0x0000)
struct AkRoomComponent_SetGeometryComponent final
{
public:
	class UAkAcousticTextureSetComponent*         textureSetComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkRoomComponent_SetGeometryComponent) == 0x000008, "Wrong alignment on AkRoomComponent_SetGeometryComponent");
static_assert(sizeof(AkRoomComponent_SetGeometryComponent) == 0x000008, "Wrong size on AkRoomComponent_SetGeometryComponent");
static_assert(offsetof(AkRoomComponent_SetGeometryComponent, textureSetComponent) == 0x000000, "Member 'AkRoomComponent_SetGeometryComponent::textureSetComponent' has a wrong offset!");

// Function AkAudio.AkRoomComponent.GetPrimitiveParent
// 0x0008 (0x0008 - 0x0000)
struct AkRoomComponent_GetPrimitiveParent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkRoomComponent_GetPrimitiveParent) == 0x000008, "Wrong alignment on AkRoomComponent_GetPrimitiveParent");
static_assert(sizeof(AkRoomComponent_GetPrimitiveParent) == 0x000008, "Wrong size on AkRoomComponent_GetPrimitiveParent");
static_assert(offsetof(AkRoomComponent_GetPrimitiveParent, ReturnValue) == 0x000000, "Member 'AkRoomComponent_GetPrimitiveParent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetAkSliderItemId
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_SetAkSliderItemId final
{
public:
	struct FGuid                                  ItemID;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetAkSliderItemId) == 0x000004, "Wrong alignment on AkSlider_SetAkSliderItemId");
static_assert(sizeof(AkSlider_SetAkSliderItemId) == 0x000010, "Wrong size on AkSlider_SetAkSliderItemId");
static_assert(offsetof(AkSlider_SetAkSliderItemId, ItemID) == 0x000000, "Member 'AkSlider_SetAkSliderItemId::ItemID' has a wrong offset!");

// Function AkAudio.AkSlider.SetAkSliderItemProperty
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_SetAkSliderItemProperty final
{
public:
	class FString                                 ItemProperty;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetAkSliderItemProperty) == 0x000008, "Wrong alignment on AkSlider_SetAkSliderItemProperty");
static_assert(sizeof(AkSlider_SetAkSliderItemProperty) == 0x000010, "Wrong size on AkSlider_SetAkSliderItemProperty");
static_assert(offsetof(AkSlider_SetAkSliderItemProperty, ItemProperty) == 0x000000, "Member 'AkSlider_SetAkSliderItemProperty::ItemProperty' has a wrong offset!");

// Function AkAudio.AkSlider.SetIndentHandle
// 0x0001 (0x0001 - 0x0000)
struct AkSlider_SetIndentHandle final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetIndentHandle) == 0x000001, "Wrong alignment on AkSlider_SetIndentHandle");
static_assert(sizeof(AkSlider_SetIndentHandle) == 0x000001, "Wrong size on AkSlider_SetIndentHandle");
static_assert(offsetof(AkSlider_SetIndentHandle, InValue) == 0x000000, "Member 'AkSlider_SetIndentHandle::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct AkSlider_SetLocked final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetLocked) == 0x000001, "Wrong alignment on AkSlider_SetLocked");
static_assert(sizeof(AkSlider_SetLocked) == 0x000001, "Wrong size on AkSlider_SetLocked");
static_assert(offsetof(AkSlider_SetLocked, InValue) == 0x000000, "Member 'AkSlider_SetLocked::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetSliderBarColor
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_SetSliderBarColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetSliderBarColor) == 0x000004, "Wrong alignment on AkSlider_SetSliderBarColor");
static_assert(sizeof(AkSlider_SetSliderBarColor) == 0x000010, "Wrong size on AkSlider_SetSliderBarColor");
static_assert(offsetof(AkSlider_SetSliderBarColor, InValue) == 0x000000, "Member 'AkSlider_SetSliderBarColor::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetSliderHandleColor
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_SetSliderHandleColor final
{
public:
	struct FLinearColor                           InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetSliderHandleColor) == 0x000004, "Wrong alignment on AkSlider_SetSliderHandleColor");
static_assert(sizeof(AkSlider_SetSliderHandleColor) == 0x000010, "Wrong size on AkSlider_SetSliderHandleColor");
static_assert(offsetof(AkSlider_SetSliderHandleColor, InValue) == 0x000000, "Member 'AkSlider_SetSliderHandleColor::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetStepSize
// 0x0004 (0x0004 - 0x0000)
struct AkSlider_SetStepSize final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetStepSize) == 0x000004, "Wrong alignment on AkSlider_SetStepSize");
static_assert(sizeof(AkSlider_SetStepSize) == 0x000004, "Wrong size on AkSlider_SetStepSize");
static_assert(offsetof(AkSlider_SetStepSize, InValue) == 0x000000, "Member 'AkSlider_SetStepSize::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.SetValue
// 0x0004 (0x0004 - 0x0000)
struct AkSlider_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_SetValue) == 0x000004, "Wrong alignment on AkSlider_SetValue");
static_assert(sizeof(AkSlider_SetValue) == 0x000004, "Wrong size on AkSlider_SetValue");
static_assert(offsetof(AkSlider_SetValue, InValue) == 0x000000, "Member 'AkSlider_SetValue::InValue' has a wrong offset!");

// Function AkAudio.AkSlider.GetAkSliderItemId
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_GetAkSliderItemId final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_GetAkSliderItemId) == 0x000004, "Wrong alignment on AkSlider_GetAkSliderItemId");
static_assert(sizeof(AkSlider_GetAkSliderItemId) == 0x000010, "Wrong size on AkSlider_GetAkSliderItemId");
static_assert(offsetof(AkSlider_GetAkSliderItemId, ReturnValue) == 0x000000, "Member 'AkSlider_GetAkSliderItemId::ReturnValue' has a wrong offset!");

// Function AkAudio.AkSlider.GetAkSliderItemProperty
// 0x0010 (0x0010 - 0x0000)
struct AkSlider_GetAkSliderItemProperty final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_GetAkSliderItemProperty) == 0x000008, "Wrong alignment on AkSlider_GetAkSliderItemProperty");
static_assert(sizeof(AkSlider_GetAkSliderItemProperty) == 0x000010, "Wrong size on AkSlider_GetAkSliderItemProperty");
static_assert(offsetof(AkSlider_GetAkSliderItemProperty, ReturnValue) == 0x000000, "Member 'AkSlider_GetAkSliderItemProperty::ReturnValue' has a wrong offset!");

// Function AkAudio.AkSlider.GetValue
// 0x0004 (0x0004 - 0x0000)
struct AkSlider_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSlider_GetValue) == 0x000004, "Wrong alignment on AkSlider_GetValue");
static_assert(sizeof(AkSlider_GetValue) == 0x000004, "Wrong size on AkSlider_GetValue");
static_assert(offsetof(AkSlider_GetValue, ReturnValue) == 0x000000, "Member 'AkSlider_GetValue::ReturnValue' has a wrong offset!");

// Function AkAudio.AkSwitchInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkSwitchInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkSwitchInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkSwitchInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkSwitchInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkSwitchInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkSwitchInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkSwitchInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.CallWaapi
// 0x0040 (0x0040 - 0x0000)
struct AkWaapiCalls_CallWaapi final
{
public:
	struct FAkWaapiUri                            WaapiUri;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     WaapiArgs;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     WaapiOptions;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiCalls_CallWaapi) == 0x000008, "Wrong alignment on AkWaapiCalls_CallWaapi");
static_assert(sizeof(AkWaapiCalls_CallWaapi) == 0x000040, "Wrong size on AkWaapiCalls_CallWaapi");
static_assert(offsetof(AkWaapiCalls_CallWaapi, WaapiUri) == 0x000000, "Member 'AkWaapiCalls_CallWaapi::WaapiUri' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_CallWaapi, WaapiArgs) == 0x000010, "Member 'AkWaapiCalls_CallWaapi::WaapiArgs' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_CallWaapi, WaapiOptions) == 0x000020, "Member 'AkWaapiCalls_CallWaapi::WaapiOptions' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_CallWaapi, ReturnValue) == 0x000030, "Member 'AkWaapiCalls_CallWaapi::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.Conv_FAkWaapiSubscriptionIdToString
// 0x0018 (0x0018 - 0x0000)
struct AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString final
{
public:
	struct FAkWaapiSubscriptionId                 INAkWaapiSubscriptionId;                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString) == 0x000008, "Wrong alignment on AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString");
static_assert(sizeof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString) == 0x000018, "Wrong size on AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString");
static_assert(offsetof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString, INAkWaapiSubscriptionId) == 0x000000, "Member 'AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString::INAkWaapiSubscriptionId' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString, ReturnValue) == 0x000008, "Member 'AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToString::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.Conv_FAkWaapiSubscriptionIdToText
// 0x0020 (0x0020 - 0x0000)
struct AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText final
{
public:
	struct FAkWaapiSubscriptionId                 INAkWaapiSubscriptionId;                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText) == 0x000008, "Wrong alignment on AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText");
static_assert(sizeof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText) == 0x000020, "Wrong size on AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText");
static_assert(offsetof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText, INAkWaapiSubscriptionId) == 0x000000, "Member 'AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText::INAkWaapiSubscriptionId' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText, ReturnValue) == 0x000008, "Member 'AkWaapiCalls_Conv_FAkWaapiSubscriptionIdToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.GetSubscriptionID
// 0x0010 (0x0010 - 0x0000)
struct AkWaapiCalls_GetSubscriptionID final
{
public:
	struct FAkWaapiSubscriptionId                 Subscription;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiCalls_GetSubscriptionID) == 0x000008, "Wrong alignment on AkWaapiCalls_GetSubscriptionID");
static_assert(sizeof(AkWaapiCalls_GetSubscriptionID) == 0x000010, "Wrong size on AkWaapiCalls_GetSubscriptionID");
static_assert(offsetof(AkWaapiCalls_GetSubscriptionID, Subscription) == 0x000000, "Member 'AkWaapiCalls_GetSubscriptionID::Subscription' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_GetSubscriptionID, ReturnValue) == 0x000008, "Member 'AkWaapiCalls_GetSubscriptionID::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.RegisterWaapiConnectionLostCallback
// 0x0014 (0x0014 - 0x0000)
struct AkWaapiCalls_RegisterWaapiConnectionLostCallback final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiCalls_RegisterWaapiConnectionLostCallback) == 0x000004, "Wrong alignment on AkWaapiCalls_RegisterWaapiConnectionLostCallback");
static_assert(sizeof(AkWaapiCalls_RegisterWaapiConnectionLostCallback) == 0x000014, "Wrong size on AkWaapiCalls_RegisterWaapiConnectionLostCallback");
static_assert(offsetof(AkWaapiCalls_RegisterWaapiConnectionLostCallback, Callback) == 0x000000, "Member 'AkWaapiCalls_RegisterWaapiConnectionLostCallback::Callback' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_RegisterWaapiConnectionLostCallback, ReturnValue) == 0x000010, "Member 'AkWaapiCalls_RegisterWaapiConnectionLostCallback::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.RegisterWaapiProjectLoadedCallback
// 0x0014 (0x0014 - 0x0000)
struct AkWaapiCalls_RegisterWaapiProjectLoadedCallback final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiCalls_RegisterWaapiProjectLoadedCallback) == 0x000004, "Wrong alignment on AkWaapiCalls_RegisterWaapiProjectLoadedCallback");
static_assert(sizeof(AkWaapiCalls_RegisterWaapiProjectLoadedCallback) == 0x000014, "Wrong size on AkWaapiCalls_RegisterWaapiProjectLoadedCallback");
static_assert(offsetof(AkWaapiCalls_RegisterWaapiProjectLoadedCallback, Callback) == 0x000000, "Member 'AkWaapiCalls_RegisterWaapiProjectLoadedCallback::Callback' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_RegisterWaapiProjectLoadedCallback, ReturnValue) == 0x000010, "Member 'AkWaapiCalls_RegisterWaapiProjectLoadedCallback::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.SetSubscriptionID
// 0x0010 (0x0010 - 0x0000)
struct AkWaapiCalls_SetSubscriptionID final
{
public:
	struct FAkWaapiSubscriptionId                 Subscription;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiCalls_SetSubscriptionID) == 0x000008, "Wrong alignment on AkWaapiCalls_SetSubscriptionID");
static_assert(sizeof(AkWaapiCalls_SetSubscriptionID) == 0x000010, "Wrong size on AkWaapiCalls_SetSubscriptionID");
static_assert(offsetof(AkWaapiCalls_SetSubscriptionID, Subscription) == 0x000000, "Member 'AkWaapiCalls_SetSubscriptionID::Subscription' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SetSubscriptionID, ID) == 0x000008, "Member 'AkWaapiCalls_SetSubscriptionID::ID' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.SubscribeToWaapi
// 0x0050 (0x0050 - 0x0000)
struct AkWaapiCalls_SubscribeToWaapi final
{
public:
	struct FAkWaapiUri                            WaapiUri;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     WaapiOptions;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FAkWaapiSubscriptionId& SubscriptionId, const struct FAKWaapiJsonObject& WaapiJsonObject)> Callback; // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAkWaapiSubscriptionId                 SubscriptionId;                                    // 0x0030(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SubscriptionDone;                                  // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiCalls_SubscribeToWaapi) == 0x000008, "Wrong alignment on AkWaapiCalls_SubscribeToWaapi");
static_assert(sizeof(AkWaapiCalls_SubscribeToWaapi) == 0x000050, "Wrong size on AkWaapiCalls_SubscribeToWaapi");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, WaapiUri) == 0x000000, "Member 'AkWaapiCalls_SubscribeToWaapi::WaapiUri' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, WaapiOptions) == 0x000010, "Member 'AkWaapiCalls_SubscribeToWaapi::WaapiOptions' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, Callback) == 0x000020, "Member 'AkWaapiCalls_SubscribeToWaapi::Callback' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, SubscriptionId) == 0x000030, "Member 'AkWaapiCalls_SubscribeToWaapi::SubscriptionId' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, SubscriptionDone) == 0x000038, "Member 'AkWaapiCalls_SubscribeToWaapi::SubscriptionDone' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_SubscribeToWaapi, ReturnValue) == 0x000040, "Member 'AkWaapiCalls_SubscribeToWaapi::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiCalls.Unsubscribe
// 0x0020 (0x0020 - 0x0000)
struct AkWaapiCalls_Unsubscribe final
{
public:
	struct FAkWaapiSubscriptionId                 SubscriptionId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UnsubscriptionDone;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiCalls_Unsubscribe) == 0x000008, "Wrong alignment on AkWaapiCalls_Unsubscribe");
static_assert(sizeof(AkWaapiCalls_Unsubscribe) == 0x000020, "Wrong size on AkWaapiCalls_Unsubscribe");
static_assert(offsetof(AkWaapiCalls_Unsubscribe, SubscriptionId) == 0x000000, "Member 'AkWaapiCalls_Unsubscribe::SubscriptionId' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_Unsubscribe, UnsubscriptionDone) == 0x000008, "Member 'AkWaapiCalls_Unsubscribe::UnsubscriptionDone' has a wrong offset!");
static_assert(offsetof(AkWaapiCalls_Unsubscribe, ReturnValue) == 0x000010, "Member 'AkWaapiCalls_Unsubscribe::ReturnValue' has a wrong offset!");

// Function AkAudio.SAkWaapiFieldNamesConv.Conv_FAkWaapiFieldNamesToString
// 0x0020 (0x0020 - 0x0000)
struct SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString final
{
public:
	struct FAkWaapiFieldNames                     INAkWaapiFieldNames;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString) == 0x000008, "Wrong alignment on SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString");
static_assert(sizeof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString) == 0x000020, "Wrong size on SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString");
static_assert(offsetof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString, INAkWaapiFieldNames) == 0x000000, "Member 'SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString::INAkWaapiFieldNames' has a wrong offset!");
static_assert(offsetof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString, ReturnValue) == 0x000010, "Member 'SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToString::ReturnValue' has a wrong offset!");

// Function AkAudio.SAkWaapiFieldNamesConv.Conv_FAkWaapiFieldNamesToText
// 0x0028 (0x0028 - 0x0000)
struct SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText final
{
public:
	struct FAkWaapiFieldNames                     INAkWaapiFieldNames;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText) == 0x000008, "Wrong alignment on SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText");
static_assert(sizeof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText) == 0x000028, "Wrong size on SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText");
static_assert(offsetof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText, INAkWaapiFieldNames) == 0x000000, "Member 'SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText::INAkWaapiFieldNames' has a wrong offset!");
static_assert(offsetof(SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText, ReturnValue) == 0x000010, "Member 'SAkWaapiFieldNamesConv_Conv_FAkWaapiFieldNamesToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.Conv_FAKWaapiJsonObjectToString
// 0x0020 (0x0020 - 0x0000)
struct AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString final
{
public:
	struct FAKWaapiJsonObject                     INAKWaapiJsonObject;                               // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString) == 0x000008, "Wrong alignment on AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString");
static_assert(sizeof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString) == 0x000020, "Wrong size on AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString");
static_assert(offsetof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString, INAKWaapiJsonObject) == 0x000000, "Member 'AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString::INAKWaapiJsonObject' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString, ReturnValue) == 0x000010, "Member 'AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToString::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.Conv_FAKWaapiJsonObjectToText
// 0x0028 (0x0028 - 0x0000)
struct AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText final
{
public:
	struct FAKWaapiJsonObject                     INAKWaapiJsonObject;                               // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText) == 0x000008, "Wrong alignment on AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText");
static_assert(sizeof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText) == 0x000028, "Wrong size on AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText");
static_assert(offsetof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText, INAKWaapiJsonObject) == 0x000000, "Member 'AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText::INAKWaapiJsonObject' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText, ReturnValue) == 0x000010, "Member 'AkWaapiJsonManager_Conv_FAKWaapiJsonObjectToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetArrayField
// 0x0030 (0x0030 - 0x0000)
struct AkWaapiJsonManager_GetArrayField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FAKWaapiJsonObject>             ReturnValue;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_GetArrayField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetArrayField");
static_assert(sizeof(AkWaapiJsonManager_GetArrayField) == 0x000030, "Wrong size on AkWaapiJsonManager_GetArrayField");
static_assert(offsetof(AkWaapiJsonManager_GetArrayField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetArrayField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetArrayField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetArrayField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetArrayField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetBoolField
// 0x0028 (0x0028 - 0x0000)
struct AkWaapiJsonManager_GetBoolField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiJsonManager_GetBoolField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetBoolField");
static_assert(sizeof(AkWaapiJsonManager_GetBoolField) == 0x000028, "Wrong size on AkWaapiJsonManager_GetBoolField");
static_assert(offsetof(AkWaapiJsonManager_GetBoolField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetBoolField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetBoolField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetBoolField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetBoolField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetIntegerField
// 0x0028 (0x0028 - 0x0000)
struct AkWaapiJsonManager_GetIntegerField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiJsonManager_GetIntegerField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetIntegerField");
static_assert(sizeof(AkWaapiJsonManager_GetIntegerField) == 0x000028, "Wrong size on AkWaapiJsonManager_GetIntegerField");
static_assert(offsetof(AkWaapiJsonManager_GetIntegerField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetIntegerField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetIntegerField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetIntegerField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetIntegerField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetIntegerField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetNumberField
// 0x0028 (0x0028 - 0x0000)
struct AkWaapiJsonManager_GetNumberField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkWaapiJsonManager_GetNumberField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetNumberField");
static_assert(sizeof(AkWaapiJsonManager_GetNumberField) == 0x000028, "Wrong size on AkWaapiJsonManager_GetNumberField");
static_assert(offsetof(AkWaapiJsonManager_GetNumberField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetNumberField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetNumberField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetNumberField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetNumberField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetObjectField
// 0x0030 (0x0030 - 0x0000)
struct AkWaapiJsonManager_GetObjectField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_GetObjectField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetObjectField");
static_assert(sizeof(AkWaapiJsonManager_GetObjectField) == 0x000030, "Wrong size on AkWaapiJsonManager_GetObjectField");
static_assert(offsetof(AkWaapiJsonManager_GetObjectField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetObjectField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetObjectField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetObjectField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetObjectField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.GetStringField
// 0x0030 (0x0030 - 0x0000)
struct AkWaapiJsonManager_GetStringField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_GetStringField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_GetStringField");
static_assert(sizeof(AkWaapiJsonManager_GetStringField) == 0x000030, "Wrong size on AkWaapiJsonManager_GetStringField");
static_assert(offsetof(AkWaapiJsonManager_GetStringField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_GetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetStringField, Target) == 0x000010, "Member 'AkWaapiJsonManager_GetStringField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_GetStringField, ReturnValue) == 0x000020, "Member 'AkWaapiJsonManager_GetStringField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetArrayObjectFields
// 0x0040 (0x0040 - 0x0000)
struct AkWaapiJsonManager_SetArrayObjectFields final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FAKWaapiJsonObject>             FieldObjectValues;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetArrayObjectFields) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetArrayObjectFields");
static_assert(sizeof(AkWaapiJsonManager_SetArrayObjectFields) == 0x000040, "Wrong size on AkWaapiJsonManager_SetArrayObjectFields");
static_assert(offsetof(AkWaapiJsonManager_SetArrayObjectFields, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetArrayObjectFields::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayObjectFields, FieldObjectValues) == 0x000010, "Member 'AkWaapiJsonManager_SetArrayObjectFields::FieldObjectValues' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayObjectFields, Target) == 0x000020, "Member 'AkWaapiJsonManager_SetArrayObjectFields::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayObjectFields, ReturnValue) == 0x000030, "Member 'AkWaapiJsonManager_SetArrayObjectFields::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetArrayStringFields
// 0x0040 (0x0040 - 0x0000)
struct AkWaapiJsonManager_SetArrayStringFields final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FieldStringValues;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetArrayStringFields) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetArrayStringFields");
static_assert(sizeof(AkWaapiJsonManager_SetArrayStringFields) == 0x000040, "Wrong size on AkWaapiJsonManager_SetArrayStringFields");
static_assert(offsetof(AkWaapiJsonManager_SetArrayStringFields, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetArrayStringFields::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayStringFields, FieldStringValues) == 0x000010, "Member 'AkWaapiJsonManager_SetArrayStringFields::FieldStringValues' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayStringFields, Target) == 0x000020, "Member 'AkWaapiJsonManager_SetArrayStringFields::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetArrayStringFields, ReturnValue) == 0x000030, "Member 'AkWaapiJsonManager_SetArrayStringFields::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetBoolField
// 0x0038 (0x0038 - 0x0000)
struct AkWaapiJsonManager_SetBoolField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          FieldValue;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAKWaapiJsonObject                     Target;                                            // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetBoolField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetBoolField");
static_assert(sizeof(AkWaapiJsonManager_SetBoolField) == 0x000038, "Wrong size on AkWaapiJsonManager_SetBoolField");
static_assert(offsetof(AkWaapiJsonManager_SetBoolField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetBoolField, FieldValue) == 0x000010, "Member 'AkWaapiJsonManager_SetBoolField::FieldValue' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetBoolField, Target) == 0x000018, "Member 'AkWaapiJsonManager_SetBoolField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetBoolField, ReturnValue) == 0x000028, "Member 'AkWaapiJsonManager_SetBoolField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetNumberField
// 0x0038 (0x0038 - 0x0000)
struct AkWaapiJsonManager_SetNumberField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         FieldValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAKWaapiJsonObject                     Target;                                            // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetNumberField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetNumberField");
static_assert(sizeof(AkWaapiJsonManager_SetNumberField) == 0x000038, "Wrong size on AkWaapiJsonManager_SetNumberField");
static_assert(offsetof(AkWaapiJsonManager_SetNumberField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetNumberField, FieldValue) == 0x000010, "Member 'AkWaapiJsonManager_SetNumberField::FieldValue' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetNumberField, Target) == 0x000018, "Member 'AkWaapiJsonManager_SetNumberField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetNumberField, ReturnValue) == 0x000028, "Member 'AkWaapiJsonManager_SetNumberField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetObjectField
// 0x0040 (0x0040 - 0x0000)
struct AkWaapiJsonManager_SetObjectField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     FieldValue;                                        // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetObjectField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetObjectField");
static_assert(sizeof(AkWaapiJsonManager_SetObjectField) == 0x000040, "Wrong size on AkWaapiJsonManager_SetObjectField");
static_assert(offsetof(AkWaapiJsonManager_SetObjectField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetObjectField, FieldValue) == 0x000010, "Member 'AkWaapiJsonManager_SetObjectField::FieldValue' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetObjectField, Target) == 0x000020, "Member 'AkWaapiJsonManager_SetObjectField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetObjectField, ReturnValue) == 0x000030, "Member 'AkWaapiJsonManager_SetObjectField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiJsonManager.SetStringField
// 0x0040 (0x0040 - 0x0000)
struct AkWaapiJsonManager_SetStringField final
{
public:
	struct FAkWaapiFieldNames                     FieldName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FieldValue;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     Target;                                            // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FAKWaapiJsonObject                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiJsonManager_SetStringField) == 0x000008, "Wrong alignment on AkWaapiJsonManager_SetStringField");
static_assert(sizeof(AkWaapiJsonManager_SetStringField) == 0x000040, "Wrong size on AkWaapiJsonManager_SetStringField");
static_assert(offsetof(AkWaapiJsonManager_SetStringField, FieldName) == 0x000000, "Member 'AkWaapiJsonManager_SetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetStringField, FieldValue) == 0x000010, "Member 'AkWaapiJsonManager_SetStringField::FieldValue' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetStringField, Target) == 0x000020, "Member 'AkWaapiJsonManager_SetStringField::Target' has a wrong offset!");
static_assert(offsetof(AkWaapiJsonManager_SetStringField, ReturnValue) == 0x000030, "Member 'AkWaapiJsonManager_SetStringField::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiUriConv.Conv_FAkWaapiUriToString
// 0x0020 (0x0020 - 0x0000)
struct AkWaapiUriConv_Conv_FAkWaapiUriToString final
{
public:
	struct FAkWaapiUri                            INAkWaapiUri;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiUriConv_Conv_FAkWaapiUriToString) == 0x000008, "Wrong alignment on AkWaapiUriConv_Conv_FAkWaapiUriToString");
static_assert(sizeof(AkWaapiUriConv_Conv_FAkWaapiUriToString) == 0x000020, "Wrong size on AkWaapiUriConv_Conv_FAkWaapiUriToString");
static_assert(offsetof(AkWaapiUriConv_Conv_FAkWaapiUriToString, INAkWaapiUri) == 0x000000, "Member 'AkWaapiUriConv_Conv_FAkWaapiUriToString::INAkWaapiUri' has a wrong offset!");
static_assert(offsetof(AkWaapiUriConv_Conv_FAkWaapiUriToString, ReturnValue) == 0x000010, "Member 'AkWaapiUriConv_Conv_FAkWaapiUriToString::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWaapiUriConv.Conv_FAkWaapiUriToText
// 0x0028 (0x0028 - 0x0000)
struct AkWaapiUriConv_Conv_FAkWaapiUriToText final
{
public:
	struct FAkWaapiUri                            INAkWaapiUri;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWaapiUriConv_Conv_FAkWaapiUriToText) == 0x000008, "Wrong alignment on AkWaapiUriConv_Conv_FAkWaapiUriToText");
static_assert(sizeof(AkWaapiUriConv_Conv_FAkWaapiUriToText) == 0x000028, "Wrong size on AkWaapiUriConv_Conv_FAkWaapiUriToText");
static_assert(offsetof(AkWaapiUriConv_Conv_FAkWaapiUriToText, INAkWaapiUri) == 0x000000, "Member 'AkWaapiUriConv_Conv_FAkWaapiUriToText::INAkWaapiUri' has a wrong offset!");
static_assert(offsetof(AkWaapiUriConv_Conv_FAkWaapiUriToText, ReturnValue) == 0x000010, "Member 'AkWaapiUriConv_Conv_FAkWaapiUriToText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWindowsInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkWindowsInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWindowsInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkWindowsInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkWindowsInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkWindowsInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkWindowsInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkWindowsInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AkWwiseTree.SetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkWwiseTree_SetSearchText final
{
public:
	class FString                                 newText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWwiseTree_SetSearchText) == 0x000008, "Wrong alignment on AkWwiseTree_SetSearchText");
static_assert(sizeof(AkWwiseTree_SetSearchText) == 0x000010, "Wrong size on AkWwiseTree_SetSearchText");
static_assert(offsetof(AkWwiseTree_SetSearchText, newText) == 0x000000, "Member 'AkWwiseTree_SetSearchText::newText' has a wrong offset!");

// Function AkAudio.AkWwiseTree.GetSearchText
// 0x0010 (0x0010 - 0x0000)
struct AkWwiseTree_GetSearchText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWwiseTree_GetSearchText) == 0x000008, "Wrong alignment on AkWwiseTree_GetSearchText");
static_assert(sizeof(AkWwiseTree_GetSearchText) == 0x000010, "Wrong size on AkWwiseTree_GetSearchText");
static_assert(offsetof(AkWwiseTree_GetSearchText, ReturnValue) == 0x000000, "Member 'AkWwiseTree_GetSearchText::ReturnValue' has a wrong offset!");

// Function AkAudio.AkWwiseTree.GetSelectedItem
// 0x0030 (0x0030 - 0x0000)
struct AkWwiseTree_GetSelectedItem final
{
public:
	struct FAkWwiseObjectDetails                  ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkWwiseTree_GetSelectedItem) == 0x000008, "Wrong alignment on AkWwiseTree_GetSelectedItem");
static_assert(sizeof(AkWwiseTree_GetSelectedItem) == 0x000030, "Wrong size on AkWwiseTree_GetSelectedItem");
static_assert(offsetof(AkWwiseTree_GetSelectedItem, ReturnValue) == 0x000000, "Member 'AkWwiseTree_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function AkAudio.AkXboxOneInitializationSettings.MigrateMultiCoreRendering
// 0x0001 (0x0001 - 0x0000)
struct AkXboxOneInitializationSettings_MigrateMultiCoreRendering final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkXboxOneInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong alignment on AkXboxOneInitializationSettings_MigrateMultiCoreRendering");
static_assert(sizeof(AkXboxOneInitializationSettings_MigrateMultiCoreRendering) == 0x000001, "Wrong size on AkXboxOneInitializationSettings_MigrateMultiCoreRendering");
static_assert(offsetof(AkXboxOneInitializationSettings_MigrateMultiCoreRendering, NewValue) == 0x000000, "Member 'AkXboxOneInitializationSettings_MigrateMultiCoreRendering::NewValue' has a wrong offset!");

// Function AkAudio.AudioManager.ExecuteActionOnEvent
// 0x0028 (0x0028 - 0x0000)
struct AudioManager_ExecuteActionOnEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkActionOnEventType                          ActionType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_ExecuteActionOnEvent) == 0x000008, "Wrong alignment on AudioManager_ExecuteActionOnEvent");
static_assert(sizeof(AudioManager_ExecuteActionOnEvent) == 0x000028, "Wrong size on AudioManager_ExecuteActionOnEvent");
static_assert(offsetof(AudioManager_ExecuteActionOnEvent, EventName) == 0x000000, "Member 'AudioManager_ExecuteActionOnEvent::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_ExecuteActionOnEvent, Emitter) == 0x000010, "Member 'AudioManager_ExecuteActionOnEvent::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_ExecuteActionOnEvent, ActionType) == 0x000018, "Member 'AudioManager_ExecuteActionOnEvent::ActionType' has a wrong offset!");
static_assert(offsetof(AudioManager_ExecuteActionOnEvent, FadeTime) == 0x00001C, "Member 'AudioManager_ExecuteActionOnEvent::FadeTime' has a wrong offset!");
static_assert(offsetof(AudioManager_ExecuteActionOnEvent, ReturnValue) == 0x000020, "Member 'AudioManager_ExecuteActionOnEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.GetRTPCValue
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_GetRTPCValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_GetRTPCValue) == 0x000008, "Wrong alignment on AudioManager_GetRTPCValue");
static_assert(sizeof(AudioManager_GetRTPCValue) == 0x000020, "Wrong size on AudioManager_GetRTPCValue");
static_assert(offsetof(AudioManager_GetRTPCValue, ParameterName) == 0x000000, "Member 'AudioManager_GetRTPCValue::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioManager_GetRTPCValue, Emitter) == 0x000010, "Member 'AudioManager_GetRTPCValue::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_GetRTPCValue, ReturnValue) == 0x000018, "Member 'AudioManager_GetRTPCValue::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.GetState
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_GetState final
{
public:
	class FString                                 StateGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_GetState) == 0x000008, "Wrong alignment on AudioManager_GetState");
static_assert(sizeof(AudioManager_GetState) == 0x000020, "Wrong size on AudioManager_GetState");
static_assert(offsetof(AudioManager_GetState, StateGroupName) == 0x000000, "Member 'AudioManager_GetState::StateGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_GetState, ReturnValue) == 0x000010, "Member 'AudioManager_GetState::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.GetSwitch
// 0x0028 (0x0028 - 0x0000)
struct AudioManager_GetSwitch final
{
public:
	class FString                                 SwitchGroupName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_GetSwitch) == 0x000008, "Wrong alignment on AudioManager_GetSwitch");
static_assert(sizeof(AudioManager_GetSwitch) == 0x000028, "Wrong size on AudioManager_GetSwitch");
static_assert(offsetof(AudioManager_GetSwitch, SwitchGroupName) == 0x000000, "Member 'AudioManager_GetSwitch::SwitchGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_GetSwitch, Target) == 0x000010, "Member 'AudioManager_GetSwitch::Target' has a wrong offset!");
static_assert(offsetof(AudioManager_GetSwitch, ReturnValue) == 0x000018, "Member 'AudioManager_GetSwitch::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.IsEventPlaying
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_IsEventPlaying final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_IsEventPlaying) == 0x000008, "Wrong alignment on AudioManager_IsEventPlaying");
static_assert(sizeof(AudioManager_IsEventPlaying) == 0x000020, "Wrong size on AudioManager_IsEventPlaying");
static_assert(offsetof(AudioManager_IsEventPlaying, EventName) == 0x000000, "Member 'AudioManager_IsEventPlaying::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_IsEventPlaying, Emitter) == 0x000010, "Member 'AudioManager_IsEventPlaying::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_IsEventPlaying, ReturnValue) == 0x000018, "Member 'AudioManager_IsEventPlaying::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.IsStateAt
// 0x0028 (0x0028 - 0x0000)
struct AudioManager_IsStateAt final
{
public:
	class FString                                 StateGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_IsStateAt) == 0x000008, "Wrong alignment on AudioManager_IsStateAt");
static_assert(sizeof(AudioManager_IsStateAt) == 0x000028, "Wrong size on AudioManager_IsStateAt");
static_assert(offsetof(AudioManager_IsStateAt, StateGroupName) == 0x000000, "Member 'AudioManager_IsStateAt::StateGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_IsStateAt, StateName) == 0x000010, "Member 'AudioManager_IsStateAt::StateName' has a wrong offset!");
static_assert(offsetof(AudioManager_IsStateAt, ReturnValue) == 0x000020, "Member 'AudioManager_IsStateAt::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.IsSwitchAt
// 0x0030 (0x0030 - 0x0000)
struct AudioManager_IsSwitchAt final
{
public:
	class FString                                 SwitchGroupName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_IsSwitchAt) == 0x000008, "Wrong alignment on AudioManager_IsSwitchAt");
static_assert(sizeof(AudioManager_IsSwitchAt) == 0x000030, "Wrong size on AudioManager_IsSwitchAt");
static_assert(offsetof(AudioManager_IsSwitchAt, SwitchGroupName) == 0x000000, "Member 'AudioManager_IsSwitchAt::SwitchGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_IsSwitchAt, SwitchName) == 0x000010, "Member 'AudioManager_IsSwitchAt::SwitchName' has a wrong offset!");
static_assert(offsetof(AudioManager_IsSwitchAt, Target) == 0x000020, "Member 'AudioManager_IsSwitchAt::Target' has a wrong offset!");
static_assert(offsetof(AudioManager_IsSwitchAt, ReturnValue) == 0x000028, "Member 'AudioManager_IsSwitchAt::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.LoadBank
// 0x0008 (0x0008 - 0x0000)
struct AudioManager_LoadBank final
{
public:
	class UAkAudioBank*                           BankReference;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_LoadBank) == 0x000008, "Wrong alignment on AudioManager_LoadBank");
static_assert(sizeof(AudioManager_LoadBank) == 0x000008, "Wrong size on AudioManager_LoadBank");
static_assert(offsetof(AudioManager_LoadBank, BankReference) == 0x000000, "Member 'AudioManager_LoadBank::BankReference' has a wrong offset!");

// Function AkAudio.AudioManager.LoadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AudioManager_LoadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_LoadBankByName) == 0x000008, "Wrong alignment on AudioManager_LoadBankByName");
static_assert(sizeof(AudioManager_LoadBankByName) == 0x000010, "Wrong size on AudioManager_LoadBankByName");
static_assert(offsetof(AudioManager_LoadBankByName, BankName) == 0x000000, "Member 'AudioManager_LoadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AudioManager.LoadBankByNameAsync
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_LoadBankByNameAsync final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> Callback;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_LoadBankByNameAsync) == 0x000008, "Wrong alignment on AudioManager_LoadBankByNameAsync");
static_assert(sizeof(AudioManager_LoadBankByNameAsync) == 0x000020, "Wrong size on AudioManager_LoadBankByNameAsync");
static_assert(offsetof(AudioManager_LoadBankByNameAsync, BankName) == 0x000000, "Member 'AudioManager_LoadBankByNameAsync::BankName' has a wrong offset!");
static_assert(offsetof(AudioManager_LoadBankByNameAsync, Callback) == 0x000010, "Member 'AudioManager_LoadBankByNameAsync::Callback' has a wrong offset!");

// Function AkAudio.AudioManager.PostEvent2D
// 0x0010 (0x0010 - 0x0000)
struct AudioManager_PostEvent2D final
{
public:
	class UAkAudioEvent*                          EventReference;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEvent2D) == 0x000008, "Wrong alignment on AudioManager_PostEvent2D");
static_assert(sizeof(AudioManager_PostEvent2D) == 0x000010, "Wrong size on AudioManager_PostEvent2D");
static_assert(offsetof(AudioManager_PostEvent2D, EventReference) == 0x000000, "Member 'AudioManager_PostEvent2D::EventReference' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent2D, ReturnValue) == 0x000008, "Member 'AudioManager_PostEvent2D::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEvent2DByName
// 0x0018 (0x0018 - 0x0000)
struct AudioManager_PostEvent2DByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEvent2DByName) == 0x000008, "Wrong alignment on AudioManager_PostEvent2DByName");
static_assert(sizeof(AudioManager_PostEvent2DByName) == 0x000018, "Wrong size on AudioManager_PostEvent2DByName");
static_assert(offsetof(AudioManager_PostEvent2DByName, EventName) == 0x000000, "Member 'AudioManager_PostEvent2DByName::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent2DByName, ReturnValue) == 0x000010, "Member 'AudioManager_PostEvent2DByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEvent3D
// 0x0018 (0x0018 - 0x0000)
struct AudioManager_PostEvent3D final
{
public:
	class UAkAudioEvent*                          EventReference;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEvent3D) == 0x000008, "Wrong alignment on AudioManager_PostEvent3D");
static_assert(sizeof(AudioManager_PostEvent3D) == 0x000018, "Wrong size on AudioManager_PostEvent3D");
static_assert(offsetof(AudioManager_PostEvent3D, EventReference) == 0x000000, "Member 'AudioManager_PostEvent3D::EventReference' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent3D, Emitter) == 0x000008, "Member 'AudioManager_PostEvent3D::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent3D, ReturnValue) == 0x000010, "Member 'AudioManager_PostEvent3D::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEvent3DByName
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_PostEvent3DByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          AkGameObject;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEvent3DByName) == 0x000008, "Wrong alignment on AudioManager_PostEvent3DByName");
static_assert(sizeof(AudioManager_PostEvent3DByName) == 0x000020, "Wrong size on AudioManager_PostEvent3DByName");
static_assert(offsetof(AudioManager_PostEvent3DByName, EventName) == 0x000000, "Member 'AudioManager_PostEvent3DByName::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent3DByName, AkGameObject) == 0x000010, "Member 'AudioManager_PostEvent3DByName::AkGameObject' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEvent3DByName, ReturnValue) == 0x000018, "Member 'AudioManager_PostEvent3DByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEventAtLocation
// 0x0030 (0x0030 - 0x0000)
struct AudioManager_PostEventAtLocation final
{
public:
	class UAkAudioEvent*                          EventReference;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEventAtLocation) == 0x000008, "Wrong alignment on AudioManager_PostEventAtLocation");
static_assert(sizeof(AudioManager_PostEventAtLocation) == 0x000030, "Wrong size on AudioManager_PostEventAtLocation");
static_assert(offsetof(AudioManager_PostEventAtLocation, EventReference) == 0x000000, "Member 'AudioManager_PostEventAtLocation::EventReference' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocation, Location) == 0x000008, "Member 'AudioManager_PostEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocation, Rotation) == 0x000014, "Member 'AudioManager_PostEventAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocation, Context) == 0x000020, "Member 'AudioManager_PostEventAtLocation::Context' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocation, ReturnValue) == 0x000028, "Member 'AudioManager_PostEventAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEventAtLocationByName
// 0x0038 (0x0038 - 0x0000)
struct AudioManager_PostEventAtLocationByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          Context;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEventAtLocationByName) == 0x000008, "Wrong alignment on AudioManager_PostEventAtLocationByName");
static_assert(sizeof(AudioManager_PostEventAtLocationByName) == 0x000038, "Wrong size on AudioManager_PostEventAtLocationByName");
static_assert(offsetof(AudioManager_PostEventAtLocationByName, EventName) == 0x000000, "Member 'AudioManager_PostEventAtLocationByName::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByName, Location) == 0x000010, "Member 'AudioManager_PostEventAtLocationByName::Location' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByName, Rotation) == 0x00001C, "Member 'AudioManager_PostEventAtLocationByName::Rotation' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByName, Context) == 0x000028, "Member 'AudioManager_PostEventAtLocationByName::Context' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByName, ReturnValue) == 0x000030, "Member 'AudioManager_PostEventAtLocationByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.PostEventAtLocationByNameEx
// 0x0058 (0x0058 - 0x0000)
struct AudioManager_PostEventAtLocationByNameEx final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          Context;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkAudioParamsSwitch>           Switches;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkAudioParamsRTPC>             RTPCs;                                             // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_PostEventAtLocationByNameEx) == 0x000008, "Wrong alignment on AudioManager_PostEventAtLocationByNameEx");
static_assert(sizeof(AudioManager_PostEventAtLocationByNameEx) == 0x000058, "Wrong size on AudioManager_PostEventAtLocationByNameEx");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, EventName) == 0x000000, "Member 'AudioManager_PostEventAtLocationByNameEx::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, Location) == 0x000010, "Member 'AudioManager_PostEventAtLocationByNameEx::Location' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, Rotation) == 0x00001C, "Member 'AudioManager_PostEventAtLocationByNameEx::Rotation' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, Context) == 0x000028, "Member 'AudioManager_PostEventAtLocationByNameEx::Context' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, Switches) == 0x000030, "Member 'AudioManager_PostEventAtLocationByNameEx::Switches' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, RTPCs) == 0x000040, "Member 'AudioManager_PostEventAtLocationByNameEx::RTPCs' has a wrong offset!");
static_assert(offsetof(AudioManager_PostEventAtLocationByNameEx, ReturnValue) == 0x000050, "Member 'AudioManager_PostEventAtLocationByNameEx::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.ReloadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AudioManager_ReloadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_ReloadBankByName) == 0x000008, "Wrong alignment on AudioManager_ReloadBankByName");
static_assert(sizeof(AudioManager_ReloadBankByName) == 0x000010, "Wrong size on AudioManager_ReloadBankByName");
static_assert(offsetof(AudioManager_ReloadBankByName, BankName) == 0x000000, "Member 'AudioManager_ReloadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AudioManager.ResetRTPCValue
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_ResetRTPCValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_ResetRTPCValue) == 0x000008, "Wrong alignment on AudioManager_ResetRTPCValue");
static_assert(sizeof(AudioManager_ResetRTPCValue) == 0x000020, "Wrong size on AudioManager_ResetRTPCValue");
static_assert(offsetof(AudioManager_ResetRTPCValue, ParameterName) == 0x000000, "Member 'AudioManager_ResetRTPCValue::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioManager_ResetRTPCValue, Emitter) == 0x000010, "Member 'AudioManager_ResetRTPCValue::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_ResetRTPCValue, ReturnValue) == 0x000018, "Member 'AudioManager_ResetRTPCValue::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.SetEmitterRTPC
// 0x0028 (0x0028 - 0x0000)
struct AudioManager_SetEmitterRTPC final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkGameObject*                          Emitter;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateTolerance;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_SetEmitterRTPC) == 0x000008, "Wrong alignment on AudioManager_SetEmitterRTPC");
static_assert(sizeof(AudioManager_SetEmitterRTPC) == 0x000028, "Wrong size on AudioManager_SetEmitterRTPC");
static_assert(offsetof(AudioManager_SetEmitterRTPC, ParameterName) == 0x000000, "Member 'AudioManager_SetEmitterRTPC::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetEmitterRTPC, Value) == 0x000010, "Member 'AudioManager_SetEmitterRTPC::Value' has a wrong offset!");
static_assert(offsetof(AudioManager_SetEmitterRTPC, Emitter) == 0x000018, "Member 'AudioManager_SetEmitterRTPC::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_SetEmitterRTPC, UpdateTolerance) == 0x000020, "Member 'AudioManager_SetEmitterRTPC::UpdateTolerance' has a wrong offset!");
static_assert(offsetof(AudioManager_SetEmitterRTPC, ReturnValue) == 0x000024, "Member 'AudioManager_SetEmitterRTPC::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.SetGlobalRTPC
// 0x0028 (0x0028 - 0x0000)
struct AudioManager_SetGlobalRTPC final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateTolerance;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_SetGlobalRTPC) == 0x000008, "Wrong alignment on AudioManager_SetGlobalRTPC");
static_assert(sizeof(AudioManager_SetGlobalRTPC) == 0x000028, "Wrong size on AudioManager_SetGlobalRTPC");
static_assert(offsetof(AudioManager_SetGlobalRTPC, ParameterName) == 0x000000, "Member 'AudioManager_SetGlobalRTPC::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetGlobalRTPC, Value) == 0x000010, "Member 'AudioManager_SetGlobalRTPC::Value' has a wrong offset!");
static_assert(offsetof(AudioManager_SetGlobalRTPC, UpdateTolerance) == 0x000014, "Member 'AudioManager_SetGlobalRTPC::UpdateTolerance' has a wrong offset!");
static_assert(offsetof(AudioManager_SetGlobalRTPC, Context) == 0x000018, "Member 'AudioManager_SetGlobalRTPC::Context' has a wrong offset!");
static_assert(offsetof(AudioManager_SetGlobalRTPC, ReturnValue) == 0x000020, "Member 'AudioManager_SetGlobalRTPC::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.SetMusicEnabled
// 0x0001 (0x0001 - 0x0000)
struct AudioManager_SetMusicEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetMusicEnabled) == 0x000001, "Wrong alignment on AudioManager_SetMusicEnabled");
static_assert(sizeof(AudioManager_SetMusicEnabled) == 0x000001, "Wrong size on AudioManager_SetMusicEnabled");
static_assert(offsetof(AudioManager_SetMusicEnabled, Enabled) == 0x000000, "Member 'AudioManager_SetMusicEnabled::Enabled' has a wrong offset!");

// Function AkAudio.AudioManager.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct AudioManager_SetMusicVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetMusicVolume) == 0x000004, "Wrong alignment on AudioManager_SetMusicVolume");
static_assert(sizeof(AudioManager_SetMusicVolume) == 0x000004, "Wrong size on AudioManager_SetMusicVolume");
static_assert(offsetof(AudioManager_SetMusicVolume, Volume) == 0x000000, "Member 'AudioManager_SetMusicVolume::Volume' has a wrong offset!");

// Function AkAudio.AudioManager.SetSoundEnabled
// 0x0001 (0x0001 - 0x0000)
struct AudioManager_SetSoundEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetSoundEnabled) == 0x000001, "Wrong alignment on AudioManager_SetSoundEnabled");
static_assert(sizeof(AudioManager_SetSoundEnabled) == 0x000001, "Wrong size on AudioManager_SetSoundEnabled");
static_assert(offsetof(AudioManager_SetSoundEnabled, Enabled) == 0x000000, "Member 'AudioManager_SetSoundEnabled::Enabled' has a wrong offset!");

// Function AkAudio.AudioManager.SetSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct AudioManager_SetSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetSoundVolume) == 0x000004, "Wrong alignment on AudioManager_SetSoundVolume");
static_assert(sizeof(AudioManager_SetSoundVolume) == 0x000004, "Wrong size on AudioManager_SetSoundVolume");
static_assert(offsetof(AudioManager_SetSoundVolume, Volume) == 0x000000, "Member 'AudioManager_SetSoundVolume::Volume' has a wrong offset!");

// Function AkAudio.AudioManager.SetState
// 0x0030 (0x0030 - 0x0000)
struct AudioManager_SetState final
{
public:
	class FString                                 StateGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Context;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_SetState) == 0x000008, "Wrong alignment on AudioManager_SetState");
static_assert(sizeof(AudioManager_SetState) == 0x000030, "Wrong size on AudioManager_SetState");
static_assert(offsetof(AudioManager_SetState, StateGroupName) == 0x000000, "Member 'AudioManager_SetState::StateGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetState, StateName) == 0x000010, "Member 'AudioManager_SetState::StateName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetState, Context) == 0x000020, "Member 'AudioManager_SetState::Context' has a wrong offset!");
static_assert(offsetof(AudioManager_SetState, ReturnValue) == 0x000028, "Member 'AudioManager_SetState::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.SetSwitch
// 0x0030 (0x0030 - 0x0000)
struct AudioManager_SetSwitch final
{
public:
	class FString                                 SwitchGroupName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_SetSwitch) == 0x000008, "Wrong alignment on AudioManager_SetSwitch");
static_assert(sizeof(AudioManager_SetSwitch) == 0x000030, "Wrong size on AudioManager_SetSwitch");
static_assert(offsetof(AudioManager_SetSwitch, SwitchGroupName) == 0x000000, "Member 'AudioManager_SetSwitch::SwitchGroupName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetSwitch, SwitchName) == 0x000010, "Member 'AudioManager_SetSwitch::SwitchName' has a wrong offset!");
static_assert(offsetof(AudioManager_SetSwitch, Target) == 0x000020, "Member 'AudioManager_SetSwitch::Target' has a wrong offset!");
static_assert(offsetof(AudioManager_SetSwitch, ReturnValue) == 0x000028, "Member 'AudioManager_SetSwitch::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.SetVoiceEnabled
// 0x0001 (0x0001 - 0x0000)
struct AudioManager_SetVoiceEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetVoiceEnabled) == 0x000001, "Wrong alignment on AudioManager_SetVoiceEnabled");
static_assert(sizeof(AudioManager_SetVoiceEnabled) == 0x000001, "Wrong size on AudioManager_SetVoiceEnabled");
static_assert(offsetof(AudioManager_SetVoiceEnabled, Enabled) == 0x000000, "Member 'AudioManager_SetVoiceEnabled::Enabled' has a wrong offset!");

// Function AkAudio.AudioManager.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct AudioManager_SetVoiceVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_SetVoiceVolume) == 0x000004, "Wrong alignment on AudioManager_SetVoiceVolume");
static_assert(sizeof(AudioManager_SetVoiceVolume) == 0x000004, "Wrong size on AudioManager_SetVoiceVolume");
static_assert(offsetof(AudioManager_SetVoiceVolume, Volume) == 0x000000, "Member 'AudioManager_SetVoiceVolume::Volume' has a wrong offset!");

// Function AkAudio.AudioManager.StopEvent
// 0x0018 (0x0018 - 0x0000)
struct AudioManager_StopEvent final
{
public:
	class UAkAudioEvent*                          EventReference;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_StopEvent) == 0x000008, "Wrong alignment on AudioManager_StopEvent");
static_assert(sizeof(AudioManager_StopEvent) == 0x000018, "Wrong size on AudioManager_StopEvent");
static_assert(offsetof(AudioManager_StopEvent, EventReference) == 0x000000, "Member 'AudioManager_StopEvent::EventReference' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEvent, Emitter) == 0x000008, "Member 'AudioManager_StopEvent::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEvent, FadeOutTime) == 0x000010, "Member 'AudioManager_StopEvent::FadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEvent, ReturnValue) == 0x000014, "Member 'AudioManager_StopEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.StopEventByName
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_StopEventByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkGameObject*                          Emitter;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_StopEventByName) == 0x000008, "Wrong alignment on AudioManager_StopEventByName");
static_assert(sizeof(AudioManager_StopEventByName) == 0x000020, "Wrong size on AudioManager_StopEventByName");
static_assert(offsetof(AudioManager_StopEventByName, EventName) == 0x000000, "Member 'AudioManager_StopEventByName::EventName' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEventByName, Emitter) == 0x000010, "Member 'AudioManager_StopEventByName::Emitter' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEventByName, FadeOutTime) == 0x000018, "Member 'AudioManager_StopEventByName::FadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEventByName, ReturnValue) == 0x00001C, "Member 'AudioManager_StopEventByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.StopEventByPlayingID
// 0x000C (0x000C - 0x0000)
struct AudioManager_StopEventByPlayingID final
{
public:
	int32                                         InPlayingID;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioManager_StopEventByPlayingID) == 0x000004, "Wrong alignment on AudioManager_StopEventByPlayingID");
static_assert(sizeof(AudioManager_StopEventByPlayingID) == 0x00000C, "Wrong size on AudioManager_StopEventByPlayingID");
static_assert(offsetof(AudioManager_StopEventByPlayingID, InPlayingID) == 0x000000, "Member 'AudioManager_StopEventByPlayingID::InPlayingID' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEventByPlayingID, FadeOutTime) == 0x000004, "Member 'AudioManager_StopEventByPlayingID::FadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioManager_StopEventByPlayingID, ReturnValue) == 0x000008, "Member 'AudioManager_StopEventByPlayingID::ReturnValue' has a wrong offset!");

// Function AkAudio.AudioManager.UnloadBank
// 0x0010 (0x0010 - 0x0000)
struct AudioManager_UnloadBank final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_UnloadBank) == 0x000008, "Wrong alignment on AudioManager_UnloadBank");
static_assert(sizeof(AudioManager_UnloadBank) == 0x000010, "Wrong size on AudioManager_UnloadBank");
static_assert(offsetof(AudioManager_UnloadBank, BankName) == 0x000000, "Member 'AudioManager_UnloadBank::BankName' has a wrong offset!");

// Function AkAudio.AudioManager.UnloadBankAsync
// 0x0020 (0x0020 - 0x0000)
struct AudioManager_UnloadBankAsync final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result, uint32 BankId)> Callback;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioManager_UnloadBankAsync) == 0x000008, "Wrong alignment on AudioManager_UnloadBankAsync");
static_assert(sizeof(AudioManager_UnloadBankAsync) == 0x000020, "Wrong size on AudioManager_UnloadBankAsync");
static_assert(offsetof(AudioManager_UnloadBankAsync, BankName) == 0x000000, "Member 'AudioManager_UnloadBankAsync::BankName' has a wrong offset!");
static_assert(offsetof(AudioManager_UnloadBankAsync, Callback) == 0x000010, "Member 'AudioManager_UnloadBankAsync::Callback' has a wrong offset!");

// Function AkAudio.BankManager.OnBankAsyncLoaded
// 0x0008 (0x0008 - 0x0000)
struct BankManager_OnBankAsyncLoaded final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BankId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BankManager_OnBankAsyncLoaded) == 0x000004, "Wrong alignment on BankManager_OnBankAsyncLoaded");
static_assert(sizeof(BankManager_OnBankAsyncLoaded) == 0x000008, "Wrong size on BankManager_OnBankAsyncLoaded");
static_assert(offsetof(BankManager_OnBankAsyncLoaded, Result) == 0x000000, "Member 'BankManager_OnBankAsyncLoaded::Result' has a wrong offset!");
static_assert(offsetof(BankManager_OnBankAsyncLoaded, BankId) == 0x000004, "Member 'BankManager_OnBankAsyncLoaded::BankId' has a wrong offset!");

// Function AkAudio.BankManager.OnBankAsyncUnloaded
// 0x0008 (0x0008 - 0x0000)
struct BankManager_OnBankAsyncUnloaded final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BankId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BankManager_OnBankAsyncUnloaded) == 0x000004, "Wrong alignment on BankManager_OnBankAsyncUnloaded");
static_assert(sizeof(BankManager_OnBankAsyncUnloaded) == 0x000008, "Wrong size on BankManager_OnBankAsyncUnloaded");
static_assert(offsetof(BankManager_OnBankAsyncUnloaded, Result) == 0x000000, "Member 'BankManager_OnBankAsyncUnloaded::Result' has a wrong offset!");
static_assert(offsetof(BankManager_OnBankAsyncUnloaded, BankId) == 0x000004, "Member 'BankManager_OnBankAsyncUnloaded::BankId' has a wrong offset!");

// Function AkAudio.EmitterManager.IsSelfEmitter
// 0x0010 (0x0010 - 0x0000)
struct EmitterManager_IsSelfEmitter final
{
public:
	const class UAKComponent*                     Emitter;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmitterManager_IsSelfEmitter) == 0x000008, "Wrong alignment on EmitterManager_IsSelfEmitter");
static_assert(sizeof(EmitterManager_IsSelfEmitter) == 0x000010, "Wrong size on EmitterManager_IsSelfEmitter");
static_assert(offsetof(EmitterManager_IsSelfEmitter, Emitter) == 0x000000, "Member 'EmitterManager_IsSelfEmitter::Emitter' has a wrong offset!");
static_assert(offsetof(EmitterManager_IsSelfEmitter, ReturnValue) == 0x000008, "Member 'EmitterManager_IsSelfEmitter::ReturnValue' has a wrong offset!");

// Function AkAudio.EmitterManager.RemoveSelfEmitter
// 0x0008 (0x0008 - 0x0000)
struct EmitterManager_RemoveSelfEmitter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmitterManager_RemoveSelfEmitter) == 0x000008, "Wrong alignment on EmitterManager_RemoveSelfEmitter");
static_assert(sizeof(EmitterManager_RemoveSelfEmitter) == 0x000008, "Wrong size on EmitterManager_RemoveSelfEmitter");
static_assert(offsetof(EmitterManager_RemoveSelfEmitter, WorldContextObject) == 0x000000, "Member 'EmitterManager_RemoveSelfEmitter::WorldContextObject' has a wrong offset!");

// Function AkAudio.EmitterManager.SetSelfEmitter
// 0x0008 (0x0008 - 0x0000)
struct EmitterManager_SetSelfEmitter final
{
public:
	class UAKComponent*                           Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmitterManager_SetSelfEmitter) == 0x000008, "Wrong alignment on EmitterManager_SetSelfEmitter");
static_assert(sizeof(EmitterManager_SetSelfEmitter) == 0x000008, "Wrong size on EmitterManager_SetSelfEmitter");
static_assert(offsetof(EmitterManager_SetSelfEmitter, Emitter) == 0x000000, "Member 'EmitterManager_SetSelfEmitter::Emitter' has a wrong offset!");

// Function AkAudio.PostEventAsync.PostEventAsync
// 0x0050 (0x0050 - 0x0000)
struct PostEventAsync_PostEventAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostEventAsync*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostEventAsync_PostEventAsync) == 0x000008, "Wrong alignment on PostEventAsync_PostEventAsync");
static_assert(sizeof(PostEventAsync_PostEventAsync) == 0x000050, "Wrong size on PostEventAsync_PostEventAsync");
static_assert(offsetof(PostEventAsync_PostEventAsync, WorldContextObject) == 0x000000, "Member 'PostEventAsync_PostEventAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, AkEvent) == 0x000008, "Member 'PostEventAsync_PostEventAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, Actor) == 0x000010, "Member 'PostEventAsync_PostEventAsync::Actor' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, CallbackMask) == 0x000018, "Member 'PostEventAsync_PostEventAsync::CallbackMask' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, PostEventCallback) == 0x00001C, "Member 'PostEventAsync_PostEventAsync::PostEventCallback' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, ExternalSources) == 0x000030, "Member 'PostEventAsync_PostEventAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, bStopWhenAttachedToDestroyed) == 0x000040, "Member 'PostEventAsync_PostEventAsync::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(PostEventAsync_PostEventAsync, ReturnValue) == 0x000048, "Member 'PostEventAsync_PostEventAsync::ReturnValue' has a wrong offset!");

// Function AkAudio.PostEventAtLocationAsync.PostEventAtLocationAsync
// 0x0030 (0x0030 - 0x0000)
struct PostEventAtLocationAsync_PostEventAtLocationAsync final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPostEventAtLocationAsync*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostEventAtLocationAsync_PostEventAtLocationAsync) == 0x000008, "Wrong alignment on PostEventAtLocationAsync_PostEventAtLocationAsync");
static_assert(sizeof(PostEventAtLocationAsync_PostEventAtLocationAsync) == 0x000030, "Wrong size on PostEventAtLocationAsync_PostEventAtLocationAsync");
static_assert(offsetof(PostEventAtLocationAsync_PostEventAtLocationAsync, WorldContextObject) == 0x000000, "Member 'PostEventAtLocationAsync_PostEventAtLocationAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PostEventAtLocationAsync_PostEventAtLocationAsync, AkEvent) == 0x000008, "Member 'PostEventAtLocationAsync_PostEventAtLocationAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(PostEventAtLocationAsync_PostEventAtLocationAsync, Location) == 0x000010, "Member 'PostEventAtLocationAsync_PostEventAtLocationAsync::Location' has a wrong offset!");
static_assert(offsetof(PostEventAtLocationAsync_PostEventAtLocationAsync, Orientation) == 0x00001C, "Member 'PostEventAtLocationAsync_PostEventAtLocationAsync::Orientation' has a wrong offset!");
static_assert(offsetof(PostEventAtLocationAsync_PostEventAtLocationAsync, ReturnValue) == 0x000028, "Member 'PostEventAtLocationAsync_PostEventAtLocationAsync::ReturnValue' has a wrong offset!");

// Function AkAudio.AkEventPriorityInstance.OnEventFinished
// 0x0010 (0x0010 - 0x0000)
struct AkEventPriorityInstance_OnEventFinished final
{
public:
	EAkCallbackType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        Info;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventPriorityInstance_OnEventFinished) == 0x000008, "Wrong alignment on AkEventPriorityInstance_OnEventFinished");
static_assert(sizeof(AkEventPriorityInstance_OnEventFinished) == 0x000010, "Wrong size on AkEventPriorityInstance_OnEventFinished");
static_assert(offsetof(AkEventPriorityInstance_OnEventFinished, Type) == 0x000000, "Member 'AkEventPriorityInstance_OnEventFinished::Type' has a wrong offset!");
static_assert(offsetof(AkEventPriorityInstance_OnEventFinished, Info) == 0x000008, "Member 'AkEventPriorityInstance_OnEventFinished::Info' has a wrong offset!");

}

