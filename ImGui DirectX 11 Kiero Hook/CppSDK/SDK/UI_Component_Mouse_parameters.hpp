#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_Mouse

#include "Basic.hpp"

#include "S_KeyPromptMouse_structs.hpp"
#include "E_Type_Mouse_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_Mouse.UI_Component_Mouse_C.ExecuteUbergraph_UI_Component_Mouse
// 0x0040 (0x0040 - 0x0000)
struct UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Event_InKey;                                // 0x0008(0x0018)(HasGetValueTypeHash)
	E_Type_Mouse                                  CallFunc_SetData_Type;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetData_Succeed;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputChord>                    K2Node_Event_InInputChordArray;                    // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	ESolarTablesEnum_InputTriggerType             K2Node_Event_InInputTrigger;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse");
static_assert(sizeof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse) == 0x000040, "Wrong size on UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, EntryPoint) == 0x000000, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, K2Node_Event_InKey) == 0x000008, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::K2Node_Event_InKey' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, CallFunc_SetData_Type) == 0x000020, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::CallFunc_SetData_Type' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, CallFunc_SetData_Succeed) == 0x000021, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::CallFunc_SetData_Succeed' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, K2Node_Event_IsDesignTime) == 0x000022, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, K2Node_Event_InInputChordArray) == 0x000028, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::K2Node_Event_InInputChordArray' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse, K2Node_Event_InInputTrigger) == 0x000038, "Member 'UI_Component_Mouse_C_ExecuteUbergraph_UI_Component_Mouse::K2Node_Event_InInputTrigger' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.UpdateMouseType
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_Mouse_C_UpdateMouseType final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_UpdateMouseType) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_UpdateMouseType");
static_assert(sizeof(UI_Component_Mouse_C_UpdateMouseType) == 0x000018, "Wrong size on UI_Component_Mouse_C_UpdateMouseType");
static_assert(offsetof(UI_Component_Mouse_C_UpdateMouseType, InKey) == 0x000000, "Member 'UI_Component_Mouse_C_UpdateMouseType::InKey' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.RefreshMouseUIImpl
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_Mouse_C_RefreshMouseUIImpl final
{
public:
	TArray<struct FInputChord>                    InInputChordArray;                                 // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	ESolarTablesEnum_InputTriggerType             InInputTrigger;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_RefreshMouseUIImpl) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_RefreshMouseUIImpl");
static_assert(sizeof(UI_Component_Mouse_C_RefreshMouseUIImpl) == 0x000018, "Wrong size on UI_Component_Mouse_C_RefreshMouseUIImpl");
static_assert(offsetof(UI_Component_Mouse_C_RefreshMouseUIImpl, InInputChordArray) == 0x000000, "Member 'UI_Component_Mouse_C_RefreshMouseUIImpl::InInputChordArray' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_RefreshMouseUIImpl, InInputTrigger) == 0x000010, "Member 'UI_Component_Mouse_C_RefreshMouseUIImpl::InInputTrigger' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_Mouse_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_Mouse_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_Mouse_C_PreConstruct");
static_assert(sizeof(UI_Component_Mouse_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_Mouse_C_PreConstruct");
static_assert(offsetof(UI_Component_Mouse_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_Mouse_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.UpdateImage
// 0x0130 (0x0130 - 0x0000)
struct UI_Component_Mouse_C_UpdateImage final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_4;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_5;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_6;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_7;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_8;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_9;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_10;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_11;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_12;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_13;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_14;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_15;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_16;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_17;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Mouse                                  Temp_byte_Variable;                                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_1;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_2;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_3;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_4;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_5;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_6;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_7;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_8;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_9;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_UpdateImage) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_UpdateImage");
static_assert(sizeof(UI_Component_Mouse_C_UpdateImage) == 0x000130, "Wrong size on UI_Component_Mouse_C_UpdateImage");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable) == 0x000000, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable) == 0x000008, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_1) == 0x000010, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_1) == 0x000018, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_2) == 0x000020, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_3) == 0x000028, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_2) == 0x000030, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_4) == 0x000038, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_5) == 0x000040, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_3) == 0x000048, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_6) == 0x000050, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_7) == 0x000058, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_4) == 0x000060, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_8) == 0x000068, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_9) == 0x000070, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_5) == 0x000078, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_10) == 0x000080, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_11) == 0x000088, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_6) == 0x000090, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_12) == 0x000098, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_13) == 0x0000A0, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_7) == 0x0000A8, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_14) == 0x0000B0, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_15) == 0x0000B8, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_bool_Variable_8) == 0x0000C0, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_16) == 0x0000C8, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_object_Variable_17) == 0x0000D0, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, Temp_byte_Variable) == 0x0000D8, "Member 'UI_Component_Mouse_C_UpdateImage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default) == 0x0000E0, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_1) == 0x0000E8, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_2) == 0x0000F0, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_3) == 0x0000F8, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_4) == 0x000100, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_5) == 0x000108, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_6) == 0x000110, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_7) == 0x000118, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_8) == 0x000120, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_UpdateImage, K2Node_Select_Default_9) == 0x000128, "Member 'UI_Component_Mouse_C_UpdateImage::K2Node_Select_Default_9' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.SetData
// 0x0020 (0x0020 - 0x0000)
struct UI_Component_Mouse_C_SetData final
{
public:
	struct FKey                                   KeySetting;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	E_Type_Mouse                                  Type;                                              // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Succeed;                                           // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Key_IsMouseButton_ReturnValue;            // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_Mouse                                  Temp_byte_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Type_Mouse                                  CallFunc_Map_Find_Value;                           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_Mouse                                  K2Node_Select_Default;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_SetData) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_SetData");
static_assert(sizeof(UI_Component_Mouse_C_SetData) == 0x000020, "Wrong size on UI_Component_Mouse_C_SetData");
static_assert(offsetof(UI_Component_Mouse_C_SetData, KeySetting) == 0x000000, "Member 'UI_Component_Mouse_C_SetData::KeySetting' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, Type) == 0x000018, "Member 'UI_Component_Mouse_C_SetData::Type' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, Succeed) == 0x000019, "Member 'UI_Component_Mouse_C_SetData::Succeed' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, Temp_bool_Variable) == 0x00001A, "Member 'UI_Component_Mouse_C_SetData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, CallFunc_Key_IsMouseButton_ReturnValue) == 0x00001B, "Member 'UI_Component_Mouse_C_SetData::CallFunc_Key_IsMouseButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, Temp_byte_Variable) == 0x00001C, "Member 'UI_Component_Mouse_C_SetData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, CallFunc_Map_Find_Value) == 0x00001D, "Member 'UI_Component_Mouse_C_SetData::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, CallFunc_Map_Find_ReturnValue) == 0x00001E, "Member 'UI_Component_Mouse_C_SetData::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetData, K2Node_Select_Default) == 0x00001F, "Member 'UI_Component_Mouse_C_SetData::K2Node_Select_Default' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.SetMouseCustomInfo
// 0x0014 (0x0014 - 0x0000)
struct UI_Component_Mouse_C_SetMouseCustomInfo final
{
public:
	struct FS_KeyPromptMouse                      InMouseInfo;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_SetMouseCustomInfo) == 0x000004, "Wrong alignment on UI_Component_Mouse_C_SetMouseCustomInfo");
static_assert(sizeof(UI_Component_Mouse_C_SetMouseCustomInfo) == 0x000014, "Wrong size on UI_Component_Mouse_C_SetMouseCustomInfo");
static_assert(offsetof(UI_Component_Mouse_C_SetMouseCustomInfo, InMouseInfo) == 0x000000, "Member 'UI_Component_Mouse_C_SetMouseCustomInfo::InMouseInfo' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetMouseCustomInfo, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'UI_Component_Mouse_C_SetMouseCustomInfo::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_Component_Mouse_C_SetMouseCustomInfo, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'UI_Component_Mouse_C_SetMouseCustomInfo::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.SetSize
// 0x0004 (0x0004 - 0x0000)
struct UI_Component_Mouse_C_SetSize final
{
public:
	float                                         ImgSize_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_SetSize) == 0x000004, "Wrong alignment on UI_Component_Mouse_C_SetSize");
static_assert(sizeof(UI_Component_Mouse_C_SetSize) == 0x000004, "Wrong size on UI_Component_Mouse_C_SetSize");
static_assert(offsetof(UI_Component_Mouse_C_SetSize, ImgSize_0) == 0x000000, "Member 'UI_Component_Mouse_C_SetSize::ImgSize_0' has a wrong offset!");

// Function UI_Component_Mouse.UI_Component_Mouse_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_Mouse_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_Mouse_C_GetModuleName) == 0x000008, "Wrong alignment on UI_Component_Mouse_C_GetModuleName");
static_assert(sizeof(UI_Component_Mouse_C_GetModuleName) == 0x000010, "Wrong size on UI_Component_Mouse_C_GetModuleName");
static_assert(offsetof(UI_Component_Mouse_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_Component_Mouse_C_GetModuleName::ReturnValue' has a wrong offset!");

}

