#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_EXPSpring_HUDNotice

#include "Basic.hpp"

#include "SolarUI_structs.hpp"


namespace SDK::Params
{

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.RefreshRewardIndex
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_RefreshRewardIndex final
{
public:
	class ASolarExpSpringPointActor*              RefreshActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndex) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_RefreshRewardIndex");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndex) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_RefreshRewardIndex");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndex, RefreshActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_RefreshRewardIndex::RefreshActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.CheckPointIsActivated
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_CheckPointIsActivated final
{
public:
	class ASolarExpSpringPointActor*              PointActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivated) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_CheckPointIsActivated");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivated) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_CheckPointIsActivated");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivated, PointActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_CheckPointIsActivated::PointActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.RefreshRewardList
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_RefreshRewardList final
{
public:
	class ASolarExpSpringPointActor*              RefreshActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_RefreshRewardList) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_RefreshRewardList");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_RefreshRewardList) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_RefreshRewardList");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_RefreshRewardList, RefreshActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_RefreshRewardList::RefreshActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.SetPlayerNumInPoint
// 0x0038 (0x0038 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint final
{
public:
	int32                                         MyTeamPlayerNum;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemyTeamPlayerNum;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0020(0x0018)()
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint) == 0x000038, "Wrong size on UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint, MyTeamPlayerNum) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint::MyTeamPlayerNum' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint, EnemyTeamPlayerNum) == 0x000004, "Member 'UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint::EnemyTeamPlayerNum' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000020, "Member 'UI_EXPSpring_HUDNotice_C_SetPlayerNumInPoint::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.SetActivationProgress
// 0x0004 (0x0004 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_SetActivationProgress final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_SetActivationProgress) == 0x000004, "Wrong alignment on UI_EXPSpring_HUDNotice_C_SetActivationProgress");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_SetActivationProgress) == 0x000004, "Wrong size on UI_EXPSpring_HUDNotice_C_SetActivationProgress");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_SetActivationProgress, Percent) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_SetActivationProgress::Percent' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.ExecuteUbergraph_UI_EXPSpring_HUDNotice
// 0x0014 (0x0014 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUSolarWidgetLayoutType                       Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice) == 0x000004, "Wrong alignment on UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice) == 0x000014, "Wrong size on UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, EntryPoint) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, K2Node_Event_InLayoutType) == 0x000004, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::K2Node_Event_InLayoutType' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, Temp_byte_Variable) == 0x000005, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, Temp_float_Variable) == 0x000008, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, Temp_float_Variable_1) == 0x00000C, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice, K2Node_Select_Default) == 0x000010, "Member 'UI_EXPSpring_HUDNotice_C_ExecuteUbergraph_UI_EXPSpring_HUDNotice::K2Node_Select_Default' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.RefreshRewardListCopy
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy final
{
public:
	class ASolarExpSpringPointActor*              RefreshActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy, RefreshActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_RefreshRewardListCopy::RefreshActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.CheckPointIsActivatedCopy
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy final
{
public:
	class ASolarExpSpringPointActor*              PointActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy, PointActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_CheckPointIsActivatedCopy::PointActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.RefreshRewardIndexCopy
// 0x0008 (0x0008 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy final
{
public:
	class ASolarExpSpringPointActor*              RefreshActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy) == 0x000008, "Wrong size on UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy, RefreshActor) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_RefreshRewardIndexCopy::RefreshActor' has a wrong offset!");

// Function UI_EXPSpring_HUDNotice.UI_EXPSpring_HUDNotice_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_EXPSpring_HUDNotice_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_EXPSpring_HUDNotice_C_GetModuleName) == 0x000008, "Wrong alignment on UI_EXPSpring_HUDNotice_C_GetModuleName");
static_assert(sizeof(UI_EXPSpring_HUDNotice_C_GetModuleName) == 0x000010, "Wrong size on UI_EXPSpring_HUDNotice_C_GetModuleName");
static_assert(offsetof(UI_EXPSpring_HUDNotice_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_EXPSpring_HUDNotice_C_GetModuleName::ReturnValue' has a wrong offset!");

}

