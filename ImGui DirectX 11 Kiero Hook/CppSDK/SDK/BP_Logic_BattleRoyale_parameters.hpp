#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Logic_BattleRoyale

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "S_Event_BattleRoyale_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_PlayerBattleState_BattleRoyale_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "E_BattleState_BattleRoyale_structs.hpp"
#include "S_EventList_BattleRoyal_structs.hpp"


namespace SDK::Params
{

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.PresettleAll
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_PresettleAll final
{
public:
	int32                                         TeamRank;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_PresettleAll) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_PresettleAll");
static_assert(sizeof(BP_Logic_BattleRoyale_C_PresettleAll) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_PresettleAll");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PresettleAll, TeamRank) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_PresettleAll::TeamRank' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PresettleAll, CallFunc_GetGameModeOwner_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_PresettleAll::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Custom Room Start
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_Custom_Room_Start final
{
public:
	class ASolarGameMode*                         CallFunc_GetSolarGameMode_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Custom_Room_Start) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Custom_Room_Start");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Custom_Room_Start) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_Custom_Room_Start");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Custom_Room_Start, CallFunc_GetSolarGameMode_ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Custom_Room_Start::CallFunc_GetSolarGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Custom_Room_Start, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Custom_Room_Start::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.PreSettle
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_PreSettle final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_PreSettle) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_PreSettle");
static_assert(sizeof(BP_Logic_BattleRoyale_C_PreSettle) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_PreSettle");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettle, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_PreSettle::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettle, OutType) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_PreSettle::OutType' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ReceivePlayerBattleEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd, OutType) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerBattleEnd::OutType' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ReadyToFinal
// 0x0030 (0x0030 - 0x0000)
struct BP_Logic_BattleRoyale_C_ReadyToFinal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc__A_GetBattleTime_Time;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ReadyToFinal) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_ReadyToFinal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ReadyToFinal) == 0x000030, "Wrong size on BP_Logic_BattleRoyale_C_ReadyToFinal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_GetGameModeOwner_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc__A_GetBattleTime_Time) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc__A_GetBattleTime_Time' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_Get_Config_CFG) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000025, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000026, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000027, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_BooleanOR_ReturnValue) == 0x000029, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReadyToFinal, CallFunc_BooleanOR_ReturnValue_1) == 0x00002A, "Member 'BP_Logic_BattleRoyale_C_ReadyToFinal::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Buddy Event
// 0x0040 (0x0040 - 0x0000)
struct BP_Logic_BattleRoyale_C_Buddy_Event final
{
public:
	int32                                         DelaySpawnTime;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventIDStr;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayEventFilterConfig             GEFConfig;                                         // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Buddy_Event) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Buddy_Event");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Buddy_Event) == 0x000040, "Wrong size on BP_Logic_BattleRoyale_C_Buddy_Event");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Buddy_Event, DelaySpawnTime) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Buddy_Event::DelaySpawnTime' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Buddy_Event, EventIDStr) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Buddy_Event::EventIDStr' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Buddy_Event, GEFConfig) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Buddy_Event::GEFConfig' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.OnDefenderShowStart
// 0x0018 (0x0018 - 0x0000)
struct BP_Logic_BattleRoyale_C_OnDefenderShowStart final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_AirlineCruise_C*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartBoarding_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_OnDefenderShowStart) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_OnDefenderShowStart");
static_assert(sizeof(BP_Logic_BattleRoyale_C_OnDefenderShowStart) == 0x000018, "Wrong size on BP_Logic_BattleRoyale_C_OnDefenderShowStart");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnDefenderShowStart, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_OnDefenderShowStart::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnDefenderShowStart, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_OnDefenderShowStart::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnDefenderShowStart, CallFunc_StartBoarding_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_OnDefenderShowStart::CallFunc_StartBoarding_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.InitSafeArea
// 0x0078 (0x0078 - 0x0000)
struct BP_Logic_BattleRoyale_C_InitSafeArea final
{
public:
	TArray<struct FReduceSafeAreaExecutorData>    Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FReduceSafeAreaExecutorData            CallFunc_Array_Get_Item;                           // 0x0018(0x0030)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MapInfoComponent_C*                 CallFunc_Get_Map_Info_MapInfo;                     // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_InitSafeArea) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_InitSafeArea");
static_assert(sizeof(BP_Logic_BattleRoyale_C_InitSafeArea) == 0x000078, "Wrong size on BP_Logic_BattleRoyale_C_InitSafeArea");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, Array) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Add_ReturnValue_1) == 0x00005C, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Add_ReturnValue_2) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Get_Map_Info_MapInfo) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Get_Map_Info_MapInfo' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitSafeArea, CallFunc_Array_Add_ReturnValue_3) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_InitSafeArea::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.InitExpSpringPoint
// 0x01B0 (0x01B0 - 0x0000)
struct BP_Logic_BattleRoyale_C_InitExpSpringPoint final
{
public:
	TArray<class FName>                           RowNameList;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UDataTable*                             BattleTimeline_0;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            OutTimeline;                                       // 0x0018(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Event_BattleRoyale                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0078(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0100(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	struct FExpSpringPreSelectData                K2Node_MakeStruct_ExpSpringPreSelectData;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Map_Find_Value;                           // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue;           // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0130(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_1;                         // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0168(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarExpSpringModeComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_2;                         // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x2];                                      // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_1;         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FExpSpringPreSelectData                K2Node_MakeStruct_ExpSpringPreSelectData_1;        // 0x01A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_InitExpSpringPoint) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_InitExpSpringPoint");
static_assert(sizeof(BP_Logic_BattleRoyale_C_InitExpSpringPoint) == 0x0001B0, "Wrong size on BP_Logic_BattleRoyale_C_InitExpSpringPoint");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, RowNameList) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::RowNameList' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, BattleTimeline_0) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::BattleTimeline_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, OutTimeline) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::OutTimeline' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, Temp_int_Array_Index_Variable) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_GetDataTableRowFromName_OutRow) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, Temp_string_Variable) == 0x000100, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, K2Node_MakeStruct_ExpSpringPreSelectData) == 0x000110, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::K2Node_MakeStruct_ExpSpringPreSelectData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_Value) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_ReturnValue) == 0x000128, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, K2Node_SwitchEnum_CmpSuccess) == 0x000129, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Conv_StringToFloat_ReturnValue) == 0x00012C, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Conv_StringToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, Temp_string_Variable_1) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, Temp_int_Loop_Counter_Variable) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_Value_1) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_ReturnValue_1) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Conv_StringToInt_ReturnValue) == 0x00015C, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Less_IntInt_ReturnValue) == 0x000160, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Conv_IntToByte_ReturnValue) == 0x000161, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Add_IntInt_ReturnValue) == 0x000164, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, Temp_string_Variable_2) == 0x000168, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_GetOwner_ReturnValue) == 0x000178, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_GetComponentByClass_ReturnValue) == 0x000180, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_Value_2) == 0x000188, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Map_Find_ReturnValue_2) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_IsValid_ReturnValue) == 0x000199, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Conv_StringToFloat_ReturnValue_1) == 0x00019C, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Conv_StringToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001A0, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitExpSpringPoint, K2Node_MakeStruct_ExpSpringPreSelectData_1) == 0x0001A4, "Member 'BP_Logic_BattleRoyale_C_InitExpSpringPoint::K2Node_MakeStruct_ExpSpringPreSelectData_1' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.InEnableUnfetteredArea
// 0x0128 (0x0128 - 0x0000)
struct BP_Logic_BattleRoyale_C_InEnableUnfetteredArea final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCustomGameState*                      K2Node_DynamicCast_AsSCustom_Game_State;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomRoomData                        CallFunc_GetCustomRoomData_ReturnValue;            // 0x0020(0x0100)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_InEnableUnfetteredArea");
static_assert(sizeof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea) == 0x000128, "Wrong size on BP_Logic_BattleRoyale_C_InEnableUnfetteredArea");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, IsEnable) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, K2Node_DynamicCast_AsSCustom_Game_State) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::K2Node_DynamicCast_AsSCustom_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_GetCustomRoomData_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_GetCustomRoomData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_IsValid_ReturnValue) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_BooleanAND_ReturnValue) == 0x000121, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InEnableUnfetteredArea, CallFunc_BooleanAND_ReturnValue_1) == 0x000122, "Member 'BP_Logic_BattleRoyale_C_InEnableUnfetteredArea::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetWeaponIDByCharacter
// 0x0028 (0x0028 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter final
{
public:
	class ASolarCharacter*                        InCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSlot;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutWeaponID;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalWeaponID;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarPlayerWeapon*                     CallFunc_GetWeaponBySlot_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponID_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter) == 0x000028, "Wrong size on BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, InCharacter) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, InSlot) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::InSlot' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, OutWeaponID) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::OutWeaponID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, LocalWeaponID) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::LocalWeaponID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, CallFunc_GetWeaponBySlot_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::CallFunc_GetWeaponBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, CallFunc_GetWeaponID_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::CallFunc_GetWeaponID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, CallFunc_IsValid_ReturnValue_1) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter, CallFunc_IsValid_ReturnValue_2) == 0x000025, "Member 'BP_Logic_BattleRoyale_C_GetWeaponIDByCharacter::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.SetUnfetteredAreaTimeline
// 0x0030 (0x0030 - 0x0000)
struct BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InEnableUnfetteredArea_IsEnable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MapInfoComponent_C*                 CallFunc_Get_Map_Info_MapInfo;                     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline");
static_assert(sizeof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline) == 0x000030, "Wrong size on BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_InEnableUnfetteredArea_IsEnable) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_InEnableUnfetteredArea_IsEnable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Get_Map_Info_MapInfo) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Get_Map_Info_MapInfo' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_Logic_BattleRoyale_C_SetUnfetteredAreaTimeline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetPlayerDataTraceByPlayer
// 0x06F8 (0x06F8 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer final
{
public:
	class ABattleRoyalePlayerState*               InPlayerState;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            Map;                                               // 0x0008(0x0050)(Parm, OutParm)
	class FString                                 CallFunc_GetPlayerItems_ReturnValue;               // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerAccessories_ReturnValue;         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponIDByCharacter_OutWeaponID;       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponIDByCharacter_OutWeaponID_1;     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponIDByCharacter_OutWeaponID_2;     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarItemData                         CallFunc_GetBackpackItemDataByType_ItemData;       // 0x00E0(0x0120)()
	bool                                          CallFunc_GetBackpackItemDataByType_ReturnValue;    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData;         // 0x0218(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue;      // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_8;           // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData_1;       // 0x0370(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue_1;    // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData_2;       // 0x0498(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue_2;    // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_9;           // 0x05C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_10;          // 0x05D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCharacterLocation_ReturnValue;         // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_11;          // 0x05F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_12;          // 0x0610(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0620(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0630(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0640(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMatchRuleID_ReturnValue;               // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0658(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_13;          // 0x0668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0678(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0688(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0698(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x06A8(0x0050)()
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer) == 0x0006F8, "Wrong size on BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, InPlayerState) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::InPlayerState' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, Map) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetPlayerItems_ReturnValue) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetPlayerItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetPlayerAccessories_ReturnValue) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetPlayerAccessories_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetSolarCharacter_ReturnValue) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetWeaponIDByCharacter_OutWeaponID) == 0x0000B0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetWeaponIDByCharacter_OutWeaponID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetWeaponIDByCharacter_OutWeaponID_1) == 0x0000B4, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetWeaponIDByCharacter_OutWeaponID_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetWeaponIDByCharacter_OutWeaponID_2) == 0x0000D8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetWeaponIDByCharacter_OutWeaponID_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackItemDataByType_ItemData) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackItemDataByType_ItemData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackItemDataByType_ReturnValue) == 0x000200, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackItemDataByType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000208, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ItemData) == 0x000218, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ItemData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ReturnValue) == 0x000338, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_6) == 0x000340, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000350, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_8) == 0x000360, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ItemData_1) == 0x000370, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ItemData_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ReturnValue_1) == 0x000490, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ItemData_2) == 0x000498, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ItemData_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetBackpackWeaponBySlot_ReturnValue_2) == 0x0005B8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetBackpackWeaponBySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_9) == 0x0005C0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_10) == 0x0005D0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetCharacterLocation_ReturnValue) == 0x0005E0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetCharacterLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_11) == 0x0005F0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_BreakVector_X) == 0x000600, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_BreakVector_Y) == 0x000604, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_BreakVector_Z) == 0x000608, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_12) == 0x000610, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_FloatToString_ReturnValue) == 0x000620, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000630, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000640, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_GetMatchRuleID_ReturnValue) == 0x000650, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_GetMatchRuleID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Concat_StrStr_ReturnValue) == 0x000658, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Conv_IntToString_ReturnValue_13) == 0x000668, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Conv_IntToString_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000678, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000688, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000698, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer, K2Node_MakeMap_Map) == 0x0006A8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTraceByPlayer::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.HandleWinnerTeamPostSlomo
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo final
{
public:
	class ASolarTeamInfo*                         WinnerTeam;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo");
static_assert(sizeof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo) == 0x000008, "Wrong size on BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo, WinnerTeam) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPostSlomo::WinnerTeam' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.HandleWinnerTeamPreSlomo
// 0x0038 (0x0038 - 0x0000)
struct BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo final
{
public:
	class ASolarTeamInfo*                         WinnerTeam;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarPlayerState*                      CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryActivateAbilityByClass_ReturnValue;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             CallFunc_K2_GiveAbility_ReturnValue;               // 0x0030(0x0004)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo");
static_assert(sizeof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo) == 0x000038, "Wrong size on BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, WinnerTeam) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::WinnerTeam' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_GetSolarCharacter_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_Less_IntInt_ReturnValue) == 0x000025, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_TryActivateAbilityByClass_ReturnValue) == 0x00002C, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_TryActivateAbilityByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo, CallFunc_K2_GiveAbility_ReturnValue) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_HandleWinnerTeamPreSlomo::CallFunc_K2_GiveAbility_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.DealTeammateAISettle
// 0x0080 (0x0080 - 0x0000)
struct BP_Logic_BattleRoyale_C_DealTeammateAISettle final
{
public:
	class ASolarPlayerState*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<ESCMPlayerState>                       Temp_byte_Variable;                                // 0x0008(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FString>                         Temp_string_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<uint8>                                 K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayerBattle_ReturnValue;              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_DealTeammateAISettle) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_DealTeammateAISettle");
static_assert(sizeof(BP_Logic_BattleRoyale_C_DealTeammateAISettle) == 0x000080, "Wrong size on BP_Logic_BattleRoyale_C_DealTeammateAISettle");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, Temp_byte_Variable) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, Temp_string_Variable) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Conv_TextToString_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, K2Node_MakeArray_Array) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_SetDataBool_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_SetDataBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_FindPlayers_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_CanPlayerBattle_ReturnValue) == 0x000071, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_CanPlayerBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Not_PreBool_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_BooleanAND_ReturnValue) == 0x000079, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Less_IntInt_ReturnValue) == 0x00007A, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_BooleanAND_ReturnValue_1) == 0x00007B, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DealTeammateAISettle, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_Logic_BattleRoyale_C_DealTeammateAISettle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.SendItemToPlayer
// 0x0160 (0x0160 - 0x0000)
struct BP_Logic_BattleRoyale_C_SendItemToPlayer final
{
public:
	class ASolarPlayerState*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            ItemMap;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 NewLocalVar_3;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EItemModifyResult                             CallFunc_AddBackpackItem_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_Character_Framework_C*              K2Node_DynamicCast_AsBP_Character_Framework;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0110(0x0050)(ConstParm)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_SendItemToPlayer) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_SendItemToPlayer");
static_assert(sizeof(BP_Logic_BattleRoyale_C_SendItemToPlayer) == 0x000160, "Wrong size on BP_Logic_BattleRoyale_C_SendItemToPlayer");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, ItemMap) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::ItemMap' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, NewLocalVar_3) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::NewLocalVar_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Map_Keys_Keys) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_GetSolarCharacter_ReturnValue) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_GetDisplayName_ReturnValue) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Conv_IntToString_ReturnValue) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Map_Find_Value) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Map_Find_ReturnValue) == 0x0000CC, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Left_ReturnValue) == 0x0000D0, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_AddBackpackItem_ReturnValue) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_AddBackpackItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000E1, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, K2Node_DynamicCast_AsBP_Character_Framework) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::K2Node_DynamicCast_AsBP_Character_Framework' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, Temp_int_Loop_Counter_Variable) == 0x000104, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x00010C, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SendItemToPlayer, K2Node_MakeMap_Map) == 0x000110, "Member 'BP_Logic_BattleRoyale_C_SendItemToPlayer::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetVehicleDataTrace
// 0x0280 (0x0280 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetVehicleDataTrace final
{
public:
	TMap<class FString, class FString>            Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm)
	int32                                         NewLocalVar_2;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            VehicleData;                                       // 0x0058(0x0050)(Edit, BlueprintVisible)
	TArray<class FString>                         CarNum;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarVehicleSubsystem*                 CallFunc_GetWorldSubsystem_ReturnValue;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetActiveVehicleList_OutActiveVehicles;   // 0x00C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASolarVehiclePawn*                      K2Node_DynamicCast_AsSolar_Vehicle_Pawn;           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVehicleTypeID_ReturnValue;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsOfClass_OutActors;            // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue;          // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue;                // 0x0148(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue_1;              // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_JoinStringArray_ReturnValue;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x01A8(0x0050)(ConstParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0230(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetVehicleDataTrace");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace) == 0x000280, "Wrong size on BP_Logic_BattleRoyale_C_GetVehicleDataTrace");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, Map) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, NewLocalVar_2) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, VehicleData) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::VehicleData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CarNum) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CarNum' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, Temp_int_Array_Index_Variable) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetWorldSubsystem_ReturnValue) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetActiveVehicleList_OutActiveVehicles) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetActiveVehicleList_OutActiveVehicles' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, Temp_int_Array_Index_Variable_1) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Get_Item) == 0x0000F0, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Conv_IntToString_ReturnValue) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, K2Node_DynamicCast_AsSolar_Vehicle_Pawn) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::K2Node_DynamicCast_AsSolar_Vehicle_Pawn' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetObjectClass_ReturnValue) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetVehicleTypeID_ReturnValue) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetVehicleTypeID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetAllActorsOfClass_OutActors) == 0x000128, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Length_ReturnValue_1) == 0x000138, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Greater_IntInt_ReturnValue) == 0x00013C, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc__s_GetPlayerManager_ReturnValue) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc__s_GetPlayerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetPlayerList_ReturnValue) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_GetPlayerList_ReturnValue_1) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_GetPlayerList_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Length_ReturnValue_2) == 0x000168, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Length_ReturnValue_3) == 0x00016C, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000170, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000180, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, Temp_int_Loop_Counter_Variable_1) == 0x000190, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_JoinStringArray_ReturnValue) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_JoinStringArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, K2Node_MakeMap_Map) == 0x0001A8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001F8, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Map_Contains_ReturnValue) == 0x0001FC, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000200, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Concat_StrStr_ReturnValue) == 0x000210, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_IsEmpty_ReturnValue) == 0x000220, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Not_PreBool_ReturnValue) == 0x000221, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Map_Find_Value) == 0x000224, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Map_Find_ReturnValue) == 0x000228, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Map_Keys_Keys) == 0x000230, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_BooleanAND_ReturnValue) == 0x000240, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Get_Item_1) == 0x000244, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Length_ReturnValue_4) == 0x000248, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000250, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Less_IntInt_ReturnValue_1) == 0x000260, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000268, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetVehicleDataTrace, CallFunc_Array_Add_ReturnValue) == 0x000278, "Member 'BP_Logic_BattleRoyale_C_GetVehicleDataTrace::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Init Poison Circle
// 0x0090 (0x0090 - 0x0000)
struct BP_Logic_BattleRoyale_C_Init_Poison_Circle final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarExpSpringModeComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSafeAreaCenterAndRadius_OutCenter;     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSafeAreaCenterAndRadius_OutRadius;     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSafeAreaCenterAndRadius_ReturnValue;   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleRoylePoisonCircle_C*          CallFunc_FinishSpawningActor_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc__S_GetMapIDByName_MapID;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Init_Poison_Circle) == 0x000010, "Wrong alignment on BP_Logic_BattleRoyale_C_Init_Poison_Circle");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Init_Poison_Circle) == 0x000090, "Wrong size on BP_Logic_BattleRoyale_C_Init_Poison_Circle");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_Get_Config_CFG) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_GetSafeAreaCenterAndRadius_OutCenter) == 0x00001C, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_GetSafeAreaCenterAndRadius_OutCenter' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_GetSafeAreaCenterAndRadius_OutRadius) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_GetSafeAreaCenterAndRadius_OutRadius' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_GetSafeAreaCenterAndRadius_ReturnValue) == 0x00002C, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_GetSafeAreaCenterAndRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_Get_Config_CFG_1) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_Get_Config_CFG_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc_FinishSpawningActor_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Poison_Circle, CallFunc__S_GetMapIDByName_MapID) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_Init_Poison_Circle::CallFunc__S_GetMapIDByName_MapID' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.SetSkillStateByBattleState
// 0x00B8 (0x00B8 - 0x0000)
struct BP_Logic_BattleRoyale_C_SetSkillStateByBattleState final
{
public:
	E_BattleState_BattleRoyale                    Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillState                            Temp_struct_Variable;                              // 0x0001(0x0004)(NoDestructor)
	struct FSkillState                            Temp_struct_Variable_1;                            // 0x0005(0x0004)(NoDestructor)
	struct FSkillState                            Temp_struct_Variable_2;                            // 0x0009(0x0004)(NoDestructor)
	struct FSkillState                            Temp_struct_Variable_3;                            // 0x000D(0x0004)(NoDestructor)
	struct FSkillState                            Temp_struct_Variable_4;                            // 0x0011(0x0004)(NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_string_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable_1;                              // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESCMPlayerState>                       K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillState                            K2Node_Select_Default;                             // 0x0090(0x0004)(NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SkillConfigToString_ReturnValue;          // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_SetSkillStateByBattleState");
static_assert(sizeof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState) == 0x0000B8, "Wrong size on BP_Logic_BattleRoyale_C_SetSkillStateByBattleState");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_byte_Variable) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_struct_Variable) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_struct_Variable_1) == 0x000005, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_struct_Variable_2) == 0x000009, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_struct_Variable_3) == 0x00000D, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_struct_Variable_4) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_string_Variable) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_byte_Variable_1) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_FindPlayers_ReturnValue) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_GetSolarCharacter_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, K2Node_SwitchEnum_CmpSuccess) == 0x000081, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Get_Config_CFG) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, K2Node_Select_Default) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_SkillConfigToString_ReturnValue) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_SkillConfigToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_SetSkillStateByBattleState, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_SetSkillStateByBattleState::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Get Shrink Index
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_Get_Shrink_Index final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MapInfoComponent_C*                 CallFunc_Get_Map_Info_MapInfo;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Safe_Area_Centers_Len_Len;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Get_Shrink_Index) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Get_Shrink_Index");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Get_Shrink_Index) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_Get_Shrink_Index");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, Temp_bool_Variable) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, CallFunc_Get_Map_Info_MapInfo) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::CallFunc_Get_Map_Info_MapInfo' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, CallFunc_Get_Safe_Area_Centers_Len_Len) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::CallFunc_Get_Safe_Area_Centers_Len_Len' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Shrink_Index, K2Node_Select_Default) == 0x00001C, "Member 'BP_Logic_BattleRoyale_C_Get_Shrink_Index::K2Node_Select_Default' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetWeaponID
// 0x00F0 (0x00F0 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetWeaponID final
{
public:
	int32                                         ItemID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         weaponid;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarTables_TablesReader*              CallFunc__A_GetExcelTableReader_TablesReader;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSolarTablesData_GunProperty           CallFunc_GetRowData_ReturnValue;                   // 0x0010(0x00D8)(ConstParm)
	bool                                          CallFunc_HasRowKey_ReturnValue;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetWeaponID) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetWeaponID");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetWeaponID) == 0x0000F0, "Wrong size on BP_Logic_BattleRoyale_C_GetWeaponID");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponID, ItemID) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetWeaponID::ItemID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponID, weaponid) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_GetWeaponID::weaponid' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponID, CallFunc__A_GetExcelTableReader_TablesReader) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetWeaponID::CallFunc__A_GetExcelTableReader_TablesReader' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponID, CallFunc_GetRowData_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetWeaponID::CallFunc_GetRowData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetWeaponID, CallFunc_HasRowKey_ReturnValue) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_GetWeaponID::CallFunc_HasRowKey_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.VehicleDataTrace
// 0x0050 (0x0050 - 0x0000)
struct BP_Logic_BattleRoyale_C_VehicleDataTrace final
{
public:
	TMap<class FString, class FString>            CallFunc_GetVehicleDataTrace_Map;                  // 0x0000(0x0050)()
};
static_assert(alignof(BP_Logic_BattleRoyale_C_VehicleDataTrace) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_VehicleDataTrace");
static_assert(sizeof(BP_Logic_BattleRoyale_C_VehicleDataTrace) == 0x000050, "Wrong size on BP_Logic_BattleRoyale_C_VehicleDataTrace");
static_assert(offsetof(BP_Logic_BattleRoyale_C_VehicleDataTrace, CallFunc_GetVehicleDataTrace_Map) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_VehicleDataTrace::CallFunc_GetVehicleDataTrace_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetPlayerDataTrace
// 0x0790 (0x0790 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetPlayerDataTrace final
{
public:
	class ABattleRoyalePlayerState*               Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            Map;                                               // 0x0008(0x0050)(Parm, OutParm)
	int32                                         CallFunc_GetPlayerStatisticData_OutValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerStatisticData_OutValue_1;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerAccessories_ReturnValue;         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerItems_ReturnValue;               // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterID_CharacterID;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterID_SkinID;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterID_ColorID;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocationInSafeArea_ReturnValue;         // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarItemData                         CallFunc_GetBackpackItemDataByType_ItemData;       // 0x0148(0x0120)()
	bool                                          CallFunc_GetBackpackItemDataByType_ReturnValue;    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_8;           // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData;         // 0x0280(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue;      // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_9;           // 0x03A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_10;          // 0x03B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_11;          // 0x03C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponID_WeaponID;                     // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData_1;       // 0x03E0(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue_1;    // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_12;          // 0x0508(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData_2;       // 0x0518(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue_2;    // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_13;          // 0x0640(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponID_WeaponID_1;                   // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_14;          // 0x0658(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_15;          // 0x0668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponID_WeaponID_2;                   // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCharacterLocation_ReturnValue;         // 0x067C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_16;          // 0x0688(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x06A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x06B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_17;          // 0x06C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x06D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMatchRuleID_ReturnValue;               // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x06F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_18;          // 0x0700(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0710(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0720(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0730(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0740(0x0050)()
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetPlayerDataTrace");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace) == 0x000790, "Wrong size on BP_Logic_BattleRoyale_C_GetPlayerDataTrace");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, Map) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetPlayerStatisticData_OutValue) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetPlayerStatisticData_OutValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetPlayerStatisticData_OutValue_1) == 0x00005C, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetPlayerStatisticData_OutValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetPlayerAccessories_ReturnValue) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetPlayerAccessories_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetPlayerItems_ReturnValue) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetPlayerItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000B0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0000D0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetSolarCharacter_ReturnValue) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetCharacterID_CharacterID) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetCharacterID_CharacterID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetCharacterID_SkinID) == 0x0000EC, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetCharacterID_SkinID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetCharacterID_ColorID) == 0x0000F0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetCharacterID_ColorID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_6) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_IsLocationInSafeArea_ReturnValue) == 0x000124, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_IsLocationInSafeArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000128, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_BoolToString_ReturnValue) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Clamp_ReturnValue) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackItemDataByType_ItemData) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackItemDataByType_ItemData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackItemDataByType_ReturnValue) == 0x000268, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackItemDataByType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_8) == 0x000270, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ItemData) == 0x000280, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ItemData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ReturnValue) == 0x0003A0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_9) == 0x0003A8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_10) == 0x0003B8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_11) == 0x0003C8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetWeaponID_WeaponID) == 0x0003D8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetWeaponID_WeaponID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ItemData_1) == 0x0003E0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ItemData_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ReturnValue_1) == 0x000500, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_12) == 0x000508, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ItemData_2) == 0x000518, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ItemData_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetBackpackWeaponBySlot_ReturnValue_2) == 0x000638, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetBackpackWeaponBySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_13) == 0x000640, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetWeaponID_WeaponID_1) == 0x000650, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetWeaponID_WeaponID_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_14) == 0x000658, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_15) == 0x000668, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetWeaponID_WeaponID_2) == 0x000678, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetWeaponID_WeaponID_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetCharacterLocation_ReturnValue) == 0x00067C, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetCharacterLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_16) == 0x000688, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_BreakVector_X) == 0x000698, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_BreakVector_Y) == 0x00069C, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_BreakVector_Z) == 0x0006A0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_FloatToString_ReturnValue) == 0x0006A8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x0006B8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_17) == 0x0006C8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x0006D8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_GetMatchRuleID_ReturnValue) == 0x0006E8, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_GetMatchRuleID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Concat_StrStr_ReturnValue) == 0x0006F0, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Conv_IntToString_ReturnValue_18) == 0x000700, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Conv_IntToString_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000710, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000720, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000730, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerDataTrace, K2Node_MakeMap_Map) == 0x000740, "Member 'BP_Logic_BattleRoyale_C_GetPlayerDataTrace::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ReceivePlayerReJoinRequest
// 0x0068 (0x0068 - 0x0000)
struct BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ErrorMsg;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_FindPlayerByPlayerID_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayerBattle_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest) == 0x000068, "Wrong size on BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, PlayerID) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::PlayerID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, ErrorMsg) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::ErrorMsg' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, Temp_bool_Variable) == 0x000021, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, CallFunc_FindPlayerByPlayerID_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::CallFunc_FindPlayerByPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, Temp_string_Variable) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, CallFunc_CanPlayerBattle_ReturnValue) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::CallFunc_CanPlayerBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, Temp_string_Variable_1) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest, K2Node_Select_Default) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerReJoinRequest::K2Node_Select_Default' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetAiLevel
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetAiLevel final
{
public:
	class ASolarPlayerState*                      Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultDifficultyLevel;                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetAiLevel) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetAiLevel");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetAiLevel) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_GetAiLevel");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetAiLevel, Target) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetAiLevel::Target' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetAiLevel, DefaultDifficultyLevel) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetAiLevel::DefaultDifficultyLevel' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Get Config
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_Get_Config final
{
public:
	class UCFG_BattleRoyale_C*                    CFG;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCGMGameplayConfig*                     CallFunc__A_GetModeConfig_ModeConfig;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCFG_BattleRoyale_C*                    K2Node_DynamicCast_AsCFG_Battle_Royale;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Get_Config) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Get_Config");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Get_Config) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_Get_Config");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Config, CFG) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Get_Config::CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Config, CallFunc__A_GetModeConfig_ModeConfig) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Get_Config::CallFunc__A_GetModeConfig_ModeConfig' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Config, K2Node_DynamicCast_AsCFG_Battle_Royale) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_Get_Config::K2Node_DynamicCast_AsCFG_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Config, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Get_Config::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.DataTrace
// 0x0068 (0x0068 - 0x0000)
struct BP_Logic_BattleRoyale_C_DataTrace final
{
public:
	TArray<class FString>                         Temp_string_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0010(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESCMPlayerState>                       Temp_byte_Variable_1;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_DataTrace) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_DataTrace");
static_assert(sizeof(BP_Logic_BattleRoyale_C_DataTrace) == 0x000068, "Wrong size on BP_Logic_BattleRoyale_C_DataTrace");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, Temp_string_Variable) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_DataTrace::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, Temp_byte_Variable) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_DataTrace::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_DataTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_DataTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_DataTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, Temp_byte_Variable_1) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_DataTrace::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, CallFunc_FindPlayers_ReturnValue) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_DataTrace::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_DataTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_DataTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_DataTrace, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_DataTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.UpdatePlayerData
// 0x0058 (0x0058 - 0x0000)
struct BP_Logic_BattleRoyale_C_UpdatePlayerData final
{
public:
	class ASolarPlayerState*                      Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerBattleEnd_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDataInt_OutValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataInt_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataInt_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_DataTraceDefender_Name;                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DataTraceDefender_Data;                   // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataInt_ReturnValue_1;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataByte_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_UpdatePlayerData) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_UpdatePlayerData");
static_assert(sizeof(BP_Logic_BattleRoyale_C_UpdatePlayerData) == 0x000058, "Wrong size on BP_Logic_BattleRoyale_C_UpdatePlayerData");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, Target) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::Target' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_IsPlayerBattleEnd_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_IsPlayerBattleEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_GetDataInt_OutValue) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_GetDataInt_OutValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_GetDataInt_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_GetDataInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_SetDataInt_ReturnValue) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_SetDataInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000012, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_GetGameModeOwner_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_DataTraceDefender_Name) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_DataTraceDefender_Name' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_DataTraceDefender_Data) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_DataTraceDefender_Data' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_Conv_StringToInt_ReturnValue) == 0x00004C, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_SetDataInt_ReturnValue_1) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_SetDataInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_Conv_IntToByte_ReturnValue) == 0x000051, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdatePlayerData, CallFunc_SetDataByte_ReturnValue) == 0x000052, "Member 'BP_Logic_BattleRoyale_C_UpdatePlayerData::CallFunc_SetDataByte_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.PreSettleDeal
// 0x0198 (0x0198 - 0x0000)
struct BP_Logic_BattleRoyale_C_PreSettleDeal final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             OutType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lamster;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_QuitImmediately_SendToSettle;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLamster_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue_1;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateTeamData_bAced;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasBeenEliminated_ReturnValue;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x00E0(0x0050)(ConstParm)
	TMap<class FString, class FString>            K2Node_MakeMap_Map_1;                              // 0x0130(0x0050)(ConstParm)
	TArray<class ASCMPlayerState*>                K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESCMPlayerOutType                             Temp_byte_Variable;                                // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_PreSettleDeal) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_PreSettleDeal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_PreSettleDeal) == 0x000198, "Wrong size on BP_Logic_BattleRoyale_C_PreSettleDeal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, OutType) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::OutType' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Lamster) == 0x000009, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Lamster' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable) == 0x00000A, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_QuitImmediately_SendToSettle) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_QuitImmediately_SendToSettle' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_IsLamster_ReturnValue) == 0x000021, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_IsLamster_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Conv_BoolToString_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetTeamName_ReturnValue) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetTeamName_ReturnValue_1) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetTeamName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_UpdateTeamData_bAced) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_UpdateTeamData_bAced' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_HasBeenEliminated_ReturnValue) == 0x000059, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_HasBeenEliminated_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_1) == 0x00005A, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_2) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_3) == 0x000071, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_4) == 0x000072, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetGameModeOwner_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_5) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Conv_IntToString_ReturnValue) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x0000B0, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, CallFunc_GetDisplayName_ReturnValue) == 0x0000D0, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, K2Node_MakeMap_Map) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, K2Node_MakeMap_Map_1) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, K2Node_MakeArray_Array) == 0x000180, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_6) == 0x000190, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_7) == 0x000191, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_bool_Variable_8) == 0x000192, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, Temp_byte_Variable) == 0x000193, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_PreSettleDeal, K2Node_Select_Default) == 0x000194, "Member 'BP_Logic_BattleRoyale_C_PreSettleDeal::K2Node_Select_Default' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Will Master Leaving Disband Room
// 0x0003 (0x0003 - 0x0000)
struct BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room) == 0x000003, "Wrong size on BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room, Result) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room::Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Logic_BattleRoyale_C_Will_Master_Leaving_Disband_Room::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Is Master Disbanding Legal
// 0x0003 (0x0003 - 0x0000)
struct BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal) == 0x000003, "Wrong size on BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal, Result) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal::Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Logic_BattleRoyale_C_Is_Master_Disbanding_Legal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Is Kick Out Legal
// 0x0003 (0x0003 - 0x0000)
struct BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal) == 0x000003, "Wrong size on BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal, Result) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal::Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Logic_BattleRoyale_C_Is_Kick_Out_Legal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Is Side Switch Legal
// 0x0003 (0x0003 - 0x0000)
struct BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal) == 0x000003, "Wrong size on BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal, Result) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal::Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Logic_BattleRoyale_C_Is_Side_Switch_Legal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.BuyResurrectionDeal
// 0x0018 (0x0018 - 0x0000)
struct BP_Logic_BattleRoyale_C_BuyResurrectionDeal final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_BuyResurrection_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_BuyResurrectionDeal");
static_assert(sizeof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal) == 0x000018, "Wrong size on BP_Logic_BattleRoyale_C_BuyResurrectionDeal");
static_assert(offsetof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_BuyResurrectionDeal::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_BuyResurrectionDeal::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_BuyResurrectionDeal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_BuyResurrectionDeal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_BuyResurrectionDeal, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_Logic_BattleRoyale_C_BuyResurrectionDeal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.UpdateWinnerData
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Logic_BattleRoyale_C_UpdateWinnerData final
{
public:
	class FString                                 Team;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0010(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataBool_ReturnValue_1;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataInt_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Temp_string_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<ESCMPlayerState>                       K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_DataTraceDefender_Name;                   // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DataTraceDefender_Data;                   // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayerBattle_ReturnValue;              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataInt_ReturnValue_1;                 // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataByte_ReturnValue;                  // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataInt_ReturnValue_2;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_UpdateWinnerData) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_UpdateWinnerData");
static_assert(sizeof(BP_Logic_BattleRoyale_C_UpdateWinnerData) == 0x0000A0, "Wrong size on BP_Logic_BattleRoyale_C_UpdateWinnerData");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, Team) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::Team' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, Temp_byte_Variable) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataBool_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataBool_ReturnValue_1) == 0x000021, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataInt_ReturnValue) == 0x000022, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, Temp_string_Variable) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, K2Node_MakeArray_Array) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_FindPlayers_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_DataTraceDefender_Name) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_DataTraceDefender_Name' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_DataTraceDefender_Data) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_DataTraceDefender_Data' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Conv_StringToInt_ReturnValue) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_CanPlayerBattle_ReturnValue) == 0x000094, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_CanPlayerBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_Conv_IntToByte_ReturnValue) == 0x000095, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataInt_ReturnValue_1) == 0x000096, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataByte_ReturnValue) == 0x000097, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateWinnerData, CallFunc_SetDataInt_ReturnValue_2) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_UpdateWinnerData::CallFunc_SetDataInt_ReturnValue_2' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.IsLamster
// 0x0028 (0x0028 - 0x0000)
struct BP_Logic_BattleRoyale_C_IsLamster final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             Index_0;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayerBattle_ReturnValue;              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESCMPlayerOutType                             Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_IsLamster) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_IsLamster");
static_assert(sizeof(BP_Logic_BattleRoyale_C_IsLamster) == 0x000028, "Wrong size on BP_Logic_BattleRoyale_C_IsLamster");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Index_0) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Index_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, ReturnValue) == 0x000009, "Member 'BP_Logic_BattleRoyale_C_IsLamster::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable) == 0x00000A, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, CallFunc_CanPlayerBattle_ReturnValue) == 0x00000B, "Member 'BP_Logic_BattleRoyale_C_IsLamster::CallFunc_CanPlayerBattle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_byte_Variable) == 0x00000D, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_2) == 0x00000E, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_3) == 0x00000F, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_4) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_5) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_6) == 0x000012, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_7) == 0x000013, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_8) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, Temp_bool_Variable_9) == 0x000015, "Member 'BP_Logic_BattleRoyale_C_IsLamster::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, CallFunc_GetGameModeOwner_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_IsLamster::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_IsLamster::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_IsLamster::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, K2Node_Select_Default) == 0x000025, "Member 'BP_Logic_BattleRoyale_C_IsLamster::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_IsLamster, K2Node_Select_Default_1) == 0x000026, "Member 'BP_Logic_BattleRoyale_C_IsLamster::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.CanPlayerBattle
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_CanPlayerBattle final
{
public:
	class ASCMPlayerState*                        Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	E_PlayerBattleState_BattleRoyale              State;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBot;                                             // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanRevive;                                         // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Alive;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayerBattle_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_CanPlayerBattle) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_CanPlayerBattle");
static_assert(sizeof(BP_Logic_BattleRoyale_C_CanPlayerBattle) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_CanPlayerBattle");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, Player) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, State) == 0x000009, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::State' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, IsBot) == 0x00000A, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::IsBot' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, CanRevive) == 0x00000B, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::CanRevive' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, Alive) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::Alive' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, CallFunc_GetGameModeOwner_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_CanPlayerBattle, CallFunc_CanPlayerBattle_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_CanPlayerBattle::CallFunc_CanPlayerBattle_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.UpdateTeamData
// 0x00F8 (0x00F8 - 0x0000)
struct BP_Logic_BattleRoyale_C_UpdateTeamData final
{
public:
	class FString                                 Team;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bAced;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarTeamInfo*                         LocalTeam;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aced;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDataBool_OutValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDataBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameState*                        CallFunc_GetSolarGameState_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers; // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASolarTeamInfo*                         CallFunc_GetTeamByName_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataInt_ReturnValue;                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasBeenEliminated_ReturnValue;            // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDataBool_ReturnValue;                  // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x00A8(0x0050)(ConstParm)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_UpdateTeamData) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_UpdateTeamData");
static_assert(sizeof(BP_Logic_BattleRoyale_C_UpdateTeamData) == 0x0000F8, "Wrong size on BP_Logic_BattleRoyale_C_UpdateTeamData");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, Team) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::Team' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, bAced) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::bAced' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, LocalTeam) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::LocalTeam' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, Aced) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::Aced' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetDataBool_OutValue) == 0x000021, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetDataBool_OutValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetDataBool_ReturnValue) == 0x000022, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetDataBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Not_PreBool_ReturnValue) == 0x000023, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetSolarGameState_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetSolarGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetTeamByName_ReturnValue) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetTeamByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_GetGameModeOwner_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Conv_TextToString_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Conv_IntToString_ReturnValue) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_SetDataInt_ReturnValue) == 0x000091, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_SetDataInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_HasBeenEliminated_ReturnValue) == 0x000092, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_HasBeenEliminated_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_SetDataBool_ReturnValue) == 0x000093, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_SetDataBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, CallFunc_Conv_BoolToString_ReturnValue) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateTeamData, K2Node_MakeMap_Map) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_UpdateTeamData::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetConiReviveManager
// 0x0018 (0x0018 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetConiReviveManager final
{
public:
	class ABP_ReviveItemManger_BattleRoyale_C*    Output_Get;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ReviveItemManger_BattleRoyale_C*    CallFunc_GetActorOfClass_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetConiReviveManager) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetConiReviveManager");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetConiReviveManager) == 0x000018, "Wrong size on BP_Logic_BattleRoyale_C_GetConiReviveManager");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetConiReviveManager, Output_Get) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetConiReviveManager::Output_Get' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetConiReviveManager, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetConiReviveManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetConiReviveManager, CallFunc_GetActorOfClass_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetConiReviveManager::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.QuitImmediately
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_QuitImmediately final
{
public:
	ESCMPlayerOutType                             Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        InputPin;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SendToSettle;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ToSettle;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESCMPlayerOutType                             Temp_byte_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_QuitImmediately) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_QuitImmediately");
static_assert(sizeof(BP_Logic_BattleRoyale_C_QuitImmediately) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_QuitImmediately");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Index_0) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Index_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, InputPin) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::InputPin' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, SendToSettle) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::SendToSettle' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, ToSettle) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::ToSettle' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_byte_Variable) == 0x000012, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable) == 0x000013, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_1) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_2) == 0x000015, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_3) == 0x000016, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_4) == 0x000017, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_5) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_6) == 0x000019, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_7) == 0x00001A, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, Temp_bool_Variable_8) == 0x00001B, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_QuitImmediately, K2Node_Select_Default) == 0x00001C, "Member 'BP_Logic_BattleRoyale_C_QuitImmediately::K2Node_Select_Default' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Update Player Data Trace
// 0x0218 (0x0218 - 0x0000)
struct BP_Logic_BattleRoyale_C_Update_Player_Data_Trace final
{
public:
	class ASCMPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocalVar_1;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleRoyaleGameMode*                  K2Node_DynamicCast_AsBattle_Royale_Game_Mode;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_1;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarGameInstanceBase*                 CallFunc_GetSolarGameInstanceBase_ReturnValue;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_AirlineCruise_C*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABlueCircleManager*                     CallFunc_GetBlueCircleManager_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DataTraceDefender_Name;                   // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DataTraceDefender_Data;                   // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ReviveItemManger_BattleRoyale_C*    CallFunc_GetConiReviveManager_Output_Get;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerUseReviveItemNum_ReturnValue;    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_BattleRoyale_C*         K2Node_DynamicCast_AsBP_Player_State_Battle_Royale; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_BuyResurrection_C*                 CallFunc_GetComponentByClass_ReturnValue_1;        // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerForceJumped_ReturnValue;         // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPlayerLandLocation_Location;           // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerLandLocation_Succeed;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Bool2String_String;                       // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Vector2String_Str;                        // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance2D_ReturnValue;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPlayerEjectLocation_Location;          // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPlayerEjectLocation_Succeed;           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Vector2String_Str_1;                      // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Bool2String_String_1;                     // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetZomborg_ReturnValue;                   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x01C8(0x0050)(ConstParm)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Update_Player_Data_Trace");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace) == 0x000218, "Wrong size on BP_Logic_BattleRoyale_C_Update_Player_Data_Trace");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, PlayerState) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::PlayerState' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, NewLocalVar_1) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetDisplayName_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetGameMode_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_DynamicCast_AsBattle_Royale_Game_Mode) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_DynamicCast_AsBattle_Royale_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc__s_GetPlayerManager_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc__s_GetPlayerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetGameMode_ReturnValue_1) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetGameMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetSolarGameInstanceBase_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetSolarGameInstanceBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetComponentByClass_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetBlueCircleManager_ReturnValue) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetBlueCircleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_DataTraceDefender_Name) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_DataTraceDefender_Name' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_DataTraceDefender_Data) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_DataTraceDefender_Data' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetConiReviveManager_Output_Get) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetConiReviveManager_Output_Get' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerUseReviveItemNum_ReturnValue) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerUseReviveItemNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_DynamicCast_AsBP_Player_State_Battle_Royale) == 0x0000D0, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_DynamicCast_AsBP_Player_State_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerForceJumped_ReturnValue) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerForceJumped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerLandLocation_Location) == 0x00010C, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerLandLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerLandLocation_Succeed) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerLandLocation_Succeed' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Bool2String_String) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Bool2String_String' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Vector2String_Str) == 0x000138, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Vector2String_Str' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Distance2D_ReturnValue) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerEjectLocation_Location) == 0x00014C, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerEjectLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetPlayerEjectLocation_Succeed) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetPlayerEjectLocation_Succeed' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000159, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Vector2String_Str_1) == 0x000160, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Vector2String_Str_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Bool2String_String_1) == 0x000170, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Bool2String_String_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetTeamName_ReturnValue) == 0x000180, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Map_Find_Value) == 0x000190, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Map_Find_ReturnValue) == 0x000194, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, Temp_int_Variable) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_GetZomborg_ReturnValue) == 0x00019C, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_GetZomborg_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0001A0, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, Temp_bool_Variable) == 0x0001B0, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_Select_Default) == 0x0001B4, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0001B8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Update_Player_Data_Trace, K2Node_MakeMap_Map) == 0x0001C8, "Member 'BP_Logic_BattleRoyale_C_Update_Player_Data_Trace::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Create Airdrop
// 0x0490 (0x0490 - 0x0000)
struct BP_Logic_BattleRoyale_C_Create_Airdrop final
{
public:
	int32                                         ChestID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NoticeId;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventFilterConfig             Config;                                            // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsSuperAirDrop;                                    // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TempPos;                                           // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          DuplicateFlag;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     TempAirDropPos;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00E8(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0158(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0230(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0250(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0298(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x02A8(0x0018)()
	float                                         CallFunc_GetTimeSeconds_ReturnValue_1;             // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x02D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0318(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0328(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetSolarItemManagerAirDropRain_TransformsArr; // 0x0378(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_GetSolarItemManagerAirDropRain_ReturnValue; // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_3;                         // 0x0390(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr; // 0x0400(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue; // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0xC];                                      // 0x0414(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_4;                         // 0x0420(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue_1;            // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Create_Airdrop) == 0x000010, "Wrong alignment on BP_Logic_BattleRoyale_C_Create_Airdrop");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Create_Airdrop) == 0x000490, "Wrong size on BP_Logic_BattleRoyale_C_Create_Airdrop");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, ChestID) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::ChestID' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Num) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Num' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, NoticeId) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::NoticeId' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Config) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Config' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, IsSuperAirDrop) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::IsSuperAirDrop' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, TempPos) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::TempPos' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, DuplicateFlag) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::DuplicateFlag' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, TempAirDropPos) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::TempAirDropPos' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Greater_IntInt_ReturnValue) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Location) == 0x000094, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Rotation) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Scale) == 0x0000AC, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_StringToText_ReturnValue) == 0x0000D0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeStruct_FormatArgumentData) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Loop_Counter_Variable_1) == 0x000128, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Add_IntInt_ReturnValue_1) == 0x00012C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Array_Index_Variable_1) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Array_Index_Variable_2) == 0x000134, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Loop_Counter_Variable_2) == 0x000138, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Add_IntInt_ReturnValue_2) == 0x00013C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Array_Index_Variable_3) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Loop_Counter_Variable_3) == 0x000144, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Add_IntInt_ReturnValue_3) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Loop_Counter_Variable_4) == 0x00014C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetTimeSeconds_ReturnValue) == 0x000150, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeStruct_FormatArgumentData_1) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Add_IntInt_ReturnValue_4) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue) == 0x00019C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_1) == 0x0001A0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Less_IntInt_ReturnValue) == 0x0001A4, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001A5, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, Temp_int_Array_Index_Variable_4) == 0x0001A8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Get_Item) == 0x0001AC, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Get_Item_1) == 0x0001C0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Location_1) == 0x0001F0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Rotation_1) == 0x0001FC, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Scale_1) == 0x000208, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000218, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Add_ReturnValue) == 0x000228, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000230, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_2) == 0x000248, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeStruct_FormatArgumentData_2) == 0x000250, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Less_IntInt_ReturnValue_1) == 0x000290, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeArray_Array) == 0x000298, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Format_ReturnValue) == 0x0002A8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetTimeSeconds_ReturnValue_1) == 0x0002C0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_TextToString_ReturnValue) == 0x0002C8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeStruct_FormatArgumentData_3) == 0x0002D8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, K2Node_MakeArray_Array_1) == 0x000318, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Format_ReturnValue_1) == 0x000328, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000340, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Add_ReturnValue_1) == 0x000350, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_3) == 0x000354, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_4) == 0x000358, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_RandomInteger_ReturnValue) == 0x00035C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000360, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Get_Item_2) == 0x000364, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_5) == 0x000370, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Less_IntInt_ReturnValue_2) == 0x000374, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetSolarItemManagerAirDropRain_TransformsArr) == 0x000378, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetSolarItemManagerAirDropRain_TransformsArr' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetSolarItemManagerAirDropRain_ReturnValue) == 0x000388, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetSolarItemManagerAirDropRain_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Get_Item_3) == 0x000390, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_6) == 0x0003C0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_AddUnique_ReturnValue) == 0x0003C4, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Less_IntInt_ReturnValue_3) == 0x0003C8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Location_2) == 0x0003CC, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Rotation_2) == 0x0003D8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Scale_2) == 0x0003E4, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Vector_Distance_ReturnValue) == 0x0003F0, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_7) == 0x0003F4, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0003F8, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0003F9, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr) == 0x000400, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue) == 0x000410, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Get_Item_4) == 0x000420, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_Length_ReturnValue_8) == 0x000450, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000454, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Less_IntInt_ReturnValue_4) == 0x000458, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Location_3) == 0x00045C, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Rotation_3) == 0x000468, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_BreakTransform_Scale_3) == 0x000474, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_Vector_Distance_ReturnValue_1) == 0x000480, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Create_Airdrop, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000484, "Member 'BP_Logic_BattleRoyale_C_Create_Airdrop::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.StartCruising
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_StartCruising final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_AirlineCruise_C*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_StartCruising) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_StartCruising");
static_assert(sizeof(BP_Logic_BattleRoyale_C_StartCruising) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_StartCruising");
static_assert(offsetof(BP_Logic_BattleRoyale_C_StartCruising, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_StartCruising::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_StartCruising, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_StartCruising::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.InitElements
// 0x0090 (0x0090 - 0x0000)
struct BP_Logic_BattleRoyale_C_InitElements final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Formula_BattleRoyale_C*             CallFunc_FinishSpawningActor_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SolarBombingManager_C*              CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameManagerBase*                       CallFunc_GetGameManager_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DefenderManager_C*                  K2Node_DynamicCast_AsBP_Defender_Manager;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_InitElements) == 0x000010, "Wrong alignment on BP_Logic_BattleRoyale_C_InitElements");
static_assert(sizeof(BP_Logic_BattleRoyale_C_InitElements) == 0x000090, "Wrong size on BP_Logic_BattleRoyale_C_InitElements");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_Get_Config_CFG) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_FinishSpawningActor_ReturnValue) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, CallFunc_GetGameManager_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_InitElements::CallFunc_GetGameManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, K2Node_DynamicCast_AsBP_Defender_Manager) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_InitElements::K2Node_DynamicCast_AsBP_Defender_Manager' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitElements, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_InitElements::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Get Map Info
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_Get_Map_Info final
{
public:
	class UBP_MapInfoComponent_C*                 MapInfo_0;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MapInfoComponent_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Get_Map_Info) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Get_Map_Info");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Get_Map_Info) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_Get_Map_Info");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Map_Info, MapInfo_0) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Get_Map_Info::MapInfo_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Map_Info, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Get_Map_Info::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Map_Info, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_Get_Map_Info::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Get_Map_Info, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Get_Map_Info::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Init Timeline Event
// 0x0308 (0x0308 - 0x0000)
struct BP_Logic_BattleRoyale_C_Init_Timeline_Event final
{
public:
	class UDataTable*                             BattleTimeline_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FReduceSafeAreaExecutorData>    TempSafeAreaDataList;                              // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FS_Event_BattleRoyale>          TempList;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames_1;       // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0060(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_2;                            // 0x0078(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0088(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Event_BattleRoyale                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x00A8(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value;                           // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_1;                         // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue;           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_1;         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_2;                         // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_3;                         // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_2;         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_3;         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Event_BattleRoyale                  CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x01B8(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Event_BattleRoyale>          K2Node_MakeArray_Array;                            // 0x0240(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_EventList_BattleRoyal               K2Node_MakeStruct_S_EventList_BattleRoyal;         // 0x0258(0x0010)(HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventTimelineModeComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventTimelineEnabled_ReturnValue;    // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286[0x2];                                      // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FReduceSafeAreaExecutorData            K2Node_MakeStruct_ReduceSafeAreaExecutorData;      // 0x02A0(0x0030)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_EventList_BattleRoyal               K2Node_MakeStruct_S_EventList_BattleRoyal_1;       // 0x02E0(0x0010)(HasGetValueTypeHash)
	struct FS_EventList_BattleRoyal               CallFunc_Map_Find_Value_4;                         // 0x02F0(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Init_Timeline_Event) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Init_Timeline_Event");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Init_Timeline_Event) == 0x000308, "Wrong size on BP_Logic_BattleRoyale_C_Init_Timeline_Event");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, BattleTimeline_0) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::BattleTimeline_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, TempSafeAreaDataList) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::TempSafeAreaDataList' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, TempList) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::TempList' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_string_Variable) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowNames_OutRowNames_1) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowNames_OutRowNames_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_string_Variable_1) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_string_Variable_2) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_string_Variable_3) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_bool_Variable) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_int_Array_Index_Variable) == 0x00009C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000128, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_int_Loop_Counter_Variable) == 0x00012C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Add_IntInt_ReturnValue) == 0x000134, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_Value) == 0x000138, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_ReturnValue) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_Value_1) == 0x000150, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_ReturnValue_1) == 0x000160, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Conv_StringToFloat_ReturnValue) == 0x000164, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Conv_StringToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Conv_StringToFloat_ReturnValue_1) == 0x000168, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Conv_StringToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_Value_2) == 0x000170, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_ReturnValue_2) == 0x000180, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_Value_3) == 0x000188, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_ReturnValue_3) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Conv_StringToFloat_ReturnValue_2) == 0x00019C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Conv_StringToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Conv_StringToFloat_ReturnValue_3) == 0x0001A0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Conv_StringToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001A4, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_int_Array_Index_Variable_1) == 0x0001A8, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Get_Item_1) == 0x0001AC, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0001B8, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000238, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_MakeArray_Array) == 0x000240, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Add_ReturnValue) == 0x000250, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_MakeStruct_S_EventList_BattleRoyal) == 0x000258, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_MakeStruct_S_EventList_BattleRoyal' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_float_Variable) == 0x000268, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_bool_Variable_1) == 0x00026C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetGameMode_ReturnValue) == 0x000270, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_GetComponentByClass_ReturnValue) == 0x000278, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_Select_Default) == 0x000280, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_CheckEventTimelineEnabled_ReturnValue) == 0x000284, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_CheckEventTimelineEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_IsValid_ReturnValue) == 0x000285, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_float_Variable_1) == 0x000288, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_bool_Variable_2) == 0x00028C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_float_Variable_2) == 0x000290, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_Select_Default_1) == 0x000294, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, Temp_int_Loop_Counter_Variable_1) == 0x000298, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_Select_Default_2) == 0x00029C, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_MakeStruct_ReduceSafeAreaExecutorData) == 0x0002A0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_MakeStruct_ReduceSafeAreaExecutorData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002D0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Array_Add_ReturnValue_1) == 0x0002D4, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002D8, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, K2Node_MakeStruct_S_EventList_BattleRoyal_1) == 0x0002E0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::K2Node_MakeStruct_S_EventList_BattleRoyal_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_Value_4) == 0x0002F0, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Init_Timeline_Event, CallFunc_Map_Find_ReturnValue_4) == 0x000300, "Member 'BP_Logic_BattleRoyale_C_Init_Timeline_Event::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.Execute Battle Event
// 0x08B0 (0x08B0 - 0x0000)
struct BP_Logic_BattleRoyale_C_Execute_Battle_Event final
{
public:
	struct FS_Event_BattleRoyale                  S_Event_BattleRoyale;                              // 0x0000(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0080(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value;                           // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x00B0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_2;                            // 0x00C8(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_1;                         // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_1;           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_2;                         // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_3;                            // 0x0108(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_2;           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_4;                            // 0x0120(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_3;                         // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_3;           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_4;                         // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShieldShopExecutorData                K2Node_MakeStruct_ShieldShopExecutorData;          // 0x0160(0x0048)()
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_4;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_5;                            // 0x01B0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_6;                            // 0x01C0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_5;                         // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_6;                         // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_6;                   // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_5;           // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_6;           // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_7;                            // 0x0208(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_8;                            // 0x0218(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_7;                         // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_7;                   // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_8;                         // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_8;                   // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue;           // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_1;         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_9;                            // 0x0260(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_10;                           // 0x0270(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_9;                         // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_9;                   // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_10;                        // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_10;                  // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_2;         // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_7;           // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_11;                           // 0x02B8(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_12;                           // 0x02C8(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_11;                        // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_11;                  // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_12;                        // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_12;                  // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_8;           // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_13;                           // 0x0310(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         Temp_string_Variable_14;                           // 0x0320(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<uint8>                                 Temp_byte_Variable;                                // 0x0330(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_13;                        // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_13;                  // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_15;                           // 0x0358(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_9;           // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_string_Variable_16;                           // 0x0370(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_14;                        // 0x0380(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_14;                  // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Temp_byte_Variable_1;                              // 0x0398(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_10;          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_17;                           // 0x03B0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_15;                        // 0x03C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_15;                  // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D9[0x3];                                      // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_11;          // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_18;                           // 0x03E0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_19;                           // 0x03F0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_16;                        // 0x0400(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_16;                  // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_17;                        // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_17;                  // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_12;          // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_13;          // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_20;                           // 0x0438(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_21;                           // 0x0448(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_18;                        // 0x0458(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_18;                  // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_19;                        // 0x0470(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_19;                  // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_3;         // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_4;         // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_22;                           // 0x0490(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_23;                           // 0x04A0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_20;                        // 0x04B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_20;                  // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_21;                        // 0x04C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_21;                  // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_5;         // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ToBool_bool;                              // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_24;                           // 0x04F8(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_22;                        // 0x0508(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_22;                  // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_25;                           // 0x0520(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_14;          // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_23;                        // 0x0538(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_23;                  // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_6;         // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_554[0x4];                                      // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_26;                           // 0x0558(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_24;                        // 0x0570(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_24;                  // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_7;         // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C[0x4];                                      // 0x058C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_27;                           // 0x0590(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_28;                           // 0x05A0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_25;                        // 0x05B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_25;                  // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_26;                        // 0x05C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_26;                  // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_15;          // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_29;                           // 0x05E0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class UMapObjectModeComponent*                CallFunc_Get_ReturnValue;                          // 0x05F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_27;                        // 0x0600(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_27;                  // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_8;         // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapObjectExecutor*                     CallFunc_GetMapObjectExecutor_ReturnValue;         // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_30;                           // 0x0620(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class UMapObjectRespawnDeviceExecutor*        K2Node_DynamicCast_AsMap_Object_Respawn_Device_Executor; // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_31;                           // 0x0640(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_28;                        // 0x0650(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_28;                  // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661[0x3];                                      // 0x0661(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_16;          // 0x0664(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_29;                        // 0x0668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_29;                  // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_679[0x3];                                      // 0x0679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_9;         // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USolarSkyIslandModeComponent*           CallFunc_Get_ReturnValue_1;                        // 0x0680(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyIslandExecutorData                 K2Node_MakeStruct_SkyIslandExecutorData;           // 0x0688(0x0058)()
	class FString                                 Temp_string_Variable_32;                           // 0x06E0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_30;                        // 0x06F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_30;                  // 0x0700(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapObjectModeComponent*                CallFunc_Get_ReturnValue_2;                        // 0x0708(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_17;          // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0714(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapObjectExecutor*                     CallFunc_GetMapObjectExecutor_ReturnValue_1;       // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapObjectShieldShopExecutor*           K2Node_DynamicCast_AsMap_Object_Shield_Shop_Executor; // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_33;                           // 0x0730(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_34;                           // 0x0740(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_31;                        // 0x0750(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_31;                  // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_761[0x3];                                      // 0x0761(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_18;          // 0x0764(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value_32;                        // 0x0768(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_32;                  // 0x0778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRespawnDeviceExecutorData             K2Node_MakeStruct_RespawnDeviceExecutorData;       // 0x0780(0x0040)()
	bool                                          CallFunc_ToBool_bool_1;                            // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<ESCMPlayerState>                       K2Node_MakeArray_Array;                            // 0x07D0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class USolarExpSpringModeComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x07E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x07E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x07F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0808(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x080C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue_1;                // 0x0810(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item_1;                         // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x082C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82D[0x3];                                      // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleRoyaleGameMode*                  K2Node_DynamicCast_AsBattle_Royale_Game_Mode;      // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0838(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839[0x3];                                      // 0x0839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x083C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Shrink_Index_ReturnValue;             // 0x0840(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Shrink_Index_ReturnValue_1;           // 0x0844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_35;                           // 0x0848(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class UBP_MapInfoComponent_C*                 CallFunc_Get_Map_Info_MapInfo;                     // 0x0858(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Random_Get_Fake_Bomb_Point_Pos;           // 0x0860(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Random_Get_Fake_Bomb_Point_Success;       // 0x086C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86D[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Map_Find_Value_33;                        // 0x0870(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_33;                  // 0x0880(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_881[0x3];                                      // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_StringToFloat_ReturnValue_10;        // 0x0884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Find_Value_34;                        // 0x0889(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue_34;                  // 0x088A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x088B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88C[0x4];                                      // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MapInfoComponent_C*                 CallFunc_Get_Map_Info_MapInfo_1;                   // 0x0890(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSafeAreaCenterAndRadius_OutCenter;     // 0x0898(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSafeAreaCenterAndRadius_OutRadius;     // 0x08A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSafeAreaCenterAndRadius_ReturnValue;   // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySetWarmGameSafeAreaCenter_ReturnValue; // 0x08A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8AA[0x2];                                      // 0x08AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x08AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_Execute_Battle_Event) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_Execute_Battle_Event");
static_assert(sizeof(BP_Logic_BattleRoyale_C_Execute_Battle_Event) == 0x0008B0, "Wrong size on BP_Logic_BattleRoyale_C_Execute_Battle_Event");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, S_Event_BattleRoyale) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::S_Event_BattleRoyale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_SwitchEnum_CmpSuccess) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_1) == 0x0000B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_2) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_1) == 0x0000D8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_1) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_1) == 0x0000EC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_2) == 0x0000F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_2) == 0x000100, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_3) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_2) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_4) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_3) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_3) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_3) == 0x000144, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_4) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_4) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_MakeStruct_ShieldShopExecutorData) == 0x000160, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_MakeStruct_ShieldShopExecutorData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_4) == 0x0001A8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_5) == 0x0001B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_6) == 0x0001C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_5) == 0x0001D0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_5) == 0x0001E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_6) == 0x0001E8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_6) == 0x0001F8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_5) == 0x0001FC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_6) == 0x000200, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_7) == 0x000208, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_8) == 0x000218, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_7) == 0x000228, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_7) == 0x000238, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_8) == 0x000240, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_8) == 0x000250, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue) == 0x000254, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_1) == 0x000258, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_9) == 0x000260, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_10) == 0x000270, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_9) == 0x000280, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_9) == 0x000290, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_10) == 0x000298, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_10) == 0x0002A8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_2) == 0x0002AC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_7) == 0x0002B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_11) == 0x0002B8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_12) == 0x0002C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_11) == 0x0002D8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_11) == 0x0002E8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_12) == 0x0002F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_12) == 0x000300, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_8) == 0x000304, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToName_ReturnValue) == 0x000308, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_13) == 0x000310, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_14) == 0x000320, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_byte_Variable) == 0x000330, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_13) == 0x000340, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_13) == 0x000350, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_15) == 0x000358, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_9) == 0x000368, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_16) == 0x000370, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_14) == 0x000380, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_14' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_14) == 0x000390, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_byte_Variable_1) == 0x000398, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_10) == 0x0003A8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_17) == 0x0003B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_bool_Variable) == 0x0003C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_bool_Variable_1) == 0x0003C1, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_15) == 0x0003C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_15' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_15) == 0x0003D8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_11) == 0x0003DC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_18) == 0x0003E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_19) == 0x0003F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_16) == 0x000400, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_16' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_16) == 0x000410, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_17) == 0x000418, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_17' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_17) == 0x000428, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_12) == 0x00042C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_13) == 0x000430, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_20) == 0x000438, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_21) == 0x000448, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_18) == 0x000458, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_18' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_18) == 0x000468, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_19) == 0x000470, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_19' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_19) == 0x000480, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_3) == 0x000484, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_4) == 0x000488, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_22) == 0x000490, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_23) == 0x0004A0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_20) == 0x0004B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_20' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_20) == 0x0004C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_21) == 0x0004C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_21' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_21) == 0x0004D8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_5) == 0x0004DC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_ToBool_bool) == 0x0004E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_ToBool_bool' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_int_Array_Index_Variable) == 0x0004E4, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_BooleanAND_ReturnValue) == 0x0004E8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_int_Loop_Counter_Variable) == 0x0004EC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Add_IntInt_ReturnValue) == 0x0004F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_int_Array_Index_Variable_1) == 0x0004F4, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_24) == 0x0004F8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_22) == 0x000508, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_22' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_22) == 0x000518, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_25) == 0x000520, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_14) == 0x000530, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_23) == 0x000538, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_23' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_23) == 0x000548, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_6) == 0x00054C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Add_IntInt_ReturnValue_1) == 0x000550, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_26) == 0x000558, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_int_Loop_Counter_Variable_1) == 0x000568, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_24) == 0x000570, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_24' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_24) == 0x000580, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Add_IntInt_ReturnValue_2) == 0x000584, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_7) == 0x000588, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_27) == 0x000590, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_28) == 0x0005A0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_25) == 0x0005B0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_25' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_25) == 0x0005C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_26) == 0x0005C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_26' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_26) == 0x0005D8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_15) == 0x0005DC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_29) == 0x0005E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_ReturnValue) == 0x0005F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_IsValid_ReturnValue) == 0x0005F8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_27) == 0x000600, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_27' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_27) == 0x000610, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_8) == 0x000614, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetMapObjectExecutor_ReturnValue) == 0x000618, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetMapObjectExecutor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_30) == 0x000620, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_AsMap_Object_Respawn_Device_Executor) == 0x000630, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_AsMap_Object_Respawn_Device_Executor' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_bSuccess) == 0x000638, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_31) == 0x000640, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_28) == 0x000650, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_28' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_28) == 0x000660, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_16) == 0x000664, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_29) == 0x000668, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_29' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_29) == 0x000678, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_9) == 0x00067C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_ReturnValue_1) == 0x000680, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_MakeStruct_SkyIslandExecutorData) == 0x000688, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_MakeStruct_SkyIslandExecutorData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_32) == 0x0006E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_30) == 0x0006F0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_30' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_30) == 0x000700, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_ReturnValue_2) == 0x000708, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_17) == 0x000710, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_IsValid_ReturnValue_1) == 0x000714, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetMapObjectExecutor_ReturnValue_1) == 0x000718, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetMapObjectExecutor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_AsMap_Object_Shield_Shop_Executor) == 0x000720, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_AsMap_Object_Shield_Shop_Executor' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_bSuccess_1) == 0x000728, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_33) == 0x000730, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_34) == 0x000740, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_31) == 0x000750, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_31' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_31) == 0x000760, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToInt_ReturnValue_18) == 0x000764, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToInt_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_32) == 0x000768, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_32' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_32) == 0x000778, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_MakeStruct_RespawnDeviceExecutorData) == 0x000780, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_MakeStruct_RespawnDeviceExecutorData' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_ToBool_bool_1) == 0x0007C0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_ToBool_bool_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetGameMode_ReturnValue) == 0x0007C8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_MakeArray_Array) == 0x0007D0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetComponentByClass_ReturnValue) == 0x0007E0, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_FindPlayers_ReturnValue) == 0x0007E8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_IsValid_ReturnValue_2) == 0x0007F8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Array_Get_Item) == 0x000800, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Array_Length_ReturnValue) == 0x000808, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Less_IntInt_ReturnValue) == 0x00080C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_FindPlayers_ReturnValue_1) == 0x000810, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_FindPlayers_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Array_Get_Item_1) == 0x000820, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Array_Length_ReturnValue_1) == 0x000828, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Less_IntInt_ReturnValue_1) == 0x00082C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_AsBattle_Royale_Game_Mode) == 0x000830, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_AsBattle_Royale_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_DynamicCast_bSuccess_2) == 0x000838, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_int_Variable) == 0x00083C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_Shrink_Index_ReturnValue) == 0x000840, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_Shrink_Index_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_Shrink_Index_ReturnValue_1) == 0x000844, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_Shrink_Index_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, Temp_string_Variable_35) == 0x000848, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::Temp_string_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_Map_Info_MapInfo) == 0x000858, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_Map_Info_MapInfo' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Random_Get_Fake_Bomb_Point_Pos) == 0x000860, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Random_Get_Fake_Bomb_Point_Pos' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Random_Get_Fake_Bomb_Point_Success) == 0x00086C, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Random_Get_Fake_Bomb_Point_Success' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_33) == 0x000870, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_33' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_33) == 0x000880, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Conv_StringToFloat_ReturnValue_10) == 0x000884, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Conv_StringToFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_IsValid_ReturnValue_3) == 0x000888, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_Value_34) == 0x000889, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_Value_34' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Map_Find_ReturnValue_34) == 0x00088A, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Map_Find_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, K2Node_Select_Default) == 0x00088B, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Get_Map_Info_MapInfo_1) == 0x000890, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Get_Map_Info_MapInfo_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetSafeAreaCenterAndRadius_OutCenter) == 0x000898, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetSafeAreaCenterAndRadius_OutCenter' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetSafeAreaCenterAndRadius_OutRadius) == 0x0008A4, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetSafeAreaCenterAndRadius_OutRadius' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_GetSafeAreaCenterAndRadius_ReturnValue) == 0x0008A8, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_GetSafeAreaCenterAndRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_TrySetWarmGameSafeAreaCenter_ReturnValue) == 0x0008A9, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_TrySetWarmGameSafeAreaCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_Execute_Battle_Event, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0008AC, "Member 'BP_Logic_BattleRoyale_C_Execute_Battle_Event::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.UpdateBattleState
// 0x0002 (0x0002 - 0x0000)
struct BP_Logic_BattleRoyale_C_UpdateBattleState final
{
public:
	E_BattleState_BattleRoyale                    NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDataByte_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_UpdateBattleState) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_UpdateBattleState");
static_assert(sizeof(BP_Logic_BattleRoyale_C_UpdateBattleState) == 0x000002, "Wrong size on BP_Logic_BattleRoyale_C_UpdateBattleState");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateBattleState, NewState) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_UpdateBattleState::NewState' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_UpdateBattleState, CallFunc_SetDataByte_ReturnValue) == 0x000001, "Member 'BP_Logic_BattleRoyale_C_UpdateBattleState::CallFunc_SetDataByte_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetGameState
// 0x0028 (0x0028 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetGameState final
{
public:
	class ABP_GameState_BattleRoyale_C*           Output_Get;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_BattleRoyale_C*           K2Node_DynamicCast_AsBP_Game_State_Battle_Royale;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetGameState) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetGameState");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetGameState) == 0x000028, "Wrong size on BP_Logic_BattleRoyale_C_GetGameState");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetGameState, Output_Get) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetGameState::Output_Get' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetGameState, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetGameState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetGameState, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetGameState, K2Node_DynamicCast_AsBP_Game_State_Battle_Royale) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_GetGameState::K2Node_DynamicCast_AsBP_Game_State_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetGameState, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_GetGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetPlayerStartOnWaitingland
// 0x0028 (0x0028 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland final
{
public:
	TArray<class APlayerStart*>                   PlayerStarts;                                      // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class APlayerStart*>                   CallFunc_GetAllActorsOfClassWithTag_OutActors;     // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland) == 0x000028, "Wrong size on BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland, PlayerStarts) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland::PlayerStarts' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland, CallFunc_GetAllActorsOfClassWithTag_OutActors) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland::CallFunc_GetAllActorsOfClassWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_Logic_BattleRoyale_C_GetPlayerStartOnWaitingland::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.GetBattleRoyaleMode
// 0x0020 (0x0020 - 0x0000)
struct BP_Logic_BattleRoyale_C_GetBattleRoyaleMode final
{
public:
	class ABP_Mode_BattleRoyale_C*                AsBP_SCM_Battle_Royale;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Mode_BattleRoyale_C*                K2Node_DynamicCast_AsBP_Mode_Battle_Royale;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_GetBattleRoyaleMode");
static_assert(sizeof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode) == 0x000020, "Wrong size on BP_Logic_BattleRoyale_C_GetBattleRoyaleMode");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode, AsBP_SCM_Battle_Royale) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_GetBattleRoyaleMode::AsBP_SCM_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode, CallFunc_GetGameMode_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_GetBattleRoyaleMode::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode, K2Node_DynamicCast_AsBP_Mode_Battle_Royale) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_GetBattleRoyaleMode::K2Node_DynamicCast_AsBP_Mode_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_GetBattleRoyaleMode, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_GetBattleRoyaleMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.InitModeSetting
// 0x01E8 (0x01E8 - 0x0000)
struct BP_Logic_BattleRoyale_C_InitModeSetting final
{
public:
	struct FSolarTablesData_WarmGameMode          NewLocalVar_0;                                     // 0x0000(0x0078)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc__S_PlayInEditor_bIsEditor;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTeamPlayerCount_Num_Mode;              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntInRange_ReturnValue;             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAILevelCurrentMatch_ReturnValue;       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWramGameType_ReturnValue;              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc__s_GetWarmGameInfo_bIsWarmGame;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarTablesData_WarmGameMode          CallFunc__s_GetWarmGameInfo_WarmGameInfo;          // 0x0120(0x0078)()
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0198(0x0050)(ConstParm)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_InitModeSetting) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_InitModeSetting");
static_assert(sizeof(BP_Logic_BattleRoyale_C_InitModeSetting) == 0x0001E8, "Wrong size on BP_Logic_BattleRoyale_C_InitModeSetting");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, NewLocalVar_0) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_bool_Variable) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_int_Variable) == 0x00007C, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_int_Variable_1) == 0x000080, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_int_Variable_2) == 0x000084, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_int_Variable_3) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, Temp_bool_Variable_1) == 0x00008C, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Conv_IntToString_ReturnValue) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc__S_PlayInEditor_bIsEditor) == 0x0000A0, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc__S_PlayInEditor_bIsEditor' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Conv_BoolToString_ReturnValue) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000C8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_GetTeamPlayerCount_Num_Mode) == 0x0000D8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_GetTeamPlayerCount_Num_Mode' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Get_Config_CFG) == 0x0000E0, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_RandomIntInRange_ReturnValue) == 0x0000E8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_RandomIntInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Clamp_ReturnValue) == 0x0000EC, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, K2Node_Select_Default) == 0x0000F0, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, K2Node_Select_Default_1) == 0x0000F4, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_GetAILevelCurrentMatch_ReturnValue) == 0x0000F8, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_GetAILevelCurrentMatch_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, K2Node_Select_Default_2) == 0x0000FC, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_GetWramGameType_ReturnValue) == 0x000100, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_GetWramGameType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000108, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc__s_GetWarmGameInfo_bIsWarmGame) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc__s_GetWarmGameInfo_bIsWarmGame' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, CallFunc__s_GetWarmGameInfo_WarmGameInfo) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::CallFunc__s_GetWarmGameInfo_WarmGameInfo' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_InitModeSetting, K2Node_MakeMap_Map) == 0x000198, "Member 'BP_Logic_BattleRoyale_C_InitModeSetting::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ReceiveBattleTick
// 0x0008 (0x0008 - 0x0000)
struct BP_Logic_BattleRoyale_C_ReceiveBattleTick final
{
public:
	float                                         BattleTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ReceiveBattleTick) == 0x000004, "Wrong alignment on BP_Logic_BattleRoyale_C_ReceiveBattleTick");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ReceiveBattleTick) == 0x000008, "Wrong size on BP_Logic_BattleRoyale_C_ReceiveBattleTick");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceiveBattleTick, BattleTime) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ReceiveBattleTick::BattleTime' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceiveBattleTick, DeltaTime) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_ReceiveBattleTick::DeltaTime' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ReceivePlayerJoinBattle
// 0x0010 (0x0010 - 0x0000)
struct BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle final
{
public:
	class ASCMPlayerState*                        NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAI;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle) == 0x000008, "Wrong alignment on BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle) == 0x000010, "Wrong size on BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle, NewPlayer) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle::NewPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle, IsAI) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_ReceivePlayerJoinBattle::IsAI' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.OnActiveUnfetteredArea
// 0x0001 (0x0001 - 0x0000)
struct BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea");
static_assert(sizeof(BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea) == 0x000001, "Wrong size on BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea, bActive) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_OnActiveUnfetteredArea::bActive' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.OnMatchingClosed
// 0x0004 (0x0004 - 0x0000)
struct BP_Logic_BattleRoyale_C_OnMatchingClosed final
{
public:
	int32                                         RPCId;                                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_OnMatchingClosed) == 0x000004, "Wrong alignment on BP_Logic_BattleRoyale_C_OnMatchingClosed");
static_assert(sizeof(BP_Logic_BattleRoyale_C_OnMatchingClosed) == 0x000004, "Wrong size on BP_Logic_BattleRoyale_C_OnMatchingClosed");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnMatchingClosed, RPCId) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_OnMatchingClosed::RPCId' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.OnSetEventTimelineState
// 0x0001 (0x0001 - 0x0000)
struct BP_Logic_BattleRoyale_C_OnSetEventTimelineState final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_OnSetEventTimelineState) == 0x000001, "Wrong alignment on BP_Logic_BattleRoyale_C_OnSetEventTimelineState");
static_assert(sizeof(BP_Logic_BattleRoyale_C_OnSetEventTimelineState) == 0x000001, "Wrong size on BP_Logic_BattleRoyale_C_OnSetEventTimelineState");
static_assert(offsetof(BP_Logic_BattleRoyale_C_OnSetEventTimelineState, IsPause) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_OnSetEventTimelineState::IsPause' has a wrong offset!");

// Function BP_Logic_BattleRoyale.BP_Logic_BattleRoyale_C.ExecuteUbergraph_BP_Logic_BattleRoyale
// 0x0560 (0x0560 - 0x0000)
struct BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECruiseState                                  Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetFrameCount_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetFrameCount_ReturnValue_1;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BattleState_BattleRoyale                    Temp_byte_Variable_1;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_1;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue;                // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UBPC_PlayerManager_C*                   CallFunc__s_GetPlayerManager_ReturnValue_1;        // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                CallFunc_GetPlayerList_ReturnValue_1;              // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerState_BattleRoyale_C*         K2Node_DynamicCast_AsBP_Player_State_Battle_Royale; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CallFunc_GetPlayerDataTraceByPlayer_Map;           // 0x00C0(0x0050)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_6;                               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_BattleTime;                           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_deltaTime;                            // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        CallFunc_Array_Get_Item_1;                         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_BattleRoyale_C*         K2Node_DynamicCast_AsBP_Player_State_Battle_Royale_1; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CallFunc_GetPlayerDataTraceByPlayer_Map_1;         // 0x0170(0x0050)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASCMPlayerState*                        K2Node_Event_Player_1;                             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             K2Node_Event_OutType_1;                            // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Current_Player_Count_Result;          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASCMPlayerState*>                K2Node_MakeArray_Array;                            // 0x01D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Player_Count_Result_1;        // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc__s_UpdateTeamCountMax_ReturnValue;        // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x01F8(0x0050)(ConstParm)
	class ASCMPlayerState*                        K2Node_Event_NewPlayer;                            // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAI;                                 // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTeamName_ReturnValue;                  // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        CallFunc_GetSolarCharacter_ReturnValue;            // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map_1;                              // 0x02A8(0x0050)(ConstParm)
	bool                                          K2Node_Select_Default;                             // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Framework_C*              K2Node_DynamicCast_AsBP_Character_Framework;       // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0310(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_EventList_BattleRoyal               CallFunc_Map_Find_Value;                           // 0x0348(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Event_BattleRoyale                  CallFunc_Array_Get_Item_2;                         // 0x0360(0x0080)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCMPlayerState*                        K2Node_Event_Player;                               // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESCMPlayerOutType                             K2Node_Event_OutType;                              // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCustomRoomMode_ReturnValue;             // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F2[0x6];                                      // 0x03F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Temp_byte_Variable_2;                              // 0x03F8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bActive;                              // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40B[0x5];                                      // 0x040B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarGameMode*                         CallFunc_GetGameModeOwner_ReturnValue;             // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RPCId;                                // 0x0418(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchEnded_ReturnValue;                // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_string_Variable;                              // 0x0420(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG;                           // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map_2;                              // 0x0438(0x0050)(ConstParm)
	TMap<class FString, class FString>            K2Node_MakeMap_Map_3;                              // 0x0488(0x0050)(ConstParm)
	TArray<ESCMPlayerState>                       Temp_byte_Variable_3;                              // 0x04D8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASCMPlayerState*>                CallFunc_FindPlayers_ReturnValue;                  // 0x04F0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ASCMPlayerState*                        CallFunc_Array_Get_Item_3;                         // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x050C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0510(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsPause;                              // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0528(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0534(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0548(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UCFG_BattleRoyale_C*                    CallFunc_Get_Config_CFG_1;                         // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillState                            K2Node_Select_Default_1;                           // 0x0558(0x0004)(NoDestructor)
	struct FSkillState                            K2Node_Select_Default_2;                           // 0x055C(0x0004)(NoDestructor)
};
static_assert(alignof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale) == 0x000010, "Wrong alignment on BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale");
static_assert(sizeof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale) == 0x000560, "Wrong size on BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, EntryPoint) == 0x000000, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable) == 0x000004, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_byte_Variable) == 0x00000C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable) == 0x00000D, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_1) == 0x00000E, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_2) == 0x00000F, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_3) == 0x000010, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_4) == 0x000011, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_5) == 0x000012, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_1) == 0x000014, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_2) == 0x000018, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_3) == 0x00001C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetFrameCount_ReturnValue) == 0x000020, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetFrameCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_4) == 0x000028, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Conv_Int64ToInt_ReturnValue) == 0x00002C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Conv_Int64ToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Abs_Int_ReturnValue) == 0x000034, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00003C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000048, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_MakeLiteralByte_ReturnValue) == 0x00004C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_IsClosed_Variable) == 0x00004D, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Has_Been_Initd_Variable) == 0x00004E, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetFrameCount_ReturnValue_1) == 0x000050, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetFrameCount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_byte_Variable_1) == 0x000058, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Conv_Int64ToInt_ReturnValue_1) == 0x00005C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Conv_Int64ToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_5) == 0x000060, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Abs_Int_ReturnValue_1) == 0x000068, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Abs_Int_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x00006D, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Not_PreBool_ReturnValue) == 0x00006E, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc__s_GetPlayerManager_ReturnValue) == 0x000070, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc__s_GetPlayerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetPlayerList_ReturnValue) == 0x000078, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc__s_GetPlayerManager_ReturnValue_1) == 0x000088, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc__s_GetPlayerManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetPlayerList_ReturnValue_1) == 0x000098, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetPlayerList_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_AsBP_Player_State_Battle_Royale) == 0x0000B0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_AsBP_Player_State_Battle_Royale' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetPlayerDataTraceByPlayer_Map) == 0x0000C0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetPlayerDataTraceByPlayer_Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000110, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_BooleanAND_ReturnValue) == 0x000111, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Length_ReturnValue_1) == 0x000114, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000118, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Conv_IntToString_ReturnValue) == 0x000120, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Loop_Counter_Variable_1) == 0x000130, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Add_IntInt_ReturnValue_2) == 0x000134, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Array_Index_Variable_1) == 0x000138, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_bool_Variable_6) == 0x00013C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_6) == 0x000140, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_BattleTime) == 0x000144, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_BattleTime' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_deltaTime) == 0x000148, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_deltaTime' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Get_Item_1) == 0x000150, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000158, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_IsValid_ReturnValue_1) == 0x000159, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_AsBP_Player_State_Battle_Royale_1) == 0x000160, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_AsBP_Player_State_Battle_Royale_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_bSuccess_1) == 0x000168, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_BooleanAND_ReturnValue_1) == 0x000169, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetPlayerDataTraceByPlayer_Map_1) == 0x000170, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetPlayerDataTraceByPlayer_Map_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001C0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001C4, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_Player_1) == 0x0001C8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_Player_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_OutType_1) == 0x0001D0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_OutType_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Get_Current_Player_Count_Result) == 0x0001D4, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Get_Current_Player_Count_Result' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_MakeArray_Array) == 0x0001D8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Get_Current_Player_Count_Result_1) == 0x0001E8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Get_Current_Player_Count_Result_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0001EC, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc__s_UpdateTeamCountMax_ReturnValue) == 0x0001F0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc__s_UpdateTeamCountMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_MakeMap_Map) == 0x0001F8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_NewPlayer) == 0x000248, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_IsAI) == 0x000250, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_IsAI' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Conv_BoolToString_ReturnValue) == 0x000258, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetPlayerName_ReturnValue) == 0x000268, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetTeamName_ReturnValue) == 0x000278, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetTeamName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetTeamID_ReturnValue) == 0x000288, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetSolarCharacter_ReturnValue) == 0x000290, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetSolarCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Conv_ByteToString_ReturnValue) == 0x000298, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_MakeMap_Map_1) == 0x0002A8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Select_Default) == 0x0002F8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_AsBP_Character_Framework) == 0x000300, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_AsBP_Character_Framework' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_DynamicCast_bSuccess_2) == 0x000308, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetTransform_ReturnValue) == 0x000310, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_FFloor_ReturnValue) == 0x000340, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_int_Variable_7) == 0x000344, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Map_Find_Value) == 0x000348, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Map_Find_ReturnValue) == 0x000358, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000359, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Get_Item_2) == 0x000360, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Length_ReturnValue_2) == 0x0003E0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Less_IntInt_ReturnValue) == 0x0003E4, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_Player) == 0x0003E8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_OutType) == 0x0003F0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_OutType' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_IsCustomRoomMode_ReturnValue) == 0x0003F1, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_IsCustomRoomMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_byte_Variable_2) == 0x0003F8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Greater_ByteByte_ReturnValue) == 0x000408, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_bActive) == 0x000409, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_bActive' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_BooleanAND_ReturnValue_2) == 0x00040A, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_GetGameModeOwner_ReturnValue) == 0x000410, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_GetGameModeOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_RPCId) == 0x000418, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_RPCId' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_HasMatchEnded_ReturnValue) == 0x00041C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_HasMatchEnded_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_string_Variable) == 0x000420, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Get_Config_CFG) == 0x000430, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Get_Config_CFG' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_MakeMap_Map_2) == 0x000438, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_MakeMap_Map_2' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_MakeMap_Map_3) == 0x000488, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_MakeMap_Map_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, Temp_byte_Variable_3) == 0x0004D8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Add_FloatFloat_ReturnValue) == 0x0004E8, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_FindPlayers_ReturnValue) == 0x0004F0, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_FindPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Get_Item_3) == 0x000500, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Array_Length_ReturnValue_3) == 0x000508, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Less_IntInt_ReturnValue_1) == 0x00050C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_CreateDelegate_OutputDelegate) == 0x000510, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Event_IsPause) == 0x000520, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Event_IsPause' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000528, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_BooleanOR_ReturnValue) == 0x000530, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_CreateDelegate_OutputDelegate_1) == 0x000534, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000548, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, CallFunc_Get_Config_CFG_1) == 0x000550, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::CallFunc_Get_Config_CFG_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Select_Default_1) == 0x000558, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale, K2Node_Select_Default_2) == 0x00055C, "Member 'BP_Logic_BattleRoyale_C_ExecuteUbergraph_BP_Logic_BattleRoyale::K2Node_Select_Default_2' has a wrong offset!");

}

