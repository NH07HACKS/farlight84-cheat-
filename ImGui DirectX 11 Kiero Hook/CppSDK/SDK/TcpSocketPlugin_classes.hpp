#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TcpSocketPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TcpSocketPlugin.TcpSocketConnection
// 0x0090 (0x0368 - 0x02D8)
class ATcpSocketConnection final : public AActor
{
public:
	int32                                         SendBufferSize;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceiveBufferSize;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenTicks;                                  // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E4[0x84];                                     // 0x02E4(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<uint8> Concat_BytesBytes(const TArray<uint8>& A, const TArray<uint8>& B);
	static TArray<uint8> Conv_ByteToBytes(uint8 InByte);
	static TArray<uint8> Conv_FloatToBytes(float InFloat);
	static TArray<uint8> Conv_IntToBytes(int32 inInt);
	static TArray<uint8> Conv_StringToBytes(const class FString& InStr);
	static uint8 Message_ReadByte(TArray<uint8>& Message);
	static bool Message_ReadBytes(int32 NumBytes, TArray<uint8>& Message, TArray<uint8>* ReturnArray);
	static float Message_ReadFloat(TArray<uint8>& Message);
	static int32 Message_ReadInt(TArray<uint8>& Message);
	static class FString Message_ReadString(TArray<uint8>& Message, int32 StringLength);

	void Connect(const class FString& ipAddress, int32 Port, const TDelegate<void(int32 ConnectionId)>& OnDisconnected, const TDelegate<void(int32 ConnectionId)>& OnConnected, const TDelegate<void(int32 ConnectionId, TArray<uint8>& Message)>& OnMessageReceived, int32* ConnectionId);
	void Disconnect(int32 ConnectionId);
	bool isConnected(int32 ConnectionId);
	bool SendData(int32 ConnectionId, const TArray<uint8>& DataToSend);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TcpSocketConnection">();
	}
	static class ATcpSocketConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATcpSocketConnection>();
	}
};
static_assert(alignof(ATcpSocketConnection) == 0x000008, "Wrong alignment on ATcpSocketConnection");
static_assert(sizeof(ATcpSocketConnection) == 0x000368, "Wrong size on ATcpSocketConnection");
static_assert(offsetof(ATcpSocketConnection, SendBufferSize) == 0x0002D8, "Member 'ATcpSocketConnection::SendBufferSize' has a wrong offset!");
static_assert(offsetof(ATcpSocketConnection, ReceiveBufferSize) == 0x0002DC, "Member 'ATcpSocketConnection::ReceiveBufferSize' has a wrong offset!");
static_assert(offsetof(ATcpSocketConnection, TimeBetweenTicks) == 0x0002E0, "Member 'ATcpSocketConnection::TimeBetweenTicks' has a wrong offset!");

// Class TcpSocketPlugin.TcpSocketSettings
// 0x0008 (0x0030 - 0x0028)
class UTcpSocketSettings final : public UObject
{
public:
	bool                                          bPostErrorsToMessageLog;                           // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TcpSocketSettings">();
	}
	static class UTcpSocketSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTcpSocketSettings>();
	}
};
static_assert(alignof(UTcpSocketSettings) == 0x000008, "Wrong alignment on UTcpSocketSettings");
static_assert(sizeof(UTcpSocketSettings) == 0x000030, "Wrong size on UTcpSocketSettings");
static_assert(offsetof(UTcpSocketSettings, bPostErrorsToMessageLog) == 0x000028, "Member 'UTcpSocketSettings::bPostErrorsToMessageLog' has a wrong offset!");

}

