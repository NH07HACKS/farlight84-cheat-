#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_WorldMark_Operation_InfoItem

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.BP_IsNotSelectableOrNavigable
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable, ReturnValue) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_BP_IsNotSelectableOrNavigable::ReturnValue' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.SetWidgetDisplayStyle
// 0x0002 (0x0002 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle final
{
public:
	EWorldMarkOperationBottomHalfStyle            NewStyle;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle) == 0x000002, "Wrong size on UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle, NewStyle) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle::NewStyle' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'UI_WorldMark_Operation_InfoItem_C_SetWidgetDisplayStyle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet) == 0x000008, "Wrong size on UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_PreConstruct) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_PreConstruct");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_PreConstruct) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_PreConstruct");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.RefreshWidgetStyle
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle final
{
public:
	EWorldMarkOperationBottomHalfStyle            WidgetStyle;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle, WidgetStyle) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_RefreshWidgetStyle::WidgetStyle' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.RefreshReviveTeammatesStyle
// 0x0001 (0x0001 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle final
{
public:
	bool                                          IsFallDownState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle) == 0x000001, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle) == 0x000001, "Wrong size on UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle, IsFallDownState) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_RefreshReviveTeammatesStyle::IsFallDownState' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.OnTeammateCallForHelpNotifyBP
// 0x0008 (0x0008 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP final
{
public:
	class ASolarPlayerState*                      SolarPlayerState;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP) == 0x000008, "Wrong size on UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP, SolarPlayerState) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_OnTeammateCallForHelpNotifyBP::SolarPlayerState' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.ExecuteUbergraph_UI_WorldMark_Operation_InfoItem
// 0x00F8 (0x00F8 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	float                                         Temp_float_Variable_3;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWorldMarkOperationBottomHalfStyle            K2Node_Event_WidgetStyle;                          // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_2;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsFallDownState;                      // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ASolarPlayerState*                      K2Node_Event_SolarPlayerState;                     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem) == 0x0000F8, "Wrong size on UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, EntryPoint) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable) == 0x000004, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_1) == 0x000005, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable) == 0x000006, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_float_Variable) == 0x000008, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_float_Variable_1) == 0x00000C, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_1) == 0x000010, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_int_Variable) == 0x000014, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_int_Variable_1) == 0x000018, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_2) == 0x00001C, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_2) == 0x00001D, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_3) == 0x00001E, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_3) == 0x00001F, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_4) == 0x000020, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_5) == 0x000021, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_4) == 0x000022, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_struct_Variable) == 0x000024, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_struct_Variable_1) == 0x000034, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_5) == 0x000044, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_float_Variable_2) == 0x000048, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default) == 0x00004C, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_float_Variable_3) == 0x000088, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_6) == 0x00008C, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_6) == 0x00008D, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_byte_Variable_7) == 0x00008E, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_bIsExpanded) == 0x00008F, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_bIsSelected) == 0x000090, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_ListItemObject) == 0x000098, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_IsDesignTime) == 0x0000A0, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_WidgetStyle) == 0x0000A1, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_WidgetStyle' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x0000A8, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, Temp_bool_Variable_7) == 0x0000B0, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_1) == 0x0000B1, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_2) == 0x0000B4, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_3) == 0x0000B8, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_4) == 0x0000BC, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_5) == 0x0000C0, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_MakeStruct_Margin) == 0x0000C4, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_6) == 0x0000D4, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_IsFallDownState) == 0x0000D5, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_IsFallDownState' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_BooleanAND_ReturnValue) == 0x0000D6, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_BooleanAND_ReturnValue_1) == 0x0000D7, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Event_SolarPlayerState) == 0x0000D8, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Event_SolarPlayerState' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_IsValid_ReturnValue) == 0x0000E0, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, K2Node_Select_Default_7) == 0x0000E1, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_IsAnimationPlaying_ReturnValue) == 0x0000E2, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_PlayAnimation_ReturnValue) == 0x0000E8, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000F0, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem, CallFunc_BooleanAND_ReturnValue_2) == 0x0000F1, "Member 'UI_WorldMark_Operation_InfoItem_C_ExecuteUbergraph_UI_WorldMark_Operation_InfoItem::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.OnExpressStateChanged
// 0x0008 (0x0008 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged final
{
public:
	class ASolarCharacter*                        InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged) == 0x000008, "Wrong size on UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged, InCharacter) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_OnExpressStateChanged::InCharacter' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.OnExpressProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged final
{
public:
	class ASolarCharacter*                        InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInProgress;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged) == 0x000010, "Wrong size on UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged, InCharacter) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged::InCharacter' has a wrong offset!");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged, bInProgress) == 0x000008, "Member 'UI_WorldMark_Operation_InfoItem_C_OnExpressProgressChanged::bInProgress' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.OnListItemObjectSetCopy
// 0x0008 (0x0008 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy) == 0x000008, "Wrong size on UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy, ListItemObject) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_OnListItemObjectSetCopy::ListItemObject' has a wrong offset!");

// Function UI_WorldMark_Operation_InfoItem.UI_WorldMark_Operation_InfoItem_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct UI_WorldMark_Operation_InfoItem_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(UI_WorldMark_Operation_InfoItem_C_GetModuleName) == 0x000008, "Wrong alignment on UI_WorldMark_Operation_InfoItem_C_GetModuleName");
static_assert(sizeof(UI_WorldMark_Operation_InfoItem_C_GetModuleName) == 0x000010, "Wrong size on UI_WorldMark_Operation_InfoItem_C_GetModuleName");
static_assert(offsetof(UI_WorldMark_Operation_InfoItem_C_GetModuleName, ReturnValue) == 0x000000, "Member 'UI_WorldMark_Operation_InfoItem_C_GetModuleName::ReturnValue' has a wrong offset!");

}

