#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UdiniInputActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UdiniInputActor.EUdiniTableType
// NumValues: 0x000A
enum class EUdiniTableType : uint8
{
	TYPE_Mat                                 = 0,
	TYPE_Staticmesh                          = 1,
	TYPE_StaticmeshPicMix                    = 2,
	TYPE_FoliageType                         = 3,
	TYPE_Pic                                 = 4,
	TYPE_Heigfield                           = 5,
	TYPE_OtherUobject                        = 6,
	TYPE_OtherUobjectGroup                   = 7,
	TYPE_Other                               = 8,
	TYPE_MAX                                 = 9,
};

// Enum UdiniInputActor.EUdiniPart
// NumValues: 0x0006
enum class EUdiniPart : uint8
{
	Part_Mesh                                = 0,
	Part_Curve                               = 1,
	Part_Point                               = 2,
	Part_Curve_ReadOnly                      = 3,
	Part_Point_ReadOnly                      = 4,
	Part_MAX                                 = 5,
};

// Enum UdiniInputActor.EUdiniAttributeClass
// NumValues: 0x000D
enum class EUdiniAttributeClass : uint8
{
	Class_None                               = 0,
	Class_Core                               = 1,
	Class_CurvePrimAtt                       = 2,
	Class_ChildCurvePrimAtt                  = 3,
	Class_MeshPrimAtt                        = 4,
	Class_MeshPointAtt                       = 5,
	Class_MeshDetailAtt                      = 6,
	Class_MeshControlAtt                     = 7,
	Class_PolyLinePrimAtt                    = 8,
	Class_PolyLinePointAtt                   = 9,
	Class_PointAtt                           = 10,
	Class_HeightfieldPrimAtt                 = 11,
	Class_MAX                                = 12,
};

// Enum UdiniInputActor.EUdiniAttributeType
// NumValues: 0x0010
enum class EUdiniAttributeType : uint8
{
	TYPE_STRING                              = 0,
	TYPE_INT                                 = 1,
	TYPE_FLOAT                               = 2,
	TYPE_VECTOR3                             = 3,
	TYPE_VECTOR4                             = 4,
	TYPE_VECTOR2                             = 5,
	TYPE_StringList                          = 6,
	TYPE_IntList                             = 7,
	TYPE_Tog                                 = 8,
	TYPE_Button                              = 9,
	TYPE_CheckBox                            = 10,
	TYPE_UOBJECT                             = 11,
	TYPE_FolderList                          = 12,
	TYPE_FOLDER_COLLAPSIBLE                  = 13,
	TYPE_FOLDER_GROUPSIMPLE                  = 14,
	TYPE_MAX                                 = 15,
};

// Enum UdiniInputActor.EUdiniDataPartType
// NumValues: 0x0006
enum class EUdiniDataPartType : uint8
{
	Part_Point                               = 0,
	Part_Mesh                                = 1,
	Part_Polyline                            = 2,
	Part_Splineline                          = 3,
	Part_Volum                               = 4,
	Part_Max                                 = 5,
};

// Enum UdiniInputActor.EUdiniPartType
// NumValues: 0x000E
enum class EUdiniPartType : uint8
{
	Part_StaticmeshMesh                      = 0,
	Part_ProceduareMesh                      = 1,
	Part_Instance                            = 2,
	Part_InstanceForlage                     = 3,
	Part_HRISInstance                        = 4,
	Part_DecalActor                          = 5,
	Part_UobjectInstance                     = 6,
	Part_Image                               = 7,
	Part_LMLayer                             = 8,
	Part_Landscape                           = 9,
	Part_HLOD                                = 10,
	Part_UdiniInputActor                     = 11,
	Part_CopyActor                           = 12,
	Part_MAX                                 = 13,
};

// ScriptStruct UdiniInputActor.UdiniAssetData
// 0x0038 (0x0040 - 0x0008)
struct FUdiniAssetData : public FTableRowBase
{
public:
	TArray<class FString>                         PropertyNames;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDebug;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUdiniTableType                               TableType;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackegPath;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Icon;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniAssetData) == 0x000008, "Wrong alignment on FUdiniAssetData");
static_assert(sizeof(FUdiniAssetData) == 0x000040, "Wrong size on FUdiniAssetData");
static_assert(offsetof(FUdiniAssetData, PropertyNames) == 0x000008, "Member 'FUdiniAssetData::PropertyNames' has a wrong offset!");
static_assert(offsetof(FUdiniAssetData, bIsDebug) == 0x000018, "Member 'FUdiniAssetData::bIsDebug' has a wrong offset!");
static_assert(offsetof(FUdiniAssetData, TableType) == 0x000019, "Member 'FUdiniAssetData::TableType' has a wrong offset!");
static_assert(offsetof(FUdiniAssetData, PackegPath) == 0x000020, "Member 'FUdiniAssetData::PackegPath' has a wrong offset!");
static_assert(offsetof(FUdiniAssetData, Icon) == 0x000030, "Member 'FUdiniAssetData::Icon' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniTableDatas
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x08) FUdiniTableDatas final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniTableDatas) == 0x000008, "Wrong alignment on FUdiniTableDatas");
static_assert(sizeof(FUdiniTableDatas) == 0x000130, "Wrong size on FUdiniTableDatas");

// ScriptStruct UdiniInputActor.UdiniTextureName
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FUdiniTextureName final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniTextureName) == 0x000010, "Wrong alignment on FUdiniTextureName");
static_assert(sizeof(FUdiniTextureName) == 0x000040, "Wrong size on FUdiniTextureName");

// ScriptStruct UdiniInputActor.BackTextureData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FBackTextureData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackTextureData) == 0x000010, "Wrong alignment on FBackTextureData");
static_assert(sizeof(FBackTextureData) == 0x000060, "Wrong size on FBackTextureData");

// ScriptStruct UdiniInputActor.StaticmeshDTData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FStaticmeshDTData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticmeshDTData) == 0x000008, "Wrong alignment on FStaticmeshDTData");
static_assert(sizeof(FStaticmeshDTData) == 0x000018, "Wrong size on FStaticmeshDTData");

// ScriptStruct UdiniInputActor.UdiniTaskDatableCore
// 0x0000 (0x0008 - 0x0008)
struct FUdiniTaskDatableCore : public FTableRowBase
{
};
static_assert(alignof(FUdiniTaskDatableCore) == 0x000008, "Wrong alignment on FUdiniTaskDatableCore");
static_assert(sizeof(FUdiniTaskDatableCore) == 0x000008, "Wrong size on FUdiniTaskDatableCore");

// ScriptStruct UdiniInputActor.UdiniBuildTaskData
// 0x0098 (0x00A0 - 0x0008)
struct FUdiniBuildTaskData final : public FUdiniTaskDatableCore
{
public:
	TSoftObjectPtr<class UWorld>                  MainLevel;                                         // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SubLevelPathNameInclude;                           // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SublevelExcludeString;                             // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BeforeRunSubOpNames;                               // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         HipFiles;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AfterRunSubOpNames;                                // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SaveAsssetPathNameInclude;                         // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SaveAsssetPathNameExclude;                         // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniBuildTaskData) == 0x000008, "Wrong alignment on FUdiniBuildTaskData");
static_assert(sizeof(FUdiniBuildTaskData) == 0x0000A0, "Wrong size on FUdiniBuildTaskData");
static_assert(offsetof(FUdiniBuildTaskData, MainLevel) == 0x000008, "Member 'FUdiniBuildTaskData::MainLevel' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, SubLevelPathNameInclude) == 0x000030, "Member 'FUdiniBuildTaskData::SubLevelPathNameInclude' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, SublevelExcludeString) == 0x000040, "Member 'FUdiniBuildTaskData::SublevelExcludeString' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, BeforeRunSubOpNames) == 0x000050, "Member 'FUdiniBuildTaskData::BeforeRunSubOpNames' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, HipFiles) == 0x000060, "Member 'FUdiniBuildTaskData::HipFiles' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, AfterRunSubOpNames) == 0x000070, "Member 'FUdiniBuildTaskData::AfterRunSubOpNames' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, SaveAsssetPathNameInclude) == 0x000080, "Member 'FUdiniBuildTaskData::SaveAsssetPathNameInclude' has a wrong offset!");
static_assert(offsetof(FUdiniBuildTaskData, SaveAsssetPathNameExclude) == 0x000090, "Member 'FUdiniBuildTaskData::SaveAsssetPathNameExclude' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniFoliageNetGroupDatable
// 0x0000 (0x0040 - 0x0040)
struct FUdiniFoliageNetGroupDatable final : public FUdiniAssetData
{
};
static_assert(alignof(FUdiniFoliageNetGroupDatable) == 0x000008, "Wrong alignment on FUdiniFoliageNetGroupDatable");
static_assert(sizeof(FUdiniFoliageNetGroupDatable) == 0x000040, "Wrong size on FUdiniFoliageNetGroupDatable");

// ScriptStruct UdiniInputActor.UdiniFoliageTypeDataTable
// 0x0080 (0x00C0 - 0x0040)
struct FUdiniFoliageTypeDataTable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFoliageType_InstancedStaticMesh*> FoliageTypes;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniFoliageTypeDataTable) == 0x000008, "Wrong alignment on FUdiniFoliageTypeDataTable");
static_assert(sizeof(FUdiniFoliageTypeDataTable) == 0x0000C0, "Wrong size on FUdiniFoliageTypeDataTable");
static_assert(offsetof(FUdiniFoliageTypeDataTable, RowName) == 0x000040, "Member 'FUdiniFoliageTypeDataTable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniFoliageTypeDataTable, FoliageTypes) == 0x000050, "Member 'FUdiniFoliageTypeDataTable::FoliageTypes' has a wrong offset!");
static_assert(offsetof(FUdiniFoliageTypeDataTable, ContentRootPath) == 0x000060, "Member 'FUdiniFoliageTypeDataTable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniFoliageTypeDataTable, Attributes) == 0x000070, "Member 'FUdiniFoliageTypeDataTable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniHeightFieldDatable
// 0x0080 (0x00C0 - 0x0040)
struct FUdiniHeightFieldDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHeightFieldTexture*>            TextureList;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniHeightFieldDatable) == 0x000008, "Wrong alignment on FUdiniHeightFieldDatable");
static_assert(sizeof(FUdiniHeightFieldDatable) == 0x0000C0, "Wrong size on FUdiniHeightFieldDatable");
static_assert(offsetof(FUdiniHeightFieldDatable, RowName) == 0x000040, "Member 'FUdiniHeightFieldDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniHeightFieldDatable, TextureList) == 0x000050, "Member 'FUdiniHeightFieldDatable::TextureList' has a wrong offset!");
static_assert(offsetof(FUdiniHeightFieldDatable, ContentRootPath) == 0x000060, "Member 'FUdiniHeightFieldDatable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniHeightFieldDatable, Attributes) == 0x000070, "Member 'FUdiniHeightFieldDatable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.HoudiniParmData_Base
// 0x0120 (0x0120 - 0x0000)
struct FHoudiniParmData_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 help;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUdiniAttributeType                           AttributeType;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParentFolderName;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TupleSize;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatValue;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntValue;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringValue;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FolderListParmIndex;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DefaultFloatValue;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DefaultFIntValue;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultFStringValue;                               // 0x00A0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ChoseListStringLable;                              // 0x00B0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ChoseListStringValue;                              // 0x00C0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ChoseListStringIcon;                               // 0x00D0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChoseListIntValue;                                 // 0x00E0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHide;                                           // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasMin;                                            // 0x00F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasMax;                                            // 0x00FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasUIMin;                                          // 0x00FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasUIMax;                                          // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UIMax;                                             // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIMin;                                             // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VisibilityCondition;                               // 0x0110(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoudiniParmData_Base) == 0x000008, "Wrong alignment on FHoudiniParmData_Base");
static_assert(sizeof(FHoudiniParmData_Base) == 0x000120, "Wrong size on FHoudiniParmData_Base");
static_assert(offsetof(FHoudiniParmData_Base, Name) == 0x000008, "Member 'FHoudiniParmData_Base::Name' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, help) == 0x000018, "Member 'FHoudiniParmData_Base::help' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, AttributeType) == 0x000028, "Member 'FHoudiniParmData_Base::AttributeType' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, ParentFolderName) == 0x000030, "Member 'FHoudiniParmData_Base::ParentFolderName' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, TupleSize) == 0x000040, "Member 'FHoudiniParmData_Base::TupleSize' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, FloatValue) == 0x000048, "Member 'FHoudiniParmData_Base::FloatValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, IntValue) == 0x000058, "Member 'FHoudiniParmData_Base::IntValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, StringValue) == 0x000068, "Member 'FHoudiniParmData_Base::StringValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, FolderListParmIndex) == 0x000078, "Member 'FHoudiniParmData_Base::FolderListParmIndex' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, DefaultFloatValue) == 0x000080, "Member 'FHoudiniParmData_Base::DefaultFloatValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, DefaultFIntValue) == 0x000090, "Member 'FHoudiniParmData_Base::DefaultFIntValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, DefaultFStringValue) == 0x0000A0, "Member 'FHoudiniParmData_Base::DefaultFStringValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, ChoseListStringLable) == 0x0000B0, "Member 'FHoudiniParmData_Base::ChoseListStringLable' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, ChoseListStringValue) == 0x0000C0, "Member 'FHoudiniParmData_Base::ChoseListStringValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, ChoseListStringIcon) == 0x0000D0, "Member 'FHoudiniParmData_Base::ChoseListStringIcon' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, ChoseListIntValue) == 0x0000E0, "Member 'FHoudiniParmData_Base::ChoseListIntValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, MaxValue) == 0x0000F0, "Member 'FHoudiniParmData_Base::MaxValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, MinValue) == 0x0000F4, "Member 'FHoudiniParmData_Base::MinValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, bIsHide) == 0x0000F8, "Member 'FHoudiniParmData_Base::bIsHide' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, hasMin) == 0x0000F9, "Member 'FHoudiniParmData_Base::hasMin' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, hasMax) == 0x0000FA, "Member 'FHoudiniParmData_Base::hasMax' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, hasUIMin) == 0x0000FB, "Member 'FHoudiniParmData_Base::hasUIMin' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, hasUIMax) == 0x0000FC, "Member 'FHoudiniParmData_Base::hasUIMax' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, UIMax) == 0x000100, "Member 'FHoudiniParmData_Base::UIMax' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, UIMin) == 0x000104, "Member 'FHoudiniParmData_Base::UIMin' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData_Base, VisibilityCondition) == 0x000110, "Member 'FHoudiniParmData_Base::VisibilityCondition' has a wrong offset!");

// ScriptStruct UdiniInputActor.HoudiniFolderListParmData
// 0x0058 (0x0058 - 0x0000)
struct FHoudiniFolderListParmData final
{
public:
	TMap<class FString, struct FHoudiniParmData_Base> Value;                                         // 0x0000(0x0050)(Edit, NonTransactional, NativeAccessSpecifierPublic)
	bool                                          bIShowSelected;                                    // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoudiniFolderListParmData) == 0x000008, "Wrong alignment on FHoudiniFolderListParmData");
static_assert(sizeof(FHoudiniFolderListParmData) == 0x000058, "Wrong size on FHoudiniFolderListParmData");
static_assert(offsetof(FHoudiniFolderListParmData, Value) == 0x000000, "Member 'FHoudiniFolderListParmData::Value' has a wrong offset!");
static_assert(offsetof(FHoudiniFolderListParmData, bIShowSelected) == 0x000050, "Member 'FHoudiniFolderListParmData::bIShowSelected' has a wrong offset!");

// ScriptStruct UdiniInputActor.HoudiniParmData
// 0x0068 (0x0188 - 0x0120)
struct FHoudiniParmData final : public FHoudiniParmData_Base
{
public:
	struct FHoudiniFolderListParmData             DefaultFolderListValue;                            // 0x0120(0x0058)(Edit, NonTransactional, NativeAccessSpecifierPublic)
	TArray<struct FHoudiniFolderListParmData>     FolderListValue;                                   // 0x0178(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoudiniParmData) == 0x000008, "Wrong alignment on FHoudiniParmData");
static_assert(sizeof(FHoudiniParmData) == 0x000188, "Wrong size on FHoudiniParmData");
static_assert(offsetof(FHoudiniParmData, DefaultFolderListValue) == 0x000120, "Member 'FHoudiniParmData::DefaultFolderListValue' has a wrong offset!");
static_assert(offsetof(FHoudiniParmData, FolderListValue) == 0x000178, "Member 'FHoudiniParmData::FolderListValue' has a wrong offset!");

// ScriptStruct UdiniInputActor.SubOpData
// 0x03A8 (0x03A8 - 0x0000)
struct FSubOpData final
{
public:
	class FString                                 Icon;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubOpName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MainOpName;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parent;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubOpToolTip;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HdaTypeName;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurveType;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoodOnPaintEnd;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SecondHdaTypeName;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClosedCurve;                                     // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPoint;                                           // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SnapGridSize;                                      // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapGridNum;                                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapActorTransHandleGridSize;                      // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationModeType;                                 // 0x0098(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputTypeClassName;                               // 0x00A8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorOwnerClassName;                               // 0x00B8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImportClassName;                                   // 0x00C8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpURL;                                           // 0x00D8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x00E8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelFolderName;                                   // 0x00F8(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableResetMeshPart;                               // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableResetPolyLinePart;                           // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableResetHeightFieldPart;                        // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableResetPointPart;                              // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AutoUpdateHdaName;                                 // 0x0118(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifyLandscapeLayer;                              // 0x0128(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurveEditMode;                                     // 0x0138(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveSnapDistance;                                 // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCurveWith;                                  // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerDrawPointAddHeight;                             // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCookForActorMove;                            // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineResolution;                                  // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LMLayerRootPath;                                   // 0x0160(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCatcheName;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomHotKeyList;                                  // 0x0180(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomCmdList;                                     // 0x0190(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CapturePolylineData;                               // 0x01A0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CoordinateType;                                    // 0x01B0(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFullLoad;                                       // 0x01C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicData;                                   // 0x01C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FHoudiniParmData>  SubCurveAttribute;                                 // 0x01C8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  ChildSubCurveAttribute;                            // 0x0218(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  SubCoutrlAttribute;                                // 0x0268(0x0050)(Edit, NonTransactional, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  SubPointAttribute;                                 // 0x02B8(0x0050)(Edit, NonTransactional, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  SubPrimAttribute;                                  // 0x0308(0x0050)(Edit, NonTransactional, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  SubDetailAttribute;                                // 0x0358(0x0050)(Edit, NonTransactional, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubOpData) == 0x000008, "Wrong alignment on FSubOpData");
static_assert(sizeof(FSubOpData) == 0x0003A8, "Wrong size on FSubOpData");
static_assert(offsetof(FSubOpData, Icon) == 0x000000, "Member 'FSubOpData::Icon' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubOpName) == 0x000010, "Member 'FSubOpData::SubOpName' has a wrong offset!");
static_assert(offsetof(FSubOpData, MainOpName) == 0x000020, "Member 'FSubOpData::MainOpName' has a wrong offset!");
static_assert(offsetof(FSubOpData, Parent) == 0x000030, "Member 'FSubOpData::Parent' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubOpToolTip) == 0x000040, "Member 'FSubOpData::SubOpToolTip' has a wrong offset!");
static_assert(offsetof(FSubOpData, HdaTypeName) == 0x000050, "Member 'FSubOpData::HdaTypeName' has a wrong offset!");
static_assert(offsetof(FSubOpData, CurveType) == 0x000060, "Member 'FSubOpData::CurveType' has a wrong offset!");
static_assert(offsetof(FSubOpData, CoodOnPaintEnd) == 0x000070, "Member 'FSubOpData::CoodOnPaintEnd' has a wrong offset!");
static_assert(offsetof(FSubOpData, SecondHdaTypeName) == 0x000078, "Member 'FSubOpData::SecondHdaTypeName' has a wrong offset!");
static_assert(offsetof(FSubOpData, IsClosedCurve) == 0x000088, "Member 'FSubOpData::IsClosedCurve' has a wrong offset!");
static_assert(offsetof(FSubOpData, IsPoint) == 0x000089, "Member 'FSubOpData::IsPoint' has a wrong offset!");
static_assert(offsetof(FSubOpData, SnapGridSize) == 0x00008C, "Member 'FSubOpData::SnapGridSize' has a wrong offset!");
static_assert(offsetof(FSubOpData, SnapGridNum) == 0x000090, "Member 'FSubOpData::SnapGridNum' has a wrong offset!");
static_assert(offsetof(FSubOpData, SnapActorTransHandleGridSize) == 0x000094, "Member 'FSubOpData::SnapActorTransHandleGridSize' has a wrong offset!");
static_assert(offsetof(FSubOpData, OperationModeType) == 0x000098, "Member 'FSubOpData::OperationModeType' has a wrong offset!");
static_assert(offsetof(FSubOpData, OutputTypeClassName) == 0x0000A8, "Member 'FSubOpData::OutputTypeClassName' has a wrong offset!");
static_assert(offsetof(FSubOpData, ActorOwnerClassName) == 0x0000B8, "Member 'FSubOpData::ActorOwnerClassName' has a wrong offset!");
static_assert(offsetof(FSubOpData, ImportClassName) == 0x0000C8, "Member 'FSubOpData::ImportClassName' has a wrong offset!");
static_assert(offsetof(FSubOpData, HelpURL) == 0x0000D8, "Member 'FSubOpData::HelpURL' has a wrong offset!");
static_assert(offsetof(FSubOpData, LevelName) == 0x0000E8, "Member 'FSubOpData::LevelName' has a wrong offset!");
static_assert(offsetof(FSubOpData, LevelFolderName) == 0x0000F8, "Member 'FSubOpData::LevelFolderName' has a wrong offset!");
static_assert(offsetof(FSubOpData, EnableResetMeshPart) == 0x000108, "Member 'FSubOpData::EnableResetMeshPart' has a wrong offset!");
static_assert(offsetof(FSubOpData, EnableResetPolyLinePart) == 0x00010C, "Member 'FSubOpData::EnableResetPolyLinePart' has a wrong offset!");
static_assert(offsetof(FSubOpData, EnableResetHeightFieldPart) == 0x000110, "Member 'FSubOpData::EnableResetHeightFieldPart' has a wrong offset!");
static_assert(offsetof(FSubOpData, EnableResetPointPart) == 0x000114, "Member 'FSubOpData::EnableResetPointPart' has a wrong offset!");
static_assert(offsetof(FSubOpData, AutoUpdateHdaName) == 0x000118, "Member 'FSubOpData::AutoUpdateHdaName' has a wrong offset!");
static_assert(offsetof(FSubOpData, ModifyLandscapeLayer) == 0x000128, "Member 'FSubOpData::ModifyLandscapeLayer' has a wrong offset!");
static_assert(offsetof(FSubOpData, CurveEditMode) == 0x000138, "Member 'FSubOpData::CurveEditMode' has a wrong offset!");
static_assert(offsetof(FSubOpData, CurveSnapDistance) == 0x000148, "Member 'FSubOpData::CurveSnapDistance' has a wrong offset!");
static_assert(offsetof(FSubOpData, DefaultCurveWith) == 0x00014C, "Member 'FSubOpData::DefaultCurveWith' has a wrong offset!");
static_assert(offsetof(FSubOpData, PerDrawPointAddHeight) == 0x000150, "Member 'FSubOpData::PerDrawPointAddHeight' has a wrong offset!");
static_assert(offsetof(FSubOpData, EnableCookForActorMove) == 0x000154, "Member 'FSubOpData::EnableCookForActorMove' has a wrong offset!");
static_assert(offsetof(FSubOpData, SplineResolution) == 0x000158, "Member 'FSubOpData::SplineResolution' has a wrong offset!");
static_assert(offsetof(FSubOpData, LMLayerRootPath) == 0x000160, "Member 'FSubOpData::LMLayerRootPath' has a wrong offset!");
static_assert(offsetof(FSubOpData, ShareCatcheName) == 0x000170, "Member 'FSubOpData::ShareCatcheName' has a wrong offset!");
static_assert(offsetof(FSubOpData, CustomHotKeyList) == 0x000180, "Member 'FSubOpData::CustomHotKeyList' has a wrong offset!");
static_assert(offsetof(FSubOpData, CustomCmdList) == 0x000190, "Member 'FSubOpData::CustomCmdList' has a wrong offset!");
static_assert(offsetof(FSubOpData, CapturePolylineData) == 0x0001A0, "Member 'FSubOpData::CapturePolylineData' has a wrong offset!");
static_assert(offsetof(FSubOpData, CoordinateType) == 0x0001B0, "Member 'FSubOpData::CoordinateType' has a wrong offset!");
static_assert(offsetof(FSubOpData, bIsFullLoad) == 0x0001C0, "Member 'FSubOpData::bIsFullLoad' has a wrong offset!");
static_assert(offsetof(FSubOpData, bUseDynamicData) == 0x0001C1, "Member 'FSubOpData::bUseDynamicData' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubCurveAttribute) == 0x0001C8, "Member 'FSubOpData::SubCurveAttribute' has a wrong offset!");
static_assert(offsetof(FSubOpData, ChildSubCurveAttribute) == 0x000218, "Member 'FSubOpData::ChildSubCurveAttribute' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubCoutrlAttribute) == 0x000268, "Member 'FSubOpData::SubCoutrlAttribute' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubPointAttribute) == 0x0002B8, "Member 'FSubOpData::SubPointAttribute' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubPrimAttribute) == 0x000308, "Member 'FSubOpData::SubPrimAttribute' has a wrong offset!");
static_assert(offsetof(FSubOpData, SubDetailAttribute) == 0x000358, "Member 'FSubOpData::SubDetailAttribute' has a wrong offset!");

// ScriptStruct UdiniInputActor.ManOpData
// 0x0070 (0x0070 - 0x0000)
struct FManOpData final
{
public:
	class FString                                 MainOpName;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Icon;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSubOpData>        SubOpDatas;                                        // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManOpData) == 0x000008, "Wrong alignment on FManOpData");
static_assert(sizeof(FManOpData) == 0x000070, "Wrong size on FManOpData");
static_assert(offsetof(FManOpData, MainOpName) == 0x000000, "Member 'FManOpData::MainOpName' has a wrong offset!");
static_assert(offsetof(FManOpData, Icon) == 0x000010, "Member 'FManOpData::Icon' has a wrong offset!");
static_assert(offsetof(FManOpData, SubOpDatas) == 0x000020, "Member 'FManOpData::SubOpDatas' has a wrong offset!");

// ScriptStruct UdiniInputActor.InputDataList
// 0x0050 (0x0050 - 0x0000)
struct FInputDataList final
{
public:
	TMap<class FString, struct FManOpData>        ManOpDatasList;                                    // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputDataList) == 0x000008, "Wrong alignment on FInputDataList");
static_assert(sizeof(FInputDataList) == 0x000050, "Wrong size on FInputDataList");
static_assert(offsetof(FInputDataList, ManOpDatasList) == 0x000000, "Member 'FInputDataList::ManOpDatasList' has a wrong offset!");

// ScriptStruct UdiniInputActor.InputDynamicData
// 0x03D8 (0x03D8 - 0x0000)
struct FInputDynamicData final
{
public:
	float                                         PaintScale;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubOpData                             StaticSubOpData;                                   // 0x0008(0x03A8)(NonTransactional, NativeAccessSpecifierPublic)
	class FString                                 PaintAttValue;                                     // 0x03B0(0x0010)(ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaintAttName;                                      // 0x03C0(0x0010)(ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePaintDir;                                    // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputDynamicData) == 0x000008, "Wrong alignment on FInputDynamicData");
static_assert(sizeof(FInputDynamicData) == 0x0003D8, "Wrong size on FInputDynamicData");
static_assert(offsetof(FInputDynamicData, PaintScale) == 0x000000, "Member 'FInputDynamicData::PaintScale' has a wrong offset!");
static_assert(offsetof(FInputDynamicData, StaticSubOpData) == 0x000008, "Member 'FInputDynamicData::StaticSubOpData' has a wrong offset!");
static_assert(offsetof(FInputDynamicData, PaintAttValue) == 0x0003B0, "Member 'FInputDynamicData::PaintAttValue' has a wrong offset!");
static_assert(offsetof(FInputDynamicData, PaintAttName) == 0x0003C0, "Member 'FInputDynamicData::PaintAttName' has a wrong offset!");
static_assert(offsetof(FInputDynamicData, bIsUsePaintDir) == 0x0003D0, "Member 'FInputDynamicData::bIsUsePaintDir' has a wrong offset!");

// ScriptStruct UdiniInputActor.ChildSplineSubOpData
// 0x0070 (0x0070 - 0x0000)
struct FChildSplineSubOpData final
{
public:
	class FString                                 Icon;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, NonTransactional, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHoudiniParmData>  ChildCurveAttribute;                               // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChildSplineSubOpData) == 0x000008, "Wrong alignment on FChildSplineSubOpData");
static_assert(sizeof(FChildSplineSubOpData) == 0x000070, "Wrong size on FChildSplineSubOpData");
static_assert(offsetof(FChildSplineSubOpData, Icon) == 0x000000, "Member 'FChildSplineSubOpData::Icon' has a wrong offset!");
static_assert(offsetof(FChildSplineSubOpData, Name) == 0x000010, "Member 'FChildSplineSubOpData::Name' has a wrong offset!");
static_assert(offsetof(FChildSplineSubOpData, ChildCurveAttribute) == 0x000020, "Member 'FChildSplineSubOpData::ChildCurveAttribute' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniOtherUobjectGroupDatable
// 0x0080 (0x00C0 - 0x0040)
struct FUdiniOtherUobjectGroupDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                StaticmeshGroup;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniOtherUobjectGroupDatable) == 0x000008, "Wrong alignment on FUdiniOtherUobjectGroupDatable");
static_assert(sizeof(FUdiniOtherUobjectGroupDatable) == 0x0000C0, "Wrong size on FUdiniOtherUobjectGroupDatable");
static_assert(offsetof(FUdiniOtherUobjectGroupDatable, RowName) == 0x000040, "Member 'FUdiniOtherUobjectGroupDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectGroupDatable, StaticmeshGroup) == 0x000050, "Member 'FUdiniOtherUobjectGroupDatable::StaticmeshGroup' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectGroupDatable, ContentRootPath) == 0x000060, "Member 'FUdiniOtherUobjectGroupDatable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectGroupDatable, Attributes) == 0x000070, "Member 'FUdiniOtherUobjectGroupDatable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniRootDatable
// 0x0070 (0x00B0 - 0x0040)
struct FUdiniRootDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                UdiniDatableList;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniRootDatable) == 0x000008, "Wrong alignment on FUdiniRootDatable");
static_assert(sizeof(FUdiniRootDatable) == 0x0000B0, "Wrong size on FUdiniRootDatable");
static_assert(offsetof(FUdiniRootDatable, RowName) == 0x000040, "Member 'FUdiniRootDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniRootDatable, UdiniDatableList) == 0x000050, "Member 'FUdiniRootDatable::UdiniDatableList' has a wrong offset!");
static_assert(offsetof(FUdiniRootDatable, Attributes) == 0x000060, "Member 'FUdiniRootDatable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniStaticmeshTextureDatable
// 0x00B0 (0x00F0 - 0x0040)
struct FUdiniStaticmeshTextureDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticMesh;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<int32>                                 MatSlotIndexs;                                     // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MatTextureParmValues;                              // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               EnableRGBA;                                        // 0x00E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniStaticmeshTextureDatable) == 0x000010, "Wrong alignment on FUdiniStaticmeshTextureDatable");
static_assert(sizeof(FUdiniStaticmeshTextureDatable) == 0x0000F0, "Wrong size on FUdiniStaticmeshTextureDatable");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, RowName) == 0x000040, "Member 'FUdiniStaticmeshTextureDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, StaticMesh) == 0x000050, "Member 'FUdiniStaticmeshTextureDatable::StaticMesh' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, ContentRootPath) == 0x000060, "Member 'FUdiniStaticmeshTextureDatable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, Attributes) == 0x000070, "Member 'FUdiniStaticmeshTextureDatable::Attributes' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, MatSlotIndexs) == 0x0000C0, "Member 'FUdiniStaticmeshTextureDatable::MatSlotIndexs' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, MatTextureParmValues) == 0x0000D0, "Member 'FUdiniStaticmeshTextureDatable::MatTextureParmValues' has a wrong offset!");
static_assert(offsetof(FUdiniStaticmeshTextureDatable, EnableRGBA) == 0x0000E0, "Member 'FUdiniStaticmeshTextureDatable::EnableRGBA' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniTextureDatable
// 0x0090 (0x00D0 - 0x0040)
struct FUdiniTextureDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture*>                       TextureList;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               EnableRGBA;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniTextureDatable) == 0x000010, "Wrong alignment on FUdiniTextureDatable");
static_assert(sizeof(FUdiniTextureDatable) == 0x0000D0, "Wrong size on FUdiniTextureDatable");
static_assert(offsetof(FUdiniTextureDatable, RowName) == 0x000040, "Member 'FUdiniTextureDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniTextureDatable, TextureList) == 0x000050, "Member 'FUdiniTextureDatable::TextureList' has a wrong offset!");
static_assert(offsetof(FUdiniTextureDatable, EnableRGBA) == 0x000060, "Member 'FUdiniTextureDatable::EnableRGBA' has a wrong offset!");
static_assert(offsetof(FUdiniTextureDatable, ContentRootPath) == 0x000070, "Member 'FUdiniTextureDatable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniTextureDatable, Attributes) == 0x000080, "Member 'FUdiniTextureDatable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.HeightFieldData
// 0x0070 (0x0070 - 0x0000)
struct FHeightFieldData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XLength;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YLength;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 HeightData;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MaskNames;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterPos;                                         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundSize;                                         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixSize;                                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   MaskColors;                                        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBitMast;                                        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeightFieldData) == 0x000008, "Wrong alignment on FHeightFieldData");
static_assert(sizeof(FHeightFieldData) == 0x000070, "Wrong size on FHeightFieldData");
static_assert(offsetof(FHeightFieldData, Name) == 0x000000, "Member 'FHeightFieldData::Name' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, XLength) == 0x000010, "Member 'FHeightFieldData::XLength' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, YLength) == 0x000014, "Member 'FHeightFieldData::YLength' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, HeightData) == 0x000018, "Member 'FHeightFieldData::HeightData' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, MaskNames) == 0x000028, "Member 'FHeightFieldData::MaskNames' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, CenterPos) == 0x000038, "Member 'FHeightFieldData::CenterPos' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, BoundSize) == 0x000044, "Member 'FHeightFieldData::BoundSize' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, PixSize) == 0x000050, "Member 'FHeightFieldData::PixSize' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, MaskColors) == 0x000058, "Member 'FHeightFieldData::MaskColors' has a wrong offset!");
static_assert(offsetof(FHeightFieldData, bIsBitMast) == 0x000068, "Member 'FHeightFieldData::bIsBitMast' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniDataTable
// 0x0070 (0x00B0 - 0x0040)
struct FUdiniDataTable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticMesh;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniDataTable) == 0x000008, "Wrong alignment on FUdiniDataTable");
static_assert(sizeof(FUdiniDataTable) == 0x0000B0, "Wrong size on FUdiniDataTable");
static_assert(offsetof(FUdiniDataTable, RowName) == 0x000040, "Member 'FUdiniDataTable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniDataTable, StaticMesh) == 0x000050, "Member 'FUdiniDataTable::StaticMesh' has a wrong offset!");
static_assert(offsetof(FUdiniDataTable, Attributes) == 0x000060, "Member 'FUdiniDataTable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniMatDatable
// 0x0080 (0x00C0 - 0x0040)
struct FUdiniMatDatable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              MatInstance;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniMatDatable) == 0x000008, "Wrong alignment on FUdiniMatDatable");
static_assert(sizeof(FUdiniMatDatable) == 0x0000C0, "Wrong size on FUdiniMatDatable");
static_assert(offsetof(FUdiniMatDatable, RowName) == 0x000040, "Member 'FUdiniMatDatable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniMatDatable, MatInstance) == 0x000050, "Member 'FUdiniMatDatable::MatInstance' has a wrong offset!");
static_assert(offsetof(FUdiniMatDatable, ContentRootPath) == 0x000060, "Member 'FUdiniMatDatable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniMatDatable, Attributes) == 0x000070, "Member 'FUdiniMatDatable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.LoopEdgPoint
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x04) FLoopEdgPoint final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoopEdgPoint) == 0x000004, "Wrong alignment on FLoopEdgPoint");
static_assert(sizeof(FLoopEdgPoint) == 0x000038, "Wrong size on FLoopEdgPoint");

// ScriptStruct UdiniInputActor.OnePoly
// 0x0038 (0x0038 - 0x0000)
struct FOnePoly final
{
public:
	TArray<int32>                                 polyPosIndex;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 polyNonSharedEdgeArray;                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 polyTrianglePrimIndex;                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         __Primitive_Id_;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHid;                                            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnePoly) == 0x000008, "Wrong alignment on FOnePoly");
static_assert(sizeof(FOnePoly) == 0x000038, "Wrong size on FOnePoly");
static_assert(offsetof(FOnePoly, polyPosIndex) == 0x000000, "Member 'FOnePoly::polyPosIndex' has a wrong offset!");
static_assert(offsetof(FOnePoly, polyNonSharedEdgeArray) == 0x000010, "Member 'FOnePoly::polyNonSharedEdgeArray' has a wrong offset!");
static_assert(offsetof(FOnePoly, polyTrianglePrimIndex) == 0x000020, "Member 'FOnePoly::polyTrianglePrimIndex' has a wrong offset!");
static_assert(offsetof(FOnePoly, __Primitive_Id_) == 0x000030, "Member 'FOnePoly::__Primitive_Id_' has a wrong offset!");
static_assert(offsetof(FOnePoly, bIsHid) == 0x000034, "Member 'FOnePoly::bIsHid' has a wrong offset!");

// ScriptStruct UdiniInputActor.DrawPrimConfig
// 0x0010 (0x0010 - 0x0000)
struct FDrawPrimConfig final
{
public:
	TArray<class FString>                         SelectedAttributeList;                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawPrimConfig) == 0x000008, "Wrong alignment on FDrawPrimConfig");
static_assert(sizeof(FDrawPrimConfig) == 0x000010, "Wrong size on FDrawPrimConfig");
static_assert(offsetof(FDrawPrimConfig, SelectedAttributeList) == 0x000000, "Member 'FDrawPrimConfig::SelectedAttributeList' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniOtherUobjectDataTable
// 0x0080 (0x00C0 - 0x0040)
struct FUdiniOtherUobjectDataTable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ActorInstance;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniOtherUobjectDataTable) == 0x000008, "Wrong alignment on FUdiniOtherUobjectDataTable");
static_assert(sizeof(FUdiniOtherUobjectDataTable) == 0x0000C0, "Wrong size on FUdiniOtherUobjectDataTable");
static_assert(offsetof(FUdiniOtherUobjectDataTable, RowName) == 0x000040, "Member 'FUdiniOtherUobjectDataTable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectDataTable, ActorInstance) == 0x000050, "Member 'FUdiniOtherUobjectDataTable::ActorInstance' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectDataTable, ContentRootPath) == 0x000060, "Member 'FUdiniOtherUobjectDataTable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniOtherUobjectDataTable, Attributes) == 0x000070, "Member 'FUdiniOtherUobjectDataTable::Attributes' has a wrong offset!");

// ScriptStruct UdiniInputActor.SnapPoint
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSnapPoint final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapPoint) == 0x000004, "Wrong alignment on FSnapPoint");
static_assert(sizeof(FSnapPoint) == 0x000010, "Wrong size on FSnapPoint");

// ScriptStruct UdiniInputActor.UdiniLandscapeLayer
// 0x0038 (0x0038 - 0x0000)
struct FUdiniLandscapeLayer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XSize;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YSize;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPosition;                                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPosition;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniLandscapeLayer) == 0x000008, "Wrong alignment on FUdiniLandscapeLayer");
static_assert(sizeof(FUdiniLandscapeLayer) == 0x000038, "Wrong size on FUdiniLandscapeLayer");
static_assert(offsetof(FUdiniLandscapeLayer, Name) == 0x000000, "Member 'FUdiniLandscapeLayer::Name' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeLayer, XSize) == 0x000010, "Member 'FUdiniLandscapeLayer::XSize' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeLayer, YSize) == 0x000014, "Member 'FUdiniLandscapeLayer::YSize' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeLayer, StartPosition) == 0x000018, "Member 'FUdiniLandscapeLayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeLayer, EndPosition) == 0x000020, "Member 'FUdiniLandscapeLayer::EndPosition' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniLandscapeHeight
// 0x0058 (0x0058 - 0x0000)
struct FUdiniLandscapeHeight final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PathName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XSize;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YSize;                                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPosition;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPosition;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniLandscapeHeight) == 0x000008, "Wrong alignment on FUdiniLandscapeHeight");
static_assert(sizeof(FUdiniLandscapeHeight) == 0x000058, "Wrong size on FUdiniLandscapeHeight");
static_assert(offsetof(FUdiniLandscapeHeight, Name) == 0x000000, "Member 'FUdiniLandscapeHeight::Name' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, PathName) == 0x000010, "Member 'FUdiniLandscapeHeight::PathName' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, XSize) == 0x000020, "Member 'FUdiniLandscapeHeight::XSize' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, YSize) == 0x000024, "Member 'FUdiniLandscapeHeight::YSize' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, StartPosition) == 0x000028, "Member 'FUdiniLandscapeHeight::StartPosition' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, EndPosition) == 0x000030, "Member 'FUdiniLandscapeHeight::EndPosition' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, Data) == 0x000038, "Member 'FUdiniLandscapeHeight::Data' has a wrong offset!");
static_assert(offsetof(FUdiniLandscapeHeight, Center) == 0x000048, "Member 'FUdiniLandscapeHeight::Center' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniFlowData
// 0x0001 (0x0001 - 0x0000)
struct FUdiniFlowData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniFlowData) == 0x000001, "Wrong alignment on FUdiniFlowData");
static_assert(sizeof(FUdiniFlowData) == 0x000001, "Wrong size on FUdiniFlowData");

// ScriptStruct UdiniInputActor.ChildCurveCreateData
// 0x0038 (0x0038 - 0x0000)
struct FChildCurveCreateData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Icon;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToolTip;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChildCurveCreateData) == 0x000008, "Wrong alignment on FChildCurveCreateData");
static_assert(sizeof(FChildCurveCreateData) == 0x000038, "Wrong size on FChildCurveCreateData");
static_assert(offsetof(FChildCurveCreateData, Name) == 0x000000, "Member 'FChildCurveCreateData::Name' has a wrong offset!");
static_assert(offsetof(FChildCurveCreateData, Icon) == 0x000010, "Member 'FChildCurveCreateData::Icon' has a wrong offset!");
static_assert(offsetof(FChildCurveCreateData, ToolTip) == 0x000020, "Member 'FChildCurveCreateData::ToolTip' has a wrong offset!");
static_assert(offsetof(FChildCurveCreateData, bIsEnable) == 0x000030, "Member 'FChildCurveCreateData::bIsEnable' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniOpParmSelf
// 0x0005 (0x0005 - 0x0000)
struct FUdiniOpParmSelf final
{
public:
	bool                                          EnableShowBackGround;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAttributeValueAsText;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAttributeValueAsDir;                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableShowBackGroundText;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableShowColor;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniOpParmSelf) == 0x000001, "Wrong alignment on FUdiniOpParmSelf");
static_assert(sizeof(FUdiniOpParmSelf) == 0x000005, "Wrong size on FUdiniOpParmSelf");
static_assert(offsetof(FUdiniOpParmSelf, EnableShowBackGround) == 0x000000, "Member 'FUdiniOpParmSelf::EnableShowBackGround' has a wrong offset!");
static_assert(offsetof(FUdiniOpParmSelf, ShowAttributeValueAsText) == 0x000001, "Member 'FUdiniOpParmSelf::ShowAttributeValueAsText' has a wrong offset!");
static_assert(offsetof(FUdiniOpParmSelf, ShowAttributeValueAsDir) == 0x000002, "Member 'FUdiniOpParmSelf::ShowAttributeValueAsDir' has a wrong offset!");
static_assert(offsetof(FUdiniOpParmSelf, EnableShowBackGroundText) == 0x000003, "Member 'FUdiniOpParmSelf::EnableShowBackGroundText' has a wrong offset!");
static_assert(offsetof(FUdiniOpParmSelf, EnableShowColor) == 0x000004, "Member 'FUdiniOpParmSelf::EnableShowColor' has a wrong offset!");

// ScriptStruct UdiniInputActor.OneLine
// 0x0018 (0x0018 - 0x0000)
struct FOneLine final
{
public:
	TArray<int32>                                 polyPosIndex;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOneLine) == 0x000008, "Wrong alignment on FOneLine");
static_assert(sizeof(FOneLine) == 0x000018, "Wrong size on FOneLine");
static_assert(offsetof(FOneLine, polyPosIndex) == 0x000000, "Member 'FOneLine::polyPosIndex' has a wrong offset!");
static_assert(offsetof(FOneLine, bIsHid) == 0x000010, "Member 'FOneLine::bIsHid' has a wrong offset!");

// ScriptStruct UdiniInputActor.IndexCluster
// 0x0010 (0x0010 - 0x0000)
struct FIndexCluster final
{
public:
	TArray<int32>                                 Indexs;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIndexCluster) == 0x000008, "Wrong alignment on FIndexCluster");
static_assert(sizeof(FIndexCluster) == 0x000010, "Wrong size on FIndexCluster");
static_assert(offsetof(FIndexCluster, Indexs) == 0x000000, "Member 'FIndexCluster::Indexs' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniStaticMeshDataTable
// 0x00E0 (0x0120 - 0x0040)
struct FUdiniStaticMeshDataTable final : public FUdiniAssetData
{
public:
	class FString                                 RowName;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticMesh;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentRootPath;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class FString>                         MatLayerName;                                      // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MatIndex;                                          // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageSize;                                         // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               EnableRGBA;                                        // 0x00F0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheckMatPath;                                      // 0x0100(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheckMeshPath;                                     // 0x0110(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdiniStaticMeshDataTable) == 0x000010, "Wrong alignment on FUdiniStaticMeshDataTable");
static_assert(sizeof(FUdiniStaticMeshDataTable) == 0x000120, "Wrong size on FUdiniStaticMeshDataTable");
static_assert(offsetof(FUdiniStaticMeshDataTable, RowName) == 0x000040, "Member 'FUdiniStaticMeshDataTable::RowName' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, StaticMesh) == 0x000050, "Member 'FUdiniStaticMeshDataTable::StaticMesh' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, ContentRootPath) == 0x000060, "Member 'FUdiniStaticMeshDataTable::ContentRootPath' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, Attributes) == 0x000070, "Member 'FUdiniStaticMeshDataTable::Attributes' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, MatLayerName) == 0x0000C0, "Member 'FUdiniStaticMeshDataTable::MatLayerName' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, MatIndex) == 0x0000D0, "Member 'FUdiniStaticMeshDataTable::MatIndex' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, ImageSize) == 0x0000E0, "Member 'FUdiniStaticMeshDataTable::ImageSize' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, EnableRGBA) == 0x0000F0, "Member 'FUdiniStaticMeshDataTable::EnableRGBA' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, CheckMatPath) == 0x000100, "Member 'FUdiniStaticMeshDataTable::CheckMatPath' has a wrong offset!");
static_assert(offsetof(FUdiniStaticMeshDataTable, CheckMeshPath) == 0x000110, "Member 'FUdiniStaticMeshDataTable::CheckMeshPath' has a wrong offset!");

// ScriptStruct UdiniInputActor.UdiniInstanceData
// 0x00D8 (0x00D8 - 0x0000)
struct alignas(0x08) FUdiniInstanceData final
{
public:
	uint8                                         Pad_0[0xD8];                                       // 0x0000(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniInstanceData) == 0x000008, "Wrong alignment on FUdiniInstanceData");
static_assert(sizeof(FUdiniInstanceData) == 0x0000D8, "Wrong size on FUdiniInstanceData");

// ScriptStruct UdiniInputActor.OutPutContext
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FOutPutContext final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutPutContext) == 0x000008, "Wrong alignment on FOutPutContext");
static_assert(sizeof(FOutPutContext) == 0x000028, "Wrong size on FOutPutContext");

// ScriptStruct UdiniInputActor.HoudiniPartData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FHoudiniPartData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoudiniPartData) == 0x000008, "Wrong alignment on FHoudiniPartData");
static_assert(sizeof(FHoudiniPartData) == 0x000030, "Wrong size on FHoudiniPartData");

// ScriptStruct UdiniInputActor.UdiniGlobalInfo
// 0x0070 (0x0070 - 0x0000)
struct FUdiniGlobalInfo final
{
public:
	class FString                                 GlobalShareCatchePath;                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GlobalShareCatchePath2;                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x50];                                      // 0x0020(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUdiniGlobalInfo) == 0x000008, "Wrong alignment on FUdiniGlobalInfo");
static_assert(sizeof(FUdiniGlobalInfo) == 0x000070, "Wrong size on FUdiniGlobalInfo");
static_assert(offsetof(FUdiniGlobalInfo, GlobalShareCatchePath) == 0x000000, "Member 'FUdiniGlobalInfo::GlobalShareCatchePath' has a wrong offset!");
static_assert(offsetof(FUdiniGlobalInfo, GlobalShareCatchePath2) == 0x000010, "Member 'FUdiniGlobalInfo::GlobalShareCatchePath2' has a wrong offset!");

// ScriptStruct UdiniInputActor.HoudiniPartDataInfo
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FHoudiniPartDataInfo final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoudiniPartDataInfo) == 0x000004, "Wrong alignment on FHoudiniPartDataInfo");
static_assert(sizeof(FHoudiniPartDataInfo) == 0x00001C, "Wrong size on FHoudiniPartDataInfo");

}

