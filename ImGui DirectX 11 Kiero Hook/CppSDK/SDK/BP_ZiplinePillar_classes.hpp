#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZiplinePillar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Solarland_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ZiplinePillar.BP_ZiplinePillar_C
// 0x0078 (0x0350 - 0x02D8)
class ABP_ZiplinePillar_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SM_SI_Zipline_07_new;                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SI_Zipline_05_new;                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SI_Zipline_04_new;                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SI_Zipline_03_new;                              // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SI_Zipline_02_new;                              // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SI_Zipline_01_new;                              // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_ZiplineBase_C*                      LinkedZip;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SlidingRailBase_C*                  LinkedRail;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalExtentMax;                               // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalExtentMin;                               // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalExtentMax;                                 // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalExtentMin;                                 // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorzPillarRotLimit;                                // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HorzExtentToScaleCurve;                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            VertExtentToScaleCurve;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEndPointRailPillar;                             // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CalcAndSetExtent(float HorzExtentLength, float VertExtentLength);
	void CalcSuitableScale(float Horz, float Vert, float* Scale);
	void SetPillarTransform(bool bForceNomal, bool* bSuccess);
	void SetPillarTransformForEditor();
	void Set_Linked_Zip_and_Refresh(class ABP_ZiplineBase_C* LinkedZip_0);
	void SetPillarTransformWithCustomRotForEditor();
	void Set_Linked_Rail_and_Refresh(class ABP_SlidingRailBase_C* LinkedZip_0);
	void SetConnectorPitch();
	void CheckZipReference();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ZiplinePillar_C">();
	}
	static class ABP_ZiplinePillar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ZiplinePillar_C>();
	}
};
static_assert(alignof(ABP_ZiplinePillar_C) == 0x000008, "Wrong alignment on ABP_ZiplinePillar_C");
static_assert(sizeof(ABP_ZiplinePillar_C) == 0x000350, "Wrong size on ABP_ZiplinePillar_C");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_07_new) == 0x0002D8, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_07_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_05_new) == 0x0002E0, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_05_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_04_new) == 0x0002E8, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_04_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_03_new) == 0x0002F0, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_03_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_02_new) == 0x0002F8, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_02_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, SM_SI_Zipline_01_new) == 0x000300, "Member 'ABP_ZiplinePillar_C::SM_SI_Zipline_01_new' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, DefaultSceneRoot) == 0x000308, "Member 'ABP_ZiplinePillar_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, LinkedZip) == 0x000310, "Member 'ABP_ZiplinePillar_C::LinkedZip' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, LinkedRail) == 0x000318, "Member 'ABP_ZiplinePillar_C::LinkedRail' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, HorizontalExtentMax) == 0x000320, "Member 'ABP_ZiplinePillar_C::HorizontalExtentMax' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, HorizontalExtentMin) == 0x000324, "Member 'ABP_ZiplinePillar_C::HorizontalExtentMin' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, VerticalExtentMax) == 0x000328, "Member 'ABP_ZiplinePillar_C::VerticalExtentMax' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, VerticalExtentMin) == 0x00032C, "Member 'ABP_ZiplinePillar_C::VerticalExtentMin' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, HorzPillarRotLimit) == 0x000330, "Member 'ABP_ZiplinePillar_C::HorzPillarRotLimit' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, HorzExtentToScaleCurve) == 0x000338, "Member 'ABP_ZiplinePillar_C::HorzExtentToScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, VertExtentToScaleCurve) == 0x000340, "Member 'ABP_ZiplinePillar_C::VertExtentToScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_ZiplinePillar_C, bIsEndPointRailPillar) == 0x000348, "Member 'ABP_ZiplinePillar_C::bIsEndPointRailPillar' has a wrong offset!");

}

