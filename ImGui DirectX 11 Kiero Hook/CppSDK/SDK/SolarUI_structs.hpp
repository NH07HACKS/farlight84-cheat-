#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SolarUI.EWidgetOverrideParamType
// NumValues: 0x0008
enum class EWidgetOverrideParamType : uint8
{
	None                                     = 0,
	Text                                     = 1,
	Image                                    = 2,
	Custom                                   = 3,
	Boolean                                  = 4,
	Integer                                  = 5,
	String                                   = 6,
	EWidgetOverrideParamType_MAX             = 7,
};

// Enum SolarUI.EUseDesktopWidgetType
// NumValues: 0x0005
enum class EUseDesktopWidgetType : uint8
{
	DesktopOverrideMobile                    = 0,
	OnlyDesktop                              = 1,
	OnlyMobile                               = 2,
	DesktopAndMobile                         = 3,
	EUseDesktopWidgetType_MAX                = 4,
};

// Enum SolarUI.EWidgetLoadType
// NumValues: 0x0004
enum class EWidgetLoadType : uint8
{
	Start                                    = 0,
	Delay                                    = 1,
	StartAndAsync                            = 2,
	EWidgetLoadType_MAX                      = 3,
};

// Enum SolarUI.USolarWidgetLayoutType
// NumValues: 0x0005
enum class EUSolarWidgetLayoutType : uint8
{
	Default                                  = 0,
	Mobile                                   = 1,
	DesktopCommon                            = 2,
	Count                                    = 3,
	USolarWidgetLayoutType_MAX               = 4,
};

// Enum SolarUI.ELayoutPreviewType
// NumValues: 0x0004
enum class ELayoutPreviewType : uint8
{
	Mobile                                   = 0,
	Desktop                                  = 1,
	Deprecated                               = 2,
	ELayoutPreviewType_MAX                   = 3,
};

// Enum SolarUI.ESolarScrollTextWaitingType
// NumValues: 0x0005
enum class ESolarScrollTextWaitingType : uint8
{
	Fixed                                    = 0,
	FullyDisappear                           = 1,
	FullyDisplay                             = 2,
	StartDisappear                           = 3,
	ESolarScrollTextWaitingType_MAX          = 4,
};

// Enum SolarUI.ESolarScrollTextDirection
// NumValues: 0x0005
enum class ESolarScrollTextDirection : uint8
{
	FromBottomToTop                          = 0,
	FromTopToBottom                          = 1,
	FromRightToLeft                          = 2,
	FromLeftToRight                          = 3,
	ESolarScrollTextDirection_MAX            = 4,
};

// Enum SolarUI.ESolarScrollTextType
// NumValues: 0x0003
enum class ESolarScrollTextType : uint8
{
	Always                                   = 0,
	Exceed                                   = 1,
	ESolarScrollTextType_MAX                 = 2,
};

// ScriptStruct SolarUI.SolarWidgetNavigationData
// 0x0001 (0x0001 - 0x0000)
struct FSolarWidgetNavigationData final
{
public:
	uint8                                         bHasNavUp : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasNavDown : 1;                                   // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasNavLeft : 1;                                   // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasNavRight : 1;                                  // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FSolarWidgetNavigationData) == 0x000001, "Wrong alignment on FSolarWidgetNavigationData");
static_assert(sizeof(FSolarWidgetNavigationData) == 0x000001, "Wrong size on FSolarWidgetNavigationData");

// ScriptStruct SolarUI.SolarSplineCurvePoints
// 0x0024 (0x0024 - 0x0000)
struct FSolarSplineCurvePoints final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPos;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartDir;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndDir;                                            // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarSplineCurvePoints) == 0x000004, "Wrong alignment on FSolarSplineCurvePoints");
static_assert(sizeof(FSolarSplineCurvePoints) == 0x000024, "Wrong size on FSolarSplineCurvePoints");
static_assert(offsetof(FSolarSplineCurvePoints, GroupIndex) == 0x000000, "Member 'FSolarSplineCurvePoints::GroupIndex' has a wrong offset!");
static_assert(offsetof(FSolarSplineCurvePoints, StartPos) == 0x000004, "Member 'FSolarSplineCurvePoints::StartPos' has a wrong offset!");
static_assert(offsetof(FSolarSplineCurvePoints, StartDir) == 0x00000C, "Member 'FSolarSplineCurvePoints::StartDir' has a wrong offset!");
static_assert(offsetof(FSolarSplineCurvePoints, EndPos) == 0x000014, "Member 'FSolarSplineCurvePoints::EndPos' has a wrong offset!");
static_assert(offsetof(FSolarSplineCurvePoints, EndDir) == 0x00001C, "Member 'FSolarSplineCurvePoints::EndDir' has a wrong offset!");

// ScriptStruct SolarUI.PlayAnimationParams
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FPlayAnimationParams final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayAnimationParams) == 0x000008, "Wrong alignment on FPlayAnimationParams");
static_assert(sizeof(FPlayAnimationParams) == 0x000040, "Wrong size on FPlayAnimationParams");

// ScriptStruct SolarUI.WidgetOverrideParam
// 0x0170 (0x0170 - 0x0000)
struct FWidgetOverrideParam final
{
public:
	EWidgetOverrideParamType                      Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChildName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLocText;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LocTextID;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0030(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CustomParameter;                                   // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerValue;                                      // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetOverrideParam) == 0x000010, "Wrong alignment on FWidgetOverrideParam");
static_assert(sizeof(FWidgetOverrideParam) == 0x000170, "Wrong size on FWidgetOverrideParam");
static_assert(offsetof(FWidgetOverrideParam, Type) == 0x000000, "Member 'FWidgetOverrideParam::Type' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, ChildName) == 0x000004, "Member 'FWidgetOverrideParam::ChildName' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, bEnableLocText) == 0x00000C, "Member 'FWidgetOverrideParam::bEnableLocText' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, Text) == 0x000010, "Member 'FWidgetOverrideParam::Text' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, LocTextID) == 0x000028, "Member 'FWidgetOverrideParam::LocTextID' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, Brush) == 0x000030, "Member 'FWidgetOverrideParam::Brush' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, CustomParameter) == 0x000140, "Member 'FWidgetOverrideParam::CustomParameter' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, BoolValue) == 0x000150, "Member 'FWidgetOverrideParam::BoolValue' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, IntegerValue) == 0x000154, "Member 'FWidgetOverrideParam::IntegerValue' has a wrong offset!");
static_assert(offsetof(FWidgetOverrideParam, StringValue) == 0x000158, "Member 'FWidgetOverrideParam::StringValue' has a wrong offset!");

// ScriptStruct SolarUI.BezierSplineCurve
// 0x0018 (0x0018 - 0x0000)
struct FBezierSplineCurve final
{
public:
	TArray<struct FSolarSplineCurvePoints>        SplineCurves;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBezierSplineCurve) == 0x000008, "Wrong alignment on FBezierSplineCurve");
static_assert(sizeof(FBezierSplineCurve) == 0x000018, "Wrong size on FBezierSplineCurve");
static_assert(offsetof(FBezierSplineCurve, SplineCurves) == 0x000000, "Member 'FBezierSplineCurve::SplineCurves' has a wrong offset!");
static_assert(offsetof(FBezierSplineCurve, Color) == 0x000010, "Member 'FBezierSplineCurve::Color' has a wrong offset!");
static_assert(offsetof(FBezierSplineCurve, Thickness) == 0x000014, "Member 'FBezierSplineCurve::Thickness' has a wrong offset!");

// ScriptStruct SolarUI.SolarUIMapPanelSlotAdapterEntry
// 0x0010 (0x0010 - 0x0000)
struct FSolarUIMapPanelSlotAdapterEntry final
{
public:
	TSubclassOf<class UPanelSlot>                 SrcPanelSlotClass;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USolarPanelSlotAdapter>     DstPanelSlotClass;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarUIMapPanelSlotAdapterEntry) == 0x000008, "Wrong alignment on FSolarUIMapPanelSlotAdapterEntry");
static_assert(sizeof(FSolarUIMapPanelSlotAdapterEntry) == 0x000010, "Wrong size on FSolarUIMapPanelSlotAdapterEntry");
static_assert(offsetof(FSolarUIMapPanelSlotAdapterEntry, SrcPanelSlotClass) == 0x000000, "Member 'FSolarUIMapPanelSlotAdapterEntry::SrcPanelSlotClass' has a wrong offset!");
static_assert(offsetof(FSolarUIMapPanelSlotAdapterEntry, DstPanelSlotClass) == 0x000008, "Member 'FSolarUIMapPanelSlotAdapterEntry::DstPanelSlotClass' has a wrong offset!");

// ScriptStruct SolarUI.SolarUIMapWidgetAdapterEntry
// 0x0010 (0x0010 - 0x0000)
struct FSolarUIMapWidgetAdapterEntry final
{
public:
	TSubclassOf<class UWidget>                    SrcWidgetClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USolarWidgetAdapter>        DstWidgetClass;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarUIMapWidgetAdapterEntry) == 0x000008, "Wrong alignment on FSolarUIMapWidgetAdapterEntry");
static_assert(sizeof(FSolarUIMapWidgetAdapterEntry) == 0x000010, "Wrong size on FSolarUIMapWidgetAdapterEntry");
static_assert(offsetof(FSolarUIMapWidgetAdapterEntry, SrcWidgetClass) == 0x000000, "Member 'FSolarUIMapWidgetAdapterEntry::SrcWidgetClass' has a wrong offset!");
static_assert(offsetof(FSolarUIMapWidgetAdapterEntry, DstWidgetClass) == 0x000008, "Member 'FSolarUIMapWidgetAdapterEntry::DstWidgetClass' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelinePropertySectionData
// 0x0050 (0x0050 - 0x0000)
struct FSolarTimelinePropertySectionData final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyFunctionName;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BindingWidgetName;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotWidgetName;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRootWidget;                                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SectionGuid;                                       // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarTimelinePropertySectionData) == 0x000008, "Wrong alignment on FSolarTimelinePropertySectionData");
static_assert(sizeof(FSolarTimelinePropertySectionData) == 0x000050, "Wrong size on FSolarTimelinePropertySectionData");
static_assert(offsetof(FSolarTimelinePropertySectionData, PropertyName) == 0x000000, "Member 'FSolarTimelinePropertySectionData::PropertyName' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, PropertyPath) == 0x000008, "Member 'FSolarTimelinePropertySectionData::PropertyPath' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, FunctionName) == 0x000018, "Member 'FSolarTimelinePropertySectionData::FunctionName' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, NotifyFunctionName) == 0x000020, "Member 'FSolarTimelinePropertySectionData::NotifyFunctionName' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, BindingWidgetName) == 0x000028, "Member 'FSolarTimelinePropertySectionData::BindingWidgetName' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, SlotWidgetName) == 0x000030, "Member 'FSolarTimelinePropertySectionData::SlotWidgetName' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, bIsRootWidget) == 0x000038, "Member 'FSolarTimelinePropertySectionData::bIsRootWidget' has a wrong offset!");
static_assert(offsetof(FSolarTimelinePropertySectionData, SectionGuid) == 0x00003C, "Member 'FSolarTimelinePropertySectionData::SectionGuid' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineByteEntry
// 0x0060 (0x0060 - 0x0000)
struct FSolarTimelineByteEntry final
{
public:
	class USolarByteChannel*                      ByteChannel;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolarTimelinePropertySectionData      PropertyData;                                      // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineByteEntry) == 0x000008, "Wrong alignment on FSolarTimelineByteEntry");
static_assert(sizeof(FSolarTimelineByteEntry) == 0x000060, "Wrong size on FSolarTimelineByteEntry");
static_assert(offsetof(FSolarTimelineByteEntry, ByteChannel) == 0x000000, "Member 'FSolarTimelineByteEntry::ByteChannel' has a wrong offset!");
static_assert(offsetof(FSolarTimelineByteEntry, TrackName) == 0x000008, "Member 'FSolarTimelineByteEntry::TrackName' has a wrong offset!");
static_assert(offsetof(FSolarTimelineByteEntry, PropertyData) == 0x000010, "Member 'FSolarTimelineByteEntry::PropertyData' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineTransformEntry
// 0x0078 (0x0078 - 0x0000)
struct FSolarTimelineTransformEntry final
{
public:
	class USolarCurveVector*                      TranslationCurve;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarCurveVector*                      ScaleCurve;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USolarCurveVector*                      ShearCurve;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AngleCurve;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolarTimelinePropertySectionData      PropertyData;                                      // 0x0028(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineTransformEntry) == 0x000008, "Wrong alignment on FSolarTimelineTransformEntry");
static_assert(sizeof(FSolarTimelineTransformEntry) == 0x000078, "Wrong size on FSolarTimelineTransformEntry");
static_assert(offsetof(FSolarTimelineTransformEntry, TranslationCurve) == 0x000000, "Member 'FSolarTimelineTransformEntry::TranslationCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineTransformEntry, ScaleCurve) == 0x000008, "Member 'FSolarTimelineTransformEntry::ScaleCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineTransformEntry, ShearCurve) == 0x000010, "Member 'FSolarTimelineTransformEntry::ShearCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineTransformEntry, AngleCurve) == 0x000018, "Member 'FSolarTimelineTransformEntry::AngleCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineTransformEntry, TrackName) == 0x000020, "Member 'FSolarTimelineTransformEntry::TrackName' has a wrong offset!");
static_assert(offsetof(FSolarTimelineTransformEntry, PropertyData) == 0x000028, "Member 'FSolarTimelineTransformEntry::PropertyData' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineLinearColorEntry
// 0x0060 (0x0060 - 0x0000)
struct FSolarTimelineLinearColorEntry final
{
public:
	class UCurveLinearColor*                      LinearColorCurve;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolarTimelinePropertySectionData      PropertyData;                                      // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineLinearColorEntry) == 0x000008, "Wrong alignment on FSolarTimelineLinearColorEntry");
static_assert(sizeof(FSolarTimelineLinearColorEntry) == 0x000060, "Wrong size on FSolarTimelineLinearColorEntry");
static_assert(offsetof(FSolarTimelineLinearColorEntry, LinearColorCurve) == 0x000000, "Member 'FSolarTimelineLinearColorEntry::LinearColorCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineLinearColorEntry, TrackName) == 0x000008, "Member 'FSolarTimelineLinearColorEntry::TrackName' has a wrong offset!");
static_assert(offsetof(FSolarTimelineLinearColorEntry, PropertyData) == 0x000010, "Member 'FSolarTimelineLinearColorEntry::PropertyData' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineVectorEntry
// 0x0068 (0x0068 - 0x0000)
struct FSolarTimelineVectorEntry final
{
public:
	class USolarCurveVector*                      VectorCurve;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelNum;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChannelUsedFlag;                                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TrackName;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolarTimelinePropertySectionData      PropertyData;                                      // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineVectorEntry) == 0x000008, "Wrong alignment on FSolarTimelineVectorEntry");
static_assert(sizeof(FSolarTimelineVectorEntry) == 0x000068, "Wrong size on FSolarTimelineVectorEntry");
static_assert(offsetof(FSolarTimelineVectorEntry, VectorCurve) == 0x000000, "Member 'FSolarTimelineVectorEntry::VectorCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineVectorEntry, ChannelNum) == 0x000008, "Member 'FSolarTimelineVectorEntry::ChannelNum' has a wrong offset!");
static_assert(offsetof(FSolarTimelineVectorEntry, ChannelUsedFlag) == 0x00000C, "Member 'FSolarTimelineVectorEntry::ChannelUsedFlag' has a wrong offset!");
static_assert(offsetof(FSolarTimelineVectorEntry, TrackName) == 0x000010, "Member 'FSolarTimelineVectorEntry::TrackName' has a wrong offset!");
static_assert(offsetof(FSolarTimelineVectorEntry, PropertyData) == 0x000018, "Member 'FSolarTimelineVectorEntry::PropertyData' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineFloatEntry
// 0x0060 (0x0060 - 0x0000)
struct FSolarTimelineFloatEntry final
{
public:
	class UCurveFloat*                            FloatCurve;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSolarTimelinePropertySectionData      PropertyData;                                      // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineFloatEntry) == 0x000008, "Wrong alignment on FSolarTimelineFloatEntry");
static_assert(sizeof(FSolarTimelineFloatEntry) == 0x000060, "Wrong size on FSolarTimelineFloatEntry");
static_assert(offsetof(FSolarTimelineFloatEntry, FloatCurve) == 0x000000, "Member 'FSolarTimelineFloatEntry::FloatCurve' has a wrong offset!");
static_assert(offsetof(FSolarTimelineFloatEntry, TrackName) == 0x000008, "Member 'FSolarTimelineFloatEntry::TrackName' has a wrong offset!");
static_assert(offsetof(FSolarTimelineFloatEntry, PropertyData) == 0x000010, "Member 'FSolarTimelineFloatEntry::PropertyData' has a wrong offset!");

// ScriptStruct SolarUI.SolarTimelineEventEntry
// 0x0014 (0x0014 - 0x0000)
struct FSolarTimelineEventEntry final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             EventFunc;                                         // 0x0004(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolarTimelineEventEntry) == 0x000004, "Wrong alignment on FSolarTimelineEventEntry");
static_assert(sizeof(FSolarTimelineEventEntry) == 0x000014, "Wrong size on FSolarTimelineEventEntry");
static_assert(offsetof(FSolarTimelineEventEntry, Time) == 0x000000, "Member 'FSolarTimelineEventEntry::Time' has a wrong offset!");
static_assert(offsetof(FSolarTimelineEventEntry, EventFunc) == 0x000004, "Member 'FSolarTimelineEventEntry::EventFunc' has a wrong offset!");

}

