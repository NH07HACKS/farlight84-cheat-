#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldMark_FrameType

#include "Basic.hpp"

#include "E_WorldMark_FrameType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function WorldMark_FrameType.WorldMark_FrameType_C.ExecuteUbergraph_WorldMark_FrameType
// 0x0008 (0x0008 - 0x0000)
struct WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType) == 0x000004, "Wrong alignment on WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType");
static_assert(sizeof(WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType) == 0x000008, "Wrong size on WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType");
static_assert(offsetof(WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType, EntryPoint) == 0x000000, "Member 'WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType::EntryPoint' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WorldMark_FrameType_C_ExecuteUbergraph_WorldMark_FrameType::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WorldMark_FrameType.WorldMark_FrameType_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_FrameType_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_FrameType_C_PreConstruct) == 0x000001, "Wrong alignment on WorldMark_FrameType_C_PreConstruct");
static_assert(sizeof(WorldMark_FrameType_C_PreConstruct) == 0x000001, "Wrong size on WorldMark_FrameType_C_PreConstruct");
static_assert(offsetof(WorldMark_FrameType_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WorldMark_FrameType_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WorldMark_FrameType.WorldMark_FrameType_C.SetFrameByWorldMarkData
// 0x00C0 (0x00C0 - 0x0000)
struct WorldMark_FrameType_C_SetFrameByWorldMarkData final
{
public:
	struct FWorldMarkData                         WorldMarkData;                                     // 0x0000(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	uint8                                         Temp_byte_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_1;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_WorldMark_FrameType                         Temp_byte_Variable_2;                              // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_3;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_4;                              // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_5;                              // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         K2Node_Select_Default;                             // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_FrameType_C_SetFrameByWorldMarkData) == 0x000008, "Wrong alignment on WorldMark_FrameType_C_SetFrameByWorldMarkData");
static_assert(sizeof(WorldMark_FrameType_C_SetFrameByWorldMarkData) == 0x0000C0, "Wrong size on WorldMark_FrameType_C_SetFrameByWorldMarkData");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, WorldMarkData) == 0x000000, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::WorldMarkData' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable) == 0x0000B8, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable_1) == 0x0000B9, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, K2Node_SwitchEnum_CmpSuccess) == 0x0000BA, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable_2) == 0x0000BB, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable_3) == 0x0000BC, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable_4) == 0x0000BD, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, Temp_byte_Variable_5) == 0x0000BE, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameByWorldMarkData, K2Node_Select_Default) == 0x0000BF, "Member 'WorldMark_FrameType_C_SetFrameByWorldMarkData::K2Node_Select_Default' has a wrong offset!");

// Function WorldMark_FrameType.WorldMark_FrameType_C.SetFrameType
// 0x0130 (0x0130 - 0x0000)
struct WorldMark_FrameType_C_SetFrameType final
{
public:
	E_WorldMark_FrameType                         Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_1;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_11;                           // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_12;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_13;                           // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_14;                           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_15;                           // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMark_FrameType                         Temp_byte_Variable_2;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_5;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_6;                            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_7;                            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default;                             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_FrameType_C_SetFrameType) == 0x000008, "Wrong alignment on WorldMark_FrameType_C_SetFrameType");
static_assert(sizeof(WorldMark_FrameType_C_SetFrameType) == 0x000130, "Wrong size on WorldMark_FrameType_C_SetFrameType");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_byte_Variable) == 0x000000, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable) == 0x000004, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_1) == 0x00000C, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_2) == 0x000014, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_3) == 0x00001C, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_4) == 0x000024, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_5) == 0x00002C, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_6) == 0x000034, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_7) == 0x00003C, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_byte_Variable_1) == 0x000044, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_8) == 0x000048, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_9) == 0x000058, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_10) == 0x000068, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_11) == 0x000078, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_12) == 0x000088, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_13) == 0x000098, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_14) == 0x0000A8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_struct_Variable_15) == 0x0000B8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_byte_Variable_2) == 0x0000C8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable) == 0x0000D0, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_1) == 0x0000D8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_2) == 0x0000E0, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_3) == 0x0000E8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_4) == 0x0000F0, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_5) == 0x0000F8, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_6) == 0x000100, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, Temp_object_Variable_7) == 0x000108, "Member 'WorldMark_FrameType_C_SetFrameType::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, K2Node_Select_Default) == 0x000110, "Member 'WorldMark_FrameType_C_SetFrameType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, K2Node_Select_Default_1) == 0x000118, "Member 'WorldMark_FrameType_C_SetFrameType::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WorldMark_FrameType_C_SetFrameType, K2Node_Select_Default_2) == 0x000120, "Member 'WorldMark_FrameType_C_SetFrameType::K2Node_Select_Default_2' has a wrong offset!");

}

