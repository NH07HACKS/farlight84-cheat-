#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MLAI

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function MLAI.AIServiceManagerCCS.OnAfterUpdateDataByDamage
// 0x0148 (0x0148 - 0x0000)
struct AIServiceManagerCCS_OnAfterUpdateDataByDamage final
{
public:
	struct FSolarPointDamageEvent                 DamageEvent;                                       // 0x0000(0x0128)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASolarCharacter*                        DamageSufffer;                                     // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualDamage;                                      // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDamage;                                      // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0138(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0140(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServiceManagerCCS_OnAfterUpdateDataByDamage) == 0x000008, "Wrong alignment on AIServiceManagerCCS_OnAfterUpdateDataByDamage");
static_assert(sizeof(AIServiceManagerCCS_OnAfterUpdateDataByDamage) == 0x000148, "Wrong size on AIServiceManagerCCS_OnAfterUpdateDataByDamage");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, DamageEvent) == 0x000000, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, DamageSufffer) == 0x000128, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::DamageSufffer' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, ActualDamage) == 0x000130, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::ActualDamage' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, PlayerDamage) == 0x000134, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::PlayerDamage' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, EventInstigator) == 0x000138, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnAfterUpdateDataByDamage, DamageCauser) == 0x000140, "Member 'AIServiceManagerCCS_OnAfterUpdateDataByDamage::DamageCauser' has a wrong offset!");

// Function MLAI.AIServiceManagerCCS.OnCharacterDead
// 0x0008 (0x0008 - 0x0000)
struct AIServiceManagerCCS_OnCharacterDead final
{
public:
	class ASolarCharacter*                        DeathCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServiceManagerCCS_OnCharacterDead) == 0x000008, "Wrong alignment on AIServiceManagerCCS_OnCharacterDead");
static_assert(sizeof(AIServiceManagerCCS_OnCharacterDead) == 0x000008, "Wrong size on AIServiceManagerCCS_OnCharacterDead");
static_assert(offsetof(AIServiceManagerCCS_OnCharacterDead, DeathCharacter) == 0x000000, "Member 'AIServiceManagerCCS_OnCharacterDead::DeathCharacter' has a wrong offset!");

// Function MLAI.AIServiceManagerCCS.OnConnected
// 0x0004 (0x0004 - 0x0000)
struct AIServiceManagerCCS_OnConnected final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServiceManagerCCS_OnConnected) == 0x000004, "Wrong alignment on AIServiceManagerCCS_OnConnected");
static_assert(sizeof(AIServiceManagerCCS_OnConnected) == 0x000004, "Wrong size on AIServiceManagerCCS_OnConnected");
static_assert(offsetof(AIServiceManagerCCS_OnConnected, ConnectionId) == 0x000000, "Member 'AIServiceManagerCCS_OnConnected::ConnectionId' has a wrong offset!");

// Function MLAI.AIServiceManagerCCS.OnDisconnected
// 0x0004 (0x0004 - 0x0000)
struct AIServiceManagerCCS_OnDisconnected final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServiceManagerCCS_OnDisconnected) == 0x000004, "Wrong alignment on AIServiceManagerCCS_OnDisconnected");
static_assert(sizeof(AIServiceManagerCCS_OnDisconnected) == 0x000004, "Wrong size on AIServiceManagerCCS_OnDisconnected");
static_assert(offsetof(AIServiceManagerCCS_OnDisconnected, ConnectionId) == 0x000000, "Member 'AIServiceManagerCCS_OnDisconnected::ConnectionId' has a wrong offset!");

// Function MLAI.AIServiceManagerCCS.OnMessageReceived
// 0x0018 (0x0018 - 0x0000)
struct AIServiceManagerCCS_OnMessageReceived final
{
public:
	int32                                         ConnectionId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Message;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServiceManagerCCS_OnMessageReceived) == 0x000008, "Wrong alignment on AIServiceManagerCCS_OnMessageReceived");
static_assert(sizeof(AIServiceManagerCCS_OnMessageReceived) == 0x000018, "Wrong size on AIServiceManagerCCS_OnMessageReceived");
static_assert(offsetof(AIServiceManagerCCS_OnMessageReceived, ConnectionId) == 0x000000, "Member 'AIServiceManagerCCS_OnMessageReceived::ConnectionId' has a wrong offset!");
static_assert(offsetof(AIServiceManagerCCS_OnMessageReceived, Message) == 0x000008, "Member 'AIServiceManagerCCS_OnMessageReceived::Message' has a wrong offset!");

// Function MLAI.MLAISubsystem.SetupAIService
// 0x0008 (0x0008 - 0x0000)
struct MLAISubsystem_SetupAIService final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLAISubsystem_SetupAIService) == 0x000008, "Wrong alignment on MLAISubsystem_SetupAIService");
static_assert(sizeof(MLAISubsystem_SetupAIService) == 0x000008, "Wrong size on MLAISubsystem_SetupAIService");
static_assert(offsetof(MLAISubsystem_SetupAIService, InWorld) == 0x000000, "Member 'MLAISubsystem_SetupAIService::InWorld' has a wrong offset!");

}

