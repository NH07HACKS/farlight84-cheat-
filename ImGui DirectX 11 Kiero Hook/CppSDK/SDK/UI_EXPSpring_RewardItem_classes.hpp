#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_EXPSpring_RewardItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_EXPSpring_Reward_State_structs.hpp"
#include "Solarland_classes.hpp"
#include "E_Item_Quality_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_EXPSpring_RewardItem.UI_EXPSpring_RewardItem_C
// 0x0088 (0x0678 - 0x05F0)
class UUI_EXPSpring_RewardItem_C final : public USolarUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Img_BgMask;                                        // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Item;                                          // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Mask;                                          // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Base;                                  // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Bg;                                    // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Glow;                                  // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Point;                                 // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Quality;                               // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Tex;                                   // 0x0638(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_VX_Loop_Wipe;                                  // 0x0640(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Panel_Content;                                     // 0x0648(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Panel_Countdown;                                   // 0x0650(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Panel_Countdown_Bg_Loop;                           // 0x0658(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x0660(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_Backpack_Quality_C*                 UI_Backpack_Quality;                               // 0x0668(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	E_EXPSpring_Reward_State                      RewardState;                                       // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BP_IsNotSelectableOrNavigable();
	void SetRewardState(E_EXPSpring_Reward_State RewardState_0, bool IsPC);
	void BP_OnEntryReleased();
	void BP_OnItemExpansionChanged(bool bIsExpanded);
	void BP_OnItemSelectionChanged(bool bIsSelected);
	void OnListItemObjectSet(class UObject* ListItemObject);
	void PreConstruct(bool IsDesignTime);
	void SetItemQuality(E_Item_Quality Index_0);
	void ExecuteUbergraph_UI_EXPSpring_RewardItem(int32 EntryPoint);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_EXPSpring_RewardItem_C">();
	}
	static class UUI_EXPSpring_RewardItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_EXPSpring_RewardItem_C>();
	}
};
static_assert(alignof(UUI_EXPSpring_RewardItem_C) == 0x000008, "Wrong alignment on UUI_EXPSpring_RewardItem_C");
static_assert(sizeof(UUI_EXPSpring_RewardItem_C) == 0x000678, "Wrong size on UUI_EXPSpring_RewardItem_C");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, UberGraphFrame) == 0x0005F0, "Member 'UUI_EXPSpring_RewardItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_BgMask) == 0x0005F8, "Member 'UUI_EXPSpring_RewardItem_C::Img_BgMask' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_Item) == 0x000600, "Member 'UUI_EXPSpring_RewardItem_C::Img_Item' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_Mask) == 0x000608, "Member 'UUI_EXPSpring_RewardItem_C::Img_Mask' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Base) == 0x000610, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Base' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Bg) == 0x000618, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Bg' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Glow) == 0x000620, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Glow' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Point) == 0x000628, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Point' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Quality) == 0x000630, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Quality' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Tex) == 0x000638, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Tex' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Img_VX_Loop_Wipe) == 0x000640, "Member 'UUI_EXPSpring_RewardItem_C::Img_VX_Loop_Wipe' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Panel_Content) == 0x000648, "Member 'UUI_EXPSpring_RewardItem_C::Panel_Content' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Panel_Countdown) == 0x000650, "Member 'UUI_EXPSpring_RewardItem_C::Panel_Countdown' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, Panel_Countdown_Bg_Loop) == 0x000658, "Member 'UUI_EXPSpring_RewardItem_C::Panel_Countdown_Bg_Loop' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, SizeBox_0) == 0x000660, "Member 'UUI_EXPSpring_RewardItem_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, UI_Backpack_Quality) == 0x000668, "Member 'UUI_EXPSpring_RewardItem_C::UI_Backpack_Quality' has a wrong offset!");
static_assert(offsetof(UUI_EXPSpring_RewardItem_C, RewardState) == 0x000670, "Member 'UUI_EXPSpring_RewardItem_C::RewardState' has a wrong offset!");

}

