#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNodesPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct AnimNodesPlugin.CorrectionBoneInfo
// 0x0020 (0x0020 - 0x0000)
struct FCorrectionBoneInfo final
{
public:
	struct FBoneReference                         ModifyBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCorrectionBoneInfo) == 0x000004, "Wrong alignment on FCorrectionBoneInfo");
static_assert(sizeof(FCorrectionBoneInfo) == 0x000020, "Wrong size on FCorrectionBoneInfo");
static_assert(offsetof(FCorrectionBoneInfo, ModifyBone) == 0x000000, "Member 'FCorrectionBoneInfo::ModifyBone' has a wrong offset!");
static_assert(offsetof(FCorrectionBoneInfo, TargetBone) == 0x000010, "Member 'FCorrectionBoneInfo::TargetBone' has a wrong offset!");

// ScriptStruct AnimNodesPlugin.AnimNode_CorrectionIKBones
// 0x0048 (0x0058 - 0x0010)
struct FAnimNode_CorrectionIKBones final : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCorrectionBoneInfo>            CorrectionInfos;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x24];                                      // 0x0034(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CorrectionIKBones) == 0x000008, "Wrong alignment on FAnimNode_CorrectionIKBones");
static_assert(sizeof(FAnimNode_CorrectionIKBones) == 0x000058, "Wrong size on FAnimNode_CorrectionIKBones");
static_assert(offsetof(FAnimNode_CorrectionIKBones, ComponentPose) == 0x000010, "Member 'FAnimNode_CorrectionIKBones::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CorrectionIKBones, CorrectionInfos) == 0x000020, "Member 'FAnimNode_CorrectionIKBones::CorrectionInfos' has a wrong offset!");
static_assert(offsetof(FAnimNode_CorrectionIKBones, LODThreshold) == 0x000030, "Member 'FAnimNode_CorrectionIKBones::LODThreshold' has a wrong offset!");

// ScriptStruct AnimNodesPlugin.AnimNode_OrnamentAttachAlign
// 0x0088 (0x0098 - 0x0010)
struct FAnimNode_OrnamentAttachAlign final : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x24];                                      // 0x0024(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FBoneReference>      BonesToModify;                                     // 0x0048(0x0050)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_OrnamentAttachAlign) == 0x000008, "Wrong alignment on FAnimNode_OrnamentAttachAlign");
static_assert(sizeof(FAnimNode_OrnamentAttachAlign) == 0x000098, "Wrong size on FAnimNode_OrnamentAttachAlign");
static_assert(offsetof(FAnimNode_OrnamentAttachAlign, ComponentPose) == 0x000010, "Member 'FAnimNode_OrnamentAttachAlign::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrnamentAttachAlign, LODThreshold) == 0x000020, "Member 'FAnimNode_OrnamentAttachAlign::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrnamentAttachAlign, BonesToModify) == 0x000048, "Member 'FAnimNode_OrnamentAttachAlign::BonesToModify' has a wrong offset!");

// ScriptStruct AnimNodesPlugin.AttachBoneInfo
// 0x001C (0x001C - 0x0000)
struct FAttachBoneInfo final
{
public:
	class FName                                   AttachBoneName;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentMeshBoneName;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneMappingName;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingCSSpace;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachBoneInfo) == 0x000004, "Wrong alignment on FAttachBoneInfo");
static_assert(sizeof(FAttachBoneInfo) == 0x00001C, "Wrong size on FAttachBoneInfo");
static_assert(offsetof(FAttachBoneInfo, AttachBoneName) == 0x000000, "Member 'FAttachBoneInfo::AttachBoneName' has a wrong offset!");
static_assert(offsetof(FAttachBoneInfo, ParentMeshBoneName) == 0x000008, "Member 'FAttachBoneInfo::ParentMeshBoneName' has a wrong offset!");
static_assert(offsetof(FAttachBoneInfo, ParentBoneMappingName) == 0x000010, "Member 'FAttachBoneInfo::ParentBoneMappingName' has a wrong offset!");
static_assert(offsetof(FAttachBoneInfo, bUsingCSSpace) == 0x000018, "Member 'FAttachBoneInfo::bUsingCSSpace' has a wrong offset!");

}

