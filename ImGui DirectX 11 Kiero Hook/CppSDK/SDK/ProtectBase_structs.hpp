#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProtectBase

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct ProtectBase.SShotImageInfo2
// 0x0090 (0x0090 - 0x0000)
struct FSShotImageInfo2 final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerID;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleID;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ScreenshotTime;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageSize;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageWidth;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImageType;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageBuffer;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureFlag;                                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CaptureType;                                       // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSShotImageInfo2) == 0x000008, "Wrong alignment on FSShotImageInfo2");
static_assert(sizeof(FSShotImageInfo2) == 0x000090, "Wrong size on FSShotImageInfo2");
static_assert(offsetof(FSShotImageInfo2, UserId) == 0x000000, "Member 'FSShotImageInfo2::UserId' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, PlayerID) == 0x000010, "Member 'FSShotImageInfo2::PlayerID' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, BattleID) == 0x000020, "Member 'FSShotImageInfo2::BattleID' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ScreenshotTime) == 0x000030, "Member 'FSShotImageInfo2::ScreenshotTime' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ImageSize) == 0x000038, "Member 'FSShotImageInfo2::ImageSize' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ImageWidth) == 0x00003C, "Member 'FSShotImageInfo2::ImageWidth' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ImageHeight) == 0x000040, "Member 'FSShotImageInfo2::ImageHeight' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ImageType) == 0x000048, "Member 'FSShotImageInfo2::ImageType' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, ImageBuffer) == 0x000058, "Member 'FSShotImageInfo2::ImageBuffer' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, CaptureFlag) == 0x000068, "Member 'FSShotImageInfo2::CaptureFlag' has a wrong offset!");
static_assert(offsetof(FSShotImageInfo2, CaptureType) == 0x000070, "Member 'FSShotImageInfo2::CaptureType' has a wrong offset!");

}

