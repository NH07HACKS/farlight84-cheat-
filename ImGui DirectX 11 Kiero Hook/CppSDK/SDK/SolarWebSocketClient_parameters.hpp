#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SolarWebSocketClient

#include "Basic.hpp"


namespace SDK::Params
{

// Function SolarWebSocketClient.SolarWebSocketNetworkManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct SolarWebSocketNetworkManager_GetInstance final
{
public:
	class USolarWebSocketNetworkManager*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWebSocketNetworkManager_GetInstance) == 0x000008, "Wrong alignment on SolarWebSocketNetworkManager_GetInstance");
static_assert(sizeof(SolarWebSocketNetworkManager_GetInstance) == 0x000008, "Wrong size on SolarWebSocketNetworkManager_GetInstance");
static_assert(offsetof(SolarWebSocketNetworkManager_GetInstance, ReturnValue) == 0x000000, "Member 'SolarWebSocketNetworkManager_GetInstance::ReturnValue' has a wrong offset!");

// Function SolarWebSocketClient.SolarWebSocketNetworkManager.Connect
// 0x0018 (0x0018 - 0x0000)
struct SolarWebSocketNetworkManager_Connect final
{
public:
	class FString                                 ServerUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarWebSocketNetworkManager_Connect) == 0x000008, "Wrong alignment on SolarWebSocketNetworkManager_Connect");
static_assert(sizeof(SolarWebSocketNetworkManager_Connect) == 0x000018, "Wrong size on SolarWebSocketNetworkManager_Connect");
static_assert(offsetof(SolarWebSocketNetworkManager_Connect, ServerUrl) == 0x000000, "Member 'SolarWebSocketNetworkManager_Connect::ServerUrl' has a wrong offset!");
static_assert(offsetof(SolarWebSocketNetworkManager_Connect, ReturnValue) == 0x000010, "Member 'SolarWebSocketNetworkManager_Connect::ReturnValue' has a wrong offset!");

// Function SolarWebSocketClient.SolarWebSocketNetworkManager.OnConnectStateChanged
// 0x0004 (0x0004 - 0x0000)
struct SolarWebSocketNetworkManager_OnConnectStateChanged final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarWebSocketNetworkManager_OnConnectStateChanged) == 0x000004, "Wrong alignment on SolarWebSocketNetworkManager_OnConnectStateChanged");
static_assert(sizeof(SolarWebSocketNetworkManager_OnConnectStateChanged) == 0x000004, "Wrong size on SolarWebSocketNetworkManager_OnConnectStateChanged");
static_assert(offsetof(SolarWebSocketNetworkManager_OnConnectStateChanged, State) == 0x000000, "Member 'SolarWebSocketNetworkManager_OnConnectStateChanged::State' has a wrong offset!");

// Function SolarWebSocketClient.SolarWebSocketNetworkManager.OnRecvData
// 0x0018 (0x0018 - 0x0000)
struct SolarWebSocketNetworkManager_OnRecvData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataSize;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarWebSocketNetworkManager_OnRecvData) == 0x000008, "Wrong alignment on SolarWebSocketNetworkManager_OnRecvData");
static_assert(sizeof(SolarWebSocketNetworkManager_OnRecvData) == 0x000018, "Wrong size on SolarWebSocketNetworkManager_OnRecvData");
static_assert(offsetof(SolarWebSocketNetworkManager_OnRecvData, Data) == 0x000000, "Member 'SolarWebSocketNetworkManager_OnRecvData::Data' has a wrong offset!");
static_assert(offsetof(SolarWebSocketNetworkManager_OnRecvData, DataSize) == 0x000010, "Member 'SolarWebSocketNetworkManager_OnRecvData::DataSize' has a wrong offset!");

}

