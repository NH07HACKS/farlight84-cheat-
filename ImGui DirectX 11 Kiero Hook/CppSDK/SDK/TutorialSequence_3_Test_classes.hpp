#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TutorialSequence_3_Test

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "LevelSequence_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TutorialSequence_3_Test.SequenceDirector_C
// 0x0068 (0x00A0 - 0x0038)
class TutorialSequence_3_Test::USequenceDirector_C final : public ULevelSequenceDirector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTutorialSubtitle                      Subtitle_Data_001;                                 // 0x0040(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTutorialSubtitle                      Subtitle_Data_002;                                 // 0x0058(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTutorialSubtitle                      Subtitle_Data_003;                                 // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTutorialSubtitle                      Subtitle_Data_004;                                 // 0x0088(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_SequenceDirector(int32 EntryPoint);
	void SubtitleTest004();
	void SubtitleTest003();
	void SubtitleTest002();
	void SubtitleTest001();
	void Subtitle004();
	void Subtitle003();
	void Subtitle002();
	void Subtitle001();
	void ShowSubtitle(const struct FTutorialSubtitle& InSubtitle);
	void HideSubtitle();
	void SequenceEvent__ENTRYPOINTSequenceDirector_0();
	void SequenceEvent__ENTRYPOINTSequenceDirector_1();
	void SequenceEvent__ENTRYPOINTSequenceDirector_2();
	void SequenceEvent__ENTRYPOINTSequenceDirector_3();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueprintGeneratedClass TutorialSequence_3_Test.SequenceDirector_C", true, "SequenceDirector_C">();
	}
	static class TutorialSequence_3_Test::USequenceDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<TutorialSequence_3_Test::USequenceDirector_C>();
	}
};
static_assert(alignof(TutorialSequence_3_Test::USequenceDirector_C) == 0x000008, "Wrong alignment on TutorialSequence_3_Test::USequenceDirector_C");
static_assert(sizeof(TutorialSequence_3_Test::USequenceDirector_C) == 0x0000A0, "Wrong size on TutorialSequence_3_Test::USequenceDirector_C");
static_assert(offsetof(TutorialSequence_3_Test::USequenceDirector_C, UberGraphFrame) == 0x000038, "Member 'TutorialSequence_3_Test::USequenceDirector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(TutorialSequence_3_Test::USequenceDirector_C, Subtitle_Data_001) == 0x000040, "Member 'TutorialSequence_3_Test::USequenceDirector_C::Subtitle_Data_001' has a wrong offset!");
static_assert(offsetof(TutorialSequence_3_Test::USequenceDirector_C, Subtitle_Data_002) == 0x000058, "Member 'TutorialSequence_3_Test::USequenceDirector_C::Subtitle_Data_002' has a wrong offset!");
static_assert(offsetof(TutorialSequence_3_Test::USequenceDirector_C, Subtitle_Data_003) == 0x000070, "Member 'TutorialSequence_3_Test::USequenceDirector_C::Subtitle_Data_003' has a wrong offset!");
static_assert(offsetof(TutorialSequence_3_Test::USequenceDirector_C, Subtitle_Data_004) == 0x000088, "Member 'TutorialSequence_3_Test::USequenceDirector_C::Subtitle_Data_004' has a wrong offset!");

}

