#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_CarWeapon_Juggernaut

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_CarWeapon_Juggernaut.Crosshair_CarWeapon_Juggernaut_C
// 0x0028 (0x08D8 - 0x08B0)
class UCrosshair_CarWeapon_Juggernaut_C final : public UVehicleWeaponCrossHairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Coredot;                                           // 0x08B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           SpreadCanvasPanel;                                 // 0x08C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SpreadImg_coredot;                                 // 0x08C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          NewlyControlled;                                   // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Crosshair_CarWeapon_Juggernaut(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);
	void OnCrosshairInNormalState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_CarWeapon_Juggernaut_C">();
	}
	static class UCrosshair_CarWeapon_Juggernaut_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_CarWeapon_Juggernaut_C>();
	}
};
static_assert(alignof(UCrosshair_CarWeapon_Juggernaut_C) == 0x000008, "Wrong alignment on UCrosshair_CarWeapon_Juggernaut_C");
static_assert(sizeof(UCrosshair_CarWeapon_Juggernaut_C) == 0x0008D8, "Wrong size on UCrosshair_CarWeapon_Juggernaut_C");
static_assert(offsetof(UCrosshair_CarWeapon_Juggernaut_C, UberGraphFrame) == 0x0008B0, "Member 'UCrosshair_CarWeapon_Juggernaut_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Juggernaut_C, Coredot) == 0x0008B8, "Member 'UCrosshair_CarWeapon_Juggernaut_C::Coredot' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Juggernaut_C, SpreadCanvasPanel) == 0x0008C0, "Member 'UCrosshair_CarWeapon_Juggernaut_C::SpreadCanvasPanel' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Juggernaut_C, SpreadImg_coredot) == 0x0008C8, "Member 'UCrosshair_CarWeapon_Juggernaut_C::SpreadImg_coredot' has a wrong offset!");
static_assert(offsetof(UCrosshair_CarWeapon_Juggernaut_C, NewlyControlled) == 0x0008D0, "Member 'UCrosshair_CarWeapon_Juggernaut_C::NewlyControlled' has a wrong offset!");

}

