#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_UnlimitedAmmo

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GC_UnlimitedAmmo.GC_UnlimitedAmmo_C.OnActive
// 0x0150 (0x0150 - 0x0000)
struct GC_UnlimitedAmmo_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_StartActorEffect_ReturnValue;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue; // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerLocallyControlled_ReturnValue;    // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InSameTeamWithFirstPlayerController_ReturnValue; // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0107(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 Temp_string_Variable_1;                            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_StartScreenEffect_ReturnValue;            // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_UnlimitedAmmo_C_OnActive) == 0x000008, "Wrong alignment on GC_UnlimitedAmmo_C_OnActive");
static_assert(sizeof(GC_UnlimitedAmmo_C_OnActive) == 0x000150, "Wrong size on GC_UnlimitedAmmo_C_OnActive");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, MyTarget) == 0x000000, "Member 'GC_UnlimitedAmmo_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Parameters) == 0x000008, "Member 'GC_UnlimitedAmmo_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, ReturnValue) == 0x0000D8, "Member 'GC_UnlimitedAmmo_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Temp_bool_Variable) == 0x0000D9, "Member 'GC_UnlimitedAmmo_C_OnActive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, K2Node_DynamicCast_AsSolar_Character) == 0x0000E0, "Member 'GC_UnlimitedAmmo_C_OnActive::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'GC_UnlimitedAmmo_C_OnActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Temp_string_Variable) == 0x0000F0, "Member 'GC_UnlimitedAmmo_C_OnActive::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, CallFunc_StartActorEffect_ReturnValue) == 0x000100, "Member 'GC_UnlimitedAmmo_C_OnActive::CallFunc_StartActorEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue) == 0x000104, "Member 'GC_UnlimitedAmmo_C_OnActive::CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, CallFunc_IsPlayerLocallyControlled_ReturnValue) == 0x000105, "Member 'GC_UnlimitedAmmo_C_OnActive::CallFunc_IsPlayerLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, CallFunc_InSameTeamWithFirstPlayerController_ReturnValue) == 0x000106, "Member 'GC_UnlimitedAmmo_C_OnActive::CallFunc_InSameTeamWithFirstPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Temp_bool_Variable_1) == 0x000107, "Member 'GC_UnlimitedAmmo_C_OnActive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Temp_string_Variable_1) == 0x000108, "Member 'GC_UnlimitedAmmo_C_OnActive::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, Temp_string_Variable_2) == 0x000118, "Member 'GC_UnlimitedAmmo_C_OnActive::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, CallFunc_StartScreenEffect_ReturnValue) == 0x000128, "Member 'GC_UnlimitedAmmo_C_OnActive::CallFunc_StartScreenEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, K2Node_Select_Default) == 0x000130, "Member 'GC_UnlimitedAmmo_C_OnActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnActive, K2Node_Select_Default_1) == 0x000140, "Member 'GC_UnlimitedAmmo_C_OnActive::K2Node_Select_Default_1' has a wrong offset!");

// Function GC_UnlimitedAmmo.GC_UnlimitedAmmo_C.OnRemove
// 0x0148 (0x0148 - 0x0000)
struct GC_UnlimitedAmmo_C_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarCharacter*                        K2Node_DynamicCast_AsSolar_Character;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue; // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InSameTeamWithFirstPlayerController_ReturnValue; // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_UnlimitedAmmo_C_OnRemove) == 0x000008, "Wrong alignment on GC_UnlimitedAmmo_C_OnRemove");
static_assert(sizeof(GC_UnlimitedAmmo_C_OnRemove) == 0x000148, "Wrong size on GC_UnlimitedAmmo_C_OnRemove");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, MyTarget) == 0x000000, "Member 'GC_UnlimitedAmmo_C_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Parameters) == 0x000008, "Member 'GC_UnlimitedAmmo_C_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, ReturnValue) == 0x0000D8, "Member 'GC_UnlimitedAmmo_C_OnRemove::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Temp_bool_Variable) == 0x0000D9, "Member 'GC_UnlimitedAmmo_C_OnRemove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, K2Node_DynamicCast_AsSolar_Character) == 0x0000E0, "Member 'GC_UnlimitedAmmo_C_OnRemove::K2Node_DynamicCast_AsSolar_Character' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'GC_UnlimitedAmmo_C_OnRemove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Temp_string_Variable) == 0x0000F0, "Member 'GC_UnlimitedAmmo_C_OnRemove::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue) == 0x000100, "Member 'GC_UnlimitedAmmo_C_OnRemove::CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, CallFunc_InSameTeamWithFirstPlayerController_ReturnValue) == 0x000101, "Member 'GC_UnlimitedAmmo_C_OnRemove::CallFunc_InSameTeamWithFirstPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Temp_bool_Variable_1) == 0x000102, "Member 'GC_UnlimitedAmmo_C_OnRemove::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Temp_string_Variable_1) == 0x000108, "Member 'GC_UnlimitedAmmo_C_OnRemove::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, Temp_string_Variable_2) == 0x000118, "Member 'GC_UnlimitedAmmo_C_OnRemove::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, K2Node_Select_Default) == 0x000128, "Member 'GC_UnlimitedAmmo_C_OnRemove::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GC_UnlimitedAmmo_C_OnRemove, K2Node_Select_Default_1) == 0x000138, "Member 'GC_UnlimitedAmmo_C_OnRemove::K2Node_Select_Default_1' has a wrong offset!");

}

