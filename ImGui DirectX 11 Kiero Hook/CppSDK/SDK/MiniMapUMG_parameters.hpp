#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniMapUMG

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MiniMapUMG.MiniMapUMG_C.ExecuteUbergraph_MiniMapUMG
// 0x0068 (0x0068 - 0x0000)
struct MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapMarkBase*                           K2Node_Event_InMapMark;                            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_DotLineID;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapMarkBase*                           CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue_1;                  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG) == 0x000008, "Wrong alignment on MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG");
static_assert(sizeof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG) == 0x000068, "Wrong size on MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, EntryPoint) == 0x000000, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::EntryPoint' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, Temp_int_Array_Index_Variable) == 0x000004, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, Temp_int_Array_Index_Variable_1) == 0x000008, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, K2Node_Event_IsDesignTime) == 0x000014, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, K2Node_Event_InMapMark) == 0x000018, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::K2Node_Event_InMapMark' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Array_Contains_ReturnValue) == 0x000020, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, K2Node_Event_DotLineID) == 0x000024, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::K2Node_Event_DotLineID' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Array_Get_Item) == 0x000028, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_GetParent_ReturnValue) == 0x000030, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_GetParent_ReturnValue_1) == 0x000050, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_GetParent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_IsValid_ReturnValue_1) == 0x00005C, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005D, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'MiniMapUMG_C_ExecuteUbergraph_MiniMapUMG::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.RemoveDotLineOnMap
// 0x0004 (0x0004 - 0x0000)
struct MiniMapUMG_C_RemoveDotLineOnMap final
{
public:
	int32                                         DotLineID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_RemoveDotLineOnMap) == 0x000004, "Wrong alignment on MiniMapUMG_C_RemoveDotLineOnMap");
static_assert(sizeof(MiniMapUMG_C_RemoveDotLineOnMap) == 0x000004, "Wrong size on MiniMapUMG_C_RemoveDotLineOnMap");
static_assert(offsetof(MiniMapUMG_C_RemoveDotLineOnMap, DotLineID) == 0x000000, "Member 'MiniMapUMG_C_RemoveDotLineOnMap::DotLineID' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.RemoveMarkIcon
// 0x0008 (0x0008 - 0x0000)
struct MiniMapUMG_C_RemoveMarkIcon final
{
public:
	class UMapMarkBase*                           InMapMark;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_RemoveMarkIcon) == 0x000008, "Wrong alignment on MiniMapUMG_C_RemoveMarkIcon");
static_assert(sizeof(MiniMapUMG_C_RemoveMarkIcon) == 0x000008, "Wrong size on MiniMapUMG_C_RemoveMarkIcon");
static_assert(offsetof(MiniMapUMG_C_RemoveMarkIcon, InMapMark) == 0x000000, "Member 'MiniMapUMG_C_RemoveMarkIcon::InMapMark' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct MiniMapUMG_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MiniMapUMG_C_PreConstruct) == 0x000001, "Wrong alignment on MiniMapUMG_C_PreConstruct");
static_assert(sizeof(MiniMapUMG_C_PreConstruct) == 0x000001, "Wrong size on MiniMapUMG_C_PreConstruct");
static_assert(offsetof(MiniMapUMG_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'MiniMapUMG_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.GetTwoFingerDistance
// 0x00B0 (0x00B0 - 0x0000)
struct MiniMapUMG_C_GetTwoFingerDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FirstFinger;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FVector2D>                 FingerMapRef;                                      // 0x0010(0x0050)(Edit, BlueprintVisible)
	TArray<int32>                                 TuchedFingers;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value_1;                         // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Distance2D_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MiniMapUMG_C_GetTwoFingerDistance) == 0x000008, "Wrong alignment on MiniMapUMG_C_GetTwoFingerDistance");
static_assert(sizeof(MiniMapUMG_C_GetTwoFingerDistance) == 0x0000B0, "Wrong size on MiniMapUMG_C_GetTwoFingerDistance");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, Distance) == 0x000000, "Member 'MiniMapUMG_C_GetTwoFingerDistance::Distance' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, FirstFinger) == 0x000004, "Member 'MiniMapUMG_C_GetTwoFingerDistance::FirstFinger' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, FingerMapRef) == 0x000010, "Member 'MiniMapUMG_C_GetTwoFingerDistance::FingerMapRef' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, TuchedFingers) == 0x000060, "Member 'MiniMapUMG_C_GetTwoFingerDistance::TuchedFingers' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000074, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Map_Find_Value) == 0x000078, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Map_Find_Value_1) == 0x000084, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Map_Find_ReturnValue_1) == 0x00008C, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Distance2D_ReturnValue) == 0x000090, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_Map_Keys_Keys) == 0x000098, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_GetTwoFingerDistance, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'MiniMapUMG_C_GetTwoFingerDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.DisableOneFinger
// 0x0080 (0x0080 - 0x0000)
struct MiniMapUMG_C_DisableOneFinger final
{
public:
	struct FPointerEvent                          Event;                                             // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UBP_MapInputManager_C*                  K2Node_DynamicCast_AsBP_Map_Input_Manager;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MiniMapUMG_C_DisableOneFinger) == 0x000008, "Wrong alignment on MiniMapUMG_C_DisableOneFinger");
static_assert(sizeof(MiniMapUMG_C_DisableOneFinger) == 0x000080, "Wrong size on MiniMapUMG_C_DisableOneFinger");
static_assert(offsetof(MiniMapUMG_C_DisableOneFinger, Event) == 0x000000, "Member 'MiniMapUMG_C_DisableOneFinger::Event' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_DisableOneFinger, K2Node_DynamicCast_AsBP_Map_Input_Manager) == 0x000070, "Member 'MiniMapUMG_C_DisableOneFinger::K2Node_DynamicCast_AsBP_Map_Input_Manager' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_DisableOneFinger, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'MiniMapUMG_C_DisableOneFinger::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.InitMarkIcon
// 0x0048 (0x0048 - 0x0000)
struct MiniMapUMG_C_InitMarkIcon final
{
public:
	TSubclassOf<class UMapMarkBase>               InMapMarkClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector2D                              InMarkPos;                                         // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeSupport;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EdgeSupportWithBigMap;                             // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_InitMarkIcon) == 0x000008, "Wrong alignment on MiniMapUMG_C_InitMarkIcon");
static_assert(sizeof(MiniMapUMG_C_InitMarkIcon) == 0x000048, "Wrong size on MiniMapUMG_C_InitMarkIcon");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, InMapMarkClass) == 0x000000, "Member 'MiniMapUMG_C_InitMarkIcon::InMapMarkClass' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, InMarkPos) == 0x000008, "Member 'MiniMapUMG_C_InitMarkIcon::InMarkPos' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, EdgeSupport) == 0x000010, "Member 'MiniMapUMG_C_InitMarkIcon::EdgeSupport' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, EdgeSupportWithBigMap) == 0x000011, "Member 'MiniMapUMG_C_InitMarkIcon::EdgeSupportWithBigMap' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, ZOrder) == 0x000014, "Member 'MiniMapUMG_C_InitMarkIcon::ZOrder' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, ReturnValue) == 0x000018, "Member 'MiniMapUMG_C_InitMarkIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, CallFunc_GetOwningPlayer_ReturnValue) == 0x000020, "Member 'MiniMapUMG_C_InitMarkIcon::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, CallFunc_Create_ReturnValue) == 0x000028, "Member 'MiniMapUMG_C_InitMarkIcon::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, CallFunc_AddChild_ReturnValue) == 0x000030, "Member 'MiniMapUMG_C_InitMarkIcon::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'MiniMapUMG_C_InitMarkIcon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIcon, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'MiniMapUMG_C_InitMarkIcon::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.InitMarkIconOnMapFrame
// 0x0058 (0x0058 - 0x0000)
struct MiniMapUMG_C_InitMarkIconOnMapFrame final
{
public:
	TSubclassOf<class UMapMarkBase>               InMapMarkClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector2D                              Pivot;                                             // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapMarkBase*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapMarkBase*                           CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_InitMarkIconOnMapFrame) == 0x000008, "Wrong alignment on MiniMapUMG_C_InitMarkIconOnMapFrame");
static_assert(sizeof(MiniMapUMG_C_InitMarkIconOnMapFrame) == 0x000058, "Wrong size on MiniMapUMG_C_InitMarkIconOnMapFrame");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, InMapMarkClass) == 0x000000, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::InMapMarkClass' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, Pivot) == 0x000008, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::Pivot' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, ZOrder) == 0x000010, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::ZOrder' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, ReturnValue) == 0x000018, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_BreakVector2D_X) == 0x000020, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_Create_ReturnValue) == 0x000028, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_MakeVector2D_ReturnValue) == 0x000044, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_InitMarkIconOnMapFrame, CallFunc_AddChild_ReturnValue) == 0x000050, "Member 'MiniMapUMG_C_InitMarkIconOnMapFrame::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.AddDotLineOnMap
// 0x0028 (0x0028 - 0x0000)
struct MiniMapUMG_C_AddDotLineOnMap final
{
public:
	class AActor*                                 StartPointActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EndPointActor;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DotLineColor;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddDotLine_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_AddDotLineOnMap) == 0x000008, "Wrong alignment on MiniMapUMG_C_AddDotLineOnMap");
static_assert(sizeof(MiniMapUMG_C_AddDotLineOnMap) == 0x000028, "Wrong size on MiniMapUMG_C_AddDotLineOnMap");
static_assert(offsetof(MiniMapUMG_C_AddDotLineOnMap, StartPointActor) == 0x000000, "Member 'MiniMapUMG_C_AddDotLineOnMap::StartPointActor' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_AddDotLineOnMap, EndPointActor) == 0x000008, "Member 'MiniMapUMG_C_AddDotLineOnMap::EndPointActor' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_AddDotLineOnMap, DotLineColor) == 0x000010, "Member 'MiniMapUMG_C_AddDotLineOnMap::DotLineColor' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_AddDotLineOnMap, ReturnValue) == 0x000020, "Member 'MiniMapUMG_C_AddDotLineOnMap::ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_AddDotLineOnMap, CallFunc_AddDotLine_ReturnValue) == 0x000024, "Member 'MiniMapUMG_C_AddDotLineOnMap::CallFunc_AddDotLine_ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.SetBigMapFOV
// 0x0010 (0x0010 - 0x0000)
struct MiniMapUMG_C_SetBigMapFOV final
{
public:
	float                                         InSliderValue;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFOVValue;                                        // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InCenter;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_SetBigMapFOV) == 0x000004, "Wrong alignment on MiniMapUMG_C_SetBigMapFOV");
static_assert(sizeof(MiniMapUMG_C_SetBigMapFOV) == 0x000010, "Wrong size on MiniMapUMG_C_SetBigMapFOV");
static_assert(offsetof(MiniMapUMG_C_SetBigMapFOV, InSliderValue) == 0x000000, "Member 'MiniMapUMG_C_SetBigMapFOV::InSliderValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_SetBigMapFOV, InFOVValue) == 0x000004, "Member 'MiniMapUMG_C_SetBigMapFOV::InFOVValue' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_SetBigMapFOV, InCenter) == 0x000008, "Member 'MiniMapUMG_C_SetBigMapFOV::InCenter' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct MiniMapUMG_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseLeave) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseLeave");
static_assert(sizeof(MiniMapUMG_C_OnMouseLeave) == 0x000070, "Wrong size on MiniMapUMG_C_OnMouseLeave");
static_assert(offsetof(MiniMapUMG_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'MiniMapUMG_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.CreateMapMark
// 0x0018 (0x0018 - 0x0000)
struct MiniMapUMG_C_CreateMapMark final
{
public:
	class FString                                 MapMarkName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapMarkBase*                           ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_CreateMapMark) == 0x000008, "Wrong alignment on MiniMapUMG_C_CreateMapMark");
static_assert(sizeof(MiniMapUMG_C_CreateMapMark) == 0x000018, "Wrong size on MiniMapUMG_C_CreateMapMark");
static_assert(offsetof(MiniMapUMG_C_CreateMapMark, MapMarkName) == 0x000000, "Member 'MiniMapUMG_C_CreateMapMark::MapMarkName' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_CreateMapMark, ReturnValue) == 0x000010, "Member 'MiniMapUMG_C_CreateMapMark::ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct MiniMapUMG_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseEnter) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseEnter");
static_assert(sizeof(MiniMapUMG_C_OnMouseEnter) == 0x0000A8, "Wrong size on MiniMapUMG_C_OnMouseEnter");
static_assert(offsetof(MiniMapUMG_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'MiniMapUMG_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'MiniMapUMG_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonUp
// 0x0160 (0x0160 - 0x0000)
struct MiniMapUMG_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseButtonUp");
static_assert(sizeof(MiniMapUMG_C_OnMouseButtonUp) == 0x000160, "Wrong size on MiniMapUMG_C_OnMouseButtonUp");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'MiniMapUMG_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'MiniMapUMG_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonUp, ReturnValue) == 0x0000A8, "Member 'MiniMapUMG_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.VehicleClear
// 0x0001 (0x0001 - 0x0000)
struct MiniMapUMG_C_VehicleClear final
{
public:
	bool                                          IsOwner;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_VehicleClear) == 0x000001, "Wrong alignment on MiniMapUMG_C_VehicleClear");
static_assert(sizeof(MiniMapUMG_C_VehicleClear) == 0x000001, "Wrong size on MiniMapUMG_C_VehicleClear");
static_assert(offsetof(MiniMapUMG_C_VehicleClear, IsOwner) == 0x000000, "Member 'MiniMapUMG_C_VehicleClear::IsOwner' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseMove
// 0x0160 (0x0160 - 0x0000)
struct MiniMapUMG_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseMove) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseMove");
static_assert(sizeof(MiniMapUMG_C_OnMouseMove) == 0x000160, "Wrong size on MiniMapUMG_C_OnMouseMove");
static_assert(offsetof(MiniMapUMG_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'MiniMapUMG_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'MiniMapUMG_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'MiniMapUMG_C_OnMouseMove::ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonDoubleClick
// 0x0160 (0x0160 - 0x0000)
struct MiniMapUMG_C_OnMouseButtonDoubleClick final
{
public:
	struct FGeometry                              InMyGeometry;                                      // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseButtonDoubleClick) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseButtonDoubleClick");
static_assert(sizeof(MiniMapUMG_C_OnMouseButtonDoubleClick) == 0x000160, "Wrong size on MiniMapUMG_C_OnMouseButtonDoubleClick");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDoubleClick, InMyGeometry) == 0x000000, "Member 'MiniMapUMG_C_OnMouseButtonDoubleClick::InMyGeometry' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDoubleClick, InMouseEvent) == 0x000038, "Member 'MiniMapUMG_C_OnMouseButtonDoubleClick::InMouseEvent' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDoubleClick, ReturnValue) == 0x0000A8, "Member 'MiniMapUMG_C_OnMouseButtonDoubleClick::ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.OnMouseButtonDown
// 0x0160 (0x0160 - 0x0000)
struct MiniMapUMG_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapUMG_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on MiniMapUMG_C_OnMouseButtonDown");
static_assert(sizeof(MiniMapUMG_C_OnMouseButtonDown) == 0x000160, "Wrong size on MiniMapUMG_C_OnMouseButtonDown");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'MiniMapUMG_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'MiniMapUMG_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(MiniMapUMG_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'MiniMapUMG_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function MiniMapUMG.MiniMapUMG_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct MiniMapUMG_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(MiniMapUMG_C_GetModuleName) == 0x000008, "Wrong alignment on MiniMapUMG_C_GetModuleName");
static_assert(sizeof(MiniMapUMG_C_GetModuleName) == 0x000010, "Wrong size on MiniMapUMG_C_GetModuleName");
static_assert(offsetof(MiniMapUMG_C_GetModuleName, ReturnValue) == 0x000000, "Member 'MiniMapUMG_C_GetModuleName::ReturnValue' has a wrong offset!");

}

