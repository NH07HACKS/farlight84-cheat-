#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SolarCharacter_Male_LayerBlend

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_CharacterAnimState_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.AnimationLayer_IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK final
{
public:
	struct FPoseLink                              bpp__InPose__pf;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__AnimationLayer_IK__pf;                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK, bpp__InPose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK::bpp__InPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK, bpp__AnimationLayer_IK__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_AnimationLayer_IK::bpp__AnimationLayer_IK__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph final
{
public:
	struct FPoseLink                              bpp__AnimGraph__pf;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph) == 0x000010, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph, bpp__AnimGraph__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_AnimGraph::bpp__AnimGraph__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.BaseLocoPPLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer final
{
public:
	struct FPoseLink                              bpp__InputPose__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__BaseLocoPPLayer__pf;                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer, bpp__InputPose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer::bpp__InputPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer, bpp__BaseLocoPPLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_BaseLocoPPLayer::bpp__BaseLocoPPLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.CalculateSyncPosition
// 0x0008 (0x0008 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition final
{
public:
	bool                                          bpp__bUseSyncPos__pf;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__SyncPosition__pf;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition) == 0x000008, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition, bpp__bUseSyncPos__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition::bpp__bUseSyncPos__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition, bpp__SyncPosition__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_CalculateSyncPosition::bpp__SyncPosition__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.CheckBodyPartMoveMask
// 0x0002 (0x0002 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask final
{
public:
	bool                                          bpp__bLeftArmMask__pf;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__bRightArmMask__pf;                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask) == 0x000001, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask) == 0x000002, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask, bpp__bLeftArmMask__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask::bpp__bLeftArmMask__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask, bpp__bRightArmMask__pf) == 0x000001, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_CheckBodyPartMoveMask::bpp__bRightArmMask__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetBlendTimetoFall
// 0x0008 (0x0008 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall final
{
public:
	float                                         bpp__Default__pf;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Time__pf;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall) == 0x000008, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall, bpp__Default__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall::bpp__Default__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall, bpp__Time__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetBlendTimetoFall::bpp__Time__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToCrawl
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToCrawl::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToFall
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToFall::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToGround
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToGround::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToJump
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToJump::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToSkydive
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSkydive::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GetTransitionKeyToSlide
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GetTransitionKeyToSlide::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GlobalPPLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer final
{
public:
	struct FPoseLink                              bpp__GlobalPPInput__pf;                            // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__GlobalPPLayer__pf;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer, bpp__GlobalPPInput__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer::bpp__GlobalPPInput__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer, bpp__GlobalPPLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GlobalPPLayer::bpp__GlobalPPLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.GlobalWeaponBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior final
{
public:
	struct FPoseLink                              bpp__Input__pf;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__GlobalWeaponBehavior__pf;                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior, bpp__Input__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior::bpp__Input__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior, bpp__GlobalWeaponBehavior__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_GlobalWeaponBehavior::bpp__GlobalWeaponBehavior__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.LayerBlendingLayer
// 0x0040 (0x0040 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer final
{
public:
	struct FPoseLink                              bpp__BaseLoco__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__BasePose__pf;                                 // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayPose__pf;                              // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__LayerBlendingLayer__pf;                       // 0x0030(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer) == 0x000040, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer, bpp__BaseLoco__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer::bpp__BaseLoco__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer, bpp__BasePose__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer::bpp__BasePose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer, bpp__OverlayPose__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer::bpp__OverlayPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer, bpp__LayerBlendingLayer__pf) == 0x000030, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_LayerBlendingLayer::bpp__LayerBlendingLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.MontageLayerBlendingLayer
// 0x0030 (0x0030 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer final
{
public:
	struct FPoseLink                              bpp__LowerBody__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__UpperBody__pf;                                // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__MontageLayerBlendingLayer__pf;                // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer) == 0x000030, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer, bpp__LowerBody__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer::bpp__LowerBody__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer, bpp__UpperBody__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer::bpp__UpperBody__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer, bpp__MontageLayerBlendingLayer__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_MontageLayerBlendingLayer::bpp__MontageLayerBlendingLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.OverlayAdditiveLayer
// 0x0030 (0x0030 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer final
{
public:
	struct FPoseLink                              bpp__BaseLayer__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayLayer__pf;                             // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayAdditiveLayer__pf;                     // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer) == 0x000030, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer, bpp__BaseLayer__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer::bpp__BaseLayer__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer, bpp__OverlayLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer::bpp__OverlayLayer__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer, bpp__OverlayAdditiveLayer__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_OverlayAdditiveLayer::bpp__OverlayAdditiveLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.OverlaySkillAnimationLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer final
{
public:
	struct FPoseLink                              bpp__BasePose__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlaySkillAnimationLayer__pf;               // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer, bpp__BasePose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer::bpp__BasePose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer, bpp__OverlaySkillAnimationLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_OverlaySkillAnimationLayer::bpp__OverlaySkillAnimationLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.ResetSlotBodyPartTargetValue
// 0x0018 (0x0018 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue final
{
public:
	float                                         bpp__LeftArmTargetValue__pf;                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RightArmTargetValue__pf;                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__TagWeaponTargetValue__pf;                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SpineTargetValue__pf;                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SpineAddTargetValue__pf;                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PelvisTargetValue__pf;                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue) == 0x000018, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__LeftArmTargetValue__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__LeftArmTargetValue__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__RightArmTargetValue__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__RightArmTargetValue__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__TagWeaponTargetValue__pf) == 0x000008, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__TagWeaponTargetValue__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__SpineTargetValue__pf) == 0x00000C, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__SpineTargetValue__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__SpineAddTargetValue__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__SpineAddTargetValue__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue, bpp__PelvisTargetValue__pf) == 0x000014, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_ResetSlotBodyPartTargetValue::bpp__PelvisTargetValue__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.SetCharacterAnimState
// 0x0001 (0x0001 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState final
{
public:
	E_CharacterAnimState                          bpp__CharacterAnimState__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState) == 0x000001, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState) == 0x000001, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState, bpp__CharacterAnimState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_SetCharacterAnimState::bpp__CharacterAnimState__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.SkillAnimationLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer final
{
public:
	struct FPoseLink                              bpp__BasePose__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__SkillAnimationLayer__pf;                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer, bpp__BasePose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer::bpp__BasePose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer, bpp__SkillAnimationLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_SkillAnimationLayer::bpp__SkillAnimationLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.UpdateBaseBodyPartTargetValue
// 0x001C (0x001C - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue final
{
public:
	float                                         bpp__LegTarget__pf;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PelvisTarget__pf;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SpineTarget__pf;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__HeadTarget__pf;                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ArmLeftTarget__pf;                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__ArmRightTarget__pf;                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__TagWeaponTarget__pf;                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue) == 0x00001C, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__LegTarget__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__LegTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__PelvisTarget__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__PelvisTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__SpineTarget__pf) == 0x000008, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__SpineTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__HeadTarget__pf) == 0x00000C, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__HeadTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__ArmLeftTarget__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__ArmLeftTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__ArmRightTarget__pf) == 0x000014, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__ArmRightTarget__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue, bpp__TagWeaponTarget__pf) == 0x000018, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateBaseBodyPartTargetValue::bpp__TagWeaponTarget__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.UpdateSprintStopState
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState final
{
public:
	float                                         bpp__DeltaTime__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState) == 0x000004, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState, bpp__DeltaTime__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_UpdateSprintStopState::bpp__DeltaTime__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male_LayerBlend.ABP_SolarCharacter_Male_LayerBlend_C.VehicleLocamotion
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion final
{
public:
	struct FPoseLink                              bpp__VehicleLocamotion__pf;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion");
static_assert(sizeof(ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion) == 0x000010, "Wrong size on ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion");
static_assert(offsetof(ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion, bpp__VehicleLocamotion__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_LayerBlend_C_VehicleLocamotion::bpp__VehicleLocamotion__pf' has a wrong offset!");

}

