#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CascadeExtensionPlugin

#include "Basic.hpp"

#include "CascadeExtensionPlugin_structs.hpp"


namespace SDK::Params
{

// Function CascadeExtensionPlugin.ForcePointDataProvider.GetForcePoints
// 0x0020 (0x0020 - 0x0000)
struct ForcePointDataProvider_GetForcePoints final
{
public:
	struct FForcePoints                           ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForcePointDataProvider_GetForcePoints) == 0x000008, "Wrong alignment on ForcePointDataProvider_GetForcePoints");
static_assert(sizeof(ForcePointDataProvider_GetForcePoints) == 0x000020, "Wrong size on ForcePointDataProvider_GetForcePoints");
static_assert(offsetof(ForcePointDataProvider_GetForcePoints, ReturnValue) == 0x000000, "Member 'ForcePointDataProvider_GetForcePoints::ReturnValue' has a wrong offset!");

// Function CascadeExtensionPlugin.MeshDataProvider.GetDataRevision
// 0x0004 (0x0004 - 0x0000)
struct MeshDataProvider_GetDataRevision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshDataProvider_GetDataRevision) == 0x000004, "Wrong alignment on MeshDataProvider_GetDataRevision");
static_assert(sizeof(MeshDataProvider_GetDataRevision) == 0x000004, "Wrong size on MeshDataProvider_GetDataRevision");
static_assert(offsetof(MeshDataProvider_GetDataRevision, ReturnValue) == 0x000000, "Member 'MeshDataProvider_GetDataRevision::ReturnValue' has a wrong offset!");

// Function CascadeExtensionPlugin.MeshDataProvider.GetMeshTriangleData
// 0x0020 (0x0020 - 0x0000)
struct MeshDataProvider_GetMeshTriangleData final
{
public:
	struct FMeshTriangleData                      ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshDataProvider_GetMeshTriangleData) == 0x000008, "Wrong alignment on MeshDataProvider_GetMeshTriangleData");
static_assert(sizeof(MeshDataProvider_GetMeshTriangleData) == 0x000020, "Wrong size on MeshDataProvider_GetMeshTriangleData");
static_assert(offsetof(MeshDataProvider_GetMeshTriangleData, ReturnValue) == 0x000000, "Member 'MeshDataProvider_GetMeshTriangleData::ReturnValue' has a wrong offset!");

// Function CascadeExtensionPlugin.ParticleDataProvider.SpawnParticle
// 0x0088 (0x0088 - 0x0000)
struct ParticleDataProvider_SpawnParticle final
{
public:
	struct FParticleProperties                    currentParticleProperties;                         // 0x0000(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FParticleProperties                    ReturnValue;                                       // 0x0044(0x0044)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleDataProvider_SpawnParticle) == 0x000004, "Wrong alignment on ParticleDataProvider_SpawnParticle");
static_assert(sizeof(ParticleDataProvider_SpawnParticle) == 0x000088, "Wrong size on ParticleDataProvider_SpawnParticle");
static_assert(offsetof(ParticleDataProvider_SpawnParticle, currentParticleProperties) == 0x000000, "Member 'ParticleDataProvider_SpawnParticle::currentParticleProperties' has a wrong offset!");
static_assert(offsetof(ParticleDataProvider_SpawnParticle, ReturnValue) == 0x000044, "Member 'ParticleDataProvider_SpawnParticle::ReturnValue' has a wrong offset!");

// Function CascadeExtensionPlugin.ParticleDataProvider.UpdateParticle
// 0x0088 (0x0088 - 0x0000)
struct ParticleDataProvider_UpdateParticle final
{
public:
	struct FParticleProperties                    currentParticleProperties;                         // 0x0000(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FParticleProperties                    ReturnValue;                                       // 0x0044(0x0044)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleDataProvider_UpdateParticle) == 0x000004, "Wrong alignment on ParticleDataProvider_UpdateParticle");
static_assert(sizeof(ParticleDataProvider_UpdateParticle) == 0x000088, "Wrong size on ParticleDataProvider_UpdateParticle");
static_assert(offsetof(ParticleDataProvider_UpdateParticle, currentParticleProperties) == 0x000000, "Member 'ParticleDataProvider_UpdateParticle::currentParticleProperties' has a wrong offset!");
static_assert(offsetof(ParticleDataProvider_UpdateParticle, ReturnValue) == 0x000044, "Member 'ParticleDataProvider_UpdateParticle::ReturnValue' has a wrong offset!");

// Function CascadeExtensionPlugin.ParticleModuleLocationMesh.OnCachedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ParticleModuleLocationMesh_OnCachedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleModuleLocationMesh_OnCachedActorDestroyed) == 0x000008, "Wrong alignment on ParticleModuleLocationMesh_OnCachedActorDestroyed");
static_assert(sizeof(ParticleModuleLocationMesh_OnCachedActorDestroyed) == 0x000008, "Wrong size on ParticleModuleLocationMesh_OnCachedActorDestroyed");
static_assert(offsetof(ParticleModuleLocationMesh_OnCachedActorDestroyed, DestroyedActor) == 0x000000, "Member 'ParticleModuleLocationMesh_OnCachedActorDestroyed::DestroyedActor' has a wrong offset!");

}

