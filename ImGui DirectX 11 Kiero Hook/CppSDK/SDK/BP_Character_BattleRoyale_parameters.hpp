#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_BattleRoyale

#include "Basic.hpp"

#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.GetWeaponLevelDamageBonus
// 0x0150 (0x0150 - 0x0000)
struct BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCGMGameplayConfig*                     CallFunc__A_GetModeConfig_ModeConfig;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentActiveSlot_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarItemData                         CallFunc_GetBackpackWeaponBySlot_ItemData;         // 0x0020(0x0120)()
	bool                                          CallFunc_GetBackpackWeaponBySlot_ReturnValue;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value;                           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus) == 0x000008, "Wrong alignment on BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus");
static_assert(sizeof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus) == 0x000150, "Wrong size on BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, Result) == 0x000000, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::Result' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, Temp_bool_Variable) == 0x000004, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, Temp_float_Variable) == 0x000008, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc__A_GetModeConfig_ModeConfig) == 0x000010, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc__A_GetModeConfig_ModeConfig' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_GetCurrentActiveSlot_ReturnValue) == 0x000018, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_GetCurrentActiveSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_GetBackpackWeaponBySlot_ItemData) == 0x000020, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_GetBackpackWeaponBySlot_ItemData' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_GetBackpackWeaponBySlot_ReturnValue) == 0x000140, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_GetBackpackWeaponBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_Map_Find_Value) == 0x000144, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_Map_Find_ReturnValue) == 0x000148, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, CallFunc_BooleanAND_ReturnValue) == 0x000149, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus, K2Node_Select_Default) == 0x00014C, "Member 'BP_Character_BattleRoyale_C_GetWeaponLevelDamageBonus::K2Node_Select_Default' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.Death Cleanup UI
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_BattleRoyale_C_Death_Cleanup_UI final
{
public:
	class ASolarPlayerController*                 CallFunc_GetSolarPlayerController_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDDispatcherBase*                     CallFunc_GetHUDDispatcher_FromPC_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_Death_Cleanup_UI) == 0x000008, "Wrong alignment on BP_Character_BattleRoyale_C_Death_Cleanup_UI");
static_assert(sizeof(BP_Character_BattleRoyale_C_Death_Cleanup_UI) == 0x000010, "Wrong size on BP_Character_BattleRoyale_C_Death_Cleanup_UI");
static_assert(offsetof(BP_Character_BattleRoyale_C_Death_Cleanup_UI, CallFunc_GetSolarPlayerController_ReturnValue) == 0x000000, "Member 'BP_Character_BattleRoyale_C_Death_Cleanup_UI::CallFunc_GetSolarPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_Death_Cleanup_UI, CallFunc_GetHUDDispatcher_FromPC_ReturnValue) == 0x000008, "Member 'BP_Character_BattleRoyale_C_Death_Cleanup_UI::CallFunc_GetHUDDispatcher_FromPC_ReturnValue' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.TakeDamageResolve
// 0x0148 (0x0148 - 0x0000)
struct BP_Character_BattleRoyale_C_TakeDamageResolve final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarPointDamageEvent                 DamageEvent;                                       // 0x0008(0x0128)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class ASCMPlayerState*                        EventInstigator;                                   // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0140(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_TakeDamageResolve) == 0x000008, "Wrong alignment on BP_Character_BattleRoyale_C_TakeDamageResolve");
static_assert(sizeof(BP_Character_BattleRoyale_C_TakeDamageResolve) == 0x000148, "Wrong size on BP_Character_BattleRoyale_C_TakeDamageResolve");
static_assert(offsetof(BP_Character_BattleRoyale_C_TakeDamageResolve, Damage) == 0x000000, "Member 'BP_Character_BattleRoyale_C_TakeDamageResolve::Damage' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_TakeDamageResolve, DamageEvent) == 0x000008, "Member 'BP_Character_BattleRoyale_C_TakeDamageResolve::DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_TakeDamageResolve, EventInstigator) == 0x000130, "Member 'BP_Character_BattleRoyale_C_TakeDamageResolve::EventInstigator' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_TakeDamageResolve, DamageCauser) == 0x000138, "Member 'BP_Character_BattleRoyale_C_TakeDamageResolve::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_TakeDamageResolve, ReturnValue) == 0x000140, "Member 'BP_Character_BattleRoyale_C_TakeDamageResolve::ReturnValue' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.SetReviveCameraFade
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_BattleRoyale_C_SetReviveCameraFade final
{
public:
	float                                         Time_0;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_SetReviveCameraFade) == 0x000004, "Wrong alignment on BP_Character_BattleRoyale_C_SetReviveCameraFade");
static_assert(sizeof(BP_Character_BattleRoyale_C_SetReviveCameraFade) == 0x000004, "Wrong size on BP_Character_BattleRoyale_C_SetReviveCameraFade");
static_assert(offsetof(BP_Character_BattleRoyale_C_SetReviveCameraFade, Time_0) == 0x000000, "Member 'BP_Character_BattleRoyale_C_SetReviveCameraFade::Time_0' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.Debug Set DayAndNightTime
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime final
{
public:
	float                                         Time_0;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime) == 0x000004, "Wrong alignment on BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime");
static_assert(sizeof(BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime) == 0x000004, "Wrong size on BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime");
static_assert(offsetof(BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime, Time_0) == 0x000000, "Member 'BP_Character_BattleRoyale_C_Debug_Set_DayAndNightTime::Time_0' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.SetMapID
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_BattleRoyale_C_SetMapID final
{
public:
	int32                                         MapID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_SetMapID) == 0x000004, "Wrong alignment on BP_Character_BattleRoyale_C_SetMapID");
static_assert(sizeof(BP_Character_BattleRoyale_C_SetMapID) == 0x000004, "Wrong size on BP_Character_BattleRoyale_C_SetMapID");
static_assert(offsetof(BP_Character_BattleRoyale_C_SetMapID, MapID) == 0x000000, "Member 'BP_Character_BattleRoyale_C_SetMapID::MapID' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.ExecuteUbergraph_BP_Character_BattleRoyale
// 0x0038 (0x0038 - 0x0000)
struct BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MapID;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarGameInstanceBase*                 K2Node_DynamicCast_AsSolar_Game_Instance_Base;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USolarMapManager*                       CallFunc_GetSolarMapManager_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale) == 0x000008, "Wrong alignment on BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale");
static_assert(sizeof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale) == 0x000038, "Wrong size on BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, EntryPoint) == 0x000000, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, K2Node_Event_Time) == 0x000004, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, K2Node_CustomEvent_Time) == 0x000008, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, K2Node_CustomEvent_MapID) == 0x000018, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::K2Node_CustomEvent_MapID' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, K2Node_DynamicCast_AsSolar_Game_Instance_Base) == 0x000020, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::K2Node_DynamicCast_AsSolar_Game_Instance_Base' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale, CallFunc_GetSolarMapManager_ReturnValue) == 0x000030, "Member 'BP_Character_BattleRoyale_C_ExecuteUbergraph_BP_Character_BattleRoyale::CallFunc_GetSolarMapManager_ReturnValue' has a wrong offset!");

// Function BP_Character_BattleRoyale.BP_Character_BattleRoyale_C.OnShouldTakeDamage
// 0x0148 (0x0148 - 0x0000)
struct BP_Character_BattleRoyale_C_OnShouldTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolarPointDamageEvent                 DamageEvent;                                       // 0x0008(0x0128)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class ASCMPlayerState*                        EventInstigator;                                   // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_BattleRoyale_C_OnShouldTakeDamage) == 0x000008, "Wrong alignment on BP_Character_BattleRoyale_C_OnShouldTakeDamage");
static_assert(sizeof(BP_Character_BattleRoyale_C_OnShouldTakeDamage) == 0x000148, "Wrong size on BP_Character_BattleRoyale_C_OnShouldTakeDamage");
static_assert(offsetof(BP_Character_BattleRoyale_C_OnShouldTakeDamage, Damage) == 0x000000, "Member 'BP_Character_BattleRoyale_C_OnShouldTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_OnShouldTakeDamage, DamageEvent) == 0x000008, "Member 'BP_Character_BattleRoyale_C_OnShouldTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_OnShouldTakeDamage, EventInstigator) == 0x000130, "Member 'BP_Character_BattleRoyale_C_OnShouldTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_OnShouldTakeDamage, DamageCauser) == 0x000138, "Member 'BP_Character_BattleRoyale_C_OnShouldTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Character_BattleRoyale_C_OnShouldTakeDamage, ReturnValue) == 0x000140, "Member 'BP_Character_BattleRoyale_C_OnShouldTakeDamage::ReturnValue' has a wrong offset!");

}

