#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DownloaderTool

#include "Basic.hpp"

#include "DownloaderTool_structs.hpp"


namespace SDK::Params
{

// Function DownloaderTool.DownloaderHttpTask.OnWriteFileComplete
// 0x0001 (0x0001 - 0x0000)
struct DownloaderHttpTask_OnWriteFileComplete final
{
public:
	bool                                          bWriteResult;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderHttpTask_OnWriteFileComplete) == 0x000001, "Wrong alignment on DownloaderHttpTask_OnWriteFileComplete");
static_assert(sizeof(DownloaderHttpTask_OnWriteFileComplete) == 0x000001, "Wrong size on DownloaderHttpTask_OnWriteFileComplete");
static_assert(offsetof(DownloaderHttpTask_OnWriteFileComplete, bWriteResult) == 0x000000, "Member 'DownloaderHttpTask_OnWriteFileComplete::bWriteResult' has a wrong offset!");

// Function DownloaderTool.DownloaderHttpTask.SetWriteFilePath
// 0x0010 (0x0010 - 0x0000)
struct DownloaderHttpTask_SetWriteFilePath final
{
public:
	class FString                                 InWriteFilePath;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderHttpTask_SetWriteFilePath) == 0x000008, "Wrong alignment on DownloaderHttpTask_SetWriteFilePath");
static_assert(sizeof(DownloaderHttpTask_SetWriteFilePath) == 0x000010, "Wrong size on DownloaderHttpTask_SetWriteFilePath");
static_assert(offsetof(DownloaderHttpTask_SetWriteFilePath, InWriteFilePath) == 0x000000, "Member 'DownloaderHttpTask_SetWriteFilePath::InWriteFilePath' has a wrong offset!");

// Function DownloaderTool.DownloaderMainTask.OnUrlTaskCDNFailed
// 0x0040 (0x0040 - 0x0000)
struct DownloaderMainTask_OnUrlTaskCDNFailed final
{
public:
	struct FDownloaderCDNFailedInfo               InCDNFailedInfo;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderMainTask_OnUrlTaskCDNFailed) == 0x000008, "Wrong alignment on DownloaderMainTask_OnUrlTaskCDNFailed");
static_assert(sizeof(DownloaderMainTask_OnUrlTaskCDNFailed) == 0x000040, "Wrong size on DownloaderMainTask_OnUrlTaskCDNFailed");
static_assert(offsetof(DownloaderMainTask_OnUrlTaskCDNFailed, InCDNFailedInfo) == 0x000000, "Member 'DownloaderMainTask_OnUrlTaskCDNFailed::InCDNFailedInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderMainTask.OnUrlTaskFailed
// 0x0028 (0x0028 - 0x0000)
struct DownloaderMainTask_OnUrlTaskFailed final
{
public:
	struct FDownloaderFailedInfo                  InFailedInfo;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderMainTask_OnUrlTaskFailed) == 0x000008, "Wrong alignment on DownloaderMainTask_OnUrlTaskFailed");
static_assert(sizeof(DownloaderMainTask_OnUrlTaskFailed) == 0x000028, "Wrong size on DownloaderMainTask_OnUrlTaskFailed");
static_assert(offsetof(DownloaderMainTask_OnUrlTaskFailed, InFailedInfo) == 0x000000, "Member 'DownloaderMainTask_OnUrlTaskFailed::InFailedInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderMainTask.OnUrlTaskProgress
// 0x0048 (0x0048 - 0x0000)
struct DownloaderMainTask_OnUrlTaskProgress final
{
public:
	struct FDownloaderProgressInfo                InProgressInfo;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderMainTask_OnUrlTaskProgress) == 0x000008, "Wrong alignment on DownloaderMainTask_OnUrlTaskProgress");
static_assert(sizeof(DownloaderMainTask_OnUrlTaskProgress) == 0x000048, "Wrong size on DownloaderMainTask_OnUrlTaskProgress");
static_assert(offsetof(DownloaderMainTask_OnUrlTaskProgress, InProgressInfo) == 0x000000, "Member 'DownloaderMainTask_OnUrlTaskProgress::InProgressInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderMainTask.OnUrlTaskSuccess
// 0x0060 (0x0060 - 0x0000)
struct DownloaderMainTask_OnUrlTaskSuccess final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderMainTask_OnUrlTaskSuccess) == 0x000008, "Wrong alignment on DownloaderMainTask_OnUrlTaskSuccess");
static_assert(sizeof(DownloaderMainTask_OnUrlTaskSuccess) == 0x000060, "Wrong size on DownloaderMainTask_OnUrlTaskSuccess");
static_assert(offsetof(DownloaderMainTask_OnUrlTaskSuccess, InResponse) == 0x000000, "Member 'DownloaderMainTask_OnUrlTaskSuccess::InResponse' has a wrong offset!");

// Function DownloaderTool.DownloaderManagerLuaImpl.InitDownloaderMgrLuaInternal
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal) == 0x000001, "Wrong alignment on DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal");
static_assert(sizeof(DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal) == 0x000001, "Wrong size on DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal");
static_assert(offsetof(DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal, ReturnValue) == 0x000000, "Member 'DownloaderManagerLuaImpl_InitDownloaderMgrLuaInternal::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.Get
// 0x0010 (0x0010 - 0x0000)
struct DownloaderManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloaderManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_Get) == 0x000008, "Wrong alignment on DownloaderManager_Get");
static_assert(sizeof(DownloaderManager_Get) == 0x000010, "Wrong size on DownloaderManager_Get");
static_assert(offsetof(DownloaderManager_Get, WorldContextObject) == 0x000000, "Member 'DownloaderManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DownloaderManager_Get, ReturnValue) == 0x000008, "Member 'DownloaderManager_Get::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetMainTaskName
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_GetMainTaskName final
{
public:
	TArray<struct FDownloaderTaskInfo>            InAllTaskInfos;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetMainTaskName) == 0x000008, "Wrong alignment on DownloaderManager_GetMainTaskName");
static_assert(sizeof(DownloaderManager_GetMainTaskName) == 0x000018, "Wrong size on DownloaderManager_GetMainTaskName");
static_assert(offsetof(DownloaderManager_GetMainTaskName, InAllTaskInfos) == 0x000000, "Member 'DownloaderManager_GetMainTaskName::InAllTaskInfos' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetMainTaskName, ReturnValue) == 0x000010, "Member 'DownloaderManager_GetMainTaskName::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.AsyncLoadOrDownloadTexture
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderManager_AsyncLoadOrDownloadTexture final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& FilePath, class UTexture2DDynamic* Texture)> Callback;       // 0x00B8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_AsyncLoadOrDownloadTexture) == 0x000008, "Wrong alignment on DownloaderManager_AsyncLoadOrDownloadTexture");
static_assert(sizeof(DownloaderManager_AsyncLoadOrDownloadTexture) == 0x0000C8, "Wrong size on DownloaderManager_AsyncLoadOrDownloadTexture");
static_assert(offsetof(DownloaderManager_AsyncLoadOrDownloadTexture, InTaskInfo) == 0x000000, "Member 'DownloaderManager_AsyncLoadOrDownloadTexture::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_AsyncLoadOrDownloadTexture, Callback) == 0x0000B8, "Member 'DownloaderManager_AsyncLoadOrDownloadTexture::Callback' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.CreateBigFilesDownloadTask
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_CreateBigFilesDownloadTask final
{
public:
	TArray<struct FDownloaderTaskInfo>            InAllTaskInfos;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloaderMainTask*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_CreateBigFilesDownloadTask) == 0x000008, "Wrong alignment on DownloaderManager_CreateBigFilesDownloadTask");
static_assert(sizeof(DownloaderManager_CreateBigFilesDownloadTask) == 0x000018, "Wrong size on DownloaderManager_CreateBigFilesDownloadTask");
static_assert(offsetof(DownloaderManager_CreateBigFilesDownloadTask, InAllTaskInfos) == 0x000000, "Member 'DownloaderManager_CreateBigFilesDownloadTask::InAllTaskInfos' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CreateBigFilesDownloadTask, ReturnValue) == 0x000010, "Member 'DownloaderManager_CreateBigFilesDownloadTask::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.CreateJsonReqTask
// 0x00D0 (0x00D0 - 0x0000)
struct DownloaderManager_CreateJsonReqTask final
{
public:
	class FString                                 InNecessaryURL;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDownloaderReqJson                     InReqJson;                                         // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDownloaderHttpTask*                    ReturnValue;                                       // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_CreateJsonReqTask) == 0x000008, "Wrong alignment on DownloaderManager_CreateJsonReqTask");
static_assert(sizeof(DownloaderManager_CreateJsonReqTask) == 0x0000D0, "Wrong size on DownloaderManager_CreateJsonReqTask");
static_assert(offsetof(DownloaderManager_CreateJsonReqTask, InNecessaryURL) == 0x000000, "Member 'DownloaderManager_CreateJsonReqTask::InNecessaryURL' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CreateJsonReqTask, InReqJson) == 0x000010, "Member 'DownloaderManager_CreateJsonReqTask::InReqJson' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CreateJsonReqTask, ReturnValue) == 0x0000C8, "Member 'DownloaderManager_CreateJsonReqTask::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.CreateLightWeightTask
// 0x00C0 (0x00C0 - 0x0000)
struct DownloaderManager_CreateLightWeightTask final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDownloaderHttpTask*                    ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_CreateLightWeightTask) == 0x000008, "Wrong alignment on DownloaderManager_CreateLightWeightTask");
static_assert(sizeof(DownloaderManager_CreateLightWeightTask) == 0x0000C0, "Wrong size on DownloaderManager_CreateLightWeightTask");
static_assert(offsetof(DownloaderManager_CreateLightWeightTask, InTaskInfo) == 0x000000, "Member 'DownloaderManager_CreateLightWeightTask::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CreateLightWeightTask, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_CreateLightWeightTask::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.CreateLuaAsyncLoadOrDownloadTextureTask
// 0x00C0 (0x00C0 - 0x0000)
struct DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class ULuaAsyncLoadTextureBridge*             ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask) == 0x000008, "Wrong alignment on DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask");
static_assert(sizeof(DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask) == 0x0000C0, "Wrong size on DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask");
static_assert(offsetof(DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask, InTaskInfo) == 0x000000, "Member 'DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_CreateLuaAsyncLoadOrDownloadTextureTask::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.DeleteAllDefaultCacheDir
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_DeleteAllDefaultCacheDir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_DeleteAllDefaultCacheDir) == 0x000001, "Wrong alignment on DownloaderManager_DeleteAllDefaultCacheDir");
static_assert(sizeof(DownloaderManager_DeleteAllDefaultCacheDir) == 0x000001, "Wrong size on DownloaderManager_DeleteAllDefaultCacheDir");
static_assert(offsetof(DownloaderManager_DeleteAllDefaultCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_DeleteAllDefaultCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetDefaultPictureCacheFilePath
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderManager_GetDefaultPictureCacheFilePath final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetDefaultPictureCacheFilePath) == 0x000008, "Wrong alignment on DownloaderManager_GetDefaultPictureCacheFilePath");
static_assert(sizeof(DownloaderManager_GetDefaultPictureCacheFilePath) == 0x0000C8, "Wrong size on DownloaderManager_GetDefaultPictureCacheFilePath");
static_assert(offsetof(DownloaderManager_GetDefaultPictureCacheFilePath, InTaskInfo) == 0x000000, "Member 'DownloaderManager_GetDefaultPictureCacheFilePath::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetDefaultPictureCacheFilePath, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_GetDefaultPictureCacheFilePath::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetMainTaskByName
// 0x0010 (0x0010 - 0x0000)
struct DownloaderManager_GetMainTaskByName final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloaderMainTask*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetMainTaskByName) == 0x000008, "Wrong alignment on DownloaderManager_GetMainTaskByName");
static_assert(sizeof(DownloaderManager_GetMainTaskByName) == 0x000010, "Wrong size on DownloaderManager_GetMainTaskByName");
static_assert(offsetof(DownloaderManager_GetMainTaskByName, InMainTaskName) == 0x000000, "Member 'DownloaderManager_GetMainTaskByName::InMainTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetMainTaskByName, ReturnValue) == 0x000008, "Member 'DownloaderManager_GetMainTaskByName::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetMainTasksMap
// 0x0050 (0x0050 - 0x0000)
struct DownloaderManager_GetMainTasksMap final
{
public:
	TMap<class FName, class UDownloaderMainTask*> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetMainTasksMap) == 0x000008, "Wrong alignment on DownloaderManager_GetMainTasksMap");
static_assert(sizeof(DownloaderManager_GetMainTasksMap) == 0x000050, "Wrong size on DownloaderManager_GetMainTasksMap");
static_assert(offsetof(DownloaderManager_GetMainTasksMap, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetMainTasksMap::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetMainTaskStatus
// 0x000C (0x000C - 0x0000)
struct DownloaderManager_GetMainTaskStatus final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDownloaderStatus                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderManager_GetMainTaskStatus) == 0x000004, "Wrong alignment on DownloaderManager_GetMainTaskStatus");
static_assert(sizeof(DownloaderManager_GetMainTaskStatus) == 0x00000C, "Wrong size on DownloaderManager_GetMainTaskStatus");
static_assert(offsetof(DownloaderManager_GetMainTaskStatus, InMainTaskName) == 0x000000, "Member 'DownloaderManager_GetMainTaskStatus::InMainTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetMainTaskStatus, ReturnValue) == 0x000008, "Member 'DownloaderManager_GetMainTaskStatus::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetTextureBridge
// 0x00C0 (0x00C0 - 0x0000)
struct DownloaderManager_GetTextureBridge final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class ULuaAsyncLoadTextureBridge*             ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetTextureBridge) == 0x000008, "Wrong alignment on DownloaderManager_GetTextureBridge");
static_assert(sizeof(DownloaderManager_GetTextureBridge) == 0x0000C0, "Wrong size on DownloaderManager_GetTextureBridge");
static_assert(offsetof(DownloaderManager_GetTextureBridge, InTaskInfo) == 0x000000, "Member 'DownloaderManager_GetTextureBridge::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetTextureBridge, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_GetTextureBridge::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlEncodedStr
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderManager_GetUrlEncodedStr final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetUrlEncodedStr) == 0x000008, "Wrong alignment on DownloaderManager_GetUrlEncodedStr");
static_assert(sizeof(DownloaderManager_GetUrlEncodedStr) == 0x0000C8, "Wrong size on DownloaderManager_GetUrlEncodedStr");
static_assert(offsetof(DownloaderManager_GetUrlEncodedStr, InTaskInfo) == 0x000000, "Member 'DownloaderManager_GetUrlEncodedStr::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetUrlEncodedStr, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_GetUrlEncodedStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlsCachedSize
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_GetUrlsCachedSize final
{
public:
	TArray<struct FDownloaderTaskInfo>            InAllTaskInfos;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderManager_GetUrlsCachedSize) == 0x000008, "Wrong alignment on DownloaderManager_GetUrlsCachedSize");
static_assert(sizeof(DownloaderManager_GetUrlsCachedSize) == 0x000018, "Wrong size on DownloaderManager_GetUrlsCachedSize");
static_assert(offsetof(DownloaderManager_GetUrlsCachedSize, InAllTaskInfos) == 0x000000, "Member 'DownloaderManager_GetUrlsCachedSize::InAllTaskInfos' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetUrlsCachedSize, ReturnValue) == 0x000010, "Member 'DownloaderManager_GetUrlsCachedSize::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlTaskCacheDirPath
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderManager_GetUrlTaskCacheDirPath final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetUrlTaskCacheDirPath) == 0x000008, "Wrong alignment on DownloaderManager_GetUrlTaskCacheDirPath");
static_assert(sizeof(DownloaderManager_GetUrlTaskCacheDirPath) == 0x0000C8, "Wrong size on DownloaderManager_GetUrlTaskCacheDirPath");
static_assert(offsetof(DownloaderManager_GetUrlTaskCacheDirPath, InTaskInfo) == 0x000000, "Member 'DownloaderManager_GetUrlTaskCacheDirPath::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetUrlTaskCacheDirPath, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_GetUrlTaskCacheDirPath::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlTaskRecordFilePath
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderManager_GetUrlTaskRecordFilePath final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetUrlTaskRecordFilePath) == 0x000008, "Wrong alignment on DownloaderManager_GetUrlTaskRecordFilePath");
static_assert(sizeof(DownloaderManager_GetUrlTaskRecordFilePath) == 0x0000C8, "Wrong size on DownloaderManager_GetUrlTaskRecordFilePath");
static_assert(offsetof(DownloaderManager_GetUrlTaskRecordFilePath, InTaskInfo) == 0x000000, "Member 'DownloaderManager_GetUrlTaskRecordFilePath::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetUrlTaskRecordFilePath, ReturnValue) == 0x0000B8, "Member 'DownloaderManager_GetUrlTaskRecordFilePath::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.HandleTextureConversionComplete
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_HandleTextureConversionComplete final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_HandleTextureConversionComplete) == 0x000008, "Wrong alignment on DownloaderManager_HandleTextureConversionComplete");
static_assert(sizeof(DownloaderManager_HandleTextureConversionComplete) == 0x000018, "Wrong size on DownloaderManager_HandleTextureConversionComplete");
static_assert(offsetof(DownloaderManager_HandleTextureConversionComplete, FilePath) == 0x000000, "Member 'DownloaderManager_HandleTextureConversionComplete::FilePath' has a wrong offset!");
static_assert(offsetof(DownloaderManager_HandleTextureConversionComplete, Texture) == 0x000010, "Member 'DownloaderManager_HandleTextureConversionComplete::Texture' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.IsMainTaskExist
// 0x000C (0x000C - 0x0000)
struct DownloaderManager_IsMainTaskExist final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderManager_IsMainTaskExist) == 0x000004, "Wrong alignment on DownloaderManager_IsMainTaskExist");
static_assert(sizeof(DownloaderManager_IsMainTaskExist) == 0x00000C, "Wrong size on DownloaderManager_IsMainTaskExist");
static_assert(offsetof(DownloaderManager_IsMainTaskExist, InMainTaskName) == 0x000000, "Member 'DownloaderManager_IsMainTaskExist::InMainTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderManager_IsMainTaskExist, ReturnValue) == 0x000008, "Member 'DownloaderManager_IsMainTaskExist::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.OnDownloadTextureFailed
// 0x0028 (0x0028 - 0x0000)
struct DownloaderManager_OnDownloadTextureFailed final
{
public:
	struct FDownloaderFailedInfo                  InFailedInfo;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_OnDownloadTextureFailed) == 0x000008, "Wrong alignment on DownloaderManager_OnDownloadTextureFailed");
static_assert(sizeof(DownloaderManager_OnDownloadTextureFailed) == 0x000028, "Wrong size on DownloaderManager_OnDownloadTextureFailed");
static_assert(offsetof(DownloaderManager_OnDownloadTextureFailed, InFailedInfo) == 0x000000, "Member 'DownloaderManager_OnDownloadTextureFailed::InFailedInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.OnDownloadTextureSuccess
// 0x0060 (0x0060 - 0x0000)
struct DownloaderManager_OnDownloadTextureSuccess final
{
public:
	struct FDownloaderResponse                    InResponses;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_OnDownloadTextureSuccess) == 0x000008, "Wrong alignment on DownloaderManager_OnDownloadTextureSuccess");
static_assert(sizeof(DownloaderManager_OnDownloadTextureSuccess) == 0x000060, "Wrong size on DownloaderManager_OnDownloadTextureSuccess");
static_assert(offsetof(DownloaderManager_OnDownloadTextureSuccess, InResponses) == 0x000000, "Member 'DownloaderManager_OnDownloadTextureSuccess::InResponses' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.PauseMainTask
// 0x0008 (0x0008 - 0x0000)
struct DownloaderManager_PauseMainTask final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_PauseMainTask) == 0x000004, "Wrong alignment on DownloaderManager_PauseMainTask");
static_assert(sizeof(DownloaderManager_PauseMainTask) == 0x000008, "Wrong size on DownloaderManager_PauseMainTask");
static_assert(offsetof(DownloaderManager_PauseMainTask, InMainTaskName) == 0x000000, "Member 'DownloaderManager_PauseMainTask::InMainTaskName' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.PushBatchSubTasksToQueue
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_PushBatchSubTasksToQueue final
{
public:
	TArray<class UDownloaderSubTask*>             InSubTasks;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCutQueue;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderManager_PushBatchSubTasksToQueue) == 0x000008, "Wrong alignment on DownloaderManager_PushBatchSubTasksToQueue");
static_assert(sizeof(DownloaderManager_PushBatchSubTasksToQueue) == 0x000018, "Wrong size on DownloaderManager_PushBatchSubTasksToQueue");
static_assert(offsetof(DownloaderManager_PushBatchSubTasksToQueue, InSubTasks) == 0x000000, "Member 'DownloaderManager_PushBatchSubTasksToQueue::InSubTasks' has a wrong offset!");
static_assert(offsetof(DownloaderManager_PushBatchSubTasksToQueue, bInCutQueue) == 0x000010, "Member 'DownloaderManager_PushBatchSubTasksToQueue::bInCutQueue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.ReadyMainTaskFinish
// 0x0008 (0x0008 - 0x0000)
struct DownloaderManager_ReadyMainTaskFinish final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_ReadyMainTaskFinish) == 0x000004, "Wrong alignment on DownloaderManager_ReadyMainTaskFinish");
static_assert(sizeof(DownloaderManager_ReadyMainTaskFinish) == 0x000008, "Wrong size on DownloaderManager_ReadyMainTaskFinish");
static_assert(offsetof(DownloaderManager_ReadyMainTaskFinish, InMainTaskName) == 0x000000, "Member 'DownloaderManager_ReadyMainTaskFinish::InMainTaskName' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.ResumeMainTask
// 0x0008 (0x0008 - 0x0000)
struct DownloaderManager_ResumeMainTask final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_ResumeMainTask) == 0x000004, "Wrong alignment on DownloaderManager_ResumeMainTask");
static_assert(sizeof(DownloaderManager_ResumeMainTask) == 0x000008, "Wrong size on DownloaderManager_ResumeMainTask");
static_assert(offsetof(DownloaderManager_ResumeMainTask, InMainTaskName) == 0x000000, "Member 'DownloaderManager_ResumeMainTask::InMainTaskName' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetBackgroundDownloadMaxRetryTimes
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetBackgroundDownloadMaxRetryTimes final
{
public:
	int32                                         InMaxRetryTimes;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetBackgroundDownloadMaxRetryTimes) == 0x000004, "Wrong alignment on DownloaderManager_SetBackgroundDownloadMaxRetryTimes");
static_assert(sizeof(DownloaderManager_SetBackgroundDownloadMaxRetryTimes) == 0x000004, "Wrong size on DownloaderManager_SetBackgroundDownloadMaxRetryTimes");
static_assert(offsetof(DownloaderManager_SetBackgroundDownloadMaxRetryTimes, InMaxRetryTimes) == 0x000000, "Member 'DownloaderManager_SetBackgroundDownloadMaxRetryTimes::InMaxRetryTimes' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetCacheClearMaxSpacePercent
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetCacheClearMaxSpacePercent final
{
public:
	int32                                         InCacheClearMaxSpacePercent;                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetCacheClearMaxSpacePercent) == 0x000004, "Wrong alignment on DownloaderManager_SetCacheClearMaxSpacePercent");
static_assert(sizeof(DownloaderManager_SetCacheClearMaxSpacePercent) == 0x000004, "Wrong size on DownloaderManager_SetCacheClearMaxSpacePercent");
static_assert(offsetof(DownloaderManager_SetCacheClearMaxSpacePercent, InCacheClearMaxSpacePercent) == 0x000000, "Member 'DownloaderManager_SetCacheClearMaxSpacePercent::InCacheClearMaxSpacePercent' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetCacheExpiredSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetCacheExpiredSeconds final
{
public:
	int32                                         InCacheExpiredSeconds;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetCacheExpiredSeconds) == 0x000004, "Wrong alignment on DownloaderManager_SetCacheExpiredSeconds");
static_assert(sizeof(DownloaderManager_SetCacheExpiredSeconds) == 0x000004, "Wrong size on DownloaderManager_SetCacheExpiredSeconds");
static_assert(offsetof(DownloaderManager_SetCacheExpiredSeconds, InCacheExpiredSeconds) == 0x000000, "Member 'DownloaderManager_SetCacheExpiredSeconds::InCacheExpiredSeconds' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetIsBackgroundDownload
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_SetIsBackgroundDownload final
{
public:
	bool                                          bInBackgroundDownload;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetIsBackgroundDownload) == 0x000001, "Wrong alignment on DownloaderManager_SetIsBackgroundDownload");
static_assert(sizeof(DownloaderManager_SetIsBackgroundDownload) == 0x000001, "Wrong size on DownloaderManager_SetIsBackgroundDownload");
static_assert(offsetof(DownloaderManager_SetIsBackgroundDownload, bInBackgroundDownload) == 0x000000, "Member 'DownloaderManager_SetIsBackgroundDownload::bInBackgroundDownload' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetManagerEnable
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_SetManagerEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetManagerEnable) == 0x000001, "Wrong alignment on DownloaderManager_SetManagerEnable");
static_assert(sizeof(DownloaderManager_SetManagerEnable) == 0x000001, "Wrong size on DownloaderManager_SetManagerEnable");
static_assert(offsetof(DownloaderManager_SetManagerEnable, bInEnable) == 0x000000, "Member 'DownloaderManager_SetManagerEnable::bInEnable' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetMaxDownloadingSubTaskNum
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetMaxDownloadingSubTaskNum final
{
public:
	int32                                         InMaxDownloadingSubTaskNum;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetMaxDownloadingSubTaskNum) == 0x000004, "Wrong alignment on DownloaderManager_SetMaxDownloadingSubTaskNum");
static_assert(sizeof(DownloaderManager_SetMaxDownloadingSubTaskNum) == 0x000004, "Wrong size on DownloaderManager_SetMaxDownloadingSubTaskNum");
static_assert(offsetof(DownloaderManager_SetMaxDownloadingSubTaskNum, InMaxDownloadingSubTaskNum) == 0x000000, "Member 'DownloaderManager_SetMaxDownloadingSubTaskNum::InMaxDownloadingSubTaskNum' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetSubTaskChunkSize
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetSubTaskChunkSize final
{
public:
	int32                                         InSubTaskChunkSize;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetSubTaskChunkSize) == 0x000004, "Wrong alignment on DownloaderManager_SetSubTaskChunkSize");
static_assert(sizeof(DownloaderManager_SetSubTaskChunkSize) == 0x000004, "Wrong size on DownloaderManager_SetSubTaskChunkSize");
static_assert(offsetof(DownloaderManager_SetSubTaskChunkSize, InSubTaskChunkSize) == 0x000000, "Member 'DownloaderManager_SetSubTaskChunkSize::InSubTaskChunkSize' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetTextureCacheExpireTime
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetTextureCacheExpireTime final
{
public:
	float                                         InTextureCacheExpireTime;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetTextureCacheExpireTime) == 0x000004, "Wrong alignment on DownloaderManager_SetTextureCacheExpireTime");
static_assert(sizeof(DownloaderManager_SetTextureCacheExpireTime) == 0x000004, "Wrong size on DownloaderManager_SetTextureCacheExpireTime");
static_assert(offsetof(DownloaderManager_SetTextureCacheExpireTime, InTextureCacheExpireTime) == 0x000000, "Member 'DownloaderManager_SetTextureCacheExpireTime::InTextureCacheExpireTime' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetTextureMaxCacheNum
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetTextureMaxCacheNum final
{
public:
	int32                                         InTextureMaxCacheNum;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetTextureMaxCacheNum) == 0x000004, "Wrong alignment on DownloaderManager_SetTextureMaxCacheNum");
static_assert(sizeof(DownloaderManager_SetTextureMaxCacheNum) == 0x000004, "Wrong size on DownloaderManager_SetTextureMaxCacheNum");
static_assert(offsetof(DownloaderManager_SetTextureMaxCacheNum, InTextureMaxCacheNum) == 0x000000, "Member 'DownloaderManager_SetTextureMaxCacheNum::InTextureMaxCacheNum' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetTimeOutSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetTimeOutSeconds final
{
public:
	float                                         InTimeOutSeconds;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetTimeOutSeconds) == 0x000004, "Wrong alignment on DownloaderManager_SetTimeOutSeconds");
static_assert(sizeof(DownloaderManager_SetTimeOutSeconds) == 0x000004, "Wrong size on DownloaderManager_SetTimeOutSeconds");
static_assert(offsetof(DownloaderManager_SetTimeOutSeconds, InTimeOutSeconds) == 0x000000, "Member 'DownloaderManager_SetTimeOutSeconds::InTimeOutSeconds' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetUrlTaskCallbackTimeOutGrowFactor
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor final
{
public:
	float                                         InGrowFactor;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor) == 0x000004, "Wrong alignment on DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor");
static_assert(sizeof(DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor) == 0x000004, "Wrong size on DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor");
static_assert(offsetof(DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor, InGrowFactor) == 0x000000, "Member 'DownloaderManager_SetUrlTaskCallbackTimeOutGrowFactor::InGrowFactor' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.SetUrlTaskCallbackTimeOutSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_SetUrlTaskCallbackTimeOutSeconds final
{
public:
	float                                         InTimeOutSeconds;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_SetUrlTaskCallbackTimeOutSeconds) == 0x000004, "Wrong alignment on DownloaderManager_SetUrlTaskCallbackTimeOutSeconds");
static_assert(sizeof(DownloaderManager_SetUrlTaskCallbackTimeOutSeconds) == 0x000004, "Wrong size on DownloaderManager_SetUrlTaskCallbackTimeOutSeconds");
static_assert(offsetof(DownloaderManager_SetUrlTaskCallbackTimeOutSeconds, InTimeOutSeconds) == 0x000000, "Member 'DownloaderManager_SetUrlTaskCallbackTimeOutSeconds::InTimeOutSeconds' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.StopMainTask
// 0x0008 (0x0008 - 0x0000)
struct DownloaderManager_StopMainTask final
{
public:
	class FName                                   InMainTaskName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_StopMainTask) == 0x000004, "Wrong alignment on DownloaderManager_StopMainTask");
static_assert(sizeof(DownloaderManager_StopMainTask) == 0x000008, "Wrong size on DownloaderManager_StopMainTask");
static_assert(offsetof(DownloaderManager_StopMainTask, InMainTaskName) == 0x000000, "Member 'DownloaderManager_StopMainTask::InMainTaskName' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.CheckTaskInfosValid
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_CheckTaskInfosValid final
{
public:
	TArray<struct FDownloaderTaskInfo>            InAllTaskInfos;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderManager_CheckTaskInfosValid) == 0x000008, "Wrong alignment on DownloaderManager_CheckTaskInfosValid");
static_assert(sizeof(DownloaderManager_CheckTaskInfosValid) == 0x000018, "Wrong size on DownloaderManager_CheckTaskInfosValid");
static_assert(offsetof(DownloaderManager_CheckTaskInfosValid, InAllTaskInfos) == 0x000000, "Member 'DownloaderManager_CheckTaskInfosValid::InAllTaskInfos' has a wrong offset!");
static_assert(offsetof(DownloaderManager_CheckTaskInfosValid, ReturnValue) == 0x000010, "Member 'DownloaderManager_CheckTaskInfosValid::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.DeleteDefaultLaunchCacheDir
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_DeleteDefaultLaunchCacheDir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_DeleteDefaultLaunchCacheDir) == 0x000001, "Wrong alignment on DownloaderManager_DeleteDefaultLaunchCacheDir");
static_assert(sizeof(DownloaderManager_DeleteDefaultLaunchCacheDir) == 0x000001, "Wrong size on DownloaderManager_DeleteDefaultLaunchCacheDir");
static_assert(offsetof(DownloaderManager_DeleteDefaultLaunchCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_DeleteDefaultLaunchCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.DeleteDefaultLogsCacheDir
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_DeleteDefaultLogsCacheDir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_DeleteDefaultLogsCacheDir) == 0x000001, "Wrong alignment on DownloaderManager_DeleteDefaultLogsCacheDir");
static_assert(sizeof(DownloaderManager_DeleteDefaultLogsCacheDir) == 0x000001, "Wrong size on DownloaderManager_DeleteDefaultLogsCacheDir");
static_assert(offsetof(DownloaderManager_DeleteDefaultLogsCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_DeleteDefaultLogsCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.DeleteDefaultPictureCacheDir
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_DeleteDefaultPictureCacheDir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_DeleteDefaultPictureCacheDir) == 0x000001, "Wrong alignment on DownloaderManager_DeleteDefaultPictureCacheDir");
static_assert(sizeof(DownloaderManager_DeleteDefaultPictureCacheDir) == 0x000001, "Wrong size on DownloaderManager_DeleteDefaultPictureCacheDir");
static_assert(offsetof(DownloaderManager_DeleteDefaultPictureCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_DeleteDefaultPictureCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetBackgroundDownloadMaxRetryTimes
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetBackgroundDownloadMaxRetryTimes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetBackgroundDownloadMaxRetryTimes) == 0x000004, "Wrong alignment on DownloaderManager_GetBackgroundDownloadMaxRetryTimes");
static_assert(sizeof(DownloaderManager_GetBackgroundDownloadMaxRetryTimes) == 0x000004, "Wrong size on DownloaderManager_GetBackgroundDownloadMaxRetryTimes");
static_assert(offsetof(DownloaderManager_GetBackgroundDownloadMaxRetryTimes, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetBackgroundDownloadMaxRetryTimes::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetCacheClearMaxSpacePercent
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetCacheClearMaxSpacePercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetCacheClearMaxSpacePercent) == 0x000004, "Wrong alignment on DownloaderManager_GetCacheClearMaxSpacePercent");
static_assert(sizeof(DownloaderManager_GetCacheClearMaxSpacePercent) == 0x000004, "Wrong size on DownloaderManager_GetCacheClearMaxSpacePercent");
static_assert(offsetof(DownloaderManager_GetCacheClearMaxSpacePercent, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetCacheClearMaxSpacePercent::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetCacheExpiredSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetCacheExpiredSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetCacheExpiredSeconds) == 0x000004, "Wrong alignment on DownloaderManager_GetCacheExpiredSeconds");
static_assert(sizeof(DownloaderManager_GetCacheExpiredSeconds) == 0x000004, "Wrong size on DownloaderManager_GetCacheExpiredSeconds");
static_assert(offsetof(DownloaderManager_GetCacheExpiredSeconds, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetCacheExpiredSeconds::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetDefaultLaunchCacheDir
// 0x0010 (0x0010 - 0x0000)
struct DownloaderManager_GetDefaultLaunchCacheDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetDefaultLaunchCacheDir) == 0x000008, "Wrong alignment on DownloaderManager_GetDefaultLaunchCacheDir");
static_assert(sizeof(DownloaderManager_GetDefaultLaunchCacheDir) == 0x000010, "Wrong size on DownloaderManager_GetDefaultLaunchCacheDir");
static_assert(offsetof(DownloaderManager_GetDefaultLaunchCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetDefaultLaunchCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetDefaultLogsCacheDir
// 0x0010 (0x0010 - 0x0000)
struct DownloaderManager_GetDefaultLogsCacheDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetDefaultLogsCacheDir) == 0x000008, "Wrong alignment on DownloaderManager_GetDefaultLogsCacheDir");
static_assert(sizeof(DownloaderManager_GetDefaultLogsCacheDir) == 0x000010, "Wrong size on DownloaderManager_GetDefaultLogsCacheDir");
static_assert(offsetof(DownloaderManager_GetDefaultLogsCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetDefaultLogsCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetDefaultPictureCacheDir
// 0x0010 (0x0010 - 0x0000)
struct DownloaderManager_GetDefaultPictureCacheDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetDefaultPictureCacheDir) == 0x000008, "Wrong alignment on DownloaderManager_GetDefaultPictureCacheDir");
static_assert(sizeof(DownloaderManager_GetDefaultPictureCacheDir) == 0x000010, "Wrong size on DownloaderManager_GetDefaultPictureCacheDir");
static_assert(offsetof(DownloaderManager_GetDefaultPictureCacheDir, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetDefaultPictureCacheDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetIsBackgroundDownload
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_GetIsBackgroundDownload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetIsBackgroundDownload) == 0x000001, "Wrong alignment on DownloaderManager_GetIsBackgroundDownload");
static_assert(sizeof(DownloaderManager_GetIsBackgroundDownload) == 0x000001, "Wrong size on DownloaderManager_GetIsBackgroundDownload");
static_assert(offsetof(DownloaderManager_GetIsBackgroundDownload, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetIsBackgroundDownload::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetLightWeightHttpTaskByURL
// 0x0018 (0x0018 - 0x0000)
struct DownloaderManager_GetLightWeightHttpTaskByURL final
{
public:
	class FString                                 InNecessaryURL;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDownloaderHttpTask*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetLightWeightHttpTaskByURL) == 0x000008, "Wrong alignment on DownloaderManager_GetLightWeightHttpTaskByURL");
static_assert(sizeof(DownloaderManager_GetLightWeightHttpTaskByURL) == 0x000018, "Wrong size on DownloaderManager_GetLightWeightHttpTaskByURL");
static_assert(offsetof(DownloaderManager_GetLightWeightHttpTaskByURL, InNecessaryURL) == 0x000000, "Member 'DownloaderManager_GetLightWeightHttpTaskByURL::InNecessaryURL' has a wrong offset!");
static_assert(offsetof(DownloaderManager_GetLightWeightHttpTaskByURL, ReturnValue) == 0x000010, "Member 'DownloaderManager_GetLightWeightHttpTaskByURL::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetMaxDownloadingSubTaskNum
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetMaxDownloadingSubTaskNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetMaxDownloadingSubTaskNum) == 0x000004, "Wrong alignment on DownloaderManager_GetMaxDownloadingSubTaskNum");
static_assert(sizeof(DownloaderManager_GetMaxDownloadingSubTaskNum) == 0x000004, "Wrong size on DownloaderManager_GetMaxDownloadingSubTaskNum");
static_assert(offsetof(DownloaderManager_GetMaxDownloadingSubTaskNum, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetMaxDownloadingSubTaskNum::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetSubTaskChunkSize
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetSubTaskChunkSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetSubTaskChunkSize) == 0x000004, "Wrong alignment on DownloaderManager_GetSubTaskChunkSize");
static_assert(sizeof(DownloaderManager_GetSubTaskChunkSize) == 0x000004, "Wrong size on DownloaderManager_GetSubTaskChunkSize");
static_assert(offsetof(DownloaderManager_GetSubTaskChunkSize, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetSubTaskChunkSize::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetTextureCacheExpireTime
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetTextureCacheExpireTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetTextureCacheExpireTime) == 0x000004, "Wrong alignment on DownloaderManager_GetTextureCacheExpireTime");
static_assert(sizeof(DownloaderManager_GetTextureCacheExpireTime) == 0x000004, "Wrong size on DownloaderManager_GetTextureCacheExpireTime");
static_assert(offsetof(DownloaderManager_GetTextureCacheExpireTime, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetTextureCacheExpireTime::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetTextureMaxCacheNum
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetTextureMaxCacheNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetTextureMaxCacheNum) == 0x000004, "Wrong alignment on DownloaderManager_GetTextureMaxCacheNum");
static_assert(sizeof(DownloaderManager_GetTextureMaxCacheNum) == 0x000004, "Wrong size on DownloaderManager_GetTextureMaxCacheNum");
static_assert(offsetof(DownloaderManager_GetTextureMaxCacheNum, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetTextureMaxCacheNum::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetTimeOutSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetTimeOutSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetTimeOutSeconds) == 0x000004, "Wrong alignment on DownloaderManager_GetTimeOutSeconds");
static_assert(sizeof(DownloaderManager_GetTimeOutSeconds) == 0x000004, "Wrong size on DownloaderManager_GetTimeOutSeconds");
static_assert(offsetof(DownloaderManager_GetTimeOutSeconds, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetTimeOutSeconds::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlTaskCallbackTimeOutGrowFactor
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor) == 0x000004, "Wrong alignment on DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor");
static_assert(sizeof(DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor) == 0x000004, "Wrong size on DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor");
static_assert(offsetof(DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetUrlTaskCallbackTimeOutGrowFactor::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.GetUrlTaskCallbackTimeOutSeconds
// 0x0004 (0x0004 - 0x0000)
struct DownloaderManager_GetUrlTaskCallbackTimeOutSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_GetUrlTaskCallbackTimeOutSeconds) == 0x000004, "Wrong alignment on DownloaderManager_GetUrlTaskCallbackTimeOutSeconds");
static_assert(sizeof(DownloaderManager_GetUrlTaskCallbackTimeOutSeconds) == 0x000004, "Wrong size on DownloaderManager_GetUrlTaskCallbackTimeOutSeconds");
static_assert(offsetof(DownloaderManager_GetUrlTaskCallbackTimeOutSeconds, ReturnValue) == 0x000000, "Member 'DownloaderManager_GetUrlTaskCallbackTimeOutSeconds::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.IsManagerEnable
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_IsManagerEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_IsManagerEnable) == 0x000001, "Wrong alignment on DownloaderManager_IsManagerEnable");
static_assert(sizeof(DownloaderManager_IsManagerEnable) == 0x000001, "Wrong size on DownloaderManager_IsManagerEnable");
static_assert(offsetof(DownloaderManager_IsManagerEnable, ReturnValue) == 0x000000, "Member 'DownloaderManager_IsManagerEnable::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderManager.IsSystemSupportFileCache
// 0x0001 (0x0001 - 0x0000)
struct DownloaderManager_IsSystemSupportFileCache final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderManager_IsSystemSupportFileCache) == 0x000001, "Wrong alignment on DownloaderManager_IsSystemSupportFileCache");
static_assert(sizeof(DownloaderManager_IsSystemSupportFileCache) == 0x000001, "Wrong size on DownloaderManager_IsSystemSupportFileCache");
static_assert(offsetof(DownloaderManager_IsSystemSupportFileCache, ReturnValue) == 0x000000, "Member 'DownloaderManager_IsSystemSupportFileCache::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderSubTask.OnRealHttpTaskCDNFailed
// 0x0040 (0x0040 - 0x0000)
struct DownloaderSubTask_OnRealHttpTaskCDNFailed final
{
public:
	struct FDownloaderCDNFailedInfo               InCDNFailedInfo;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderSubTask_OnRealHttpTaskCDNFailed) == 0x000008, "Wrong alignment on DownloaderSubTask_OnRealHttpTaskCDNFailed");
static_assert(sizeof(DownloaderSubTask_OnRealHttpTaskCDNFailed) == 0x000040, "Wrong size on DownloaderSubTask_OnRealHttpTaskCDNFailed");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskCDNFailed, InCDNFailedInfo) == 0x000000, "Member 'DownloaderSubTask_OnRealHttpTaskCDNFailed::InCDNFailedInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderSubTask.OnRealHttpTaskFailed
// 0x0008 (0x0008 - 0x0000)
struct DownloaderSubTask_OnRealHttpTaskFailed final
{
public:
	EDTFailedType                                 InFailedType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InErrorCode;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderSubTask_OnRealHttpTaskFailed) == 0x000004, "Wrong alignment on DownloaderSubTask_OnRealHttpTaskFailed");
static_assert(sizeof(DownloaderSubTask_OnRealHttpTaskFailed) == 0x000008, "Wrong size on DownloaderSubTask_OnRealHttpTaskFailed");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskFailed, InFailedType) == 0x000000, "Member 'DownloaderSubTask_OnRealHttpTaskFailed::InFailedType' has a wrong offset!");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskFailed, InErrorCode) == 0x000004, "Member 'DownloaderSubTask_OnRealHttpTaskFailed::InErrorCode' has a wrong offset!");

// Function DownloaderTool.DownloaderSubTask.OnRealHttpTaskProgress
// 0x0008 (0x0008 - 0x0000)
struct DownloaderSubTask_OnRealHttpTaskProgress final
{
public:
	int32                                         InBytesSent;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBytesReceived;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderSubTask_OnRealHttpTaskProgress) == 0x000004, "Wrong alignment on DownloaderSubTask_OnRealHttpTaskProgress");
static_assert(sizeof(DownloaderSubTask_OnRealHttpTaskProgress) == 0x000008, "Wrong size on DownloaderSubTask_OnRealHttpTaskProgress");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskProgress, InBytesSent) == 0x000000, "Member 'DownloaderSubTask_OnRealHttpTaskProgress::InBytesSent' has a wrong offset!");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskProgress, InBytesReceived) == 0x000004, "Member 'DownloaderSubTask_OnRealHttpTaskProgress::InBytesReceived' has a wrong offset!");

// Function DownloaderTool.DownloaderSubTask.OnRealHttpTaskSuccess
// 0x0060 (0x0060 - 0x0000)
struct DownloaderSubTask_OnRealHttpTaskSuccess final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderSubTask_OnRealHttpTaskSuccess) == 0x000008, "Wrong alignment on DownloaderSubTask_OnRealHttpTaskSuccess");
static_assert(sizeof(DownloaderSubTask_OnRealHttpTaskSuccess) == 0x000060, "Wrong size on DownloaderSubTask_OnRealHttpTaskSuccess");
static_assert(offsetof(DownloaderSubTask_OnRealHttpTaskSuccess, InResponse) == 0x000000, "Member 'DownloaderSubTask_OnRealHttpTaskSuccess::InResponse' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnHashCheckFileComplete
// 0x0001 (0x0001 - 0x0000)
struct DownloaderUrlTask_OnHashCheckFileComplete final
{
public:
	bool                                          bHashCheckResult;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnHashCheckFileComplete) == 0x000001, "Wrong alignment on DownloaderUrlTask_OnHashCheckFileComplete");
static_assert(sizeof(DownloaderUrlTask_OnHashCheckFileComplete) == 0x000001, "Wrong size on DownloaderUrlTask_OnHashCheckFileComplete");
static_assert(offsetof(DownloaderUrlTask_OnHashCheckFileComplete, bHashCheckResult) == 0x000000, "Member 'DownloaderUrlTask_OnHashCheckFileComplete::bHashCheckResult' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnMergeFileComplete
// 0x0001 (0x0001 - 0x0000)
struct DownloaderUrlTask_OnMergeFileComplete final
{
public:
	bool                                          bMergeResult;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnMergeFileComplete) == 0x000001, "Wrong alignment on DownloaderUrlTask_OnMergeFileComplete");
static_assert(sizeof(DownloaderUrlTask_OnMergeFileComplete) == 0x000001, "Wrong size on DownloaderUrlTask_OnMergeFileComplete");
static_assert(offsetof(DownloaderUrlTask_OnMergeFileComplete, bMergeResult) == 0x000000, "Member 'DownloaderUrlTask_OnMergeFileComplete::bMergeResult' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnMoveOrCopyFileComplete
// 0x0001 (0x0001 - 0x0000)
struct DownloaderUrlTask_OnMoveOrCopyFileComplete final
{
public:
	bool                                          bMoveOrCopyResult;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnMoveOrCopyFileComplete) == 0x000001, "Wrong alignment on DownloaderUrlTask_OnMoveOrCopyFileComplete");
static_assert(sizeof(DownloaderUrlTask_OnMoveOrCopyFileComplete) == 0x000001, "Wrong size on DownloaderUrlTask_OnMoveOrCopyFileComplete");
static_assert(offsetof(DownloaderUrlTask_OnMoveOrCopyFileComplete, bMoveOrCopyResult) == 0x000000, "Member 'DownloaderUrlTask_OnMoveOrCopyFileComplete::bMoveOrCopyResult' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnSubTaskCDNFailed
// 0x0040 (0x0040 - 0x0000)
struct DownloaderUrlTask_OnSubTaskCDNFailed final
{
public:
	struct FDownloaderCDNFailedInfo               InCDNFailedInfo;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnSubTaskCDNFailed) == 0x000008, "Wrong alignment on DownloaderUrlTask_OnSubTaskCDNFailed");
static_assert(sizeof(DownloaderUrlTask_OnSubTaskCDNFailed) == 0x000040, "Wrong size on DownloaderUrlTask_OnSubTaskCDNFailed");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskCDNFailed, InCDNFailedInfo) == 0x000000, "Member 'DownloaderUrlTask_OnSubTaskCDNFailed::InCDNFailedInfo' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnSubTaskFailed
// 0x0008 (0x0008 - 0x0000)
struct DownloaderUrlTask_OnSubTaskFailed final
{
public:
	EDTFailedType                                 InFailedType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InErrorCode;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnSubTaskFailed) == 0x000004, "Wrong alignment on DownloaderUrlTask_OnSubTaskFailed");
static_assert(sizeof(DownloaderUrlTask_OnSubTaskFailed) == 0x000008, "Wrong size on DownloaderUrlTask_OnSubTaskFailed");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskFailed, InFailedType) == 0x000000, "Member 'DownloaderUrlTask_OnSubTaskFailed::InFailedType' has a wrong offset!");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskFailed, InErrorCode) == 0x000004, "Member 'DownloaderUrlTask_OnSubTaskFailed::InErrorCode' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnSubTaskProgress
// 0x0008 (0x0008 - 0x0000)
struct DownloaderUrlTask_OnSubTaskProgress final
{
public:
	int32                                         InCurBytesSent;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurBytesReceived;                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnSubTaskProgress) == 0x000004, "Wrong alignment on DownloaderUrlTask_OnSubTaskProgress");
static_assert(sizeof(DownloaderUrlTask_OnSubTaskProgress) == 0x000008, "Wrong size on DownloaderUrlTask_OnSubTaskProgress");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskProgress, InCurBytesSent) == 0x000000, "Member 'DownloaderUrlTask_OnSubTaskProgress::InCurBytesSent' has a wrong offset!");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskProgress, InCurBytesReceived) == 0x000004, "Member 'DownloaderUrlTask_OnSubTaskProgress::InCurBytesReceived' has a wrong offset!");

// Function DownloaderTool.DownloaderUrlTask.OnSubTaskSuccess
// 0x0060 (0x0060 - 0x0000)
struct DownloaderUrlTask_OnSubTaskSuccess final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUrlTask_OnSubTaskSuccess) == 0x000008, "Wrong alignment on DownloaderUrlTask_OnSubTaskSuccess");
static_assert(sizeof(DownloaderUrlTask_OnSubTaskSuccess) == 0x000060, "Wrong size on DownloaderUrlTask_OnSubTaskSuccess");
static_assert(offsetof(DownloaderUrlTask_OnSubTaskSuccess, InResponse) == 0x000000, "Member 'DownloaderUrlTask_OnSubTaskSuccess::InResponse' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.AsyncCopyFileFromPak
// 0x0020 (0x0020 - 0x0000)
struct DownloaderUtils_AsyncCopyFileFromPak final
{
public:
	class FString                                 SourceFilePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetFilePath;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_AsyncCopyFileFromPak) == 0x000008, "Wrong alignment on DownloaderUtils_AsyncCopyFileFromPak");
static_assert(sizeof(DownloaderUtils_AsyncCopyFileFromPak) == 0x000020, "Wrong size on DownloaderUtils_AsyncCopyFileFromPak");
static_assert(offsetof(DownloaderUtils_AsyncCopyFileFromPak, SourceFilePath) == 0x000000, "Member 'DownloaderUtils_AsyncCopyFileFromPak::SourceFilePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_AsyncCopyFileFromPak, TargetFilePath) == 0x000010, "Member 'DownloaderUtils_AsyncCopyFileFromPak::TargetFilePath' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.DecodeFileRawData
// 0x0070 (0x0070 - 0x0000)
struct DownloaderUtils_DecodeFileRawData final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_DecodeFileRawData) == 0x000008, "Wrong alignment on DownloaderUtils_DecodeFileRawData");
static_assert(sizeof(DownloaderUtils_DecodeFileRawData) == 0x000070, "Wrong size on DownloaderUtils_DecodeFileRawData");
static_assert(offsetof(DownloaderUtils_DecodeFileRawData, InResponse) == 0x000000, "Member 'DownloaderUtils_DecodeFileRawData::InResponse' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_DecodeFileRawData, ReturnValue) == 0x000060, "Member 'DownloaderUtils_DecodeFileRawData::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.EncodeUrl
// 0x0020 (0x0020 - 0x0000)
struct DownloaderUtils_EncodeUrl final
{
public:
	class FString                                 InUnencodeUrl;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_EncodeUrl) == 0x000008, "Wrong alignment on DownloaderUtils_EncodeUrl");
static_assert(sizeof(DownloaderUtils_EncodeUrl) == 0x000020, "Wrong size on DownloaderUtils_EncodeUrl");
static_assert(offsetof(DownloaderUtils_EncodeUrl, InUnencodeUrl) == 0x000000, "Member 'DownloaderUtils_EncodeUrl::InUnencodeUrl' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_EncodeUrl, ReturnValue) == 0x000010, "Member 'DownloaderUtils_EncodeUrl::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.ExtractFileNameAndExtensionFromFileFullName
// 0x0030 (0x0030 - 0x0000)
struct DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName final
{
public:
	class FString                                 InFileFullName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFileName;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFileExtension;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName) == 0x000008, "Wrong alignment on DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName");
static_assert(sizeof(DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName) == 0x000030, "Wrong size on DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName");
static_assert(offsetof(DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName, InFileFullName) == 0x000000, "Member 'DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName::InFileFullName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName, OutFileName) == 0x000010, "Member 'DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName::OutFileName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName, OutFileExtension) == 0x000020, "Member 'DownloaderUtils_ExtractFileNameAndExtensionFromFileFullName::OutFileExtension' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetAllTaskNameLogStr
// 0x0050 (0x0050 - 0x0000)
struct DownloaderUtils_GetAllTaskNameLogStr final
{
public:
	class FString                                 InMainTaskName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUrlTaskName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSubTaskName;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InHttpTaskName;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetAllTaskNameLogStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetAllTaskNameLogStr");
static_assert(sizeof(DownloaderUtils_GetAllTaskNameLogStr) == 0x000050, "Wrong size on DownloaderUtils_GetAllTaskNameLogStr");
static_assert(offsetof(DownloaderUtils_GetAllTaskNameLogStr, InMainTaskName) == 0x000000, "Member 'DownloaderUtils_GetAllTaskNameLogStr::InMainTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetAllTaskNameLogStr, InUrlTaskName) == 0x000010, "Member 'DownloaderUtils_GetAllTaskNameLogStr::InUrlTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetAllTaskNameLogStr, InSubTaskName) == 0x000020, "Member 'DownloaderUtils_GetAllTaskNameLogStr::InSubTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetAllTaskNameLogStr, InHttpTaskName) == 0x000030, "Member 'DownloaderUtils_GetAllTaskNameLogStr::InHttpTaskName' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetAllTaskNameLogStr, ReturnValue) == 0x000040, "Member 'DownloaderUtils_GetAllTaskNameLogStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetBodyFromJsonRequestStr
// 0x0020 (0x0020 - 0x0000)
struct DownloaderUtils_GetBodyFromJsonRequestStr final
{
public:
	class FString                                 JsonRequestStr;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetBodyFromJsonRequestStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetBodyFromJsonRequestStr");
static_assert(sizeof(DownloaderUtils_GetBodyFromJsonRequestStr) == 0x000020, "Wrong size on DownloaderUtils_GetBodyFromJsonRequestStr");
static_assert(offsetof(DownloaderUtils_GetBodyFromJsonRequestStr, JsonRequestStr) == 0x000000, "Member 'DownloaderUtils_GetBodyFromJsonRequestStr::JsonRequestStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetBodyFromJsonRequestStr, ReturnValue) == 0x000010, "Member 'DownloaderUtils_GetBodyFromJsonRequestStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetCurTimeMilliSecond
// 0x0008 (0x0008 - 0x0000)
struct DownloaderUtils_GetCurTimeMilliSecond final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetCurTimeMilliSecond) == 0x000008, "Wrong alignment on DownloaderUtils_GetCurTimeMilliSecond");
static_assert(sizeof(DownloaderUtils_GetCurTimeMilliSecond) == 0x000008, "Wrong size on DownloaderUtils_GetCurTimeMilliSecond");
static_assert(offsetof(DownloaderUtils_GetCurTimeMilliSecond, ReturnValue) == 0x000000, "Member 'DownloaderUtils_GetCurTimeMilliSecond::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetFailedTypeStr
// 0x0018 (0x0018 - 0x0000)
struct DownloaderUtils_GetFailedTypeStr final
{
public:
	EDTFailedType                                 InFailedType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetFailedTypeStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetFailedTypeStr");
static_assert(sizeof(DownloaderUtils_GetFailedTypeStr) == 0x000018, "Wrong size on DownloaderUtils_GetFailedTypeStr");
static_assert(offsetof(DownloaderUtils_GetFailedTypeStr, InFailedType) == 0x000000, "Member 'DownloaderUtils_GetFailedTypeStr::InFailedType' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetFailedTypeStr, ReturnValue) == 0x000008, "Member 'DownloaderUtils_GetFailedTypeStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetHeadersFromJsonRequestStr
// 0x0060 (0x0060 - 0x0000)
struct DownloaderUtils_GetHeadersFromJsonRequestStr final
{
public:
	class FString                                 JsonRequestStr;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetHeadersFromJsonRequestStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetHeadersFromJsonRequestStr");
static_assert(sizeof(DownloaderUtils_GetHeadersFromJsonRequestStr) == 0x000060, "Wrong size on DownloaderUtils_GetHeadersFromJsonRequestStr");
static_assert(offsetof(DownloaderUtils_GetHeadersFromJsonRequestStr, JsonRequestStr) == 0x000000, "Member 'DownloaderUtils_GetHeadersFromJsonRequestStr::JsonRequestStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetHeadersFromJsonRequestStr, ReturnValue) == 0x000010, "Member 'DownloaderUtils_GetHeadersFromJsonRequestStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetHttpMethodTypeStr
// 0x0018 (0x0018 - 0x0000)
struct DownloaderUtils_GetHttpMethodTypeStr final
{
public:
	EDownloaderHttpMethod                         InHttpMethod;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetHttpMethodTypeStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetHttpMethodTypeStr");
static_assert(sizeof(DownloaderUtils_GetHttpMethodTypeStr) == 0x000018, "Wrong size on DownloaderUtils_GetHttpMethodTypeStr");
static_assert(offsetof(DownloaderUtils_GetHttpMethodTypeStr, InHttpMethod) == 0x000000, "Member 'DownloaderUtils_GetHttpMethodTypeStr::InHttpMethod' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetHttpMethodTypeStr, ReturnValue) == 0x000008, "Member 'DownloaderUtils_GetHttpMethodTypeStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetQueriesFromJsonRequestStr
// 0x0060 (0x0060 - 0x0000)
struct DownloaderUtils_GetQueriesFromJsonRequestStr final
{
public:
	class FString                                 JsonRequestStr;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetQueriesFromJsonRequestStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetQueriesFromJsonRequestStr");
static_assert(sizeof(DownloaderUtils_GetQueriesFromJsonRequestStr) == 0x000060, "Wrong size on DownloaderUtils_GetQueriesFromJsonRequestStr");
static_assert(offsetof(DownloaderUtils_GetQueriesFromJsonRequestStr, JsonRequestStr) == 0x000000, "Member 'DownloaderUtils_GetQueriesFromJsonRequestStr::JsonRequestStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetQueriesFromJsonRequestStr, ReturnValue) == 0x000010, "Member 'DownloaderUtils_GetQueriesFromJsonRequestStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetTaskInfoLogStr
// 0x00C8 (0x00C8 - 0x0000)
struct DownloaderUtils_GetTaskInfoLogStr final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetTaskInfoLogStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetTaskInfoLogStr");
static_assert(sizeof(DownloaderUtils_GetTaskInfoLogStr) == 0x0000C8, "Wrong size on DownloaderUtils_GetTaskInfoLogStr");
static_assert(offsetof(DownloaderUtils_GetTaskInfoLogStr, InTaskInfo) == 0x000000, "Member 'DownloaderUtils_GetTaskInfoLogStr::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetTaskInfoLogStr, ReturnValue) == 0x0000B8, "Member 'DownloaderUtils_GetTaskInfoLogStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.GetVerbFromJsonRequestStr
// 0x0020 (0x0020 - 0x0000)
struct DownloaderUtils_GetVerbFromJsonRequestStr final
{
public:
	class FString                                 JsonRequestStr;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_GetVerbFromJsonRequestStr) == 0x000008, "Wrong alignment on DownloaderUtils_GetVerbFromJsonRequestStr");
static_assert(sizeof(DownloaderUtils_GetVerbFromJsonRequestStr) == 0x000020, "Wrong size on DownloaderUtils_GetVerbFromJsonRequestStr");
static_assert(offsetof(DownloaderUtils_GetVerbFromJsonRequestStr, JsonRequestStr) == 0x000000, "Member 'DownloaderUtils_GetVerbFromJsonRequestStr::JsonRequestStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_GetVerbFromJsonRequestStr, ReturnValue) == 0x000010, "Member 'DownloaderUtils_GetVerbFromJsonRequestStr::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.HashCheckFile
// 0x0028 (0x0028 - 0x0000)
struct DownloaderUtils_HashCheckFile final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InHashStr;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_HashCheckFile) == 0x000008, "Wrong alignment on DownloaderUtils_HashCheckFile");
static_assert(sizeof(DownloaderUtils_HashCheckFile) == 0x000028, "Wrong size on DownloaderUtils_HashCheckFile");
static_assert(offsetof(DownloaderUtils_HashCheckFile, InFilePath) == 0x000000, "Member 'DownloaderUtils_HashCheckFile::InFilePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_HashCheckFile, InHashStr) == 0x000010, "Member 'DownloaderUtils_HashCheckFile::InHashStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_HashCheckFile, ReturnValue) == 0x000020, "Member 'DownloaderUtils_HashCheckFile::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.HashStringWithSHA1
// 0x0020 (0x0020 - 0x0000)
struct DownloaderUtils_HashStringWithSHA1 final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_HashStringWithSHA1) == 0x000008, "Wrong alignment on DownloaderUtils_HashStringWithSHA1");
static_assert(sizeof(DownloaderUtils_HashStringWithSHA1) == 0x000020, "Wrong size on DownloaderUtils_HashStringWithSHA1");
static_assert(offsetof(DownloaderUtils_HashStringWithSHA1, inString) == 0x000000, "Member 'DownloaderUtils_HashStringWithSHA1::inString' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_HashStringWithSHA1, ReturnValue) == 0x000010, "Member 'DownloaderUtils_HashStringWithSHA1::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.SafeWriteToFile
// 0x0028 (0x0028 - 0x0000)
struct DownloaderUtils_SafeWriteToFile final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContent;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAppend;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReplaceOld;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_SafeWriteToFile) == 0x000008, "Wrong alignment on DownloaderUtils_SafeWriteToFile");
static_assert(sizeof(DownloaderUtils_SafeWriteToFile) == 0x000028, "Wrong size on DownloaderUtils_SafeWriteToFile");
static_assert(offsetof(DownloaderUtils_SafeWriteToFile, InFilePath) == 0x000000, "Member 'DownloaderUtils_SafeWriteToFile::InFilePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_SafeWriteToFile, InContent) == 0x000010, "Member 'DownloaderUtils_SafeWriteToFile::InContent' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_SafeWriteToFile, bInAppend) == 0x000020, "Member 'DownloaderUtils_SafeWriteToFile::bInAppend' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_SafeWriteToFile, bInReplaceOld) == 0x000021, "Member 'DownloaderUtils_SafeWriteToFile::bInReplaceOld' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.StringFileRawData
// 0x0070 (0x0070 - 0x0000)
struct DownloaderUtils_StringFileRawData final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloaderUtils_StringFileRawData) == 0x000008, "Wrong alignment on DownloaderUtils_StringFileRawData");
static_assert(sizeof(DownloaderUtils_StringFileRawData) == 0x000070, "Wrong size on DownloaderUtils_StringFileRawData");
static_assert(offsetof(DownloaderUtils_StringFileRawData, InResponse) == 0x000000, "Member 'DownloaderUtils_StringFileRawData::InResponse' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_StringFileRawData, ReturnValue) == 0x000060, "Member 'DownloaderUtils_StringFileRawData::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TryDeleteOldFileAndCreateDir
// 0x0018 (0x0018 - 0x0000)
struct DownloaderUtils_TryDeleteOldFileAndCreateDir final
{
public:
	class FString                                 InFileFullPath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TryDeleteOldFileAndCreateDir) == 0x000008, "Wrong alignment on DownloaderUtils_TryDeleteOldFileAndCreateDir");
static_assert(sizeof(DownloaderUtils_TryDeleteOldFileAndCreateDir) == 0x000018, "Wrong size on DownloaderUtils_TryDeleteOldFileAndCreateDir");
static_assert(offsetof(DownloaderUtils_TryDeleteOldFileAndCreateDir, InFileFullPath) == 0x000000, "Member 'DownloaderUtils_TryDeleteOldFileAndCreateDir::InFileFullPath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryDeleteOldFileAndCreateDir, ReturnValue) == 0x000010, "Member 'DownloaderUtils_TryDeleteOldFileAndCreateDir::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TryGetJsonStrFromDownloaderReqJson
// 0x00D0 (0x00D0 - 0x0000)
struct DownloaderUtils_TryGetJsonStrFromDownloaderReqJson final
{
public:
	struct FDownloaderReqJson                     InReqJson;                                         // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutReqStr;                                         // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TryGetJsonStrFromDownloaderReqJson) == 0x000008, "Wrong alignment on DownloaderUtils_TryGetJsonStrFromDownloaderReqJson");
static_assert(sizeof(DownloaderUtils_TryGetJsonStrFromDownloaderReqJson) == 0x0000D0, "Wrong size on DownloaderUtils_TryGetJsonStrFromDownloaderReqJson");
static_assert(offsetof(DownloaderUtils_TryGetJsonStrFromDownloaderReqJson, InReqJson) == 0x000000, "Member 'DownloaderUtils_TryGetJsonStrFromDownloaderReqJson::InReqJson' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetJsonStrFromDownloaderReqJson, OutReqStr) == 0x0000B8, "Member 'DownloaderUtils_TryGetJsonStrFromDownloaderReqJson::OutReqStr' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetJsonStrFromDownloaderReqJson, ReturnValue) == 0x0000C8, "Member 'DownloaderUtils_TryGetJsonStrFromDownloaderReqJson::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TryGetResponseFromCache
// 0x0130 (0x0130 - 0x0000)
struct DownloaderUtils_TryGetResponseFromCache final
{
public:
	struct FDownloaderTaskInfo                    InTaskInfo;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InCachePath;                                       // 0x00B8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDownloaderResponse                    OutResponse;                                       // 0x00C8(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TryGetResponseFromCache) == 0x000008, "Wrong alignment on DownloaderUtils_TryGetResponseFromCache");
static_assert(sizeof(DownloaderUtils_TryGetResponseFromCache) == 0x000130, "Wrong size on DownloaderUtils_TryGetResponseFromCache");
static_assert(offsetof(DownloaderUtils_TryGetResponseFromCache, InTaskInfo) == 0x000000, "Member 'DownloaderUtils_TryGetResponseFromCache::InTaskInfo' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetResponseFromCache, InCachePath) == 0x0000B8, "Member 'DownloaderUtils_TryGetResponseFromCache::InCachePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetResponseFromCache, OutResponse) == 0x0000C8, "Member 'DownloaderUtils_TryGetResponseFromCache::OutResponse' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetResponseFromCache, ReturnValue) == 0x000128, "Member 'DownloaderUtils_TryGetResponseFromCache::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TryGetUrlTaskRecordFromFile
// 0x0028 (0x0028 - 0x0000)
struct DownloaderUtils_TryGetUrlTaskRecordFromFile final
{
public:
	class FString                                 InUrlTaskRecordFilePath;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUrlTaskRecordInfo                     OutUrlTaskRecordInfo;                              // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TryGetUrlTaskRecordFromFile) == 0x000008, "Wrong alignment on DownloaderUtils_TryGetUrlTaskRecordFromFile");
static_assert(sizeof(DownloaderUtils_TryGetUrlTaskRecordFromFile) == 0x000028, "Wrong size on DownloaderUtils_TryGetUrlTaskRecordFromFile");
static_assert(offsetof(DownloaderUtils_TryGetUrlTaskRecordFromFile, InUrlTaskRecordFilePath) == 0x000000, "Member 'DownloaderUtils_TryGetUrlTaskRecordFromFile::InUrlTaskRecordFilePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetUrlTaskRecordFromFile, OutUrlTaskRecordInfo) == 0x000010, "Member 'DownloaderUtils_TryGetUrlTaskRecordFromFile::OutUrlTaskRecordInfo' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryGetUrlTaskRecordFromFile, ReturnValue) == 0x000020, "Member 'DownloaderUtils_TryGetUrlTaskRecordFromFile::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TrySaveResponseToCache
// 0x0078 (0x0078 - 0x0000)
struct DownloaderUtils_TrySaveResponseToCache final
{
public:
	struct FDownloaderResponse                    InResponse;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InCachePath;                                       // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TrySaveResponseToCache) == 0x000008, "Wrong alignment on DownloaderUtils_TrySaveResponseToCache");
static_assert(sizeof(DownloaderUtils_TrySaveResponseToCache) == 0x000078, "Wrong size on DownloaderUtils_TrySaveResponseToCache");
static_assert(offsetof(DownloaderUtils_TrySaveResponseToCache, InResponse) == 0x000000, "Member 'DownloaderUtils_TrySaveResponseToCache::InResponse' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TrySaveResponseToCache, InCachePath) == 0x000060, "Member 'DownloaderUtils_TrySaveResponseToCache::InCachePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TrySaveResponseToCache, ReturnValue) == 0x000070, "Member 'DownloaderUtils_TrySaveResponseToCache::ReturnValue' has a wrong offset!");

// Function DownloaderTool.DownloaderUtils.TryUpdateUrlTaskRecordFile
// 0x0028 (0x0028 - 0x0000)
struct DownloaderUtils_TryUpdateUrlTaskRecordFile final
{
public:
	class FString                                 InUrlTaskRecordFilePath;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUrlTaskRecordInfo                     InUrlTaskRecordInfo;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloaderUtils_TryUpdateUrlTaskRecordFile) == 0x000008, "Wrong alignment on DownloaderUtils_TryUpdateUrlTaskRecordFile");
static_assert(sizeof(DownloaderUtils_TryUpdateUrlTaskRecordFile) == 0x000028, "Wrong size on DownloaderUtils_TryUpdateUrlTaskRecordFile");
static_assert(offsetof(DownloaderUtils_TryUpdateUrlTaskRecordFile, InUrlTaskRecordFilePath) == 0x000000, "Member 'DownloaderUtils_TryUpdateUrlTaskRecordFile::InUrlTaskRecordFilePath' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryUpdateUrlTaskRecordFile, InUrlTaskRecordInfo) == 0x000010, "Member 'DownloaderUtils_TryUpdateUrlTaskRecordFile::InUrlTaskRecordInfo' has a wrong offset!");
static_assert(offsetof(DownloaderUtils_TryUpdateUrlTaskRecordFile, ReturnValue) == 0x000020, "Member 'DownloaderUtils_TryUpdateUrlTaskRecordFile::ReturnValue' has a wrong offset!");

}

