#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum KawaiiPhysics.EXPBDComplianceType
// NumValues: 0x0008
enum class EXPBDComplianceType : uint8
{
	Concrete                                 = 0,
	Wood                                     = 1,
	Leather                                  = 2,
	Tendon                                   = 3,
	Rubber                                   = 4,
	Muscle                                   = 5,
	Fat                                      = 6,
	EXPBDComplianceType_MAX                  = 7,
};

// Enum KawaiiPhysics.EConstraintAdjustType
// NumValues: 0x0004
enum class EConstraintAdjustType : uint8
{
	CAT_Default                              = 0,
	CAT_OnlyAdjustByCollision                = 1,
	CAT_All                                  = 2,
	CAT_Max                                  = 3,
};

// Enum KawaiiPhysics.EDefaultBoneType
// NumValues: 0x0009
enum class EDefaultBoneType : uint8
{
	DB_TypeDefault                           = 0,
	DB_Type0                                 = 1,
	DB_Type1                                 = 2,
	DB_Type2                                 = 3,
	DB_Type3                                 = 4,
	DB_Type4                                 = 5,
	DB_Type5                                 = 6,
	DB_Type6                                 = 7,
	DB_Max                                   = 8,
};

// Enum KawaiiPhysics.EPhysicsSettingType
// NumValues: 0x000B
enum class EPhysicsSettingType : uint8
{
	PS_Default                               = 0,
	PS_Type1                                 = 1,
	PS_Type2                                 = 2,
	PS_Type3                                 = 3,
	PS_Type4                                 = 4,
	PS_Type5                                 = 5,
	PS_Type6                                 = 6,
	PS_Type7                                 = 7,
	PS_Type8                                 = 8,
	PS_Type9                                 = 9,
	PS_Max                                   = 10,
};

// Enum KawaiiPhysics.EAngleLimitShape
// NumValues: 0x0004
enum class EAngleLimitShape : uint8
{
	AL_CircularCone                          = 0,
	AL_EllipsoidalCone                       = 1,
	AL_EllipsoidalConeKeepLargeAngle         = 2,
	AL_MAX                                   = 3,
};

// Enum KawaiiPhysics.ESimulateTransformSpace
// NumValues: 0x0003
enum class ESimulateTransformSpace : uint8
{
	STS_Actor                                = 0,
	STS_Component                            = 1,
	STS_MAX                                  = 2,
};

// Enum KawaiiPhysics.ECollisionSourceType
// NumValues: 0x0004
enum class ECollisionSourceType : uint8
{
	AnimNode                                 = 0,
	DataAsset                                = 1,
	PhysicsAsset                             = 2,
	ECollisionSourceType_MAX                 = 3,
};

// Enum KawaiiPhysics.ECollisionLimitType
// NumValues: 0x0006
enum class ECollisionLimitType : uint8
{
	None                                     = 0,
	Spherical                                = 1,
	Capsule                                  = 2,
	Box                                      = 3,
	Planar                                   = 4,
	ECollisionLimitType_MAX                  = 5,
};

// Enum KawaiiPhysics.EBoneCollisionType
// NumValues: 0x0003
enum class EBoneCollisionType : uint8
{
	Spherical                                = 0,
	Box                                      = 1,
	EBoneCollisionType_MAX                   = 2,
};

// Enum KawaiiPhysics.EBoneForwardAxis
// NumValues: 0x0007
enum class EBoneForwardAxis : uint8
{
	X_Positive                               = 0,
	X_Negative                               = 1,
	Y_Positive                               = 2,
	Y_Negative                               = 3,
	Z_Positive                               = 4,
	Z_Negative                               = 5,
	EBoneForwardAxis_MAX                     = 6,
};

// Enum KawaiiPhysics.EPlanarConstraint
// NumValues: 0x0005
enum class EPlanarConstraint : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EPlanarConstraint_MAX                    = 4,
};

// Enum KawaiiPhysics.EExternalForceCurveEvaluateType
// NumValues: 0x0004
enum class EExternalForceCurveEvaluateType : uint8
{
	Single                                   = 0,
	Average                                  = 1,
	Max                                      = 2,
	Min                                      = 3,
};

// Enum KawaiiPhysics.EExternalForceSpace
// NumValues: 0x0004
enum class EExternalForceSpace : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	BoneSpace                                = 2,
	EExternalForceSpace_MAX                  = 3,
};

// ScriptStruct KawaiiPhysics.KawaiiPhysics_ExternalForce
// 0x00B0 (0x00B0 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FKawaiiPhysics_ExternalForce
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 ApplyBoneFilter;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IgnoreBoneFilter;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalForceSpace                           ExternalForceSpace;                                // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         RandomForceScaleRange;                             // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ExternalOwner;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneShot;                                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomizedForceScale;                              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Force;                                             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ComponentTransform;                                // 0x0070(0x0030)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanSelectForceSpace;                              // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FKawaiiPhysics_ExternalForce) == 0x000010, "Wrong alignment on FKawaiiPhysics_ExternalForce");
static_assert(sizeof(FKawaiiPhysics_ExternalForce) == 0x0000B0, "Wrong size on FKawaiiPhysics_ExternalForce");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, bIsEnabled) == 0x000010, "Member 'FKawaiiPhysics_ExternalForce::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, bDrawDebug) == 0x000011, "Member 'FKawaiiPhysics_ExternalForce::bDrawDebug' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, ApplyBoneFilter) == 0x000018, "Member 'FKawaiiPhysics_ExternalForce::ApplyBoneFilter' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, IgnoreBoneFilter) == 0x000028, "Member 'FKawaiiPhysics_ExternalForce::IgnoreBoneFilter' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, ExternalForceSpace) == 0x000038, "Member 'FKawaiiPhysics_ExternalForce::ExternalForceSpace' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, RandomForceScaleRange) == 0x00003C, "Member 'FKawaiiPhysics_ExternalForce::RandomForceScaleRange' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, ExternalOwner) == 0x000048, "Member 'FKawaiiPhysics_ExternalForce::ExternalOwner' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, bIsOneShot) == 0x000050, "Member 'FKawaiiPhysics_ExternalForce::bIsOneShot' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, RandomizedForceScale) == 0x000054, "Member 'FKawaiiPhysics_ExternalForce::RandomizedForceScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, Force) == 0x000058, "Member 'FKawaiiPhysics_ExternalForce::Force' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, ComponentTransform) == 0x000070, "Member 'FKawaiiPhysics_ExternalForce::ComponentTransform' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce, bCanSelectForceSpace) == 0x0000A0, "Member 'FKawaiiPhysics_ExternalForce::bCanSelectForceSpace' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysics_ExternalForce_Basic
// 0x00A0 (0x0150 - 0x00B0)
struct FKawaiiPhysics_ExternalForce_Basic final : public FKawaiiPhysics_ExternalForce
{
public:
	struct FVector                                ForceDir;                                          // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ForceRateByBoneLengthRate;                         // 0x00B8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevTime;                                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysics_ExternalForce_Basic) == 0x000010, "Wrong alignment on FKawaiiPhysics_ExternalForce_Basic");
static_assert(sizeof(FKawaiiPhysics_ExternalForce_Basic) == 0x000150, "Wrong size on FKawaiiPhysics_ExternalForce_Basic");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Basic, ForceDir) == 0x0000A8, "Member 'FKawaiiPhysics_ExternalForce_Basic::ForceDir' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Basic, ForceRateByBoneLengthRate) == 0x0000B8, "Member 'FKawaiiPhysics_ExternalForce_Basic::ForceRateByBoneLengthRate' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Basic, Interval) == 0x000140, "Member 'FKawaiiPhysics_ExternalForce_Basic::Interval' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Basic, Time) == 0x000144, "Member 'FKawaiiPhysics_ExternalForce_Basic::Time' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Basic, PrevTime) == 0x000148, "Member 'FKawaiiPhysics_ExternalForce_Basic::PrevTime' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsRootBoneSetting
// 0x0028 (0x0028 - 0x0000)
struct FKawaiiPhysicsRootBoneSetting final
{
public:
	struct FBoneReference                         RootBone;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 OverrideExcludeBones;                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverrideExcludeBones;                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysicsRootBoneSetting) == 0x000008, "Wrong alignment on FKawaiiPhysicsRootBoneSetting");
static_assert(sizeof(FKawaiiPhysicsRootBoneSetting) == 0x000028, "Wrong size on FKawaiiPhysicsRootBoneSetting");
static_assert(offsetof(FKawaiiPhysicsRootBoneSetting, RootBone) == 0x000000, "Member 'FKawaiiPhysicsRootBoneSetting::RootBone' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsRootBoneSetting, OverrideExcludeBones) == 0x000010, "Member 'FKawaiiPhysicsRootBoneSetting::OverrideExcludeBones' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsRootBoneSetting, bUseOverrideExcludeBones) == 0x000020, "Member 'FKawaiiPhysicsRootBoneSetting::bUseOverrideExcludeBones' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsSettings
// 0x0024 (0x0024 - 0x0000)
struct FKawaiiPhysicsSettings final
{
public:
	float                                         Damping;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingLocation;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingRotation;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngle;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAngleLimitShape                              AngleLimitShape;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitAngle2;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKawaiiPhysicsSettings) == 0x000004, "Wrong alignment on FKawaiiPhysicsSettings");
static_assert(sizeof(FKawaiiPhysicsSettings) == 0x000024, "Wrong size on FKawaiiPhysicsSettings");
static_assert(offsetof(FKawaiiPhysicsSettings, Damping) == 0x000000, "Member 'FKawaiiPhysicsSettings::Damping' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Stiffness) == 0x000004, "Member 'FKawaiiPhysicsSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingLocation) == 0x000008, "Member 'FKawaiiPhysicsSettings::WorldDampingLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingRotation) == 0x00000C, "Member 'FKawaiiPhysicsSettings::WorldDampingRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Radius) == 0x000010, "Member 'FKawaiiPhysicsSettings::Radius' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, LimitAngle) == 0x000014, "Member 'FKawaiiPhysicsSettings::LimitAngle' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, AngleLimitShape) == 0x000018, "Member 'FKawaiiPhysicsSettings::AngleLimitShape' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, LimitAngle2) == 0x00001C, "Member 'FKawaiiPhysicsSettings::LimitAngle2' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, BlendTime) == 0x000020, "Member 'FKawaiiPhysicsSettings::BlendTime' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiBoneLimitAngleSettings
// 0x001C (0x001C - 0x0000)
struct FKawaiiBoneLimitAngleSettings final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotator;                                      // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKawaiiBoneLimitAngleSettings) == 0x000004, "Wrong alignment on FKawaiiBoneLimitAngleSettings");
static_assert(sizeof(FKawaiiBoneLimitAngleSettings) == 0x00001C, "Wrong size on FKawaiiBoneLimitAngleSettings");
static_assert(offsetof(FKawaiiBoneLimitAngleSettings, BoneRef) == 0x000000, "Member 'FKawaiiBoneLimitAngleSettings::BoneRef' has a wrong offset!");
static_assert(offsetof(FKawaiiBoneLimitAngleSettings, LocalRotator) == 0x000010, "Member 'FKawaiiBoneLimitAngleSettings::LocalRotator' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiBonePhysicsSettings
// 0x0028 (0x0028 - 0x0000)
struct FKawaiiBonePhysicsSettings final
{
public:
	struct FKawaiiPhysicsSettings                 PhysicsSetting;                                    // 0x0000(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OverridePhysicsSetting;                            // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePhysicsInherit;                             // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiBonePhysicsSettings) == 0x000004, "Wrong alignment on FKawaiiBonePhysicsSettings");
static_assert(sizeof(FKawaiiBonePhysicsSettings) == 0x000028, "Wrong size on FKawaiiBonePhysicsSettings");
static_assert(offsetof(FKawaiiBonePhysicsSettings, PhysicsSetting) == 0x000000, "Member 'FKawaiiBonePhysicsSettings::PhysicsSetting' has a wrong offset!");
static_assert(offsetof(FKawaiiBonePhysicsSettings, OverridePhysicsSetting) == 0x000024, "Member 'FKawaiiBonePhysicsSettings::OverridePhysicsSetting' has a wrong offset!");
static_assert(offsetof(FKawaiiBonePhysicsSettings, bEnablePhysicsInherit) == 0x000025, "Member 'FKawaiiBonePhysicsSettings::bEnablePhysicsInherit' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CollisionLimitBase
// 0x0060 (0x0060 - 0x0000)
struct FCollisionLimitBase
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionSourceType                          SourceType;                                        // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollisionLimitBase) == 0x000010, "Wrong alignment on FCollisionLimitBase");
static_assert(sizeof(FCollisionLimitBase) == 0x000060, "Wrong size on FCollisionLimitBase");
static_assert(offsetof(FCollisionLimitBase, DrivingBone) == 0x000000, "Member 'FCollisionLimitBase::DrivingBone' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetLocation) == 0x000010, "Member 'FCollisionLimitBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetRotation) == 0x00001C, "Member 'FCollisionLimitBase::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Location) == 0x000028, "Member 'FCollisionLimitBase::Location' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Rotation) == 0x000040, "Member 'FCollisionLimitBase::Rotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, bEnable) == 0x000050, "Member 'FCollisionLimitBase::bEnable' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, SourceType) == 0x000051, "Member 'FCollisionLimitBase::SourceType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.SphericalLimit
// 0x0010 (0x0070 - 0x0060)
struct FSphericalLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalLimit) == 0x000010, "Wrong alignment on FSphericalLimit");
static_assert(sizeof(FSphericalLimit) == 0x000070, "Wrong size on FSphericalLimit");
static_assert(offsetof(FSphericalLimit, Radius) == 0x000060, "Member 'FSphericalLimit::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalLimit, LimitType) == 0x000064, "Member 'FSphericalLimit::LimitType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CapsuleLimit
// 0x0010 (0x0070 - 0x0060)
struct FCapsuleLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleLimit) == 0x000010, "Wrong alignment on FCapsuleLimit");
static_assert(sizeof(FCapsuleLimit) == 0x000070, "Wrong size on FCapsuleLimit");
static_assert(offsetof(FCapsuleLimit, Radius) == 0x000060, "Member 'FCapsuleLimit::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleLimit, Length) == 0x000064, "Member 'FCapsuleLimit::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.BoxLimit
// 0x0010 (0x0070 - 0x0060)
struct FBoxLimit final : public FCollisionLimitBase
{
public:
	struct FVector                                Extent;                                            // 0x0060(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxLimit) == 0x000010, "Wrong alignment on FBoxLimit");
static_assert(sizeof(FBoxLimit) == 0x000070, "Wrong size on FBoxLimit");
static_assert(offsetof(FBoxLimit, Extent) == 0x000060, "Member 'FBoxLimit::Extent' has a wrong offset!");

// ScriptStruct KawaiiPhysics.PlanarLimit
// 0x0010 (0x0070 - 0x0060)
struct FPlanarLimit final : public FCollisionLimitBase
{
public:
	struct FPlane                                 Plane;                                             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanarLimit) == 0x000010, "Wrong alignment on FPlanarLimit");
static_assert(sizeof(FPlanarLimit) == 0x000070, "Wrong size on FPlanarLimit");
static_assert(offsetof(FPlanarLimit, Plane) == 0x000060, "Member 'FPlanarLimit::Plane' has a wrong offset!");

// ScriptStruct KawaiiPhysics.ModifyBoneConstraint
// 0x0090 (0x0090 - 0x0000)
struct FModifyBoneConstraint final
{
public:
	struct FBoneReference                         Bone1;                                             // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Bone2;                                             // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideCompliance;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           ComplianceType;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConstraintAdjustType                         ConstraintAdjustType;                              // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisSQThresholdForLiftUp;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             SupportCollisionBoneNames;                         // 0x0028(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         ModifyBoneIndex1;                                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifyBoneIndex2;                                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDummy;                                          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lambda;                                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModifyBoneConstraint) == 0x000008, "Wrong alignment on FModifyBoneConstraint");
static_assert(sizeof(FModifyBoneConstraint) == 0x000090, "Wrong size on FModifyBoneConstraint");
static_assert(offsetof(FModifyBoneConstraint, Bone1) == 0x000000, "Member 'FModifyBoneConstraint::Bone1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Bone2) == 0x000010, "Member 'FModifyBoneConstraint::Bone2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, bOverrideCompliance) == 0x000020, "Member 'FModifyBoneConstraint::bOverrideCompliance' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ComplianceType) == 0x000021, "Member 'FModifyBoneConstraint::ComplianceType' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ConstraintAdjustType) == 0x000022, "Member 'FModifyBoneConstraint::ConstraintAdjustType' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, DisSQThresholdForLiftUp) == 0x000024, "Member 'FModifyBoneConstraint::DisSQThresholdForLiftUp' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, SupportCollisionBoneNames) == 0x000028, "Member 'FModifyBoneConstraint::SupportCollisionBoneNames' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ModifyBoneIndex1) == 0x000078, "Member 'FModifyBoneConstraint::ModifyBoneIndex1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ModifyBoneIndex2) == 0x00007C, "Member 'FModifyBoneConstraint::ModifyBoneIndex2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Length) == 0x000080, "Member 'FModifyBoneConstraint::Length' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, bIsDummy) == 0x000084, "Member 'FModifyBoneConstraint::bIsDummy' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Lambda) == 0x000088, "Member 'FModifyBoneConstraint::Lambda' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysics_ExternalForce_Curve
// 0x0230 (0x02E0 - 0x00B0)
struct FKawaiiPhysics_ExternalForce_Curve final : public FKawaiiPhysics_ExternalForce
{
public:
	struct FRuntimeVectorCurve                    ForceCurve;                                        // 0x00A8(0x0188)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EExternalForceCurveEvaluateType               CurveEvaluateType;                                 // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubstepCount;                                      // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ForceRateByBoneLengthRate;                         // 0x0240(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevTime;                                          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxCurveTime;                                      // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4[0xC];                                      // 0x02D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysics_ExternalForce_Curve) == 0x000010, "Wrong alignment on FKawaiiPhysics_ExternalForce_Curve");
static_assert(sizeof(FKawaiiPhysics_ExternalForce_Curve) == 0x0002E0, "Wrong size on FKawaiiPhysics_ExternalForce_Curve");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, ForceCurve) == 0x0000A8, "Member 'FKawaiiPhysics_ExternalForce_Curve::ForceCurve' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, CurveEvaluateType) == 0x000230, "Member 'FKawaiiPhysics_ExternalForce_Curve::CurveEvaluateType' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, SubstepCount) == 0x000234, "Member 'FKawaiiPhysics_ExternalForce_Curve::SubstepCount' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, TimeScale) == 0x000238, "Member 'FKawaiiPhysics_ExternalForce_Curve::TimeScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, ForceRateByBoneLengthRate) == 0x000240, "Member 'FKawaiiPhysics_ExternalForce_Curve::ForceRateByBoneLengthRate' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, Time) == 0x0002C8, "Member 'FKawaiiPhysics_ExternalForce_Curve::Time' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, PrevTime) == 0x0002CC, "Member 'FKawaiiPhysics_ExternalForce_Curve::PrevTime' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Curve, MaxCurveTime) == 0x0002D0, "Member 'FKawaiiPhysics_ExternalForce_Curve::MaxCurveTime' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysics_ExternalForce_Gravity
// 0x00A0 (0x0150 - 0x00B0)
struct FKawaiiPhysics_ExternalForce_Gravity final : public FKawaiiPhysics_ExternalForce
{
public:
	struct FRuntimeFloatCurve                     ForceRateByBoneLengthRate;                         // 0x00A8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterGravityDirection;                     // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterGravityScale;                         // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideGravityDirection;                          // 0x0134(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverrideGravityDirection;                      // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0xF];                                      // 0x0141(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysics_ExternalForce_Gravity) == 0x000010, "Wrong alignment on FKawaiiPhysics_ExternalForce_Gravity");
static_assert(sizeof(FKawaiiPhysics_ExternalForce_Gravity) == 0x000150, "Wrong size on FKawaiiPhysics_ExternalForce_Gravity");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Gravity, ForceRateByBoneLengthRate) == 0x0000A8, "Member 'FKawaiiPhysics_ExternalForce_Gravity::ForceRateByBoneLengthRate' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Gravity, bUseCharacterGravityDirection) == 0x000130, "Member 'FKawaiiPhysics_ExternalForce_Gravity::bUseCharacterGravityDirection' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Gravity, bUseCharacterGravityScale) == 0x000131, "Member 'FKawaiiPhysics_ExternalForce_Gravity::bUseCharacterGravityScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Gravity, OverrideGravityDirection) == 0x000134, "Member 'FKawaiiPhysics_ExternalForce_Gravity::OverrideGravityDirection' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Gravity, bUseOverrideGravityDirection) == 0x000140, "Member 'FKawaiiPhysics_ExternalForce_Gravity::bUseOverrideGravityDirection' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysics_ExternalForce_Wind
// 0x0090 (0x0140 - 0x00B0)
struct FKawaiiPhysics_ExternalForce_Wind final : public FKawaiiPhysics_ExternalForce
{
public:
	struct FRuntimeFloatCurve                     ForceRateByBoneLengthRate;                         // 0x00A8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysics_ExternalForce_Wind) == 0x000010, "Wrong alignment on FKawaiiPhysics_ExternalForce_Wind");
static_assert(sizeof(FKawaiiPhysics_ExternalForce_Wind) == 0x000140, "Wrong size on FKawaiiPhysics_ExternalForce_Wind");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Wind, ForceRateByBoneLengthRate) == 0x0000A8, "Member 'FKawaiiPhysics_ExternalForce_Wind::ForceRateByBoneLengthRate' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysics_ExternalForce_Wind, World) == 0x000130, "Member 'FKawaiiPhysics_ExternalForce_Wind::World' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsModifyBone
// 0x01C0 (0x01C0 - 0x0000)
struct FKawaiiPhysicsModifyBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildIndices;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0028(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x004C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocation;                                      // 0x0058(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PrevRotation;                                      // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PoseLocation;                                      // 0x0080(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PoseRotation;                                      // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0xD4];                                      // 0x00A0(0x00D4)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PoseScale;                                         // 0x0174(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthFromRoot;                                    // 0x0180(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthRateFromRoot;                                // 0x0184(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDummy;                                            // 0x0188(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipSimulate;                                     // 0x0189(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x36];                                     // 0x018A(0x0036)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysicsModifyBone) == 0x000010, "Wrong alignment on FKawaiiPhysicsModifyBone");
static_assert(sizeof(FKawaiiPhysicsModifyBone) == 0x0001C0, "Wrong size on FKawaiiPhysicsModifyBone");
static_assert(offsetof(FKawaiiPhysicsModifyBone, BoneRef) == 0x000000, "Member 'FKawaiiPhysicsModifyBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, Index) == 0x000010, "Member 'FKawaiiPhysicsModifyBone::Index' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ParentIndex) == 0x000014, "Member 'FKawaiiPhysicsModifyBone::ParentIndex' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ChildIndices) == 0x000018, "Member 'FKawaiiPhysicsModifyBone::ChildIndices' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PhysicsSettings) == 0x000028, "Member 'FKawaiiPhysicsModifyBone::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, Location) == 0x00004C, "Member 'FKawaiiPhysicsModifyBone::Location' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevLocation) == 0x000058, "Member 'FKawaiiPhysicsModifyBone::PrevLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevRotation) == 0x000070, "Member 'FKawaiiPhysicsModifyBone::PrevRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseLocation) == 0x000080, "Member 'FKawaiiPhysicsModifyBone::PoseLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseRotation) == 0x000090, "Member 'FKawaiiPhysicsModifyBone::PoseRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseScale) == 0x000174, "Member 'FKawaiiPhysicsModifyBone::PoseScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, LengthFromRoot) == 0x000180, "Member 'FKawaiiPhysicsModifyBone::LengthFromRoot' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, LengthRateFromRoot) == 0x000184, "Member 'FKawaiiPhysicsModifyBone::LengthRateFromRoot' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bDummy) == 0x000188, "Member 'FKawaiiPhysicsModifyBone::bDummy' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bSkipSimulate) == 0x000189, "Member 'FKawaiiPhysicsModifyBone::bSkipSimulate' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_KawaiiPhysics
// 0x0C10 (0x0CE0 - 0x00D0)
struct FAnimNode_KawaiiPhysics final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootBone;                                          // 0x00D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 ExcludeBones;                                      // 0x00E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysicsRootBoneSetting>  AdditionalRootBones;                               // 0x00F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultBoneType                              OverrideDefaultBoneType;                           // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyBoneLength;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulateTransformSpace                       SimulateTransformSpace;                            // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MeshRootBoneName;                                  // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneForwardAxis                              BoneForwardAxis;                                   // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0118(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EPhysicsSettingType                           CurrentPhysicsSettingType;                         // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicsSettingType, struct FKawaiiPhysicsSettings> ExtraPhysicsSettings;                   // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiBoneLimitAngleSettings>  LimitAngleRotatorsOverride;                        // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingPhysicsAssetToOverrideCollision;             // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          PhysicsAssetForOverrideCollision;                  // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCalculateDeltaTime;                             // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideMinCalculateDeltaTime;                     // 0x01B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCalculatedTransform;                           // 0x01B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseIndependentPhysicsSetting;                     // 0x01B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FKawaiiBonePhysicsSettings> BoneIndependentPhysicsSettings;             // 0x01B8(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         TargetFramerate;                                   // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideTargetFramerate;                           // 0x020C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WarmUpFrames;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWarmUpWhenResetDynamics;                       // 0x0214(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedWarmUp;                                       // 0x0215(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216[0x2];                                      // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportDistanceThreshold;                         // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportRotationThreshold;                         // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlanarConstraint                             PlanarConstraint;                                  // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x1];                                      // 0x0221(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ResetBoneTransformWhenBoneNotFound;                // 0x0222(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223[0x5];                                      // 0x0223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DampingCurve;                                      // 0x0228(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingLocationCurve;                         // 0x0230(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingRotationCurve;                         // 0x0238(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StiffnessCurve;                                    // 0x0240(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RadiusCurve;                                       // 0x0248(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LimitAngleCurve;                                   // 0x0250(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     DampingCurveData;                                  // 0x0258(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     StiffnessCurveData;                                // 0x02E0(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WorldDampingLocationCurveData;                     // 0x0368(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WorldDampingRotationCurveData;                     // 0x03F0(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RadiusCurveData;                                   // 0x0478(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LimitAngleCurveData;                               // 0x0500(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LimitAngle2CurveData;                              // 0x0588(0x0088)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x0610(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x0620(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoxLimit>                      BoxLimits;                                         // 0x0630(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0640(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKawaiiPhysicsLimitsDataAsset*          LimitsDataAsset;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAssetForLimits;                             // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          ParentMeshPhysicsAssetForLimits;                   // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParentMeshBonesForLimits;                          // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBoneLimitAntiPenetration;                   // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_679[0x3];                                      // 0x0679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DampingForMoveAlongLimit;                          // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSphericalLimit>                SphericalLimitsData;                               // 0x0680(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimitsData;                                 // 0x0690(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoxLimit>                      BoxLimitsData;                                     // 0x06A0(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimitsData;                                  // 0x06B0(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           BoneConstraintGlobalComplianceType;                // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoneConstraintIterationCountBeforeCollision;       // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneConstraintIterationCountAfterCollision;        // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAddChildDummyBoneConstraint;                  // 0x06CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingAxisYForUp;                                  // 0x06CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdjustPoseByConstraint;                     // 0x06CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6CF[0x1];                                      // 0x06CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedForPitchUp;                             // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedForPitchDown;                           // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalAdditivePitchMax;                             // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     LiftUpRateMappingCurveData;                        // 0x06E0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ChildOpposingRotatorCurveData;                     // 0x0768(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     AngleToMaxAllowedPitchCurve;                       // 0x07F0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FModifyBoneConstraint>          BoneConstraints;                                   // 0x0878(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKawaiiPhysicsBoneConstraintsDataAsset* BoneConstraintsDataAsset;                          // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModifyBoneConstraint>          BoneConstraintsData;                               // 0x0890(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModifyBoneConstraint>          MergedBoneConstraints;                             // 0x08A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x08B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x08BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8BD[0x3];                                      // 0x08BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKawaiiPhysics_ExternalForce_Basic> BasicExternalForces;                           // 0x08C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysics_ExternalForce_Curve> CurveExternalForces;                           // 0x08D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysics_ExternalForce_Gravity> GravityExternalForces;                       // 0x08E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysics_ExternalForce_Wind> WindExternalForces;                             // 0x08F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UKawaiiPhysics_CustomExternalForce*> CustomExternalForces;                          // 0x0908(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowWorldCollision;                              // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCollisionParams;                          // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91A[0x6];                                      // 0x091A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          CollisionChannelSettings;                          // 0x0920(0x0130)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelfComponent;                              // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A51[0x7];                                      // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 IgnoreBones;                                       // 0x0A58(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreBoneNamePrefix;                              // 0x0A68(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KawaiiPhysicsTag;                                  // 0x0A78(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysicsModifyBone>       ModifyBones;                                       // 0x0A80(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0A90(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A94[0xC];                                      // 0x0A94(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreSkelCompTransform;                              // 0x0AA0(0x0030)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bInitPhysicsSettings;                              // 0x0AD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD1[0x20F];                                    // 0x0AD1(0x020F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_KawaiiPhysics) == 0x000010, "Wrong alignment on FAnimNode_KawaiiPhysics");
static_assert(sizeof(FAnimNode_KawaiiPhysics) == 0x000CE0, "Wrong size on FAnimNode_KawaiiPhysics");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RootBone) == 0x0000D0, "Member 'FAnimNode_KawaiiPhysics::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ExcludeBones) == 0x0000E0, "Member 'FAnimNode_KawaiiPhysics::ExcludeBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, AdditionalRootBones) == 0x0000F0, "Member 'FAnimNode_KawaiiPhysics::AdditionalRootBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, OverrideDefaultBoneType) == 0x000100, "Member 'FAnimNode_KawaiiPhysics::OverrideDefaultBoneType' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DummyBoneLength) == 0x000104, "Member 'FAnimNode_KawaiiPhysics::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SimulateTransformSpace) == 0x000108, "Member 'FAnimNode_KawaiiPhysics::SimulateTransformSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, MeshRootBoneName) == 0x00010C, "Member 'FAnimNode_KawaiiPhysics::MeshRootBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneForwardAxis) == 0x000114, "Member 'FAnimNode_KawaiiPhysics::BoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PhysicsSettings) == 0x000118, "Member 'FAnimNode_KawaiiPhysics::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CurrentPhysicsSettingType) == 0x00013C, "Member 'FAnimNode_KawaiiPhysics::CurrentPhysicsSettingType' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ExtraPhysicsSettings) == 0x000140, "Member 'FAnimNode_KawaiiPhysics::ExtraPhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleRotatorsOverride) == 0x000190, "Member 'FAnimNode_KawaiiPhysics::LimitAngleRotatorsOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUsingPhysicsAssetToOverrideCollision) == 0x0001A0, "Member 'FAnimNode_KawaiiPhysics::bUsingPhysicsAssetToOverrideCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PhysicsAssetForOverrideCollision) == 0x0001A8, "Member 'FAnimNode_KawaiiPhysics::PhysicsAssetForOverrideCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, MinCalculateDeltaTime) == 0x0001B0, "Member 'FAnimNode_KawaiiPhysics::MinCalculateDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, OverrideMinCalculateDeltaTime) == 0x0001B4, "Member 'FAnimNode_KawaiiPhysics::OverrideMinCalculateDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUseCalculatedTransform) == 0x0001B5, "Member 'FAnimNode_KawaiiPhysics::bUseCalculatedTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUseIndependentPhysicsSetting) == 0x0001B6, "Member 'FAnimNode_KawaiiPhysics::bUseIndependentPhysicsSetting' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneIndependentPhysicsSettings) == 0x0001B8, "Member 'FAnimNode_KawaiiPhysics::BoneIndependentPhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TargetFramerate) == 0x000208, "Member 'FAnimNode_KawaiiPhysics::TargetFramerate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, OverrideTargetFramerate) == 0x00020C, "Member 'FAnimNode_KawaiiPhysics::OverrideTargetFramerate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WarmUpFrames) == 0x000210, "Member 'FAnimNode_KawaiiPhysics::WarmUpFrames' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUseWarmUpWhenResetDynamics) == 0x000214, "Member 'FAnimNode_KawaiiPhysics::bUseWarmUpWhenResetDynamics' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bNeedWarmUp) == 0x000215, "Member 'FAnimNode_KawaiiPhysics::bNeedWarmUp' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportDistanceThreshold) == 0x000218, "Member 'FAnimNode_KawaiiPhysics::TeleportDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportRotationThreshold) == 0x00021C, "Member 'FAnimNode_KawaiiPhysics::TeleportRotationThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarConstraint) == 0x000220, "Member 'FAnimNode_KawaiiPhysics::PlanarConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ResetBoneTransformWhenBoneNotFound) == 0x000222, "Member 'FAnimNode_KawaiiPhysics::ResetBoneTransformWhenBoneNotFound' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingCurve) == 0x000228, "Member 'FAnimNode_KawaiiPhysics::DampingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingLocationCurve) == 0x000230, "Member 'FAnimNode_KawaiiPhysics::WorldDampingLocationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingRotationCurve) == 0x000238, "Member 'FAnimNode_KawaiiPhysics::WorldDampingRotationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, StiffnessCurve) == 0x000240, "Member 'FAnimNode_KawaiiPhysics::StiffnessCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RadiusCurve) == 0x000248, "Member 'FAnimNode_KawaiiPhysics::RadiusCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleCurve) == 0x000250, "Member 'FAnimNode_KawaiiPhysics::LimitAngleCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingCurveData) == 0x000258, "Member 'FAnimNode_KawaiiPhysics::DampingCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, StiffnessCurveData) == 0x0002E0, "Member 'FAnimNode_KawaiiPhysics::StiffnessCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingLocationCurveData) == 0x000368, "Member 'FAnimNode_KawaiiPhysics::WorldDampingLocationCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingRotationCurveData) == 0x0003F0, "Member 'FAnimNode_KawaiiPhysics::WorldDampingRotationCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RadiusCurveData) == 0x000478, "Member 'FAnimNode_KawaiiPhysics::RadiusCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleCurveData) == 0x000500, "Member 'FAnimNode_KawaiiPhysics::LimitAngleCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngle2CurveData) == 0x000588, "Member 'FAnimNode_KawaiiPhysics::LimitAngle2CurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SphericalLimits) == 0x000610, "Member 'FAnimNode_KawaiiPhysics::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CapsuleLimits) == 0x000620, "Member 'FAnimNode_KawaiiPhysics::CapsuleLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoxLimits) == 0x000630, "Member 'FAnimNode_KawaiiPhysics::BoxLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarLimits) == 0x000640, "Member 'FAnimNode_KawaiiPhysics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitsDataAsset) == 0x000650, "Member 'FAnimNode_KawaiiPhysics::LimitsDataAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PhysicsAssetForLimits) == 0x000658, "Member 'FAnimNode_KawaiiPhysics::PhysicsAssetForLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ParentMeshPhysicsAssetForLimits) == 0x000660, "Member 'FAnimNode_KawaiiPhysics::ParentMeshPhysicsAssetForLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ParentMeshBonesForLimits) == 0x000668, "Member 'FAnimNode_KawaiiPhysics::ParentMeshBonesForLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableBoneLimitAntiPenetration) == 0x000678, "Member 'FAnimNode_KawaiiPhysics::bEnableBoneLimitAntiPenetration' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingForMoveAlongLimit) == 0x00067C, "Member 'FAnimNode_KawaiiPhysics::DampingForMoveAlongLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SphericalLimitsData) == 0x000680, "Member 'FAnimNode_KawaiiPhysics::SphericalLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CapsuleLimitsData) == 0x000690, "Member 'FAnimNode_KawaiiPhysics::CapsuleLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoxLimitsData) == 0x0006A0, "Member 'FAnimNode_KawaiiPhysics::BoxLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarLimitsData) == 0x0006B0, "Member 'FAnimNode_KawaiiPhysics::PlanarLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintGlobalComplianceType) == 0x0006C0, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintGlobalComplianceType' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintIterationCountBeforeCollision) == 0x0006C4, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintIterationCountBeforeCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintIterationCountAfterCollision) == 0x0006C8, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintIterationCountAfterCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bAutoAddChildDummyBoneConstraint) == 0x0006CC, "Member 'FAnimNode_KawaiiPhysics::bAutoAddChildDummyBoneConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUsingAxisYForUp) == 0x0006CD, "Member 'FAnimNode_KawaiiPhysics::bUsingAxisYForUp' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableAdjustPoseByConstraint) == 0x0006CE, "Member 'FAnimNode_KawaiiPhysics::bEnableAdjustPoseByConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, InterpSpeedForPitchUp) == 0x0006D0, "Member 'FAnimNode_KawaiiPhysics::InterpSpeedForPitchUp' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, InterpSpeedForPitchDown) == 0x0006D4, "Member 'FAnimNode_KawaiiPhysics::InterpSpeedForPitchDown' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LocalAdditivePitchMax) == 0x0006D8, "Member 'FAnimNode_KawaiiPhysics::LocalAdditivePitchMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LiftUpRateMappingCurveData) == 0x0006E0, "Member 'FAnimNode_KawaiiPhysics::LiftUpRateMappingCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ChildOpposingRotatorCurveData) == 0x000768, "Member 'FAnimNode_KawaiiPhysics::ChildOpposingRotatorCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, AngleToMaxAllowedPitchCurve) == 0x0007F0, "Member 'FAnimNode_KawaiiPhysics::AngleToMaxAllowedPitchCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraints) == 0x000878, "Member 'FAnimNode_KawaiiPhysics::BoneConstraints' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintsDataAsset) == 0x000888, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintsDataAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintsData) == 0x000890, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, MergedBoneConstraints) == 0x0008A0, "Member 'FAnimNode_KawaiiPhysics::MergedBoneConstraints' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, Gravity) == 0x0008B0, "Member 'FAnimNode_KawaiiPhysics::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableWind) == 0x0008BC, "Member 'FAnimNode_KawaiiPhysics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WindScale) == 0x0008C0, "Member 'FAnimNode_KawaiiPhysics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BasicExternalForces) == 0x0008C8, "Member 'FAnimNode_KawaiiPhysics::BasicExternalForces' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CurveExternalForces) == 0x0008D8, "Member 'FAnimNode_KawaiiPhysics::CurveExternalForces' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, GravityExternalForces) == 0x0008E8, "Member 'FAnimNode_KawaiiPhysics::GravityExternalForces' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WindExternalForces) == 0x0008F8, "Member 'FAnimNode_KawaiiPhysics::WindExternalForces' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CustomExternalForces) == 0x000908, "Member 'FAnimNode_KawaiiPhysics::CustomExternalForces' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bAllowWorldCollision) == 0x000918, "Member 'FAnimNode_KawaiiPhysics::bAllowWorldCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bOverrideCollisionParams) == 0x000919, "Member 'FAnimNode_KawaiiPhysics::bOverrideCollisionParams' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CollisionChannelSettings) == 0x000920, "Member 'FAnimNode_KawaiiPhysics::CollisionChannelSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bIgnoreSelfComponent) == 0x000A50, "Member 'FAnimNode_KawaiiPhysics::bIgnoreSelfComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, IgnoreBones) == 0x000A58, "Member 'FAnimNode_KawaiiPhysics::IgnoreBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, IgnoreBoneNamePrefix) == 0x000A68, "Member 'FAnimNode_KawaiiPhysics::IgnoreBoneNamePrefix' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, KawaiiPhysicsTag) == 0x000A78, "Member 'FAnimNode_KawaiiPhysics::KawaiiPhysicsTag' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ModifyBones) == 0x000A80, "Member 'FAnimNode_KawaiiPhysics::ModifyBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DeltaTime) == 0x000A90, "Member 'FAnimNode_KawaiiPhysics::DeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PreSkelCompTransform) == 0x000AA0, "Member 'FAnimNode_KawaiiPhysics::PreSkelCompTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bInitPhysicsSettings) == 0x000AD0, "Member 'FAnimNode_KawaiiPhysics::bInitPhysicsSettings' has a wrong offset!");

// ScriptStruct KawaiiPhysics.ParentMeshTransformData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FParentMeshTransformData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParentMeshTransformData) == 0x000010, "Wrong alignment on FParentMeshTransformData");
static_assert(sizeof(FParentMeshTransformData) == 0x000040, "Wrong size on FParentMeshTransformData");

// ScriptStruct KawaiiPhysics.RegexPatternBoneSet
// 0x0020 (0x0020 - 0x0000)
struct FRegexPatternBoneSet final
{
public:
	class FString                                 RegexPatternBone1;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegexPatternBone2;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegexPatternBoneSet) == 0x000008, "Wrong alignment on FRegexPatternBoneSet");
static_assert(sizeof(FRegexPatternBoneSet) == 0x000020, "Wrong size on FRegexPatternBoneSet");
static_assert(offsetof(FRegexPatternBoneSet, RegexPatternBone1) == 0x000000, "Member 'FRegexPatternBoneSet::RegexPatternBone1' has a wrong offset!");
static_assert(offsetof(FRegexPatternBoneSet, RegexPatternBone2) == 0x000010, "Member 'FRegexPatternBoneSet::RegexPatternBone2' has a wrong offset!");

// ScriptStruct KawaiiPhysics.ModifyBoneConstraintData
// 0x0034 (0x0034 - 0x0000)
struct FModifyBoneConstraintData final
{
public:
	class FName                                   BoneName1;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName2;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoneReference1;                                    // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoneReference2;                                    // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideCompliance;                               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           ComplianceType;                                    // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModifyBoneConstraintData) == 0x000004, "Wrong alignment on FModifyBoneConstraintData");
static_assert(sizeof(FModifyBoneConstraintData) == 0x000034, "Wrong size on FModifyBoneConstraintData");
static_assert(offsetof(FModifyBoneConstraintData, BoneName1) == 0x000000, "Member 'FModifyBoneConstraintData::BoneName1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, BoneName2) == 0x000008, "Member 'FModifyBoneConstraintData::BoneName2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, BoneReference1) == 0x000010, "Member 'FModifyBoneConstraintData::BoneReference1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, BoneReference2) == 0x000020, "Member 'FModifyBoneConstraintData::BoneReference2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, bOverrideCompliance) == 0x000030, "Member 'FModifyBoneConstraintData::bOverrideCompliance' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, ComplianceType) == 0x000031, "Member 'FModifyBoneConstraintData::ComplianceType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CollisionLimitDataBase
// 0x0060 (0x0060 - 0x0000)
struct FCollisionLimitDataBase
{
public:
	struct FBoneReference                         DrivingBoneReference;                              // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DrivingBoneName;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollisionLimitDataBase) == 0x000010, "Wrong alignment on FCollisionLimitDataBase");
static_assert(sizeof(FCollisionLimitDataBase) == 0x000060, "Wrong size on FCollisionLimitDataBase");
static_assert(offsetof(FCollisionLimitDataBase, DrivingBoneReference) == 0x000000, "Member 'FCollisionLimitDataBase::DrivingBoneReference' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, DrivingBoneName) == 0x000010, "Member 'FCollisionLimitDataBase::DrivingBoneName' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, OffsetLocation) == 0x000018, "Member 'FCollisionLimitDataBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, OffsetRotation) == 0x000024, "Member 'FCollisionLimitDataBase::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Location) == 0x000030, "Member 'FCollisionLimitDataBase::Location' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Rotation) == 0x000040, "Member 'FCollisionLimitDataBase::Rotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Guid) == 0x000050, "Member 'FCollisionLimitDataBase::Guid' has a wrong offset!");

// ScriptStruct KawaiiPhysics.PlanarLimitData
// 0x0010 (0x0070 - 0x0060)
struct FPlanarLimitData final : public FCollisionLimitDataBase
{
public:
	struct FPlane                                 Plane;                                             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanarLimitData) == 0x000010, "Wrong alignment on FPlanarLimitData");
static_assert(sizeof(FPlanarLimitData) == 0x000070, "Wrong size on FPlanarLimitData");
static_assert(offsetof(FPlanarLimitData, Plane) == 0x000060, "Member 'FPlanarLimitData::Plane' has a wrong offset!");

// ScriptStruct KawaiiPhysics.BoxLimitData
// 0x0010 (0x0070 - 0x0060)
struct FBoxLimitData final : public FCollisionLimitDataBase
{
public:
	struct FVector                                Extent;                                            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxLimitData) == 0x000010, "Wrong alignment on FBoxLimitData");
static_assert(sizeof(FBoxLimitData) == 0x000070, "Wrong size on FBoxLimitData");
static_assert(offsetof(FBoxLimitData, Extent) == 0x000060, "Member 'FBoxLimitData::Extent' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CapsuleLimitData
// 0x0010 (0x0070 - 0x0060)
struct FCapsuleLimitData final : public FCollisionLimitDataBase
{
public:
	float                                         Radius;                                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleLimitData) == 0x000010, "Wrong alignment on FCapsuleLimitData");
static_assert(sizeof(FCapsuleLimitData) == 0x000070, "Wrong size on FCapsuleLimitData");
static_assert(offsetof(FCapsuleLimitData, Radius) == 0x000060, "Member 'FCapsuleLimitData::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleLimitData, Length) == 0x000064, "Member 'FCapsuleLimitData::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.SphericalLimitData
// 0x0010 (0x0070 - 0x0060)
struct FSphericalLimitData final : public FCollisionLimitDataBase
{
public:
	float                                         Radius;                                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalLimitData) == 0x000010, "Wrong alignment on FSphericalLimitData");
static_assert(sizeof(FSphericalLimitData) == 0x000070, "Wrong size on FSphericalLimitData");
static_assert(offsetof(FSphericalLimitData, Radius) == 0x000060, "Member 'FSphericalLimitData::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalLimitData, LimitType) == 0x000064, "Member 'FSphericalLimitData::LimitType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.DefaultBoneParams
// 0x0030 (0x0030 - 0x0000)
struct FDefaultBoneParams final
{
public:
	struct FBoneReference                         KawaiiRootBone;                                    // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 KawaiiExcludeBones;                                // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysicsRootBoneSetting>  KawaiiAdditionalRootBones;                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultBoneParams) == 0x000008, "Wrong alignment on FDefaultBoneParams");
static_assert(sizeof(FDefaultBoneParams) == 0x000030, "Wrong size on FDefaultBoneParams");
static_assert(offsetof(FDefaultBoneParams, KawaiiRootBone) == 0x000000, "Member 'FDefaultBoneParams::KawaiiRootBone' has a wrong offset!");
static_assert(offsetof(FDefaultBoneParams, KawaiiExcludeBones) == 0x000010, "Member 'FDefaultBoneParams::KawaiiExcludeBones' has a wrong offset!");
static_assert(offsetof(FDefaultBoneParams, KawaiiAdditionalRootBones) == 0x000020, "Member 'FDefaultBoneParams::KawaiiAdditionalRootBones' has a wrong offset!");

}

