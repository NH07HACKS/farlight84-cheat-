#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Express_WorldMark

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_Express_WorldMark.UI_Express_WorldMark_C.SetExpressState
// 0x0040 (0x0040 - 0x0000)
struct UI_Express_WorldMark_C_SetExpressState final
{
public:
	EExpressMarkState                             Express_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpressMarkState                             Temp_byte_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpressMarkState                             Temp_byte_Variable_7;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpressMarkState                             Temp_byte_Variable_15;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_16;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_17;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_18;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_19;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_20;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_21;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_22;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_23;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExpressMarkState                             Temp_byte_Variable_24;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Express_WorldMark_C_SetExpressState) == 0x000004, "Wrong alignment on UI_Express_WorldMark_C_SetExpressState");
static_assert(sizeof(UI_Express_WorldMark_C_SetExpressState) == 0x000040, "Wrong size on UI_Express_WorldMark_C_SetExpressState");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Express_0) == 0x000000, "Member 'UI_Express_WorldMark_C_SetExpressState::Express_0' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable) == 0x000001, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_1) == 0x000002, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_2) == 0x000003, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_3) == 0x000004, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_4) == 0x000005, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_5) == 0x000006, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_6) == 0x000007, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable) == 0x000008, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_1) == 0x00000C, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_2) == 0x000010, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_3) == 0x000014, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_4) == 0x000018, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_5) == 0x00001C, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_int_Variable_6) == 0x000020, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_7) == 0x000024, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, K2Node_Select_Default) == 0x000028, "Member 'UI_Express_WorldMark_C_SetExpressState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_8) == 0x00002C, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_9) == 0x00002D, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_10) == 0x00002E, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_11) == 0x00002F, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_12) == 0x000030, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_13) == 0x000031, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_14) == 0x000032, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_15) == 0x000033, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, K2Node_Select_Default_1) == 0x000034, "Member 'UI_Express_WorldMark_C_SetExpressState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_16) == 0x000035, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_17) == 0x000036, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_18) == 0x000037, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_19) == 0x000038, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_20) == 0x000039, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_21) == 0x00003A, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_22) == 0x00003B, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, K2Node_Select_Default_2) == 0x00003C, "Member 'UI_Express_WorldMark_C_SetExpressState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_23) == 0x00003D, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, Temp_byte_Variable_24) == 0x00003E, "Member 'UI_Express_WorldMark_C_SetExpressState::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(UI_Express_WorldMark_C_SetExpressState, K2Node_Select_Default_3) == 0x00003F, "Member 'UI_Express_WorldMark_C_SetExpressState::K2Node_Select_Default_3' has a wrong offset!");

// Function UI_Express_WorldMark.UI_Express_WorldMark_C.ExecuteUbergraph_UI_Express_WorldMark
// 0x0004 (0x0004 - 0x0000)
struct UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark) == 0x000004, "Wrong alignment on UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark");
static_assert(sizeof(UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark) == 0x000004, "Wrong size on UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark");
static_assert(offsetof(UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark, EntryPoint) == 0x000000, "Member 'UI_Express_WorldMark_C_ExecuteUbergraph_UI_Express_WorldMark::EntryPoint' has a wrong offset!");

}

