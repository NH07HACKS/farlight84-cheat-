#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SolarCharacter_Male

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_CharacterAnimState_structs.hpp"
#include "Solarland_structs.hpp"


namespace SDK::Params
{

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.VehicleLocamotion
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_Male_C_VehicleLocamotion final
{
public:
	struct FPoseLink                              bpp__VehicleLocamotion__pf;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_VehicleLocamotion) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_VehicleLocamotion");
static_assert(sizeof(ABP_SolarCharacter_Male_C_VehicleLocamotion) == 0x000010, "Wrong size on ABP_SolarCharacter_Male_C_VehicleLocamotion");
static_assert(offsetof(ABP_SolarCharacter_Male_C_VehicleLocamotion, bpp__VehicleLocamotion__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_VehicleLocamotion::bpp__VehicleLocamotion__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.UpdateSprintStopState
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_Male_C_UpdateSprintStopState final
{
public:
	float                                         bpp__DeltaTime__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_UpdateSprintStopState) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_UpdateSprintStopState");
static_assert(sizeof(ABP_SolarCharacter_Male_C_UpdateSprintStopState) == 0x000004, "Wrong size on ABP_SolarCharacter_Male_C_UpdateSprintStopState");
static_assert(offsetof(ABP_SolarCharacter_Male_C_UpdateSprintStopState, bpp__DeltaTime__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_UpdateSprintStopState::bpp__DeltaTime__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.UpdateMoveStartState
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_Male_C_UpdateMoveStartState final
{
public:
	float                                         bpp__DeltaTime__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_UpdateMoveStartState) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_UpdateMoveStartState");
static_assert(sizeof(ABP_SolarCharacter_Male_C_UpdateMoveStartState) == 0x000004, "Wrong size on ABP_SolarCharacter_Male_C_UpdateMoveStartState");
static_assert(offsetof(ABP_SolarCharacter_Male_C_UpdateMoveStartState, bpp__DeltaTime__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_UpdateMoveStartState::bpp__DeltaTime__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.SkillAnimationLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_C_SkillAnimationLayer final
{
public:
	struct FPoseLink                              bpp__BasePose__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__SkillAnimationLayer__pf;                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_SkillAnimationLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_SkillAnimationLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_SkillAnimationLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_C_SkillAnimationLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SkillAnimationLayer, bpp__BasePose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_SkillAnimationLayer::bpp__BasePose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SkillAnimationLayer, bpp__SkillAnimationLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_SkillAnimationLayer::bpp__SkillAnimationLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.SimpleLayerBlendingLayer
// 0x0040 (0x0040 - 0x0000)
struct ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer final
{
public:
	struct FPoseLink                              bpp__BaseLoco__pf;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayLoco__pf;                              // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__LocoBasicPose__pf;                            // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__SimpleLayerBlendingLayer__pf;                 // 0x0030(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer) == 0x000040, "Wrong size on ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer, bpp__BaseLoco__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer::bpp__BaseLoco__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer, bpp__OverlayLoco__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer::bpp__OverlayLoco__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer, bpp__LocoBasicPose__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer::bpp__LocoBasicPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer, bpp__SimpleLayerBlendingLayer__pf) == 0x000030, "Member 'ABP_SolarCharacter_Male_C_SimpleLayerBlendingLayer::bpp__SimpleLayerBlendingLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.SetCharacterAnimState
// 0x0001 (0x0001 - 0x0000)
struct ABP_SolarCharacter_Male_C_SetCharacterAnimState final
{
public:
	E_CharacterAnimState                          bpp__CharacterAnimState__pf;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_SetCharacterAnimState) == 0x000001, "Wrong alignment on ABP_SolarCharacter_Male_C_SetCharacterAnimState");
static_assert(sizeof(ABP_SolarCharacter_Male_C_SetCharacterAnimState) == 0x000001, "Wrong size on ABP_SolarCharacter_Male_C_SetCharacterAnimState");
static_assert(offsetof(ABP_SolarCharacter_Male_C_SetCharacterAnimState, bpp__CharacterAnimState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_SetCharacterAnimState::bpp__CharacterAnimState__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.OverlayAdditiveLayer
// 0x0030 (0x0030 - 0x0000)
struct ABP_SolarCharacter_Male_C_OverlayAdditiveLayer final
{
public:
	struct FPoseLink                              bpp__BaseLayer__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayLayer__pf;                             // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OverlayAdditiveLayer__pf;                     // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_OverlayAdditiveLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_OverlayAdditiveLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_OverlayAdditiveLayer) == 0x000030, "Wrong size on ABP_SolarCharacter_Male_C_OverlayAdditiveLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_OverlayAdditiveLayer, bpp__BaseLayer__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_OverlayAdditiveLayer::bpp__BaseLayer__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_OverlayAdditiveLayer, bpp__OverlayLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_OverlayAdditiveLayer::bpp__OverlayLayer__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_OverlayAdditiveLayer, bpp__OverlayAdditiveLayer__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_C_OverlayAdditiveLayer::bpp__OverlayAdditiveLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.MontageLayerBlendingLayer
// 0x0040 (0x0040 - 0x0000)
struct ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer final
{
public:
	struct FPoseLink                              bpp__LowerBody__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__UpperBody__pf;                                // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__LayerBlendBody__pf;                           // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__MontageLayerBlendingLayer__pf;                // 0x0030(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer) == 0x000040, "Wrong size on ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer, bpp__LowerBody__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer::bpp__LowerBody__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer, bpp__UpperBody__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer::bpp__UpperBody__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer, bpp__LayerBlendBody__pf) == 0x000020, "Member 'ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer::bpp__LayerBlendBody__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer, bpp__MontageLayerBlendingLayer__pf) == 0x000030, "Member 'ABP_SolarCharacter_Male_C_MontageLayerBlendingLayer::bpp__MontageLayerBlendingLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GlobalWeaponBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_C_GlobalWeaponBehavior final
{
public:
	struct FPoseLink                              bpp__Input__pf;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__GlobalWeaponBehavior__pf;                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GlobalWeaponBehavior) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_GlobalWeaponBehavior");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GlobalWeaponBehavior) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_C_GlobalWeaponBehavior");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GlobalWeaponBehavior, bpp__Input__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GlobalWeaponBehavior::bpp__Input__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GlobalWeaponBehavior, bpp__GlobalWeaponBehavior__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_GlobalWeaponBehavior::bpp__GlobalWeaponBehavior__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GlobalPPLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_C_GlobalPPLayer final
{
public:
	struct FPoseLink                              bpp__GlobalPPInput__pf;                            // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__GlobalPPLayer__pf;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GlobalPPLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_GlobalPPLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GlobalPPLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_C_GlobalPPLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GlobalPPLayer, bpp__GlobalPPInput__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GlobalPPLayer::bpp__GlobalPPInput__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GlobalPPLayer, bpp__GlobalPPLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_GlobalPPLayer::bpp__GlobalPPLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToSlide
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToSlide::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToSkydive
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToSkydive::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToJump
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToJump final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToJump) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToJump");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToJump) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToJump");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToJump, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToJump::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToJump, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToJump::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToGround
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToGround final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToGround) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToGround");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToGround) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToGround");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToGround, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToGround::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToGround, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToGround::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToFall
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToFall final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToFall) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToFall");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToFall) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToFall");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToFall, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToFall::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToFall, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToFall::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetTransitionKeyToCrawl
// 0x000C (0x000C - 0x0000)
struct ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl final
{
public:
	EAnimBaseMoveTransitionState                  bpp__FromState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bpp__KeyName__pf;                                  // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl) == 0x00000C, "Wrong size on ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl, bpp__FromState__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl::bpp__FromState__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl, bpp__KeyName__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetTransitionKeyToCrawl::bpp__KeyName__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.GetBlendTimetoFall
// 0x0008 (0x0008 - 0x0000)
struct ABP_SolarCharacter_Male_C_GetBlendTimetoFall final
{
public:
	float                                         bpp__Default__pf;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Time__pf;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_GetBlendTimetoFall) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_GetBlendTimetoFall");
static_assert(sizeof(ABP_SolarCharacter_Male_C_GetBlendTimetoFall) == 0x000008, "Wrong size on ABP_SolarCharacter_Male_C_GetBlendTimetoFall");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetBlendTimetoFall, bpp__Default__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_GetBlendTimetoFall::bpp__Default__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_GetBlendTimetoFall, bpp__Time__pf) == 0x000004, "Member 'ABP_SolarCharacter_Male_C_GetBlendTimetoFall::bpp__Time__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.AnimationLayer_IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_C_AnimationLayer_IK final
{
public:
	struct FPoseLink                              bpp__InPose__pf;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__AnimationLayer_IK__pf;                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_AnimationLayer_IK) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_AnimationLayer_IK");
static_assert(sizeof(ABP_SolarCharacter_Male_C_AnimationLayer_IK) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_C_AnimationLayer_IK");
static_assert(offsetof(ABP_SolarCharacter_Male_C_AnimationLayer_IK, bpp__InPose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_AnimationLayer_IK::bpp__InPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_AnimationLayer_IK, bpp__AnimationLayer_IK__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_AnimationLayer_IK::bpp__AnimationLayer_IK__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.BaseLocoPPLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_Male_C_BaseLocoPPLayer final
{
public:
	struct FPoseLink                              bpp__InputPose__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__BaseLocoPPLayer__pf;                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_BaseLocoPPLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_BaseLocoPPLayer");
static_assert(sizeof(ABP_SolarCharacter_Male_C_BaseLocoPPLayer) == 0x000020, "Wrong size on ABP_SolarCharacter_Male_C_BaseLocoPPLayer");
static_assert(offsetof(ABP_SolarCharacter_Male_C_BaseLocoPPLayer, bpp__InputPose__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_BaseLocoPPLayer::bpp__InputPose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_Male_C_BaseLocoPPLayer, bpp__BaseLocoPPLayer__pf) == 0x000010, "Member 'ABP_SolarCharacter_Male_C_BaseLocoPPLayer::bpp__BaseLocoPPLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_Male.ABP_SolarCharacter_Male_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_Male_C_AnimGraph final
{
public:
	struct FPoseLink                              bpp__AnimGraph__pf;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_Male_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_SolarCharacter_Male_C_AnimGraph");
static_assert(sizeof(ABP_SolarCharacter_Male_C_AnimGraph) == 0x000010, "Wrong size on ABP_SolarCharacter_Male_C_AnimGraph");
static_assert(offsetof(ABP_SolarCharacter_Male_C_AnimGraph, bpp__AnimGraph__pf) == 0x000000, "Member 'ABP_SolarCharacter_Male_C_AnimGraph::bpp__AnimGraph__pf' has a wrong offset!");

}

