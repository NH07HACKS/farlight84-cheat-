#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Notice_Noya

#include "Basic.hpp"

#include "UI_Notice_Noya_classes.hpp"
#include "UI_Notice_Noya_parameters.hpp"


namespace SDK
{

// Function UI_Notice_Noya.UI_Notice_Noya_C.ExecuteUbergraph_UI_Notice_Noya
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Notice_Noya_C::ExecuteUbergraph_UI_Notice_Noya(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "ExecuteUbergraph_UI_Notice_Noya");

	Params::UI_Notice_Noya_C_ExecuteUbergraph_UI_Notice_Noya Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.更新触发条件
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<uint8, bool>&                触发条件                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void UUI_Notice_Noya_C::更新触发条件(const TMap<uint8, bool>& 触发条件)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "更新触发条件");

	Params::UI_Notice_Noya_C_更新触发条件 Parms{};

	Parms.触发条件 = std::move(触发条件);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.注册被动提示
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_NoyaNoticeInfo&         NoticeInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUI_Notice_Noya_C::注册被动提示(const struct FS_NoyaNoticeInfo& NoticeInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "注册被动提示");

	Params::UI_Notice_Noya_C_注册被动提示 Parms{};

	Parms.NoticeInfo = std::move(NoticeInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.刷新显示CD
// (BlueprintCallable, BlueprintEvent)

void UUI_Notice_Noya_C::刷新显示CD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "刷新显示CD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.触发被动提示
// (BlueprintCallable, BlueprintEvent)

void UUI_Notice_Noya_C::触发被动提示()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "触发被动提示");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.触发主动提示
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_NoyaNoticeInfo&         提示信息                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UUI_Notice_Noya_C::触发主动提示(const struct FS_NoyaNoticeInfo& 提示信息)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "触发主动提示");

	Params::UI_Notice_Noya_C_触发主动提示 Parms{};

	Parms.提示信息 = std::move(提示信息);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_Notice_Noya_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.判断触发条件是否达成
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_NoyaNoticeInfo&         S_NoyaNoticeInfo                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool*                                   是否触发                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_Notice_Noya_C::判断触发条件是否达成(const struct FS_NoyaNoticeInfo& S_NoyaNoticeInfo, bool* 是否触发)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "判断触发条件是否达成");

	Params::UI_Notice_Noya_C_判断触发条件是否达成 Parms{};

	Parms.S_NoyaNoticeInfo = std::move(S_NoyaNoticeInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (是否触发 != nullptr)
		*是否触发 = Parms.是否触发;
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.随机选择一个可触发的提示
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_NoyaNoticeInfo*               Output                                                 (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   IsNotEmpty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_Notice_Noya_C::随机选择一个可触发的提示(struct FS_NoyaNoticeInfo* Output, bool* IsNotEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "随机选择一个可触发的提示");

	Params::UI_Notice_Noya_C_随机选择一个可触发的提示 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	if (IsNotEmpty != nullptr)
		*IsNotEmpty = Parms.IsNotEmpty;
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.移除已存在的提示
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_NoyaNoticeInfo&         提示内容                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUI_Notice_Noya_C::移除已存在的提示(const struct FS_NoyaNoticeInfo& 提示内容)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "移除已存在的提示");

	Params::UI_Notice_Noya_C_移除已存在的提示 Parms{};

	Parms.提示内容 = std::move(提示内容);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice_Noya.UI_Notice_Noya_C.Init
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_Notice_Noya_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_Noya_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}

}

