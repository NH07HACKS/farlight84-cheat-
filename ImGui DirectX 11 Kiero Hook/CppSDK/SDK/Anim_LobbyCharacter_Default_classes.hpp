#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Anim_LobbyCharacter_Default

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "KawaiiPhysics_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// DynamicClass Anim_LobbyCharacter_Default.Anim_LobbyCharacter_Default_C
// 0x58B0 (0x5C10 - 0x0360)
#pragma pack(push, 0x1)
class alignas(0x10) UAnim_LobbyCharacter_Default_C : public USolarLobbyAnimInstance
{
public:
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0360(0x0020)(NativeAccessSpecifierPublic)
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x0380(0x0078)(NativeAccessSpecifierPublic)
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x03F8(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_5;                     // 0x0420(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_4;                     // 0x1100(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_3;                     // 0x1DE0(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_2;                     // 0x2AC0(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_1;                     // 0x37A0(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x4480(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x44B0(0x0048)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x44F8(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x4520(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x4548(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x4570(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x4598(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x45C0(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x45E8(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x4610(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x4638(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x4660(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x46E8(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x4718(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x47A0(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x47D0(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x4858(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x4888(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x4910(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x4940(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x49C8(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x49F8(0x00B0)(NativeAccessSpecifierPublic)
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x4AA8(0x0088)(NativeAccessSpecifierPublic)
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x4B30(0x00D0)(NativeAccessSpecifierPublic)
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics;                       // 0x4C00(0x0CE0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x58E0(0x0030)(NativeAccessSpecifierPublic)
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x5910(0x00C0)(NativeAccessSpecifierPublic)
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x59D0(0x0028)(NativeAccessSpecifierPublic)
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x59F8(0x0078)(NativeAccessSpecifierPublic)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x5A70(0x0030)(NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CurIdleShow;                                       // 0x5AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              IdleShowList;                                      // 0x5AA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPlayShow;                                    // 0x5AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AB9[0x3];                                     // 0x5AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowCDTime;                                        // 0x5ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           IdleShowCD;                                        // 0x5AC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x5AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharacterCanBeLooked;                              // 0x5ACC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5ACD[0x3];                                     // 0x5ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Pawn;                                              // 0x5AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TurnToCloseShotAnim;                               // 0x5AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TurnToIdleAnim;                                    // 0x5AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CloseShotIdleAnim;                                 // 0x5AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTurnToCloseShotAnim;                           // 0x5AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTurnToIdleAnim;                                // 0x5AF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCloseShotAnim;                                 // 0x5AF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AF3[0x5];                                     // 0x5AF3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          PhysicsAssetForCollision;                          // 0x5AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 Type5OverridePhysicsSetting;                       // 0x5B00(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B24[0x4];                                     // 0x5B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarLobbyCharacter*                   Character;                                         // 0x5B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASolarLobbyCharacter*                   K2Node_DynamicCast_AsSolar_Lobby_Character;        // 0x5B30(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x5B38(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B39[0x3];                                     // 0x5B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiPhysicsSettings                 K2Node_MakeStruct_KawaiiPhysicsSettings;           // 0x5B3C(0x0024)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 K2Node_MakeStruct_KawaiiPhysicsSettings_1;         // 0x5B60(0x0024)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 K2Node_MakeStruct_KawaiiPhysicsSettings_2;         // 0x5B84(0x0024)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 K2Node_MakeStruct_KawaiiPhysicsSettings_3;         // 0x5BA8(0x0024)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 K2Node_MakeStruct_KawaiiPhysicsSettings_4;         // 0x5BCC(0x0024)(Transient, DuplicateTransient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x5BF0(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_Event_IsVisible;                            // 0x5BF4(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BF5[0x3];                                     // 0x5BF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarLobbyCharacter*                   K2Node_DynamicCast_AsSolar_Lobby_Character_1;      // 0x5BF8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x5C00(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C01[0x7];                                     // 0x5C01(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimGraph(struct FPoseLink* bpp__AnimGraph__pf);
	void AnimNotify_IdleAnimStart();
	void AnimNotify_IdleShowFinish();
	void AnimNotify_IdleShowStart();
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_35CABFA34639BDDDF600E591808331E0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_5A6F97D7456E1D045D71858E6DDC7A7C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_8BFE774445BE47063A84D4B9C423F039();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_C2197A5F4BE1CBB67B361FA2F21AB905();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_C35FE07740449DEAC44385B7556C6CA2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_KawaiiPhysics_EAB295BA497A266DCD99F3B45508AA69();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_59385DFF449B7E2D6F63B391685A8DF2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_65FFB4A54208D6ED964E0E8E4429102D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_75A83BF149711496F87894A723727941();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_8F8046714AA0A8276EC35FB1CD0F037A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_9F92E37E45D0DB25B7813584454F8BDC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_SequencePlayer_D129D66148A76FE8404F6BB53C41B2F5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_1A7FF6B34B1671CDCBD519B17D96D0FA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_2E3153EC42E8473A104FEF9A66F63AA3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_6C1201B94AEF6379D80462925B63D670();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_83428A434CA2B7B3D51A42948C5E0354();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_91AB0B2E43FDD2622D11D4823EEDD73C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_A17F407448F3C0AC69BB38885ECF8A14();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_EAC143684A65ABCA6C28CE9C2765390D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_EFF864F2415FFE7C85667C9B1A0CC213();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TransitionResult_F1E040974FF0729969680E895309218E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Anim_LobbyCharacter_Default_AnimGraphNode_TwoWayBlend_1324C6B947749553DBAB488CF6FFAA1D();
	void PlayIdleShow();
	void RandIdleShow();
	void Rand_Idle_Show_BP();
	void SetCharacterCanBeLooked(bool bpp__IsVisible__pf);
	void TurnTable_AnimLayer_forOverride(const struct FPoseLink& bpp__InPose__pf, struct FPoseLink* bpp__TurnTable_AnimLayer_forOverride__pf);
	void TurntablePhysics(const struct FPoseLink& bpp__InPose__pf, struct FPoseLink* bpp__TurntablePhysics__pf);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Anim_LobbyCharacter_Default_C">();
	}
	static class UAnim_LobbyCharacter_Default_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnim_LobbyCharacter_Default_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAnim_LobbyCharacter_Default_C) == 0x000010, "Wrong alignment on UAnim_LobbyCharacter_Default_C");
static_assert(sizeof(UAnim_LobbyCharacter_Default_C) == 0x005C10, "Wrong size on UAnim_LobbyCharacter_Default_C");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_ComponentToLocalSpace) == 0x000360, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_LinkedInputPose_1) == 0x000380, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_LocalToComponentSpace) == 0x0003F8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics_5) == 0x000420, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics_5' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics_4) == 0x001100, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics_4' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics_3) == 0x001DE0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics_3' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics_2) == 0x002AC0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics_1) == 0x0037A0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_Root_2) == 0x004480, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_Slot) == 0x0044B0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_8) == 0x0044F8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_7) == 0x004520, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_6) == 0x004548, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_5) == 0x004570, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_4) == 0x004598, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_3) == 0x0045C0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_2) == 0x0045E8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult_1) == 0x004610, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TransitionResult) == 0x004638, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer_5) == 0x004660, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateResult_4) == 0x0046E8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer_4) == 0x004718, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateResult_3) == 0x0047A0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer_3) == 0x0047D0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateResult_2) == 0x004858, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer_2) == 0x004888, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateResult_1) == 0x004910, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer_1) == 0x004940, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateResult) == 0x0049C8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_StateMachine) == 0x0049F8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SequencePlayer) == 0x004AA8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_TwoWayBlend) == 0x004B30, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_KawaiiPhysics) == 0x004C00, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_KawaiiPhysics' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_Root_1) == 0x0058E0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_SaveCachedPose) == 0x005910, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_UseCachedPose) == 0x0059D0, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_LinkedInputPose) == 0x0059F8, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, AnimGraphNode_Root) == 0x005A70, "Member 'UAnim_LobbyCharacter_Default_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, CurIdleShow) == 0x005AA0, "Member 'UAnim_LobbyCharacter_Default_C::CurIdleShow' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, IdleShowList) == 0x005AA8, "Member 'UAnim_LobbyCharacter_Default_C::IdleShowList' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, ShouldPlayShow) == 0x005AB8, "Member 'UAnim_LobbyCharacter_Default_C::ShouldPlayShow' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, ShowCDTime) == 0x005ABC, "Member 'UAnim_LobbyCharacter_Default_C::ShowCDTime' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, IdleShowCD) == 0x005AC0, "Member 'UAnim_LobbyCharacter_Default_C::IdleShowCD' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, MaxNum) == 0x005AC8, "Member 'UAnim_LobbyCharacter_Default_C::MaxNum' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, CharacterCanBeLooked) == 0x005ACC, "Member 'UAnim_LobbyCharacter_Default_C::CharacterCanBeLooked' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, Pawn) == 0x005AD0, "Member 'UAnim_LobbyCharacter_Default_C::Pawn' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, TurnToCloseShotAnim) == 0x005AD8, "Member 'UAnim_LobbyCharacter_Default_C::TurnToCloseShotAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, TurnToIdleAnim) == 0x005AE0, "Member 'UAnim_LobbyCharacter_Default_C::TurnToIdleAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, CloseShotIdleAnim) == 0x005AE8, "Member 'UAnim_LobbyCharacter_Default_C::CloseShotIdleAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, bHasTurnToCloseShotAnim) == 0x005AF0, "Member 'UAnim_LobbyCharacter_Default_C::bHasTurnToCloseShotAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, bHasTurnToIdleAnim) == 0x005AF1, "Member 'UAnim_LobbyCharacter_Default_C::bHasTurnToIdleAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, bHasCloseShotAnim) == 0x005AF2, "Member 'UAnim_LobbyCharacter_Default_C::bHasCloseShotAnim' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, PhysicsAssetForCollision) == 0x005AF8, "Member 'UAnim_LobbyCharacter_Default_C::PhysicsAssetForCollision' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, Type5OverridePhysicsSetting) == 0x005B00, "Member 'UAnim_LobbyCharacter_Default_C::Type5OverridePhysicsSetting' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, Character) == 0x005B28, "Member 'UAnim_LobbyCharacter_Default_C::Character' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_DynamicCast_AsSolar_Lobby_Character) == 0x005B30, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_DynamicCast_AsSolar_Lobby_Character' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_DynamicCast_bSuccess) == 0x005B38, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_MakeStruct_KawaiiPhysicsSettings) == 0x005B3C, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_MakeStruct_KawaiiPhysicsSettings' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_MakeStruct_KawaiiPhysicsSettings_1) == 0x005B60, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_MakeStruct_KawaiiPhysicsSettings_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_MakeStruct_KawaiiPhysicsSettings_2) == 0x005B84, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_MakeStruct_KawaiiPhysicsSettings_2' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_MakeStruct_KawaiiPhysicsSettings_3) == 0x005BA8, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_MakeStruct_KawaiiPhysicsSettings_3' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_MakeStruct_KawaiiPhysicsSettings_4) == 0x005BCC, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_MakeStruct_KawaiiPhysicsSettings_4' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_Event_DeltaTimeX) == 0x005BF0, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_Event_IsVisible) == 0x005BF4, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_Event_IsVisible' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_DynamicCast_AsSolar_Lobby_Character_1) == 0x005BF8, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_DynamicCast_AsSolar_Lobby_Character_1' has a wrong offset!");
static_assert(offsetof(UAnim_LobbyCharacter_Default_C, K2Node_DynamicCast_bSuccess_1) == 0x005C00, "Member 'UAnim_LobbyCharacter_Default_C::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

