#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FairyGUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FairyGUI.EEaseType
// NumValues: 0x0021
enum class EEaseType : uint8
{
	Linear                                   = 0,
	SineIn                                   = 1,
	SineOut                                  = 2,
	SineInOut                                = 3,
	QuadIn                                   = 4,
	QuadOut                                  = 5,
	QuadInOut                                = 6,
	CubicIn                                  = 7,
	CubicOut                                 = 8,
	CubicInOut                               = 9,
	QuartIn                                  = 10,
	QuartOut                                 = 11,
	QuartInOut                               = 12,
	QuintIn                                  = 13,
	QuintOut                                 = 14,
	QuintInOut                               = 15,
	ExpoIn                                   = 16,
	ExpoOut                                  = 17,
	ExpoInOut                                = 18,
	CircIn                                   = 19,
	CircOut                                  = 20,
	CircInOut                                = 21,
	ElasticIn                                = 22,
	ElasticOut                               = 23,
	ElasticInOut                             = 24,
	BackIn                                   = 25,
	BackOut                                  = 26,
	BackInOut                                = 27,
	BounceIn                                 = 28,
	BounceOut                                = 29,
	BounceInOut                              = 30,
	Custom                                   = 31,
	EEaseType_MAX                            = 32,
};

// Enum FairyGUI.ERelationType
// NumValues: 0x001A
enum class ERelationType : uint8
{
	Left_Left                                = 0,
	Left_Center                              = 1,
	Left_Right                               = 2,
	Center_Center                            = 3,
	Right_Left                               = 4,
	Right_Center                             = 5,
	Right_Right                              = 6,
	Top_Top                                  = 7,
	Top_Middle                               = 8,
	Top_Bottom                               = 9,
	Middle_Middle                            = 10,
	Bottom_Top                               = 11,
	Bottom_Middle                            = 12,
	Bottom_Bottom                            = 13,
	Width                                    = 14,
	Height                                   = 15,
	LeftExt_Left                             = 16,
	LeftExt_Right                            = 17,
	RightExt_Left                            = 18,
	RightExt_Right                           = 19,
	TopExt_Top                               = 20,
	TopExt_Bottom                            = 21,
	BottomExt_Top                            = 22,
	BottomExt_Bottom                         = 23,
	Size                                     = 24,
	ERelationType_MAX                        = 25,
};

// Enum FairyGUI.EVerticalAlignType
// NumValues: 0x0004
enum class EVerticalAlignType : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	EVerticalAlignType_MAX                   = 3,
};

// Enum FairyGUI.EAlignType
// NumValues: 0x0004
enum class EAlignType : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EAlignType_MAX                           = 3,
};

// Enum FairyGUI.EObjectPropID
// NumValues: 0x000B
enum class EObjectPropID : uint8
{
	Text                                     = 0,
	Icon                                     = 1,
	Color                                    = 2,
	OutlineColor                             = 3,
	Playing                                  = 4,
	Frame                                    = 5,
	DeltaTime                                = 6,
	TimeScale                                = 7,
	FontSize                                 = 8,
	Selected                                 = 9,
	EObjectPropID_MAX                        = 10,
};

// Enum FairyGUI.EOrigin360
// NumValues: 0x0005
enum class EOrigin360 : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	EOrigin360_MAX                           = 4,
};

// Enum FairyGUI.EOrigin180
// NumValues: 0x0005
enum class EOrigin180 : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	EOrigin180_MAX                           = 4,
};

// Enum FairyGUI.EOrigin90
// NumValues: 0x0005
enum class EOrigin90 : uint8
{
	TopLeft                                  = 0,
	TopRight                                 = 1,
	BottomLeft                               = 2,
	BottomRight                              = 3,
	EOrigin90_MAX                            = 4,
};

// Enum FairyGUI.EOriginVertical
// NumValues: 0x0003
enum class EOriginVertical : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EOriginVertical_MAX                      = 2,
};

// Enum FairyGUI.EOriginHorizontal
// NumValues: 0x0003
enum class EOriginHorizontal : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EOriginHorizontal_MAX                    = 2,
};

// Enum FairyGUI.EFillMethod
// NumValues: 0x0007
enum class EFillMethod : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Radial90                                 = 3,
	Radial180                                = 4,
	Radial360                                = 5,
	EFillMethod_MAX                          = 6,
};

// Enum FairyGUI.ETransitionActionType
// NumValues: 0x0012
enum class ETransitionActionType : uint8
{
	XY                                       = 0,
	Size                                     = 1,
	Scale                                    = 2,
	Pivot                                    = 3,
	Alpha                                    = 4,
	Rotation                                 = 5,
	Color                                    = 6,
	Animation                                = 7,
	Visible                                  = 8,
	Sound                                    = 9,
	Transition                               = 10,
	Shake                                    = 11,
	ColorFilter                              = 12,
	Skew                                     = 13,
	Text                                     = 14,
	Icon                                     = 15,
	Unknown                                  = 16,
	ETransitionActionType_MAX                = 17,
};

// Enum FairyGUI.EFlipType
// NumValues: 0x0005
enum class EFlipType : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
	EFlipType_MAX                            = 4,
};

// Enum FairyGUI.EAutoSizeType
// NumValues: 0x0005
enum class EAutoSizeType : uint8
{
	None                                     = 0,
	Both                                     = 1,
	Height                                   = 2,
	Shrink                                   = 3,
	EAutoSizeType_MAX                        = 4,
};

// Enum FairyGUI.EPopupDirection
// NumValues: 0x0004
enum class EPopupDirection : uint8
{
	Auto                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	EPopupDirection_MAX                      = 3,
};

// Enum FairyGUI.EGroupLayoutType
// NumValues: 0x0004
enum class EGroupLayoutType : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	EGroupLayoutType_MAX                     = 3,
};

// Enum FairyGUI.EListSelectionMode
// NumValues: 0x0005
enum class EListSelectionMode : uint8
{
	Single                                   = 0,
	Multiple                                 = 1,
	MultipleSingleclick                      = 2,
	None                                     = 3,
	EListSelectionMode_MAX                   = 4,
};

// Enum FairyGUI.EListLayoutType
// NumValues: 0x0006
enum class EListLayoutType : uint8
{
	SingleColumn                             = 0,
	SingleRow                                = 1,
	FlowHorizontal                           = 2,
	FlowVertical                             = 3,
	Pagination                               = 4,
	EListLayoutType_MAX                      = 5,
};

// Enum FairyGUI.EProgressTitleType
// NumValues: 0x0004
enum class EProgressTitleType : uint8
{
	Percent                                  = 0,
	ValueMax                                 = 1,
	Value                                    = 2,
	Max                                      = 3,
};

// Enum FairyGUI.ELoaderFillType
// NumValues: 0x0007
enum class ELoaderFillType : uint8
{
	None                                     = 0,
	Scale                                    = 1,
	ScaleMatchHeight                         = 2,
	ScaleMatchWidth                          = 3,
	ScaleFree                                = 4,
	ScaleNoBorder                            = 5,
	ELoaderFillType_MAX                      = 6,
};

// Enum FairyGUI.EScrollBarDisplayType
// NumValues: 0x0005
enum class EScrollBarDisplayType : uint8
{
	Default                                  = 0,
	Visible                                  = 1,
	Auto                                     = 2,
	Hidden                                   = 3,
	EScrollBarDisplayType_MAX                = 4,
};

// Enum FairyGUI.EScrollType
// NumValues: 0x0004
enum class EScrollType : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	Both                                     = 2,
	EScrollType_MAX                          = 3,
};

// Enum FairyGUI.EOverflowType
// NumValues: 0x0004
enum class EOverflowType : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	Scroll                                   = 2,
	EOverflowType_MAX                        = 3,
};

// Enum FairyGUI.EChildrenRenderOrder
// NumValues: 0x0004
enum class EChildrenRenderOrder : uint8
{
	Ascent                                   = 0,
	Descent                                  = 1,
	Arch                                     = 2,
	EChildrenRenderOrder_MAX                 = 3,
};

// Enum FairyGUI.EButtonMode
// NumValues: 0x0004
enum class EButtonMode : uint8
{
	Common                                   = 0,
	Check                                    = 1,
	Radio                                    = 2,
	EButtonMode_MAX                          = 3,
};

// Enum FairyGUI.EObjectType
// NumValues: 0x0014
enum class EObjectType : uint8
{
	Image                                    = 0,
	MovieClip                                = 1,
	Swf                                      = 2,
	Graph                                    = 3,
	Loader                                   = 4,
	Group                                    = 5,
	Text                                     = 6,
	RichText                                 = 7,
	InputText                                = 8,
	Component                                = 9,
	List                                     = 10,
	Label                                    = 11,
	Button                                   = 12,
	ComboBox                                 = 13,
	ProgressBar                              = 14,
	Slider                                   = 15,
	ScrollBar                                = 16,
	Tree                                     = 17,
	Loader3D                                 = 18,
	EObjectType_MAX                          = 19,
};

// Enum FairyGUI.EPackageItemType
// NumValues: 0x000C
enum class EPackageItemType : uint8
{
	Image                                    = 0,
	MovieClip                                = 1,
	Sound                                    = 2,
	Component                                = 3,
	Atlas                                    = 4,
	Font                                     = 5,
	Swf                                      = 6,
	Misc                                     = 7,
	Unknown                                  = 8,
	Spine                                    = 9,
	DragonBones                              = 10,
	EPackageItemType_MAX                     = 11,
};

// ScriptStruct FairyGUI.TweenValue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTweenValue final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         W;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTweenValue) == 0x000008, "Wrong alignment on FTweenValue");
static_assert(sizeof(FTweenValue) == 0x000018, "Wrong size on FTweenValue");
static_assert(offsetof(FTweenValue, X) == 0x000000, "Member 'FTweenValue::X' has a wrong offset!");
static_assert(offsetof(FTweenValue, Y) == 0x000004, "Member 'FTweenValue::Y' has a wrong offset!");
static_assert(offsetof(FTweenValue, Z) == 0x000008, "Member 'FTweenValue::Z' has a wrong offset!");
static_assert(offsetof(FTweenValue, W) == 0x00000C, "Member 'FTweenValue::W' has a wrong offset!");

// ScriptStruct FairyGUI.NTextFormat
// 0x0040 (0x0040 - 0x0000)
struct FNTextFormat final
{
public:
	class FString                                 Face;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBold;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItalic;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnderline;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LineSpacing;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterSpacing;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlignType                                    Align;                                             // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignType                            VerticalAlign;                                     // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 OutlineColor;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutlineSize;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ShadowColor;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNTextFormat) == 0x000008, "Wrong alignment on FNTextFormat");
static_assert(sizeof(FNTextFormat) == 0x000040, "Wrong size on FNTextFormat");
static_assert(offsetof(FNTextFormat, Face) == 0x000000, "Member 'FNTextFormat::Face' has a wrong offset!");
static_assert(offsetof(FNTextFormat, Size) == 0x000010, "Member 'FNTextFormat::Size' has a wrong offset!");
static_assert(offsetof(FNTextFormat, Color) == 0x000014, "Member 'FNTextFormat::Color' has a wrong offset!");
static_assert(offsetof(FNTextFormat, bBold) == 0x000018, "Member 'FNTextFormat::bBold' has a wrong offset!");
static_assert(offsetof(FNTextFormat, bItalic) == 0x000019, "Member 'FNTextFormat::bItalic' has a wrong offset!");
static_assert(offsetof(FNTextFormat, bUnderline) == 0x00001A, "Member 'FNTextFormat::bUnderline' has a wrong offset!");
static_assert(offsetof(FNTextFormat, LineSpacing) == 0x00001C, "Member 'FNTextFormat::LineSpacing' has a wrong offset!");
static_assert(offsetof(FNTextFormat, LetterSpacing) == 0x000020, "Member 'FNTextFormat::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FNTextFormat, Align) == 0x000024, "Member 'FNTextFormat::Align' has a wrong offset!");
static_assert(offsetof(FNTextFormat, VerticalAlign) == 0x000025, "Member 'FNTextFormat::VerticalAlign' has a wrong offset!");
static_assert(offsetof(FNTextFormat, OutlineColor) == 0x000028, "Member 'FNTextFormat::OutlineColor' has a wrong offset!");
static_assert(offsetof(FNTextFormat, OutlineSize) == 0x00002C, "Member 'FNTextFormat::OutlineSize' has a wrong offset!");
static_assert(offsetof(FNTextFormat, ShadowColor) == 0x000030, "Member 'FNTextFormat::ShadowColor' has a wrong offset!");
static_assert(offsetof(FNTextFormat, ShadowOffset) == 0x000034, "Member 'FNTextFormat::ShadowOffset' has a wrong offset!");

// ScriptStruct FairyGUI.NVariant
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FNVariant final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNVariant) == 0x000008, "Wrong alignment on FNVariant");
static_assert(sizeof(FNVariant) == 0x000018, "Wrong size on FNVariant");

// ScriptStruct FairyGUI.TweenerHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTweenerHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTweenerHandle) == 0x000008, "Wrong alignment on FTweenerHandle");
static_assert(sizeof(FTweenerHandle) == 0x000008, "Wrong size on FTweenerHandle");

// ScriptStruct FairyGUI.UIConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FUIConfig final
{
public:
	class FString                                 DefaultFont;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonSound;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ButtonSoundVolumeScale;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultScrollStep;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultScrollDecelerationRate;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultScrollTouchEffect;                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultScrollBounceEffect;                         // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScrollBarDisplayType                         DefaultScrollBarDisplay;                           // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VerticalScrollBar;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HorizontalScrollBar;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchDragSensitivity;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClickDragSensitivity;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchScrollSensitivity;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultComboBoxVisibleItemCount;                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GlobalModalWaiting;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ModalLayerColor;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TooltipsWin;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BringWindowToFrontOnClick;                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WindowModalWaiting;                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PopupMenu;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PopupMenuSeperator;                                // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIConfig) == 0x000008, "Wrong alignment on FUIConfig");
static_assert(sizeof(FUIConfig) == 0x0000C0, "Wrong size on FUIConfig");
static_assert(offsetof(FUIConfig, DefaultFont) == 0x000000, "Member 'FUIConfig::DefaultFont' has a wrong offset!");
static_assert(offsetof(FUIConfig, ButtonSound) == 0x000010, "Member 'FUIConfig::ButtonSound' has a wrong offset!");
static_assert(offsetof(FUIConfig, ButtonSoundVolumeScale) == 0x000020, "Member 'FUIConfig::ButtonSoundVolumeScale' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultScrollStep) == 0x000024, "Member 'FUIConfig::DefaultScrollStep' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultScrollDecelerationRate) == 0x000028, "Member 'FUIConfig::DefaultScrollDecelerationRate' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultScrollTouchEffect) == 0x00002C, "Member 'FUIConfig::DefaultScrollTouchEffect' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultScrollBounceEffect) == 0x00002D, "Member 'FUIConfig::DefaultScrollBounceEffect' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultScrollBarDisplay) == 0x00002E, "Member 'FUIConfig::DefaultScrollBarDisplay' has a wrong offset!");
static_assert(offsetof(FUIConfig, VerticalScrollBar) == 0x000030, "Member 'FUIConfig::VerticalScrollBar' has a wrong offset!");
static_assert(offsetof(FUIConfig, HorizontalScrollBar) == 0x000040, "Member 'FUIConfig::HorizontalScrollBar' has a wrong offset!");
static_assert(offsetof(FUIConfig, TouchDragSensitivity) == 0x000050, "Member 'FUIConfig::TouchDragSensitivity' has a wrong offset!");
static_assert(offsetof(FUIConfig, ClickDragSensitivity) == 0x000054, "Member 'FUIConfig::ClickDragSensitivity' has a wrong offset!");
static_assert(offsetof(FUIConfig, TouchScrollSensitivity) == 0x000058, "Member 'FUIConfig::TouchScrollSensitivity' has a wrong offset!");
static_assert(offsetof(FUIConfig, DefaultComboBoxVisibleItemCount) == 0x00005C, "Member 'FUIConfig::DefaultComboBoxVisibleItemCount' has a wrong offset!");
static_assert(offsetof(FUIConfig, GlobalModalWaiting) == 0x000060, "Member 'FUIConfig::GlobalModalWaiting' has a wrong offset!");
static_assert(offsetof(FUIConfig, ModalLayerColor) == 0x000070, "Member 'FUIConfig::ModalLayerColor' has a wrong offset!");
static_assert(offsetof(FUIConfig, TooltipsWin) == 0x000078, "Member 'FUIConfig::TooltipsWin' has a wrong offset!");
static_assert(offsetof(FUIConfig, BringWindowToFrontOnClick) == 0x000088, "Member 'FUIConfig::BringWindowToFrontOnClick' has a wrong offset!");
static_assert(offsetof(FUIConfig, WindowModalWaiting) == 0x000090, "Member 'FUIConfig::WindowModalWaiting' has a wrong offset!");
static_assert(offsetof(FUIConfig, PopupMenu) == 0x0000A0, "Member 'FUIConfig::PopupMenu' has a wrong offset!");
static_assert(offsetof(FUIConfig, PopupMenuSeperator) == 0x0000B0, "Member 'FUIConfig::PopupMenuSeperator' has a wrong offset!");

}

