#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LLHSDK

#include "Basic.hpp"


namespace SDK
{

// Enum LLHSDK.EDistributionChannel
// NumValues: 0x0005
enum class EDistributionChannel : uint8
{
	Official                                 = 0,
	DouYinAssociatedOperation                = 1,
	ThirdPartyChannel                        = 2,
	DouYinBiPass                             = 3,
	EDistributionChannel_MAX                 = 4,
};

// Enum LLHSDK.ELLHForumSDKOrientationMode
// NumValues: 0x0004
enum class ELLHForumSDKOrientationMode : uint8
{
	Portrait                                 = 0,
	Landscape                                = 1,
	Rotatable                                = 2,
	ELLHForumSDKOrientationMode_MAX          = 3,
};

// Enum LLHSDK.ELLHSDKNetworkType
// NumValues: 0x0009
enum class ELLHSDKNetworkType : uint8
{
	Unknown                                  = 0,
	NotConnected                             = 1,
	Type_WiFi                                = 2,
	Type_Unknown_Cell                        = 3,
	Type_2G                                  = 4,
	Type_3G                                  = 5,
	Type_4G                                  = 6,
	Type_5G                                  = 7,
	ELLHSDKNetworkType_MAX                   = 8,
};

// Enum LLHSDK.ELLHSDKLoginType
// NumValues: 0x001B
enum class ELLHSDKLoginType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_QUICK_LOGIN                         = 1,
	TYPE_LILITH_LOGIN                        = 2,
	TYPE_MOBILE_LOGIN                        = 2,
	TYPE_FACEBOOK_LOGIN                      = 3,
	TYPE_GAME_CENTER_LOGIN                   = 4,
	TYPE_GOOGLE_PLUS_OR_GAMES_LOGIN          = 5,
	TYPE_WECHAT_LOGIN                        = 6,
	TYPE_QQ_LOGIN                            = 7,
	TYPE_AUTO_LOGIN                          = 8,
	TYPE_VK_LOGIN                            = 9,
	TYPE_GOOGLE_LOGIN                        = 10,
	TYPE_LINE_LOGIN                          = 11,
	TYPE_TWITTER_LOGIN                       = 12,
	TYPE_APPLE_LOGIN                         = 13,
	TYPE_WEIBO_LOGIN                         = 14,
	TYPE_PGS_LOGIN                           = 15,
	TYPE_TIKTOK_LOGIN                        = 16,
	TYPE_STEAM_LOGIN                         = 17,
	TYPE_NINTENDO_LOGIN                      = 18,
	TYPE_EPIC_LOGIN                          = 19,
	TYPE_WEGAME_LOGIN                        = 20,
	TYPE_OPPO_LOGIN                          = 21,
	TYPE_HONOR_LOGIN                         = 22,
	TYPE_XIAOMI_LOGIN                        = 23,
	TYPE_VIVO_LOGIN                          = 24,
	TYPE_MAX                                 = 25,
};

// Enum LLHSDK.ELLHSDKSocialPlatform
// NumValues: 0x0006
enum class ELLHSDKSocialPlatform : uint8
{
	None                                     = 0,
	QQ                                       = 1,
	WeChat                                   = 2,
	Weibo                                    = 3,
	DouYin                                   = 4,
	ELLHSDKSocialPlatform_MAX                = 5,
};

// Enum LLHSDK.ELLHSDKAccountVerificationType
// NumValues: 0x0004
enum class ELLHSDKAccountVerificationType : uint8
{
	None                                     = 0,
	Phone                                    = 1,
	Email                                    = 2,
	ELLHSDKAccountVerificationType_MAX       = 3,
};

// Enum LLHSDK.ELLHSDKScreenOrientation
// NumValues: 0x0009
enum class ELLHSDKScreenOrientation : uint8
{
	Portrait                                 = 0,
	ReversePortrait                          = 1,
	SensorPortrait                           = 2,
	Landscape                                = 3,
	ReverseLandscape                         = 4,
	SensorLandscape                          = 5,
	Sensor                                   = 6,
	FullSensor                               = 7,
	ELLHSDKScreenOrientation_MAX             = 8,
};

// Enum LLHSDK.ELLHSDKThirdPartyShareType
// NumValues: 0x0009
enum class ELLHSDKThirdPartyShareType : uint8
{
	None                                     = 0,
	OnlyText                                 = 1,
	OnlyLocalImage                           = 2,
	OnlyLocalVideo                           = 3,
	LocalImageAndText                        = 4,
	LocalVideoAndText                        = 5,
	WebVideoAndText                          = 6,
	UrlLinkAndText                           = 7,
	ELLHSDKThirdPartyShareType_MAX           = 8,
};

// Enum LLHSDK.ELLHSDKThirdPartyShareScene
// NumValues: 0x000F
enum class ELLHSDKThirdPartyShareScene : uint8
{
	None                                     = 0,
	QQ_Friends                               = 1,
	QQ_Zone                                  = 2,
	QQ_XSJ                                   = 3,
	WeChat_Friends                           = 4,
	WeChat_Moments                           = 5,
	WeChat_Status                            = 6,
	WeChat_Favorites                         = 7,
	WeChat_Channels                          = 8,
	Weibo_Friends                            = 9,
	Weibo_Publish                            = 10,
	Weibo_SuperTopics                        = 11,
	DouYin_Friends                           = 12,
	DouYin_Publish                           = 13,
	ELLHSDKThirdPartyShareScene_MAX          = 14,
};

// Enum LLHSDK.ELLHSDKPayType
// NumValues: 0x000F
enum class ELLHSDKPayType : uint8
{
	None                                     = 0,
	Apple                                    = 1,
	Google                                   = 2,
	Ali                                      = 3,
	Wechat                                   = 4,
	Union                                    = 5,
	PlayPhone                                = 6,
	MyCard                                   = 7,
	Payssion                                 = 8,
	HuaweiAbroad                             = 9,
	Paypal                                   = 10,
	Voucher                                  = 11,
	Samsung                                  = 12,
	Switch                                   = 13,
	ELLHSDKPayType_MAX                       = 14,
};

// Enum LLHSDK.ELLHSDKPayGenericSkuItemType
// NumValues: 0x0003
enum class ELLHSDKPayGenericSkuItemType : uint8
{
	Normal                                   = 0,
	Subscription                             = 1,
	ELLHSDKPayGenericSkuItemType_MAX         = 2,
};

// Enum LLHSDK.ELLHSDKReportCurrencyType
// NumValues: 0x0004
enum class ELLHSDKReportCurrencyType : uint8
{
	USA_Dollar                               = 0,
	China_Yuan                               = 1,
	Taiwan_Dollar                            = 2,
	ELLHSDKReportCurrencyType_MAX            = 3,
};

// Enum LLHSDK.ELLHSDKCustomerServiceRateAction
// NumValues: 0x0005
enum class ELLHSDKCustomerServiceRateAction : uint8
{
	Success                                  = 0,
	FeedBack                                 = 1,
	Close                                    = 2,
	Fail                                     = 3,
	ELLHSDKCustomerServiceRateAction_MAX     = 4,
};

// Enum LLHSDK.ELLHSDKSupportedLanguage
// NumValues: 0x0015
enum class ELLHSDKSupportedLanguage : uint8
{
	DefaultLanguage                          = 0,
	Arabic                                   = 1,
	English                                  = 2,
	French                                   = 3,
	German                                   = 4,
	Indonesian                               = 5,
	Italian                                  = 6,
	Japanese                                 = 7,
	Korean                                   = 8,
	Malay                                    = 9,
	Polish                                   = 10,
	Portuguese                               = 11,
	Russian                                  = 12,
	Spanish                                  = 13,
	Thai                                     = 14,
	Turkish                                  = 15,
	Vietnamese                               = 16,
	Hindi                                    = 17,
	SimplifiedChinese                        = 18,
	TraditionalChinese                       = 19,
	ELLHSDKSupportedLanguage_MAX             = 20,
};

// Enum LLHSDK.ELLHSDKThirdPartyChannelType
// NumValues: 0x0022
enum class ELLHSDKThirdPartyChannelType : uint8
{
	TYPE_MI                                  = 0,
	TYPE_360                                 = 1,
	TYPE_37WAN                               = 2,
	TYPE_ANZHI                               = 3,
	TYPE_AYX                                 = 4,
	TYPE_BAIDU                               = 5,
	TYPE_DANGLE                              = 6,
	TYPE_HUAWEI                              = 7,
	TYPE_UC                                  = 8,
	TYPE_OPPO                                = 9,
	TYPE_OPPO_INDIA                          = 10,
	TYPE_VIVO                                = 11,
	TYPE_MEIZU                               = 12,
	TYPE_WANDOUJIA                           = 13,
	TYPE_MUZHIWAN                            = 14,
	TYPE_4399                                = 15,
	TYPE_JINLI                               = 16,
	TYPE_LENOVO                              = 17,
	TYPE_COOLPAD                             = 18,
	TYPE_DOUYU                               = 19,
	TYPE_SAMSUNG                             = 20,
	TYPE_SAMSUNG1                            = 21,
	TYPE_LESHI                               = 22,
	TYPE_YINGYONGBAO                         = 23,
	TYPE_YINGYONGBAO1                        = 24,
	TYPE_NUBIA                               = 25,
	TYPE_IQIYI                               = 26,
	TYPE_GUOPAN                              = 27,
	TYPE_KUAISHOU                            = 28,
	TYPE_BILIBILI                            = 29,
	TYPE_HUAWEI1                             = 30,
	TYPE_GAEA                                = 31,
	TYPE_HUAWEIABROAD                        = 32,
	TYPE_MAX                                 = 33,
};

// Enum LLHSDK.ELLHSDKThirdPartyShareErrCode
// NumValues: 0x0013
enum class ELLHSDKThirdPartyShareErrCode : uint8
{
	Success                                  = 0,
	ShareSceneNotSupport                     = 1,
	ShareTypeNotSupport                      = 2,
	ParamsNumError                           = 3,
	ShareDataInvalid                         = 4,
	ParamsInvalid                            = 5,
	AndroidEnvInvalid                        = 6,
	AndroidWeChatShareSceneNotSupport        = 7,
	SocialPlatformNotInstall                 = 8,
	IOSSdkParamsInvalid                      = 9,
	IOSSdkExternalError                      = 10,
	IOSSdkNotSupport                         = 11,
	IOSSdkNotRegister                        = 12,
	IOSSdkUnknown                            = 14,
	AndroidSdkNotSupport                     = 15,
	AndroidSdkUnknown                        = 16,
	NoPhotoLibraryPermission                 = 17,
	IOSSavePhotoLibraryFailed                = 18,
	ELLHSDKThirdPartyShareErrCode_MAX        = 19,
};

// Enum LLHSDK.ELLHSDKWeChatShareScene
// NumValues: 0x0006
enum class ELLHSDKWeChatShareScene : uint8
{
	None                                     = 0,
	Friends                                  = 1,
	Moments                                  = 2,
	Favorites                                = 3,
	AssignContactPerson                      = 4,
	ELLHSDKWeChatShareScene_MAX              = 5,
};

// Enum LLHSDK.ELLHSDKOpenAlbumErrorCode
// NumValues: 0x0004
enum class ELLHSDKOpenAlbumErrorCode : uint8
{
	None                                     = 0,
	Cancel                                   = 1,
	NoPermission                             = 2,
	ELLHSDKOpenAlbumErrorCode_MAX            = 3,
};

// Enum LLHSDK.EReleaseType
// NumValues: 0x0004
enum class EReleaseType : uint8
{
	GrayRelease                              = 0,
	Release                                  = 1,
	EarlyRelease                             = 2,
	EReleaseType_MAX                         = 3,
};

// Enum LLHSDK.EDistributionRegion
// NumValues: 0x0003
enum class EDistributionRegion : uint8
{
	International                            = 0,
	Domestic                                 = 1,
	EDistributionRegion_MAX                  = 2,
};

// Enum LLHSDK.ELLHSDKLoginUIStyle
// NumValues: 0x0006
enum class ELLHSDKLoginUIStyle : uint8
{
	NormalStyle                              = 0,
	SoulHunterStyle                          = 1,
	GameCenterStyle                          = 2,
	DomesticStyle                            = 3,
	GameCenterDomesticStyle                  = 4,
	ELLHSDKLoginUIStyle_MAX                  = 5,
};

// Enum LLHSDK.ELLHSDKGravity
// NumValues: 0x000A
enum class ELLHSDKGravity : uint8
{
	NO_GRAVITY                               = 0,
	LeftTop                                  = 1,
	LeftCenter                               = 2,
	LeftBottom                               = 3,
	MidTop                                   = 4,
	MidBottom                                = 5,
	RightTop                                 = 6,
	RightCenter                              = 7,
	RightBottom                              = 8,
	ELLHSDKGravity_MAX                       = 9,
};

// ScriptStruct LLHSDK.LLHSDKLoginUser
// 0x0048 (0x0048 - 0x0000)
struct FLLHSDKLoginUser final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppUid;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppToken;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLHSDKLoginType                              LoginType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGuest;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSafe;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitDeviceCount;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKLoginUser) == 0x000008, "Wrong alignment on FLLHSDKLoginUser");
static_assert(sizeof(FLLHSDKLoginUser) == 0x000048, "Wrong size on FLLHSDKLoginUser");
static_assert(offsetof(FLLHSDKLoginUser, bValid) == 0x000000, "Member 'FLLHSDKLoginUser::bValid' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, AppUid) == 0x000008, "Member 'FLLHSDKLoginUser::AppUid' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, AppToken) == 0x000018, "Member 'FLLHSDKLoginUser::AppToken' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, LoginType) == 0x000028, "Member 'FLLHSDKLoginUser::LoginType' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, Name) == 0x000030, "Member 'FLLHSDKLoginUser::Name' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, bIsGuest) == 0x000040, "Member 'FLLHSDKLoginUser::bIsGuest' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, bIsSafe) == 0x000041, "Member 'FLLHSDKLoginUser::bIsSafe' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUser, LimitDeviceCount) == 0x000044, "Member 'FLLHSDKLoginUser::LimitDeviceCount' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGoogleSkuItemDetail
// 0x0070 (0x0070 - 0x0000)
struct FLLHSDKGoogleSkuItemDetail final
{
public:
	ELLHSDKPayGenericSkuItemType                  ItemType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Price;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceAmountMicros;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SdkConvertSymbol;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGoogleSkuItemDetail) == 0x000008, "Wrong alignment on FLLHSDKGoogleSkuItemDetail");
static_assert(sizeof(FLLHSDKGoogleSkuItemDetail) == 0x000070, "Wrong size on FLLHSDKGoogleSkuItemDetail");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, ItemType) == 0x000000, "Member 'FLLHSDKGoogleSkuItemDetail::ItemType' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, Title) == 0x000008, "Member 'FLLHSDKGoogleSkuItemDetail::Title' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, Desc) == 0x000018, "Member 'FLLHSDKGoogleSkuItemDetail::Desc' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, Price) == 0x000028, "Member 'FLLHSDKGoogleSkuItemDetail::Price' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, Sku) == 0x000038, "Member 'FLLHSDKGoogleSkuItemDetail::Sku' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, Currency) == 0x000048, "Member 'FLLHSDKGoogleSkuItemDetail::Currency' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, PriceAmountMicros) == 0x000058, "Member 'FLLHSDKGoogleSkuItemDetail::PriceAmountMicros' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuItemDetail, SdkConvertSymbol) == 0x000060, "Member 'FLLHSDKGoogleSkuItemDetail::SdkConvertSymbol' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGenericSkuItemsDetailList
// 0x0010 (0x0010 - 0x0000)
struct FLLHSDKGenericSkuItemsDetailList final
{
public:
	TArray<struct FLLHSDKGoogleSkuItemDetail>     Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGenericSkuItemsDetailList) == 0x000008, "Wrong alignment on FLLHSDKGenericSkuItemsDetailList");
static_assert(sizeof(FLLHSDKGenericSkuItemsDetailList) == 0x000010, "Wrong size on FLLHSDKGenericSkuItemsDetailList");
static_assert(offsetof(FLLHSDKGenericSkuItemsDetailList, Items) == 0x000000, "Member 'FLLHSDKGenericSkuItemsDetailList::Items' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGoogleSubCombineItem
// 0x0070 (0x0070 - 0x0000)
struct FLLHSDKGoogleSubCombineItem final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductID;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CombineItemName1;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CombineItemName2;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Price;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceAmountMicros;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SdkConvertSymbol;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGoogleSubCombineItem) == 0x000008, "Wrong alignment on FLLHSDKGoogleSubCombineItem");
static_assert(sizeof(FLLHSDKGoogleSubCombineItem) == 0x000070, "Wrong size on FLLHSDKGoogleSubCombineItem");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, Index) == 0x000000, "Member 'FLLHSDKGoogleSubCombineItem::Index' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, ProductID) == 0x000008, "Member 'FLLHSDKGoogleSubCombineItem::ProductID' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, CombineItemName1) == 0x000018, "Member 'FLLHSDKGoogleSubCombineItem::CombineItemName1' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, CombineItemName2) == 0x000028, "Member 'FLLHSDKGoogleSubCombineItem::CombineItemName2' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, Price) == 0x000038, "Member 'FLLHSDKGoogleSubCombineItem::Price' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, Currency) == 0x000048, "Member 'FLLHSDKGoogleSubCombineItem::Currency' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, PriceAmountMicros) == 0x000058, "Member 'FLLHSDKGoogleSubCombineItem::PriceAmountMicros' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSubCombineItem, SdkConvertSymbol) == 0x000060, "Member 'FLLHSDKGoogleSubCombineItem::SdkConvertSymbol' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKLoginUserInfoMap
// 0x0050 (0x0050 - 0x0000)
struct FLLHSDKLoginUserInfoMap final
{
public:
	TMap<class FString, class FString>            Info;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKLoginUserInfoMap) == 0x000008, "Wrong alignment on FLLHSDKLoginUserInfoMap");
static_assert(sizeof(FLLHSDKLoginUserInfoMap) == 0x000050, "Wrong size on FLLHSDKLoginUserInfoMap");
static_assert(offsetof(FLLHSDKLoginUserInfoMap, Info) == 0x000000, "Member 'FLLHSDKLoginUserInfoMap::Info' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKLoginUserInfo
// 0x0148 (0x0148 - 0x0000)
struct FLLHSDKLoginUserInfo final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Phone;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserRegion;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestPoint;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDomesticHasBindAnyOne;                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDomesticHasBindPhone;                             // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewReg;                                         // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIdentified;                                     // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbusePrevented;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ELLHSDKLoginType>                        BoundLoginTypes;                                   // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<ELLHSDKLoginType, struct FLLHSDKLoginUserInfoMap> BoundInfoMap;                             // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLLHSDKLoginUserInfoMap                UserExtra;                                         // 0x00F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKLoginUserInfo) == 0x000008, "Wrong alignment on FLLHSDKLoginUserInfo");
static_assert(sizeof(FLLHSDKLoginUserInfo) == 0x000148, "Wrong size on FLLHSDKLoginUserInfo");
static_assert(offsetof(FLLHSDKLoginUserInfo, bValid) == 0x000000, "Member 'FLLHSDKLoginUserInfo::bValid' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, Phone) == 0x000008, "Member 'FLLHSDKLoginUserInfo::Phone' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, Email) == 0x000018, "Member 'FLLHSDKLoginUserInfo::Email' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, UserRegion) == 0x000028, "Member 'FLLHSDKLoginUserInfo::UserRegion' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, IP) == 0x000038, "Member 'FLLHSDKLoginUserInfo::IP' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, RestPoint) == 0x000048, "Member 'FLLHSDKLoginUserInfo::RestPoint' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, bDomesticHasBindAnyOne) == 0x00004C, "Member 'FLLHSDKLoginUserInfo::bDomesticHasBindAnyOne' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, bDomesticHasBindPhone) == 0x00004D, "Member 'FLLHSDKLoginUserInfo::bDomesticHasBindPhone' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, bIsNewReg) == 0x00004E, "Member 'FLLHSDKLoginUserInfo::bIsNewReg' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, bIsIdentified) == 0x00004F, "Member 'FLLHSDKLoginUserInfo::bIsIdentified' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, bIsAbusePrevented) == 0x000050, "Member 'FLLHSDKLoginUserInfo::bIsAbusePrevented' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, BoundLoginTypes) == 0x000058, "Member 'FLLHSDKLoginUserInfo::BoundLoginTypes' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, BoundInfoMap) == 0x0000A8, "Member 'FLLHSDKLoginUserInfo::BoundInfoMap' has a wrong offset!");
static_assert(offsetof(FLLHSDKLoginUserInfo, UserExtra) == 0x0000F8, "Member 'FLLHSDKLoginUserInfo::UserExtra' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKCustomerServiceExtra
// 0x0060 (0x0060 - 0x0000)
struct FLLHSDKCustomerServiceExtra final
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomParams;                                      // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKCustomerServiceExtra) == 0x000008, "Wrong alignment on FLLHSDKCustomerServiceExtra");
static_assert(sizeof(FLLHSDKCustomerServiceExtra) == 0x000060, "Wrong size on FLLHSDKCustomerServiceExtra");
static_assert(offsetof(FLLHSDKCustomerServiceExtra, Tags) == 0x000000, "Member 'FLLHSDKCustomerServiceExtra::Tags' has a wrong offset!");
static_assert(offsetof(FLLHSDKCustomerServiceExtra, CustomParams) == 0x000010, "Member 'FLLHSDKCustomerServiceExtra::CustomParams' has a wrong offset!");

// ScriptStruct LLHSDK.SDKSocialUserInfo
// 0x0038 (0x0038 - 0x0000)
struct FSDKSocialUserInfo final
{
public:
	class FString                                 Avatar;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BindType;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDKSocialUserInfo) == 0x000008, "Wrong alignment on FSDKSocialUserInfo");
static_assert(sizeof(FSDKSocialUserInfo) == 0x000038, "Wrong size on FSDKSocialUserInfo");
static_assert(offsetof(FSDKSocialUserInfo, Avatar) == 0x000000, "Member 'FSDKSocialUserInfo::Avatar' has a wrong offset!");
static_assert(offsetof(FSDKSocialUserInfo, Name) == 0x000010, "Member 'FSDKSocialUserInfo::Name' has a wrong offset!");
static_assert(offsetof(FSDKSocialUserInfo, Email) == 0x000020, "Member 'FSDKSocialUserInfo::Email' has a wrong offset!");
static_assert(offsetof(FSDKSocialUserInfo, BindType) == 0x000030, "Member 'FSDKSocialUserInfo::BindType' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKLocaleInfo
// 0x0020 (0x0020 - 0x0000)
struct FLLHSDKLocaleInfo final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKLocaleInfo) == 0x000008, "Wrong alignment on FLLHSDKLocaleInfo");
static_assert(sizeof(FLLHSDKLocaleInfo) == 0x000020, "Wrong size on FLLHSDKLocaleInfo");
static_assert(offsetof(FLLHSDKLocaleInfo, Language) == 0x000000, "Member 'FLLHSDKLocaleInfo::Language' has a wrong offset!");
static_assert(offsetof(FLLHSDKLocaleInfo, Region) == 0x000010, "Member 'FLLHSDKLocaleInfo::Region' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGoogleSkuSubGood
// 0x0038 (0x0038 - 0x0000)
struct FLLHSDKGoogleSkuSubGood final
{
public:
	class FString                                 OfferToken;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombineSize;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLLHSDKGoogleSubCombineItem>    CombineItems;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OfferTags;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGoogleSkuSubGood) == 0x000008, "Wrong alignment on FLLHSDKGoogleSkuSubGood");
static_assert(sizeof(FLLHSDKGoogleSkuSubGood) == 0x000038, "Wrong size on FLLHSDKGoogleSkuSubGood");
static_assert(offsetof(FLLHSDKGoogleSkuSubGood, OfferToken) == 0x000000, "Member 'FLLHSDKGoogleSkuSubGood::OfferToken' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubGood, CombineSize) == 0x000010, "Member 'FLLHSDKGoogleSkuSubGood::CombineSize' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubGood, CombineItems) == 0x000018, "Member 'FLLHSDKGoogleSkuSubGood::CombineItems' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubGood, OfferTags) == 0x000028, "Member 'FLLHSDKGoogleSkuSubGood::OfferTags' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGoogleSkuSubItemDetail
// 0x0050 (0x0050 - 0x0000)
struct FLLHSDKGoogleSkuSubItemDetail final
{
public:
	ELLHSDKPayGenericSkuItemType                  ItemType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubGoodsSize;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLLHSDKGoogleSkuSubGood>        SubGoods;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGoogleSkuSubItemDetail) == 0x000008, "Wrong alignment on FLLHSDKGoogleSkuSubItemDetail");
static_assert(sizeof(FLLHSDKGoogleSkuSubItemDetail) == 0x000050, "Wrong size on FLLHSDKGoogleSkuSubItemDetail");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, ItemType) == 0x000000, "Member 'FLLHSDKGoogleSkuSubItemDetail::ItemType' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, Title) == 0x000008, "Member 'FLLHSDKGoogleSkuSubItemDetail::Title' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, Desc) == 0x000018, "Member 'FLLHSDKGoogleSkuSubItemDetail::Desc' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, Sku) == 0x000028, "Member 'FLLHSDKGoogleSkuSubItemDetail::Sku' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, SubGoodsSize) == 0x000038, "Member 'FLLHSDKGoogleSkuSubItemDetail::SubGoodsSize' has a wrong offset!");
static_assert(offsetof(FLLHSDKGoogleSkuSubItemDetail, SubGoods) == 0x000040, "Member 'FLLHSDKGoogleSkuSubItemDetail::SubGoods' has a wrong offset!");

// ScriptStruct LLHSDK.LLHSDKGenericSkuSubItemsDetailList
// 0x0010 (0x0010 - 0x0000)
struct FLLHSDKGenericSkuSubItemsDetailList final
{
public:
	TArray<struct FLLHSDKGoogleSkuSubItemDetail>  Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLLHSDKGenericSkuSubItemsDetailList) == 0x000008, "Wrong alignment on FLLHSDKGenericSkuSubItemsDetailList");
static_assert(sizeof(FLLHSDKGenericSkuSubItemsDetailList) == 0x000010, "Wrong size on FLLHSDKGenericSkuSubItemsDetailList");
static_assert(offsetof(FLLHSDKGenericSkuSubItemsDetailList, Items) == 0x000000, "Member 'FLLHSDKGenericSkuSubItemsDetailList::Items' has a wrong offset!");

}

