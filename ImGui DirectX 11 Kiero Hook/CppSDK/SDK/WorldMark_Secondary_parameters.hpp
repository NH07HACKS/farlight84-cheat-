#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldMark_Secondary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Solarland_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WorldMark_Secondary.WorldMark_Secondary_C.OnMarkStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_Secondary_C_OnMarkStateChanged final
{
public:
	ECenterToTargetMarkState                      NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_OnMarkStateChanged) == 0x000001, "Wrong alignment on WorldMark_Secondary_C_OnMarkStateChanged");
static_assert(sizeof(WorldMark_Secondary_C_OnMarkStateChanged) == 0x000001, "Wrong size on WorldMark_Secondary_C_OnMarkStateChanged");
static_assert(offsetof(WorldMark_Secondary_C_OnMarkStateChanged, NewState) == 0x000000, "Member 'WorldMark_Secondary_C_OnMarkStateChanged::NewState' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.FlushDistText
// 0x0018 (0x0018 - 0x0000)
struct WorldMark_Secondary_C_FlushDistText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WorldMark_Secondary_C_FlushDistText) == 0x000008, "Wrong alignment on WorldMark_Secondary_C_FlushDistText");
static_assert(sizeof(WorldMark_Secondary_C_FlushDistText) == 0x000018, "Wrong size on WorldMark_Secondary_C_FlushDistText");
static_assert(offsetof(WorldMark_Secondary_C_FlushDistText, InText) == 0x000000, "Member 'WorldMark_Secondary_C_FlushDistText::InText' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.OnIsInCenterRangeStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_Secondary_C_OnIsInCenterRangeStateChanged final
{
public:
	bool                                          IsInCenterRange;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_Secondary_C_OnIsInCenterRangeStateChanged) == 0x000001, "Wrong alignment on WorldMark_Secondary_C_OnIsInCenterRangeStateChanged");
static_assert(sizeof(WorldMark_Secondary_C_OnIsInCenterRangeStateChanged) == 0x000001, "Wrong size on WorldMark_Secondary_C_OnIsInCenterRangeStateChanged");
static_assert(offsetof(WorldMark_Secondary_C_OnIsInCenterRangeStateChanged, IsInCenterRange) == 0x000000, "Member 'WorldMark_Secondary_C_OnIsInCenterRangeStateChanged::IsInCenterRange' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.SetProgressVisibility
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_Secondary_C_SetProgressVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_Secondary_C_SetProgressVisibility) == 0x000001, "Wrong alignment on WorldMark_Secondary_C_SetProgressVisibility");
static_assert(sizeof(WorldMark_Secondary_C_SetProgressVisibility) == 0x000001, "Wrong size on WorldMark_Secondary_C_SetProgressVisibility");
static_assert(offsetof(WorldMark_Secondary_C_SetProgressVisibility, bVisible) == 0x000000, "Member 'WorldMark_Secondary_C_SetProgressVisibility::bVisible' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct WorldMark_Secondary_C_SetProgress final
{
public:
	float                                         ProgressValue;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_SetProgress) == 0x000004, "Wrong alignment on WorldMark_Secondary_C_SetProgress");
static_assert(sizeof(WorldMark_Secondary_C_SetProgress) == 0x000004, "Wrong size on WorldMark_Secondary_C_SetProgress");
static_assert(offsetof(WorldMark_Secondary_C_SetProgress, ProgressValue) == 0x000000, "Member 'WorldMark_Secondary_C_SetProgress::ProgressValue' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.ExecuteUbergraph_WorldMark_Secondary
// 0x00A0 (0x00A0 - 0x0000)
struct WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECenterToTargetMarkState                      Temp_byte_Variable_6;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0018(0x0018)()
	struct FLinearColor                           K2Node_CustomEvent_InColorAndOpacity;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsOutOfScreen;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_InResource;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECenterToTargetMarkState                      K2Node_Event_NewState;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InText;                               // 0x0068(0x0018)(ConstParm)
	bool                                          K2Node_Event_IsInCenterRange;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECenterToTargetMarkState                      Temp_byte_Variable_10;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetIconColorInCenterRangeState_ReturnValue; // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bVisible;                             // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ProgressValue;                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary) == 0x000008, "Wrong alignment on WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary");
static_assert(sizeof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary) == 0x0000A0, "Wrong size on WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, EntryPoint) == 0x000000, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::EntryPoint' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable) == 0x000004, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable_1) == 0x000005, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable_2) == 0x000006, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable_3) == 0x000007, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable) == 0x000008, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_1) == 0x000009, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable_4) == 0x00000A, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_2) == 0x00000B, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_3) == 0x00000C, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_bool_Variable_5) == 0x00000D, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_4) == 0x00000E, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_5) == 0x00000F, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_6) == 0x000010, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_7) == 0x000011, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_8) == 0x000012, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_9) == 0x000013, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Select_Default) == 0x000014, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_IsDesignTime) == 0x000015, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_CustomEvent_InText) == 0x000018, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_CustomEvent_InColorAndOpacity) == 0x000030, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_CustomEvent_InColorAndOpacity' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_IsOutOfScreen) == 0x000040, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_IsOutOfScreen' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_InResource) == 0x000048, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_InResource' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_NewState) == 0x000060, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_InText) == 0x000068, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_InText' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_IsInCenterRange) == 0x000080, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_IsInCenterRange' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, Temp_byte_Variable_10) == 0x000081, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Select_Default_1) == 0x000082, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, CallFunc_GetIconColorInCenterRangeState_ReturnValue) == 0x000084, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::CallFunc_GetIconColorInCenterRangeState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Select_Default_2) == 0x000094, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Select_Default_3) == 0x000095, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_bVisible) == 0x000096, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_bVisible' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Event_ProgressValue) == 0x000098, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Event_ProgressValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary, K2Node_Select_Default_4) == 0x00009C, "Member 'WorldMark_Secondary_C_ExecuteUbergraph_WorldMark_Secondary::K2Node_Select_Default_4' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_Secondary_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_Secondary_C_PreConstruct) == 0x000001, "Wrong alignment on WorldMark_Secondary_C_PreConstruct");
static_assert(sizeof(WorldMark_Secondary_C_PreConstruct) == 0x000001, "Wrong size on WorldMark_Secondary_C_PreConstruct");
static_assert(offsetof(WorldMark_Secondary_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WorldMark_Secondary_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.SetDistText
// 0x0018 (0x0018 - 0x0000)
struct WorldMark_Secondary_C_SetDistText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WorldMark_Secondary_C_SetDistText) == 0x000008, "Wrong alignment on WorldMark_Secondary_C_SetDistText");
static_assert(sizeof(WorldMark_Secondary_C_SetDistText) == 0x000018, "Wrong size on WorldMark_Secondary_C_SetDistText");
static_assert(offsetof(WorldMark_Secondary_C_SetDistText, InText) == 0x000000, "Member 'WorldMark_Secondary_C_SetDistText::InText' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.SetProgressColor
// 0x0010 (0x0010 - 0x0000)
struct WorldMark_Secondary_C_SetProgressColor final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_SetProgressColor) == 0x000004, "Wrong alignment on WorldMark_Secondary_C_SetProgressColor");
static_assert(sizeof(WorldMark_Secondary_C_SetProgressColor) == 0x000010, "Wrong size on WorldMark_Secondary_C_SetProgressColor");
static_assert(offsetof(WorldMark_Secondary_C_SetProgressColor, InColorAndOpacity) == 0x000000, "Member 'WorldMark_Secondary_C_SetProgressColor::InColorAndOpacity' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.OnOutOfScreenStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WorldMark_Secondary_C_OnOutOfScreenStateChanged final
{
public:
	bool                                          IsOutOfScreen;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WorldMark_Secondary_C_OnOutOfScreenStateChanged) == 0x000001, "Wrong alignment on WorldMark_Secondary_C_OnOutOfScreenStateChanged");
static_assert(sizeof(WorldMark_Secondary_C_OnOutOfScreenStateChanged) == 0x000001, "Wrong size on WorldMark_Secondary_C_OnOutOfScreenStateChanged");
static_assert(offsetof(WorldMark_Secondary_C_OnOutOfScreenStateChanged, IsOutOfScreen) == 0x000000, "Member 'WorldMark_Secondary_C_OnOutOfScreenStateChanged::IsOutOfScreen' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.SetMarkIcon
// 0x0008 (0x0008 - 0x0000)
struct WorldMark_Secondary_C_SetMarkIcon final
{
public:
	class UObject*                                InResource;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_SetMarkIcon) == 0x000008, "Wrong alignment on WorldMark_Secondary_C_SetMarkIcon");
static_assert(sizeof(WorldMark_Secondary_C_SetMarkIcon) == 0x000008, "Wrong size on WorldMark_Secondary_C_SetMarkIcon");
static_assert(offsetof(WorldMark_Secondary_C_SetMarkIcon, InResource) == 0x000000, "Member 'WorldMark_Secondary_C_SetMarkIcon::InResource' has a wrong offset!");

// Function WorldMark_Secondary.WorldMark_Secondary_C.GetSoftMarkIcon
// 0x0058 (0x0058 - 0x0000)
struct WorldMark_Secondary_C_GetSoftMarkIcon final
{
public:
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetBrushResource_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0030(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(WorldMark_Secondary_C_GetSoftMarkIcon) == 0x000008, "Wrong alignment on WorldMark_Secondary_C_GetSoftMarkIcon");
static_assert(sizeof(WorldMark_Secondary_C_GetSoftMarkIcon) == 0x000058, "Wrong size on WorldMark_Secondary_C_GetSoftMarkIcon");
static_assert(offsetof(WorldMark_Secondary_C_GetSoftMarkIcon, ReturnValue) == 0x000000, "Member 'WorldMark_Secondary_C_GetSoftMarkIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_GetSoftMarkIcon, CallFunc_GetBrushResource_ReturnValue) == 0x000028, "Member 'WorldMark_Secondary_C_GetSoftMarkIcon::CallFunc_GetBrushResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(WorldMark_Secondary_C_GetSoftMarkIcon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000030, "Member 'WorldMark_Secondary_C_GetSoftMarkIcon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");

}

