#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Component_PlayerName

#include "Basic.hpp"

#include "E_Type_PlayerName_Vip_Color_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.ExecuteUbergraph_UI_Component_PlayerName
// 0x00D8 (0x00D8 - 0x0000)
struct UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfStyle;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0068)(HasGetValueTypeHash)
	class FString                                 K2Node_Event_NickName;                             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_VipType_2;                            // 0x0080(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCheat_2;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bKilled_1;                            // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Content;                              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Event_InColor;                              // 0x00A0(0x0028)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_VipType_1;                            // 0x00C9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCheat_1;                             // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bKilled;                              // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bDeath;                               // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_VipType;                              // 0x00CE(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_2;              // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCheat;                               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName");
static_assert(sizeof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName) == 0x0000D8, "Wrong size on UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, EntryPoint) == 0x000000, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bSelfStyle) == 0x000004, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bSelfStyle' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_IsDesignTime) == 0x000005, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_NickName) == 0x000070, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_NickName' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_VipType_2) == 0x000080, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_VipType_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bCheat_2) == 0x000081, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bCheat_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bKilled_1) == 0x000082, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bKilled_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_Content) == 0x000088, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_Content' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, CallFunc_GetValidValue_ReturnValue) == 0x000098, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_InColor) == 0x0000A0, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_InColor' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C8, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_VipType_1) == 0x0000C9, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_VipType_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bCheat_1) == 0x0000CA, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bCheat_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bKilled) == 0x0000CB, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bKilled' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, CallFunc_GetValidValue_ReturnValue_1) == 0x0000CC, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bDeath) == 0x0000CD, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bDeath' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_VipType) == 0x0000CE, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_VipType' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, CallFunc_GetValidValue_ReturnValue_2) == 0x0000CF, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::CallFunc_GetValidValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName, K2Node_Event_bCheat) == 0x0000D0, "Member 'UI_Component_PlayerName_C_ExecuteUbergraph_UI_Component_PlayerName::K2Node_Event_bCheat' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetIsSpecialSelf
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetIsSpecialSelf final
{
public:
	bool                                          bSelfStyle;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetIsSpecialSelf) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetIsSpecialSelf");
static_assert(sizeof(UI_Component_PlayerName_C_SetIsSpecialSelf) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetIsSpecialSelf");
static_assert(offsetof(UI_Component_PlayerName_C_SetIsSpecialSelf, bSelfStyle) == 0x000000, "Member 'UI_Component_PlayerName_C_SetIsSpecialSelf::bSelfStyle' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetCheater
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetCheater final
{
public:
	bool                                          bCheat;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetCheater) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetCheater");
static_assert(sizeof(UI_Component_PlayerName_C_SetCheater) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetCheater");
static_assert(offsetof(UI_Component_PlayerName_C_SetCheater, bCheat) == 0x000000, "Member 'UI_Component_PlayerName_C_SetCheater::bCheat' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetVip
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetVip final
{
public:
	uint8                                         VipType;                                           // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerName_C_SetVip) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetVip");
static_assert(sizeof(UI_Component_PlayerName_C_SetVip) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetVip");
static_assert(offsetof(UI_Component_PlayerName_C_SetVip, VipType) == 0x000000, "Member 'UI_Component_PlayerName_C_SetVip::VipType' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetDeath
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetDeath final
{
public:
	bool                                          bDeath;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetDeath) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetDeath");
static_assert(sizeof(UI_Component_PlayerName_C_SetDeath) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetDeath");
static_assert(offsetof(UI_Component_PlayerName_C_SetDeath, bDeath) == 0x000000, "Member 'UI_Component_PlayerName_C_SetDeath::bDeath' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetStyle
// 0x0003 (0x0003 - 0x0000)
struct UI_Component_PlayerName_C_SetStyle final
{
public:
	uint8                                         VipType;                                           // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheat;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bKilled;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetStyle) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetStyle");
static_assert(sizeof(UI_Component_PlayerName_C_SetStyle) == 0x000003, "Wrong size on UI_Component_PlayerName_C_SetStyle");
static_assert(offsetof(UI_Component_PlayerName_C_SetStyle, VipType) == 0x000000, "Member 'UI_Component_PlayerName_C_SetStyle::VipType' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetStyle, bCheat) == 0x000001, "Member 'UI_Component_PlayerName_C_SetStyle::bCheat' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetStyle, bKilled) == 0x000002, "Member 'UI_Component_PlayerName_C_SetStyle::bKilled' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetTextColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct UI_Component_PlayerName_C_SetTextColorAndOpacity final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(UI_Component_PlayerName_C_SetTextColorAndOpacity) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_SetTextColorAndOpacity");
static_assert(sizeof(UI_Component_PlayerName_C_SetTextColorAndOpacity) == 0x000028, "Wrong size on UI_Component_PlayerName_C_SetTextColorAndOpacity");
static_assert(offsetof(UI_Component_PlayerName_C_SetTextColorAndOpacity, InColor) == 0x000000, "Member 'UI_Component_PlayerName_C_SetTextColorAndOpacity::InColor' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetText
// 0x0010 (0x0010 - 0x0000)
struct UI_Component_PlayerName_C_SetText final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerName_C_SetText) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_SetText");
static_assert(sizeof(UI_Component_PlayerName_C_SetText) == 0x000010, "Wrong size on UI_Component_PlayerName_C_SetText");
static_assert(offsetof(UI_Component_PlayerName_C_SetText, Content) == 0x000000, "Member 'UI_Component_PlayerName_C_SetText::Content' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.UpdatePlayerNameAndStyle
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_PlayerName_C_UpdatePlayerNameAndStyle final
{
public:
	class FString                                 NickName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         VipType;                                           // 0x0010(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheat;                                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bKilled;                                           // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_UpdatePlayerNameAndStyle");
static_assert(sizeof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle) == 0x000018, "Wrong size on UI_Component_PlayerName_C_UpdatePlayerNameAndStyle");
static_assert(offsetof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle, NickName) == 0x000000, "Member 'UI_Component_PlayerName_C_UpdatePlayerNameAndStyle::NickName' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle, VipType) == 0x000010, "Member 'UI_Component_PlayerName_C_UpdatePlayerNameAndStyle::VipType' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle, bCheat) == 0x000011, "Member 'UI_Component_PlayerName_C_UpdatePlayerNameAndStyle::bCheat' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_UpdatePlayerNameAndStyle, bKilled) == 0x000012, "Member 'UI_Component_PlayerName_C_UpdatePlayerNameAndStyle::bKilled' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_PreConstruct");
static_assert(sizeof(UI_Component_PlayerName_C_PreConstruct) == 0x000001, "Wrong size on UI_Component_PlayerName_C_PreConstruct");
static_assert(offsetof(UI_Component_PlayerName_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Component_PlayerName_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetNameStyle
// 0x000C (0x000C - 0x0000)
struct UI_Component_PlayerName_C_SetNameStyle final
{
public:
	bool                                          bCheater;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_PlayerName_Vip_Color                   Vip_State_0;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKilled;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetNameStyle) == 0x000004, "Wrong alignment on UI_Component_PlayerName_C_SetNameStyle");
static_assert(sizeof(UI_Component_PlayerName_C_SetNameStyle) == 0x00000C, "Wrong size on UI_Component_PlayerName_C_SetNameStyle");
static_assert(offsetof(UI_Component_PlayerName_C_SetNameStyle, bCheater) == 0x000000, "Member 'UI_Component_PlayerName_C_SetNameStyle::bCheater' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetNameStyle, Vip_State_0) == 0x000001, "Member 'UI_Component_PlayerName_C_SetNameStyle::Vip_State_0' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetNameStyle, bKilled) == 0x000002, "Member 'UI_Component_PlayerName_C_SetNameStyle::bKilled' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetNameStyle, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'UI_Component_PlayerName_C_SetNameStyle::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetNameStyle, CallFunc_Greater_ByteByte_ReturnValue) == 0x000008, "Member 'UI_Component_PlayerName_C_SetNameStyle::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetDefaultStyle
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetDefaultStyle final
{
public:
	bool                                          bSpecialSelf_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetDefaultStyle) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetDefaultStyle");
static_assert(sizeof(UI_Component_PlayerName_C_SetDefaultStyle) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetDefaultStyle");
static_assert(offsetof(UI_Component_PlayerName_C_SetDefaultStyle, bSpecialSelf_0) == 0x000000, "Member 'UI_Component_PlayerName_C_SetDefaultStyle::bSpecialSelf_0' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetPlayerName
// 0x0028 (0x0028 - 0x0000)
struct UI_Component_PlayerName_C_SetPlayerName final
{
public:
	class FString                                 NickName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0018)()
};
static_assert(alignof(UI_Component_PlayerName_C_SetPlayerName) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_SetPlayerName");
static_assert(sizeof(UI_Component_PlayerName_C_SetPlayerName) == 0x000028, "Wrong size on UI_Component_PlayerName_C_SetPlayerName");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerName, NickName) == 0x000000, "Member 'UI_Component_PlayerName_C_SetPlayerName::NickName' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerName, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'UI_Component_PlayerName_C_SetPlayerName::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetPlayerNameAndStyle
// 0x0018 (0x0018 - 0x0000)
struct UI_Component_PlayerName_C_SetPlayerNameAndStyle final
{
public:
	class FString                                 NickName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bCheat;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_Type_PlayerName_Vip_Color                   VIP_Type;                                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKilled;                                           // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetPlayerNameAndStyle) == 0x000008, "Wrong alignment on UI_Component_PlayerName_C_SetPlayerNameAndStyle");
static_assert(sizeof(UI_Component_PlayerName_C_SetPlayerNameAndStyle) == 0x000018, "Wrong size on UI_Component_PlayerName_C_SetPlayerNameAndStyle");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerNameAndStyle, NickName) == 0x000000, "Member 'UI_Component_PlayerName_C_SetPlayerNameAndStyle::NickName' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerNameAndStyle, bCheat) == 0x000010, "Member 'UI_Component_PlayerName_C_SetPlayerNameAndStyle::bCheat' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerNameAndStyle, VIP_Type) == 0x000011, "Member 'UI_Component_PlayerName_C_SetPlayerNameAndStyle::VIP_Type' has a wrong offset!");
static_assert(offsetof(UI_Component_PlayerName_C_SetPlayerNameAndStyle, bKilled) == 0x000012, "Member 'UI_Component_PlayerName_C_SetPlayerNameAndStyle::bKilled' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetVipStyle
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetVipStyle final
{
public:
	E_Type_PlayerName_Vip_Color                   VIP_Type;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Component_PlayerName_C_SetVipStyle) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetVipStyle");
static_assert(sizeof(UI_Component_PlayerName_C_SetVipStyle) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetVipStyle");
static_assert(offsetof(UI_Component_PlayerName_C_SetVipStyle, VIP_Type) == 0x000000, "Member 'UI_Component_PlayerName_C_SetVipStyle::VIP_Type' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetIsCheater
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetIsCheater final
{
public:
	bool                                          bCheater;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetIsCheater) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetIsCheater");
static_assert(sizeof(UI_Component_PlayerName_C_SetIsCheater) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetIsCheater");
static_assert(offsetof(UI_Component_PlayerName_C_SetIsCheater, bCheater) == 0x000000, "Member 'UI_Component_PlayerName_C_SetIsCheater::bCheater' has a wrong offset!");

// Function UI_Component_PlayerName.UI_Component_PlayerName_C.SetIsKilled
// 0x0001 (0x0001 - 0x0000)
struct UI_Component_PlayerName_C_SetIsKilled final
{
public:
	bool                                          IsKilled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_Component_PlayerName_C_SetIsKilled) == 0x000001, "Wrong alignment on UI_Component_PlayerName_C_SetIsKilled");
static_assert(sizeof(UI_Component_PlayerName_C_SetIsKilled) == 0x000001, "Wrong size on UI_Component_PlayerName_C_SetIsKilled");
static_assert(offsetof(UI_Component_PlayerName_C_SetIsKilled, IsKilled) == 0x000000, "Member 'UI_Component_PlayerName_C_SetIsKilled::IsKilled' has a wrong offset!");

}

