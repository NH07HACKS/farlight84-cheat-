#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Notice

#include "Basic.hpp"

#include "UI_Notice_classes.hpp"
#include "UI_Notice_parameters.hpp"


namespace SDK
{

// Function UI_Notice.UI_Notice_C.ExecuteUbergraph_UI_Notice
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Notice_C::ExecuteUbergraph_UI_Notice(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "ExecuteUbergraph_UI_Notice");

	Params::UI_Notice_C_ExecuteUbergraph_UI_Notice Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice.UI_Notice_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_Notice_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "PreConstruct");

	Params::UI_Notice_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice.UI_Notice_C.ShowNext
// (BlueprintCallable, BlueprintEvent)

void UUI_Notice_C::ShowNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "ShowNext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Notice.UI_Notice_C.触发提示
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_Notice&                 提示信息                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)

void UUI_Notice_C::触发提示(const struct FS_Notice& 提示信息)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "触发提示");

	Params::UI_Notice_C_触发提示 Parms{};

	Parms.提示信息 = std::move(提示信息);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice.UI_Notice_C.新增
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_Notice&                 S_Notice                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UUI_Notice_C::新增(const struct FS_Notice& S_Notice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "新增");

	Params::UI_Notice_C_新增 Parms{};

	Parms.S_Notice = std::move(S_Notice);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice.UI_Notice_C.移除
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_Notice_C::移除()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "移除");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Notice.UI_Notice_C.设置
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_Notice&                 S_Notice                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UUI_Notice_C::设置(const struct FS_Notice& S_Notice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "设置");

	Params::UI_Notice_C_设置 Parms{};

	Parms.S_Notice = std::move(S_Notice);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Notice.UI_Notice_C.SetStyle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_Notice&                 S_Notice                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UUI_Notice_C::SetStyle(const struct FS_Notice& S_Notice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Notice_C", "SetStyle");

	Params::UI_Notice_C_SetStyle Parms{};

	Parms.S_Notice = std::move(S_Notice);

	UObject::ProcessEvent(Func, &Parms);
}

}

