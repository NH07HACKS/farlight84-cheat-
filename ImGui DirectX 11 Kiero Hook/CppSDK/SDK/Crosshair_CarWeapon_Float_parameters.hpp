#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_CarWeapon_Float

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.ExecuteUbergraph_Crosshair_CarWeapon_Float
// 0x0058 (0x0058 - 0x0000)
struct Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbCharging;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InChargeMode;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InChargeProgress;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InChargeBurstCount;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnter;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UWidgetAnimation*                 K2Node_Event_Animation;                            // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InbLockEnemy;                         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float) == 0x000008, "Wrong alignment on Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float) == 0x000058, "Wrong size on Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, EntryPoint) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::EntryPoint' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_InbCharging) == 0x000010, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_InbCharging' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_InChargeMode) == 0x000014, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_InChargeMode' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_InChargeProgress) == 0x000018, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_InChargeProgress' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_InChargeBurstCount) == 0x00001C, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_InChargeBurstCount' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_bEnter) == 0x000020, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_bEnter' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_Animation) == 0x000030, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_Animation' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_PlayAnimation_ReturnValue_2) == 0x000040, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_PlayAnimation_ReturnValue_3) == 0x000048, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, K2Node_Event_InbLockEnemy) == 0x000050, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::K2Node_Event_InbLockEnemy' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000051, "Member 'Crosshair_CarWeapon_Float_C_ExecuteUbergraph_Crosshair_CarWeapon_Float::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.OnUpdateAimState
// 0x0001 (0x0001 - 0x0000)
struct Crosshair_CarWeapon_Float_C_OnUpdateAimState final
{
public:
	bool                                          InbLockEnemy;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_OnUpdateAimState) == 0x000001, "Wrong alignment on Crosshair_CarWeapon_Float_C_OnUpdateAimState");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_OnUpdateAimState) == 0x000001, "Wrong size on Crosshair_CarWeapon_Float_C_OnUpdateAimState");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnUpdateAimState, InbLockEnemy) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_OnUpdateAimState::InbLockEnemy' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.OnAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct Crosshair_CarWeapon_Float_C_OnAnimationFinished final
{
public:
	const class UWidgetAnimation*                 Animation;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_OnAnimationFinished) == 0x000008, "Wrong alignment on Crosshair_CarWeapon_Float_C_OnAnimationFinished");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_OnAnimationFinished) == 0x000008, "Wrong size on Crosshair_CarWeapon_Float_C_OnAnimationFinished");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnAnimationFinished, Animation) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_OnAnimationFinished::Animation' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.OnOverloadStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Crosshair_CarWeapon_Float_C_OnOverloadStateChanged final
{
public:
	bool                                          bEnter;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_OnOverloadStateChanged) == 0x000001, "Wrong alignment on Crosshair_CarWeapon_Float_C_OnOverloadStateChanged");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_OnOverloadStateChanged) == 0x000001, "Wrong size on Crosshair_CarWeapon_Float_C_OnOverloadStateChanged");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnOverloadStateChanged, bEnter) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_OnOverloadStateChanged::bEnter' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.OnUpdateChargeProgress
// 0x0010 (0x0010 - 0x0000)
struct Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress final
{
public:
	bool                                          InbCharging;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InChargeMode;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InChargeProgress;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InChargeBurstCount;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress) == 0x000004, "Wrong alignment on Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress) == 0x000010, "Wrong size on Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress, InbCharging) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress::InbCharging' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress, InChargeMode) == 0x000004, "Member 'Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress::InChargeMode' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress, InChargeProgress) == 0x000008, "Member 'Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress::InChargeProgress' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress, InChargeBurstCount) == 0x00000C, "Member 'Crosshair_CarWeapon_Float_C_OnUpdateChargeProgress::InChargeBurstCount' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.SetWidgetResources
// 0x0038 (0x0038 - 0x0000)
struct Crosshair_CarWeapon_Float_C_SetWidgetResources final
{
public:
	class UCanvasPanel*                           InSecondReticlePanel;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InReticleDirectionImage;                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InRangedImage;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USizeBox*                               InAssistLockSizeBox;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           InChangeNewAssistLockPawnPanel;                    // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           InEnterLockPawnPanel;                              // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           InCanvas_Dynamic;                                  // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_SetWidgetResources) == 0x000008, "Wrong alignment on Crosshair_CarWeapon_Float_C_SetWidgetResources");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_SetWidgetResources) == 0x000038, "Wrong size on Crosshair_CarWeapon_Float_C_SetWidgetResources");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InSecondReticlePanel) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InSecondReticlePanel' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InReticleDirectionImage) == 0x000008, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InReticleDirectionImage' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InRangedImage) == 0x000010, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InRangedImage' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InAssistLockSizeBox) == 0x000018, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InAssistLockSizeBox' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InChangeNewAssistLockPawnPanel) == 0x000020, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InChangeNewAssistLockPawnPanel' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InEnterLockPawnPanel) == 0x000028, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InEnterLockPawnPanel' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetWidgetResources, InCanvas_Dynamic) == 0x000030, "Member 'Crosshair_CarWeapon_Float_C_SetWidgetResources::InCanvas_Dynamic' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.SetChargeProgress
// 0x0020 (0x0020 - 0x0000)
struct Crosshair_CarWeapon_Float_C_SetChargeProgress final
{
public:
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_SetChargeProgress) == 0x000008, "Wrong alignment on Crosshair_CarWeapon_Float_C_SetChargeProgress");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_SetChargeProgress) == 0x000020, "Wrong size on Crosshair_CarWeapon_Float_C_SetChargeProgress");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetChargeProgress, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_SetChargeProgress::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetChargeProgress, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000001, "Member 'Crosshair_CarWeapon_Float_C_SetChargeProgress::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetChargeProgress, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'Crosshair_CarWeapon_Float_C_SetChargeProgress::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetChargeProgress, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000010, "Member 'Crosshair_CarWeapon_Float_C_SetChargeProgress::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_SetChargeProgress, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'Crosshair_CarWeapon_Float_C_SetChargeProgress::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.Set Charge Panel Size
// 0x0020 (0x0020 - 0x0000)
struct Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size) == 0x000008, "Wrong alignment on Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size) == 0x000020, "Wrong size on Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000014, "Member 'Crosshair_CarWeapon_Float_C_Set_Charge_Panel_Size::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");

// Function Crosshair_CarWeapon_Float.Crosshair_CarWeapon_Float_C.OnOverloadChanged
// 0x0001 (0x0001 - 0x0000)
struct Crosshair_CarWeapon_Float_C_OnOverloadChanged final
{
public:
	bool                                          InOverload;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Crosshair_CarWeapon_Float_C_OnOverloadChanged) == 0x000001, "Wrong alignment on Crosshair_CarWeapon_Float_C_OnOverloadChanged");
static_assert(sizeof(Crosshair_CarWeapon_Float_C_OnOverloadChanged) == 0x000001, "Wrong size on Crosshair_CarWeapon_Float_C_OnOverloadChanged");
static_assert(offsetof(Crosshair_CarWeapon_Float_C_OnOverloadChanged, InOverload) == 0x000000, "Member 'Crosshair_CarWeapon_Float_C_OnOverloadChanged::InOverload' has a wrong offset!");

}

