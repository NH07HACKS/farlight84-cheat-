#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SolarCharacter_FPP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Solarland_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.ADS_Layer
// 0x0040 (0x0040 - 0x0000)
struct ABP_SolarCharacter_FPP_C_ADS_Layer final
{
public:
	struct FPoseLink                              bpp__ADSBasePose__pf;                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__ADS_AngledGrip__pf;                           // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__ADS_VerticalGrip__pf;                         // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__ADS_Layer__pf;                                // 0x0030(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_ADS_Layer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_ADS_Layer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_ADS_Layer) == 0x000040, "Wrong size on ABP_SolarCharacter_FPP_C_ADS_Layer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_ADS_Layer, bpp__ADSBasePose__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_ADS_Layer::bpp__ADSBasePose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_ADS_Layer, bpp__ADS_AngledGrip__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_ADS_Layer::bpp__ADS_AngledGrip__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_ADS_Layer, bpp__ADS_VerticalGrip__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_ADS_Layer::bpp__ADS_VerticalGrip__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_ADS_Layer, bpp__ADS_Layer__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_ADS_Layer::bpp__ADS_Layer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_FPP_C_AnimGraph final
{
public:
	struct FPoseLink                              bpp__AnimGraph__pf;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_AnimGraph");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_AnimGraph) == 0x000010, "Wrong size on ABP_SolarCharacter_FPP_C_AnimGraph");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_AnimGraph, bpp__AnimGraph__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_AnimGraph::bpp__AnimGraph__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.BasePoseLayer
// 0x0050 (0x0050 - 0x0000)
struct ABP_SolarCharacter_FPP_C_BasePoseLayer final
{
public:
	struct FPoseLink                              bpp__OneHand_Pipline_In__pf;                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHand_Pipline_In__pf;                    // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OneHand_Idle__pf;                             // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__BasePose_DoubleHand_Idle__pf;                 // 0x0030(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__BasePoseLayer__pf;                            // 0x0040(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_BasePoseLayer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_BasePoseLayer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_BasePoseLayer) == 0x000050, "Wrong size on ABP_SolarCharacter_FPP_C_BasePoseLayer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BasePoseLayer, bpp__OneHand_Pipline_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_BasePoseLayer::bpp__OneHand_Pipline_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BasePoseLayer, bpp__DoubleHand_Pipline_In__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_BasePoseLayer::bpp__DoubleHand_Pipline_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BasePoseLayer, bpp__OneHand_Idle__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_BasePoseLayer::bpp__OneHand_Idle__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BasePoseLayer, bpp__BasePose_DoubleHand_Idle__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_BasePoseLayer::bpp__BasePose_DoubleHand_Idle__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BasePoseLayer, bpp__BasePoseLayer__pf) == 0x000040, "Member 'ABP_SolarCharacter_FPP_C_BasePoseLayer::bpp__BasePoseLayer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.DoubleHand_BasePose_Layer
// 0x0050 (0x0050 - 0x0000)
struct ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer final
{
public:
	struct FPoseLink                              bpp__DoubleHand_Idle_Active__pf;                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHandBasePose_AngledGrip__pf;            // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHandBasePose_VerticalGrip__pf;          // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHand_Idle_Pose__pf;                     // 0x0030(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHand_BasePose_Layer__pf;                // 0x0040(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer) == 0x000050, "Wrong size on ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer, bpp__DoubleHand_Idle_Active__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer::bpp__DoubleHand_Idle_Active__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer, bpp__DoubleHandBasePose_AngledGrip__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer::bpp__DoubleHandBasePose_AngledGrip__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer, bpp__DoubleHandBasePose_VerticalGrip__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer::bpp__DoubleHandBasePose_VerticalGrip__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer, bpp__DoubleHand_Idle_Pose__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer::bpp__DoubleHand_Idle_Pose__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer, bpp__DoubleHand_BasePose_Layer__pf) == 0x000040, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_BasePose_Layer::bpp__DoubleHand_BasePose_Layer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.DoubleHand_Loco_Layer
// 0x0030 (0x0030 - 0x0000)
struct ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer final
{
public:
	struct FPoseLink                              bpp__DoubleHandPose_In__pf;                        // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHand_Loco_Idle__pf;                     // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__DoubleHand_Loco_Layer__pf;                    // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer) == 0x000030, "Wrong size on ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer, bpp__DoubleHandPose_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer::bpp__DoubleHandPose_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer, bpp__DoubleHand_Loco_Idle__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer::bpp__DoubleHand_Loco_Idle__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer, bpp__DoubleHand_Loco_Layer__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_DoubleHand_Loco_Layer::bpp__DoubleHand_Loco_Layer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Dyning
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Dyning final
{
public:
	struct FPoseLink                              bpp__Dyning__pf;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Dyning) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Dyning");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Dyning) == 0x000010, "Wrong size on ABP_SolarCharacter_FPP_C_Dyning");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Dyning, bpp__Dyning__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Dyning::bpp__Dyning__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.GetCurveValueByWeight
// 0x0014 (0x0014 - 0x0000)
struct ABP_SolarCharacter_FPP_C_GetCurveValueByWeight final
{
public:
	class FName                                   bpp__CurveName__pf;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__WeightCurveName__pf;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_GetCurveValueByWeight) == 0x000004, "Wrong alignment on ABP_SolarCharacter_FPP_C_GetCurveValueByWeight");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_GetCurveValueByWeight) == 0x000014, "Wrong size on ABP_SolarCharacter_FPP_C_GetCurveValueByWeight");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetCurveValueByWeight, bpp__CurveName__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_GetCurveValueByWeight::bpp__CurveName__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetCurveValueByWeight, bpp__WeightCurveName__pf) == 0x000008, "Member 'ABP_SolarCharacter_FPP_C_GetCurveValueByWeight::bpp__WeightCurveName__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetCurveValueByWeight, ReturnValue) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_GetCurveValueByWeight::ReturnValue' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.GetMappedRateAndLerspeed
// 0x001C (0x001C - 0x0000)
struct ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed final
{
public:
	struct FVector2D                              bpp__InRate__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bpp__InLerpSpeed__pf;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Value__pf;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayxRate__pfT;                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__LerpxSpeed__pfT;                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed) == 0x000004, "Wrong alignment on ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed) == 0x00001C, "Wrong size on ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed, bpp__InRate__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed::bpp__InRate__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed, bpp__InLerpSpeed__pf) == 0x000008, "Member 'ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed::bpp__InLerpSpeed__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed, bpp__Value__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed::bpp__Value__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed, bpp__PlayxRate__pfT) == 0x000014, "Member 'ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed::bpp__PlayxRate__pfT' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed, bpp__LerpxSpeed__pfT) == 0x000018, "Member 'ABP_SolarCharacter_FPP_C_GetMappedRateAndLerspeed::bpp__LerpxSpeed__pfT' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Loco_State_Switch
// 0x0050 (0x0050 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Loco_State_Switch final
{
public:
	struct FPoseLink                              bpp__Weapon__pf;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Dyning_In__pf;                                // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__WallRun_In__pf;                               // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__ZipLine_In__pf;                               // 0x0030(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Loco_State_Switch__pf;                        // 0x0040(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Loco_State_Switch) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Loco_State_Switch");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Loco_State_Switch) == 0x000050, "Wrong size on ABP_SolarCharacter_FPP_C_Loco_State_Switch");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Loco_State_Switch, bpp__Weapon__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Loco_State_Switch::bpp__Weapon__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Loco_State_Switch, bpp__Dyning_In__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Loco_State_Switch::bpp__Dyning_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Loco_State_Switch, bpp__WallRun_In__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_Loco_State_Switch::bpp__WallRun_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Loco_State_Switch, bpp__ZipLine_In__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_Loco_State_Switch::bpp__ZipLine_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Loco_State_Switch, bpp__Loco_State_Switch__pf) == 0x000040, "Member 'ABP_SolarCharacter_FPP_C_Loco_State_Switch::bpp__Loco_State_Switch__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.OneHand_BasePose_Layer
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer final
{
public:
	struct FPoseLink                              bpp__OneHand_Idle_In__pf;                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OneHand_BasePose_Layer__pf;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer, bpp__OneHand_Idle_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer::bpp__OneHand_Idle_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer, bpp__OneHand_BasePose_Layer__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_OneHand_BasePose_Layer::bpp__OneHand_BasePose_Layer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.OneHand_Loco_Layer
// 0x0030 (0x0030 - 0x0000)
struct ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer final
{
public:
	struct FPoseLink                              bpp__OneHandLoco_PosePipline__pf;                  // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OneHandLoco_OneHand_Idle__pf;                 // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__OneHand_Loco_Layer__pf;                       // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer) == 0x000030, "Wrong size on ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer, bpp__OneHandLoco_PosePipline__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer::bpp__OneHandLoco_PosePipline__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer, bpp__OneHandLoco_OneHand_Idle__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer::bpp__OneHandLoco_OneHand_Idle__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer, bpp__OneHand_Loco_Layer__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_OneHand_Loco_Layer::bpp__OneHand_Loco_Layer__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_Fullbody_0
// 0x00B8 (0x00B8 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_Fullbody_0 final
{
public:
	struct FPoseLink                              bpp__FullBodySkill_Wea_In_0__pf;                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkillLocoAnimation                    bpp__FullBodySkill_Loco_Anim__pf;                  // 0x0010(0x0098)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_FullBody_0__pf;                         // 0x00A8(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_Fullbody_0) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_Fullbody_0");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_Fullbody_0) == 0x0000B8, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_Fullbody_0");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_Fullbody_0, bpp__FullBodySkill_Wea_In_0__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_Fullbody_0::bpp__FullBodySkill_Wea_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_Fullbody_0, bpp__FullBodySkill_Loco_Anim__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_Fullbody_0::bpp__FullBodySkill_Loco_Anim__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_Fullbody_0, bpp__Skill_FullBody_0__pf) == 0x0000A8, "Member 'ABP_SolarCharacter_FPP_C_Skill_Fullbody_0::bpp__Skill_FullBody_0__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_Fullbody
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_Fullbody final
{
public:
	struct FPoseLink                              bpp__FullBody_Weap_In__pf;                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_Fullbody__pf;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_Fullbody) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_Fullbody");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_Fullbody) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_Fullbody");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_Fullbody, bpp__FullBody_Weap_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_Fullbody::bpp__FullBody_Weap_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_Fullbody, bpp__Skill_Fullbody__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_Fullbody::bpp__Skill_Fullbody__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_LeftHand_0
// 0x00B8 (0x00B8 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_LeftHand_0 final
{
public:
	struct FPoseLink                              bpp__LeftHandSkill_Wea_In_0__pf;                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkillLocoAnimation                    bpp__LeftHandSkill_LocoAnim__pf;                   // 0x0010(0x0098)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_LeftHand_0__pf;                         // 0x00A8(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_LeftHand_0) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_LeftHand_0");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_LeftHand_0) == 0x0000B8, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_LeftHand_0");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_LeftHand_0, bpp__LeftHandSkill_Wea_In_0__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_LeftHand_0::bpp__LeftHandSkill_Wea_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_LeftHand_0, bpp__LeftHandSkill_LocoAnim__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_LeftHand_0::bpp__LeftHandSkill_LocoAnim__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_LeftHand_0, bpp__Skill_LeftHand_0__pf) == 0x0000A8, "Member 'ABP_SolarCharacter_FPP_C_Skill_LeftHand_0::bpp__Skill_LeftHand_0__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_LeftHand
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_LeftHand final
{
public:
	struct FPoseLink                              bpp__LeftSkill_Weap_In__pf;                        // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_LeftHand__pf;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_LeftHand) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_LeftHand");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_LeftHand) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_LeftHand");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_LeftHand, bpp__LeftSkill_Weap_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_LeftHand::bpp__LeftSkill_Weap_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_LeftHand, bpp__Skill_LeftHand__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_LeftHand::bpp__Skill_LeftHand__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_RightHand_0
// 0x00B8 (0x00B8 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_RightHand_0 final
{
public:
	struct FPoseLink                              bpp__RightHand_Wea_In_0__pf;                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkillLocoAnimation                    bpp__RightHandSkill_LocoAnim__pf;                  // 0x0010(0x0098)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_RightHand_0__pf;                        // 0x00A8(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_RightHand_0) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_RightHand_0");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_RightHand_0) == 0x0000B8, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_RightHand_0");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_RightHand_0, bpp__RightHand_Wea_In_0__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_RightHand_0::bpp__RightHand_Wea_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_RightHand_0, bpp__RightHandSkill_LocoAnim__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_RightHand_0::bpp__RightHandSkill_LocoAnim__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_RightHand_0, bpp__Skill_RightHand_0__pf) == 0x0000A8, "Member 'ABP_SolarCharacter_FPP_C_Skill_RightHand_0::bpp__Skill_RightHand_0__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Skill_RightHand
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Skill_RightHand final
{
public:
	struct FPoseLink                              bpp__RightSkill_Weap_In__pf;                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Skill_RightHand__pf;                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Skill_RightHand) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Skill_RightHand");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Skill_RightHand) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_Skill_RightHand");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_RightHand, bpp__RightSkill_Weap_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Skill_RightHand::bpp__RightSkill_Weap_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Skill_RightHand, bpp__Skill_RightHand__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Skill_RightHand::bpp__Skill_RightHand__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.WallRun
// 0x0010 (0x0010 - 0x0000)
struct ABP_SolarCharacter_FPP_C_WallRun final
{
public:
	struct FPoseLink                              bpp__WallRun__pf;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_WallRun) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_WallRun");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_WallRun) == 0x000010, "Wrong size on ABP_SolarCharacter_FPP_C_WallRun");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_WallRun, bpp__WallRun__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_WallRun::bpp__WallRun__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Wea_Skill_Splice_0
// 0x0070 (0x0070 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0 final
{
public:
	struct FPoseLink                              bpp__LeftHandSkill_In_0__pf;                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bInLeftHandSkill__pf;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              bpp__RightHandSkill_In_0__pf;                      // 0x0018(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bInRightHandSkill__pf;                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              bpp__FullbodySkill_In_0__pf;                       // 0x0030(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bInFullBodySkill__pf;                         // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              bpp__Weapon_In_0__pf;                              // 0x0048(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bpp__bIsInADS__pf;                                 // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              bpp__Wea_Skill_Splice_0__pf;                       // 0x0060(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0) == 0x000070, "Wrong size on ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__LeftHandSkill_In_0__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__LeftHandSkill_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__bInLeftHandSkill__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__bInLeftHandSkill__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__RightHandSkill_In_0__pf) == 0x000018, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__RightHandSkill_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__bInRightHandSkill__pf) == 0x000028, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__bInRightHandSkill__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__FullbodySkill_In_0__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__FullbodySkill_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__bInFullBodySkill__pf) == 0x000040, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__bInFullBodySkill__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__Weapon_In_0__pf) == 0x000048, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__Weapon_In_0__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__bIsInADS__pf) == 0x000058, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__bIsInADS__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0, bpp__Wea_Skill_Splice_0__pf) == 0x000060, "Member 'ABP_SolarCharacter_FPP_C_Wea_Skill_Splice_0::bpp__Wea_Skill_Splice_0__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Weap_Skill_Splice
// 0x0050 (0x0050 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Weap_Skill_Splice final
{
public:
	struct FPoseLink                              bpp__LeftSkill_In__pf;                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__RightSkill_In__pf;                            // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__FullBodySkill_In__pf;                         // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Weapon_In__pf;                                // 0x0030(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Weap_Skill_Splice__pf;                        // 0x0040(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Weap_Skill_Splice");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice) == 0x000050, "Wrong size on ABP_SolarCharacter_FPP_C_Weap_Skill_Splice");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice, bpp__LeftSkill_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Weap_Skill_Splice::bpp__LeftSkill_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice, bpp__RightSkill_In__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Weap_Skill_Splice::bpp__RightSkill_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice, bpp__FullBodySkill_In__pf) == 0x000020, "Member 'ABP_SolarCharacter_FPP_C_Weap_Skill_Splice::bpp__FullBodySkill_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice, bpp__Weapon_In__pf) == 0x000030, "Member 'ABP_SolarCharacter_FPP_C_Weap_Skill_Splice::bpp__Weapon_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weap_Skill_Splice, bpp__Weap_Skill_Splice__pf) == 0x000040, "Member 'ABP_SolarCharacter_FPP_C_Weap_Skill_Splice::bpp__Weap_Skill_Splice__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Weapon_Control
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Weapon_Control final
{
public:
	struct FPoseLink                              bpp__Weapon_In__pf;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__Weapon_Control__pf;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Weapon_Control) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Weapon_Control");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Weapon_Control) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_Weapon_Control");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weapon_Control, bpp__Weapon_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Weapon_Control::bpp__Weapon_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Weapon_Control, bpp__Weapon_Control__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Weapon_Control::bpp__Weapon_Control__pf' has a wrong offset!");

// Function ABP_SolarCharacter_FPP.ABP_SolarCharacter_FPP_C.Zipline
// 0x0020 (0x0020 - 0x0000)
struct ABP_SolarCharacter_FPP_C_Zipline final
{
public:
	struct FPoseLink                              bpp__ZipLine_Wea_In__pf;                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              bpp__ZipLine__pf;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ABP_SolarCharacter_FPP_C_Zipline) == 0x000008, "Wrong alignment on ABP_SolarCharacter_FPP_C_Zipline");
static_assert(sizeof(ABP_SolarCharacter_FPP_C_Zipline) == 0x000020, "Wrong size on ABP_SolarCharacter_FPP_C_Zipline");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Zipline, bpp__ZipLine_Wea_In__pf) == 0x000000, "Member 'ABP_SolarCharacter_FPP_C_Zipline::bpp__ZipLine_Wea_In__pf' has a wrong offset!");
static_assert(offsetof(ABP_SolarCharacter_FPP_C_Zipline, bpp__ZipLine__pf) == 0x000010, "Member 'ABP_SolarCharacter_FPP_C_Zipline::bpp__ZipLine__pf' has a wrong offset!");

}

