#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MLAI

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "MLAI_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MLAI.AIServiceManager
// 0x0030 (0x0058 - 0x0028)
class UAIServiceManager : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0038(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Port;                                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIServiceManager">();
	}
	static class UAIServiceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIServiceManager>();
	}
};
static_assert(alignof(UAIServiceManager) == 0x000008, "Wrong alignment on UAIServiceManager");
static_assert(sizeof(UAIServiceManager) == 0x000058, "Wrong size on UAIServiceManager");
static_assert(offsetof(UAIServiceManager, IP) == 0x000038, "Member 'UAIServiceManager::IP' has a wrong offset!");
static_assert(offsetof(UAIServiceManager, Port) == 0x000048, "Member 'UAIServiceManager::Port' has a wrong offset!");

// Class MLAI.AIServiceManagerCCS
// 0x03C8 (0x0420 - 0x0058)
class UAIServiceManagerCCS final : public UAIServiceManager
{
public:
	int32                                         connectionIdGameServer;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, class ASolarBotAIController*>    BotAgentData;                                      // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, class ASolarPlayerController*>   TeammateData;                                      // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x18];                                     // 0x0100(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ATcpSocketConnection*                   TcpClient;                                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x98];                                     // 0x0120(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class ASolarInteractiveDoorBase*> SavedDoors;                                        // 0x01B8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_208[0x10];                                     // 0x0208(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class AActor*>                    SavedZiplines;                                     // 0x0218(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x30];                                     // 0x0268(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class AActor*>                    ObstacleItems;                                     // 0x0298(0x0050)(NativeAccessSpecifierPrivate)
	TMap<int32, struct FSenseActorList>           _PlayerToSenseMap;                                 // 0x02E8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x30];                                     // 0x0338(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class ASolarExpSpringPointSpawner*> ExpSpringMap;                                    // 0x0368(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B8[0x68];                                     // 0x03B8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAfterUpdateDataByDamage(struct FSolarPointDamageEvent* DamageEvent, class ASolarCharacter* DamageSufffer, float ActualDamage, float PlayerDamage, class AController* EventInstigator, class AActor* DamageCauser);
	void OnCharacterDead(class ASolarCharacter* DeathCharacter);
	void OnConnected(int32 ConnectionId);
	void OnDisconnected(int32 ConnectionId);
	void OnMessageReceived(int32 ConnectionId, TArray<uint8>* Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIServiceManagerCCS">();
	}
	static class UAIServiceManagerCCS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIServiceManagerCCS>();
	}
};
static_assert(alignof(UAIServiceManagerCCS) == 0x000008, "Wrong alignment on UAIServiceManagerCCS");
static_assert(sizeof(UAIServiceManagerCCS) == 0x000420, "Wrong size on UAIServiceManagerCCS");
static_assert(offsetof(UAIServiceManagerCCS, connectionIdGameServer) == 0x000058, "Member 'UAIServiceManagerCCS::connectionIdGameServer' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, BotAgentData) == 0x000060, "Member 'UAIServiceManagerCCS::BotAgentData' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, TeammateData) == 0x0000B0, "Member 'UAIServiceManagerCCS::TeammateData' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, TcpClient) == 0x000118, "Member 'UAIServiceManagerCCS::TcpClient' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, SavedDoors) == 0x0001B8, "Member 'UAIServiceManagerCCS::SavedDoors' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, SavedZiplines) == 0x000218, "Member 'UAIServiceManagerCCS::SavedZiplines' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, ObstacleItems) == 0x000298, "Member 'UAIServiceManagerCCS::ObstacleItems' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, _PlayerToSenseMap) == 0x0002E8, "Member 'UAIServiceManagerCCS::_PlayerToSenseMap' has a wrong offset!");
static_assert(offsetof(UAIServiceManagerCCS, ExpSpringMap) == 0x000368, "Member 'UAIServiceManagerCCS::ExpSpringMap' has a wrong offset!");

// Class MLAI.AIServiceManagerNG
// 0x19140 (0x19198 - 0x0058)
class UAIServiceManagerNG final : public UAIServiceManager
{
public:
	uint8                                         Pad_58[0x19140];                                   // 0x0058(0x19140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIServiceManagerNG">();
	}
	static class UAIServiceManagerNG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIServiceManagerNG>();
	}
};
static_assert(alignof(UAIServiceManagerNG) == 0x000008, "Wrong alignment on UAIServiceManagerNG");
static_assert(sizeof(UAIServiceManagerNG) == 0x019198, "Wrong size on UAIServiceManagerNG");

// Class MLAI.MLAISubsystem
// 0x0060 (0x0090 - 0x0030)
class UMLAISubsystem final : public UGameInstanceSubsystem
{
public:
	TMap<EMLAIType, class UAIServiceManager*>     AIServiceManagers;                                 // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupAIService(class UWorld* InWorld);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLAISubsystem">();
	}
	static class UMLAISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLAISubsystem>();
	}
};
static_assert(alignof(UMLAISubsystem) == 0x000008, "Wrong alignment on UMLAISubsystem");
static_assert(sizeof(UMLAISubsystem) == 0x000090, "Wrong size on UMLAISubsystem");
static_assert(offsetof(UMLAISubsystem, AIServiceManagers) == 0x000030, "Member 'UMLAISubsystem::AIServiceManagers' has a wrong offset!");

}

