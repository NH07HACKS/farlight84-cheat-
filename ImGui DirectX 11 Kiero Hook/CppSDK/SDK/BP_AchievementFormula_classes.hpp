#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementFormula

#include "Basic.hpp"

#include "Solarland_structs.hpp"
#include "Solarland_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AchievementFormula.BP_AchievementFormula_C
// 0x0008 (0x02E0 - 0x02D8)
class ABP_AchievementFormula_C final : public AAchievementFormula
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void AchTMinuteKill(int32 AchievementID);
	void AchTUseVehicle(int32 AchievementID);
	void _AchTHPKill(int32 AchievementID);
	void GetSolarPlayerState(class ASolarPlayerState** OutResult);
	void GetAchievement(class USolarAchievementComponent** AchievementComponent);
	void GetPlayerData(class UPlayerStatisticsData** Out);
	void GetSolarGameState(class ASolarGameState** Out);
	void _AchTLimitWin(int32 AchievementID);
	void AchTDyingWin(int32 AchievementID);
	void AchTAssistWin(int32 AchievementID);
	void AchTRescue(int32 AchievementID);
	void AchTSkyKill(int32 AchievementID);
	void AchTOnlyLiveWin(int32 AchievementID);
	void AchTFirstKill(int32 AchievementID);
	void AchTBlindSniper(int32 AchievementID);
	void AchTOpenBoxNum(int32 AchievementID);
	void AchTenemyVehicle(int32 AchievementID);
	void AchTDie(int32 AchievementID);
	void AchTMarsWin(int32 AchievementID);
	void AchTFistKill_(int32 AchievementID);
	void AchTBombingDie(int32 AchievementID);
	void AchTRevengeKill(int32 AchievementID);
	void AchTAirUmbrella(int32 AchievementID);
	void AchTAirTrapeze(int32 AchievementID);
	void AchTAirSpeed(int32 AchievementID);
	void _AchTBubbleKill(int32 AchievementID);
	void AchAdvancedWeapon(int32 AchievementID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AchievementFormula_C">();
	}
	static class ABP_AchievementFormula_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AchievementFormula_C>();
	}
};
static_assert(alignof(ABP_AchievementFormula_C) == 0x000008, "Wrong alignment on ABP_AchievementFormula_C");
static_assert(sizeof(ABP_AchievementFormula_C) == 0x0002E0, "Wrong size on ABP_AchievementFormula_C");
static_assert(offsetof(ABP_AchievementFormula_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_AchievementFormula_C::DefaultSceneRoot' has a wrong offset!");

}

