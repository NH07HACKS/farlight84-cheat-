#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD_Notice_ShrinkCircle_Countdown

#include "Basic.hpp"

#include "Solarland_classes.hpp"
#include "NoticeColor_structs.hpp"
#include "Engine_structs.hpp"
#include "SolarUI_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C
// 0x0088 (0x0718 - 0x0690)
class UUI_HUD_Notice_ShrinkCircle_Countdown_C final : public UUINoticeSafeAreaShrink
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Img_Txt_bg;                                        // 0x0698(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USolarTextBlock*                        Txt_CD;                                            // 0x06A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USolarTextBlock*                        Txt_Round;                                         // 0x06A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	ENoticeColor                                  颜色;                                              // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            RoundLocalId;                                      // 0x06B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentRound;                                      // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountDownRemainTime;                               // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CountDownHandle;                                   // 0x0710(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown(int32 EntryPoint);
	void StartNotice(int32 InRemainTime, int32 InRound);
	void ReceivePlatformLayout(EUSolarWidgetLayoutType InLayoutType);
	void Update();
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void StartCountDown(int32 Time, int32 Round);
	void GetRoundLocalId(int32* NewParam);
	void OnCountDown();
	void OnCountDownEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_HUD_Notice_ShrinkCircle_Countdown_C">();
	}
	static class UUI_HUD_Notice_ShrinkCircle_Countdown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_HUD_Notice_ShrinkCircle_Countdown_C>();
	}
};
static_assert(alignof(UUI_HUD_Notice_ShrinkCircle_Countdown_C) == 0x000008, "Wrong alignment on UUI_HUD_Notice_ShrinkCircle_Countdown_C");
static_assert(sizeof(UUI_HUD_Notice_ShrinkCircle_Countdown_C) == 0x000718, "Wrong size on UUI_HUD_Notice_ShrinkCircle_Countdown_C");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, UberGraphFrame) == 0x000690, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, Img_Txt_bg) == 0x000698, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::Img_Txt_bg' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, Txt_CD) == 0x0006A0, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::Txt_CD' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, Txt_Round) == 0x0006A8, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::Txt_Round' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, 颜色) == 0x0006B0, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::颜色' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, RoundLocalId) == 0x0006B8, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::RoundLocalId' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, CurrentRound) == 0x000708, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::CurrentRound' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, CountDownRemainTime) == 0x00070C, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::CountDownRemainTime' has a wrong offset!");
static_assert(offsetof(UUI_HUD_Notice_ShrinkCircle_Countdown_C, CountDownHandle) == 0x000710, "Member 'UUI_HUD_Notice_ShrinkCircle_Countdown_C::CountDownHandle' has a wrong offset!");

}

