#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AiPal

#include "Basic.hpp"

#include "AiPal_classes.hpp"
#include "AiPal_parameters.hpp"


namespace SDK
{

// Function AiPal.AiPalComponent.BeginDetect
// (Final, Native, Public, BlueprintCallable)

void UAiPalComponent::BeginDetect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "BeginDetect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.Capture
// (Final, Native, Public, BlueprintCallable)

void UAiPalComponent::Capture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "Capture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.EndDetect
// (Final, Native, Public, BlueprintCallable)

void UAiPalComponent::EndDetect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "EndDetect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetBattleID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BattleID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetBattleID(const class FString& BattleID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetBattleID");

	Params::AiPalComponent_SetBattleID Parms{};

	Parms.BattleID = std::move(BattleID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetClientEnv
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ClientEnv                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetClientEnv(const class FString& ClientEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetClientEnv");

	Params::AiPalComponent_SetClientEnv Parms{};

	Parms.ClientEnv = std::move(ClientEnv);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetDetectGap_ms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DetectGap_ms                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetDetectGap_ms(int32 DetectGap_ms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetDetectGap_ms");

	Params::AiPalComponent_SetDetectGap_ms Parms{};

	Parms.DetectGap_ms = DetectGap_ms;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetMaxDetectTimes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DetectGap_ms                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetMaxDetectTimes(int32 DetectGap_ms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetMaxDetectTimes");

	Params::AiPalComponent_SetMaxDetectTimes Parms{};

	Parms.DetectGap_ms = DetectGap_ms;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetPlayerID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlayerID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetPlayerID(const class FString& PlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetPlayerID");

	Params::AiPalComponent_SetPlayerID Parms{};

	Parms.PlayerID = std::move(PlayerID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetServerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsDomestic                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetServerIndex(bool IsDomestic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetServerIndex");

	Params::AiPalComponent_SetServerIndex Parms{};

	Parms.IsDomestic = IsDomestic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AiPal.AiPalComponent.SetThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ThresholdPer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAiPalComponent::SetThreshold(float ThresholdPer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AiPalComponent", "SetThreshold");

	Params::AiPalComponent_SetThreshold Parms{};

	Parms.ThresholdPer = ThresholdPer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

