#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD_Notice_ShrinkCircle_Countdown

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SolarUI_structs.hpp"


namespace SDK::Params
{

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown
// 0x0010 (0x0010 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InRemainTime;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InRound;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUSolarWidgetLayoutType                       K2Node_Event_InLayoutType;                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown) == 0x000004, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown) == 0x000010, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown, EntryPoint) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown, K2Node_Event_InRemainTime) == 0x000004, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown::K2Node_Event_InRemainTime' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown, K2Node_Event_InRound) == 0x000008, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown::K2Node_Event_InRound' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown, K2Node_Event_InLayoutType) == 0x00000D, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ExecuteUbergraph_UI_HUD_Notice_ShrinkCircle_Countdown::K2Node_Event_InLayoutType' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.StartNotice
// 0x0008 (0x0008 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice final
{
public:
	int32                                         InRemainTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InRound;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice) == 0x000004, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice) == 0x000008, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice, InRemainTime) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice::InRemainTime' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice, InRound) == 0x000004, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartNotice::InRound' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.ReceivePlatformLayout
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout final
{
public:
	EUSolarWidgetLayoutType                       InLayoutType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout) == 0x000001, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout) == 0x000001, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout, InLayoutType) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_ReceivePlatformLayout::InLayoutType' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct) == 0x000001, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.StartCountDown
// 0x0058 (0x0058 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Round;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRoundLocalId_NewParam;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetLocalText_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0020(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown) == 0x000008, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown) == 0x000058, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, Time) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::Time' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, Round) == 0x000004, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::Round' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, CallFunc_GetRoundLocalId_NewParam) == 0x000008, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::CallFunc_GetRoundLocalId_NewParam' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, CallFunc_GetLocalText_ReturnValue) == 0x000010, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::CallFunc_GetLocalText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, CallFunc_Conv_IntToText_ReturnValue) == 0x000020, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown, CallFunc_K2_SetTimer_ReturnValue) == 0x000050, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_StartCountDown::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.GetRoundLocalId
// 0x0030 (0x0030 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId final
{
public:
	int32                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASolarSafeArea*                         CallFunc_GetSafeArea_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASolarCircleSafeArea*                   K2Node_DynamicCast_AsSolar_Circle_Safe_Area;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNextSafeAreaRadius_ReturnValue;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId) == 0x000008, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId) == 0x000030, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, NewParam) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::NewParam' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, CallFunc_Map_Find_Value) == 0x000004, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, CallFunc_GetSafeArea_ReturnValue) == 0x000010, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::CallFunc_GetSafeArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, K2Node_DynamicCast_AsSolar_Circle_Safe_Area) == 0x000018, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::K2Node_DynamicCast_AsSolar_Circle_Safe_Area' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, CallFunc_GetNextSafeAreaRadius_ReturnValue) == 0x000024, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::CallFunc_GetNextSafeAreaRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_GetRoundLocalId::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function UI_HUD_Notice_ShrinkCircle_Countdown.UI_HUD_Notice_ShrinkCircle_Countdown_C.OnCountDown
// 0x0020 (0x0020 - 0x0000)
struct UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown final
{
public:
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0000(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown) == 0x000008, "Wrong alignment on UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown");
static_assert(sizeof(UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown) == 0x000020, "Wrong size on UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown, CallFunc_Conv_IntToText_ReturnValue) == 0x000000, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'UI_HUD_Notice_ShrinkCircle_Countdown_C_OnCountDown::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

}

